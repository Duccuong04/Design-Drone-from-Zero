
All_MainDrone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014544  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  080146d8  080146d8  000156d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014dc4  08014dc4  000161e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014dc4  08014dc4  00015dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014dcc  08014dcc  000161e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08014dcc  08014dcc  00015dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08014dd8  08014dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08014de0  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000161e0  2**0
                  CONTENTS
 10 .bss          00000c48  200001e0  200001e0  000161e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000e28  20000e28  000161e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000161e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002035f  00000000  00000000  00016210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045fd  00000000  00000000  0003656f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001850  00000000  00000000  0003ab70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001301  00000000  00000000  0003c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000296ae  00000000  00000000  0003d6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020a05  00000000  00000000  00066d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4d49  00000000  00000000  00087774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016c4bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008220  00000000  00000000  0016c500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  00174720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080146bc 	.word	0x080146bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080146bc 	.word	0x080146bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <read_calliberation_data>:
#define atmPress 101325 //Pa



void read_calliberation_data (void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8001026:	463b      	mov	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
 8001034:	829a      	strh	r2, [r3, #20]
	uint16_t Callib_Start = 0xAA;
 8001036:	23aa      	movs	r3, #170	@ 0xaa
 8001038:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 800103a:	8afa      	ldrh	r2, [r7, #22]
 800103c:	f04f 33ff 	mov.w	r3, #4294967295
 8001040:	9302      	str	r3, [sp, #8]
 8001042:	2316      	movs	r3, #22
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	463b      	mov	r3, r7
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2301      	movs	r3, #1
 800104c:	21ee      	movs	r1, #238	@ 0xee
 800104e:	483c      	ldr	r0, [pc, #240]	@ (8001140 <read_calliberation_data+0x120>)
 8001050:	f008 fc7e 	bl	8009950 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8001054:	783b      	ldrb	r3, [r7, #0]
 8001056:	b21b      	sxth	r3, r3
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21a      	sxth	r2, r3
 800105c:	787b      	ldrb	r3, [r7, #1]
 800105e:	b21b      	sxth	r3, r3
 8001060:	4313      	orrs	r3, r2
 8001062:	b21a      	sxth	r2, r3
 8001064:	4b37      	ldr	r3, [pc, #220]	@ (8001144 <read_calliberation_data+0x124>)
 8001066:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8001068:	78bb      	ldrb	r3, [r7, #2]
 800106a:	b21b      	sxth	r3, r3
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b21a      	sxth	r2, r3
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b21a      	sxth	r2, r3
 8001078:	4b33      	ldr	r3, [pc, #204]	@ (8001148 <read_calliberation_data+0x128>)
 800107a:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 800107c:	793b      	ldrb	r3, [r7, #4]
 800107e:	b21b      	sxth	r3, r3
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b21a      	sxth	r2, r3
 8001084:	797b      	ldrb	r3, [r7, #5]
 8001086:	b21b      	sxth	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	b21a      	sxth	r2, r3
 800108c:	4b2f      	ldr	r3, [pc, #188]	@ (800114c <read_calliberation_data+0x12c>)
 800108e:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	b21b      	sxth	r3, r3
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	b21b      	sxth	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	b21b      	sxth	r3, r3
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001150 <read_calliberation_data+0x130>)
 80010a4:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 80010a6:	7a3b      	ldrb	r3, [r7, #8]
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	7a7b      	ldrb	r3, [r7, #9]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <read_calliberation_data+0x134>)
 80010ba:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 80010bc:	7abb      	ldrb	r3, [r7, #10]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	7afb      	ldrb	r3, [r7, #11]
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	4b22      	ldr	r3, [pc, #136]	@ (8001158 <read_calliberation_data+0x138>)
 80010d0:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 80010d2:	7b3b      	ldrb	r3, [r7, #12]
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	7b7b      	ldrb	r3, [r7, #13]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	4b1e      	ldr	r3, [pc, #120]	@ (800115c <read_calliberation_data+0x13c>)
 80010e4:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 80010e6:	7bbb      	ldrb	r3, [r7, #14]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <read_calliberation_data+0x140>)
 80010f8:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 80010fa:	7c3b      	ldrb	r3, [r7, #16]
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	7c7b      	ldrb	r3, [r7, #17]
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21a      	sxth	r2, r3
 800110a:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <read_calliberation_data+0x144>)
 800110c:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 800110e:	7cbb      	ldrb	r3, [r7, #18]
 8001110:	b21b      	sxth	r3, r3
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b21a      	sxth	r2, r3
 8001116:	7cfb      	ldrb	r3, [r7, #19]
 8001118:	b21b      	sxth	r3, r3
 800111a:	4313      	orrs	r3, r2
 800111c:	b21a      	sxth	r2, r3
 800111e:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <read_calliberation_data+0x148>)
 8001120:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001122:	7d3b      	ldrb	r3, [r7, #20]
 8001124:	b21b      	sxth	r3, r3
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21a      	sxth	r2, r3
 800112a:	7d7b      	ldrb	r3, [r7, #21]
 800112c:	b21b      	sxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b21a      	sxth	r2, r3
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <read_calliberation_data+0x14c>)
 8001134:	801a      	strh	r2, [r3, #0]

}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000500 	.word	0x20000500
 8001144:	200001fc 	.word	0x200001fc
 8001148:	200001fe 	.word	0x200001fe
 800114c:	20000200 	.word	0x20000200
 8001150:	20000202 	.word	0x20000202
 8001154:	20000204 	.word	0x20000204
 8001158:	20000206 	.word	0x20000206
 800115c:	20000208 	.word	0x20000208
 8001160:	2000020a 	.word	0x2000020a
 8001164:	2000020c 	.word	0x2000020c
 8001168:	2000020e 	.word	0x2000020e
 800116c:	20000210 	.word	0x20000210

08001170 <Get_UPress>:
	return Temp/10.0;
}

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af04      	add	r7, sp, #16
 8001176:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	019b      	lsls	r3, r3, #6
 800117e:	b2db      	uxtb	r3, r3
 8001180:	3334      	adds	r3, #52	@ 0x34
 8001182:	b2db      	uxtb	r3, r3
 8001184:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	2100      	movs	r1, #0
 800118c:	460a      	mov	r2, r1
 800118e:	801a      	strh	r2, [r3, #0]
 8001190:	460a      	mov	r2, r1
 8001192:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001194:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2301      	movs	r3, #1
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	f107 030f 	add.w	r3, r7, #15
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	22f4      	movs	r2, #244	@ 0xf4
 80011a8:	21ee      	movs	r1, #238	@ 0xee
 80011aa:	481f      	ldr	r0, [pc, #124]	@ (8001228 <Get_UPress+0xb8>)
 80011ac:	f008 fad6 	bl	800975c <HAL_I2C_Mem_Write>
	switch (oss)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d81a      	bhi.n	80011ec <Get_UPress+0x7c>
 80011b6:	a201      	add	r2, pc, #4	@ (adr r2, 80011bc <Get_UPress+0x4c>)
 80011b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011bc:	080011cd 	.word	0x080011cd
 80011c0:	080011d5 	.word	0x080011d5
 80011c4:	080011dd 	.word	0x080011dd
 80011c8:	080011e5 	.word	0x080011e5
	{
		case (0):
			HAL_Delay (5);
 80011cc:	2005      	movs	r0, #5
 80011ce:	f006 fe87 	bl	8007ee0 <HAL_Delay>
			break;
 80011d2:	e00b      	b.n	80011ec <Get_UPress+0x7c>
		case (1):
			HAL_Delay (8);
 80011d4:	2008      	movs	r0, #8
 80011d6:	f006 fe83 	bl	8007ee0 <HAL_Delay>
			break;
 80011da:	e007      	b.n	80011ec <Get_UPress+0x7c>
		case (2):
			HAL_Delay (14);
 80011dc:	200e      	movs	r0, #14
 80011de:	f006 fe7f 	bl	8007ee0 <HAL_Delay>
			break;
 80011e2:	e003      	b.n	80011ec <Get_UPress+0x7c>
		case (3):
			HAL_Delay (26);
 80011e4:	201a      	movs	r0, #26
 80011e6:	f006 fe7b 	bl	8007ee0 <HAL_Delay>
			break;
 80011ea:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 80011ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	2303      	movs	r3, #3
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2301      	movs	r3, #1
 80011fe:	22f6      	movs	r2, #246	@ 0xf6
 8001200:	21ee      	movs	r1, #238	@ 0xee
 8001202:	4809      	ldr	r0, [pc, #36]	@ (8001228 <Get_UPress+0xb8>)
 8001204:	f008 fba4 	bl	8009950 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8001208:	7b3b      	ldrb	r3, [r7, #12]
 800120a:	041a      	lsls	r2, r3, #16
 800120c:	7b7b      	ldrb	r3, [r7, #13]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	4413      	add	r3, r2
 8001212:	7bba      	ldrb	r2, [r7, #14]
 8001214:	441a      	add	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f1c3 0308 	rsb	r3, r3, #8
 800121c:	fa42 f303 	asr.w	r3, r2, r3
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000500 	.word	0x20000500

0800122c <BMP180_GetPress>:


float BMP180_GetPress (int oss)
{
 800122c:	b5b0      	push	{r4, r5, r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff9b 	bl	8001170 <Get_UPress>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	4ba8      	ldr	r3, [pc, #672]	@ (80014e0 <BMP180_GetPress+0x2b4>)
 8001240:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001242:	4ba8      	ldr	r3, [pc, #672]	@ (80014e4 <BMP180_GetPress+0x2b8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4aa8      	ldr	r2, [pc, #672]	@ (80014e8 <BMP180_GetPress+0x2bc>)
 8001248:	8812      	ldrh	r2, [r2, #0]
 800124a:	1a9b      	subs	r3, r3, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f969 	bl	8000524 <__aeabi_i2d>
 8001252:	4604      	mov	r4, r0
 8001254:	460d      	mov	r5, r1
 8001256:	4ba5      	ldr	r3, [pc, #660]	@ (80014ec <BMP180_GetPress+0x2c0>)
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f962 	bl	8000524 <__aeabi_i2d>
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	4ba2      	ldr	r3, [pc, #648]	@ (80014f0 <BMP180_GetPress+0x2c4>)
 8001266:	f7ff faf1 	bl	800084c <__aeabi_ddiv>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7ff f9c1 	bl	80005f8 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff fc6b 	bl	8000b58 <__aeabi_d2iz>
 8001282:	4603      	mov	r3, r0
 8001284:	4a9b      	ldr	r2, [pc, #620]	@ (80014f4 <BMP180_GetPress+0x2c8>)
 8001286:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001288:	4b9b      	ldr	r3, [pc, #620]	@ (80014f8 <BMP180_GetPress+0x2cc>)
 800128a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f948 	bl	8000524 <__aeabi_i2d>
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	4b98      	ldr	r3, [pc, #608]	@ (80014fc <BMP180_GetPress+0x2d0>)
 800129a:	f7ff f9ad 	bl	80005f8 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4614      	mov	r4, r2
 80012a4:	461d      	mov	r5, r3
 80012a6:	4b96      	ldr	r3, [pc, #600]	@ (8001500 <BMP180_GetPress+0x2d4>)
 80012a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b91      	ldr	r3, [pc, #580]	@ (80014f4 <BMP180_GetPress+0x2c8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f935 	bl	8000524 <__aeabi_i2d>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4620      	mov	r0, r4
 80012c0:	4629      	mov	r1, r5
 80012c2:	f7ff fac3 	bl	800084c <__aeabi_ddiv>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fc43 	bl	8000b58 <__aeabi_d2iz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a8b      	ldr	r2, [pc, #556]	@ (8001504 <BMP180_GetPress+0x2d8>)
 80012d6:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 80012d8:	4b86      	ldr	r3, [pc, #536]	@ (80014f4 <BMP180_GetPress+0x2c8>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b89      	ldr	r3, [pc, #548]	@ (8001504 <BMP180_GetPress+0x2d8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a89      	ldr	r2, [pc, #548]	@ (8001508 <BMP180_GetPress+0x2dc>)
 80012e4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 80012e6:	4b88      	ldr	r3, [pc, #544]	@ (8001508 <BMP180_GetPress+0x2dc>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 80012ee:	4a87      	ldr	r2, [pc, #540]	@ (800150c <BMP180_GetPress+0x2e0>)
 80012f0:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 80012f2:	4b87      	ldr	r3, [pc, #540]	@ (8001510 <BMP180_GetPress+0x2e4>)
 80012f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f913 	bl	8000524 <__aeabi_i2d>
 80012fe:	4604      	mov	r4, r0
 8001300:	460d      	mov	r5, r1
 8001302:	4b82      	ldr	r3, [pc, #520]	@ (800150c <BMP180_GetPress+0x2e0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a81      	ldr	r2, [pc, #516]	@ (800150c <BMP180_GetPress+0x2e0>)
 8001308:	6812      	ldr	r2, [r2, #0]
 800130a:	fb02 f303 	mul.w	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f908 	bl	8000524 <__aeabi_i2d>
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b7e      	ldr	r3, [pc, #504]	@ (8001514 <BMP180_GetPress+0x2e8>)
 800131a:	f7ff fa97 	bl	800084c <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4620      	mov	r0, r4
 8001324:	4629      	mov	r1, r5
 8001326:	f7ff f967 	bl	80005f8 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b71      	ldr	r3, [pc, #452]	@ (80014fc <BMP180_GetPress+0x2d0>)
 8001338:	f7ff fa88 	bl	800084c <__aeabi_ddiv>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fc08 	bl	8000b58 <__aeabi_d2iz>
 8001348:	4603      	mov	r3, r0
 800134a:	4a6a      	ldr	r2, [pc, #424]	@ (80014f4 <BMP180_GetPress+0x2c8>)
 800134c:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 800134e:	4b72      	ldr	r3, [pc, #456]	@ (8001518 <BMP180_GetPress+0x2ec>)
 8001350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001354:	461a      	mov	r2, r3
 8001356:	4b6d      	ldr	r3, [pc, #436]	@ (800150c <BMP180_GetPress+0x2e0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f8e0 	bl	8000524 <__aeabi_i2d>
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	4b64      	ldr	r3, [pc, #400]	@ (80014fc <BMP180_GetPress+0x2d0>)
 800136a:	f7ff fa6f 	bl	800084c <__aeabi_ddiv>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff fbef 	bl	8000b58 <__aeabi_d2iz>
 800137a:	4603      	mov	r3, r0
 800137c:	4a61      	ldr	r2, [pc, #388]	@ (8001504 <BMP180_GetPress+0x2d8>)
 800137e:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 8001380:	4b5c      	ldr	r3, [pc, #368]	@ (80014f4 <BMP180_GetPress+0x2c8>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b5f      	ldr	r3, [pc, #380]	@ (8001504 <BMP180_GetPress+0x2d8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4413      	add	r3, r2
 800138a:	4a64      	ldr	r2, [pc, #400]	@ (800151c <BMP180_GetPress+0x2f0>)
 800138c:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 800138e:	4b64      	ldr	r3, [pc, #400]	@ (8001520 <BMP180_GetPress+0x2f4>)
 8001390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001394:	009a      	lsls	r2, r3, #2
 8001396:	4b61      	ldr	r3, [pc, #388]	@ (800151c <BMP180_GetPress+0x2f0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	441a      	add	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	3302      	adds	r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	da00      	bge.n	80013aa <BMP180_GetPress+0x17e>
 80013a8:	3303      	adds	r3, #3
 80013aa:	109b      	asrs	r3, r3, #2
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001524 <BMP180_GetPress+0x2f8>)
 80013b0:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 80013b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001528 <BMP180_GetPress+0x2fc>)
 80013b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b54      	ldr	r3, [pc, #336]	@ (800150c <BMP180_GetPress+0x2e0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	fb02 f303 	mul.w	r3, r2, r3
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8ae 	bl	8000524 <__aeabi_i2d>
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b57      	ldr	r3, [pc, #348]	@ (800152c <BMP180_GetPress+0x300>)
 80013ce:	f7ff fa3d 	bl	800084c <__aeabi_ddiv>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fbbd 	bl	8000b58 <__aeabi_d2iz>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a44      	ldr	r2, [pc, #272]	@ (80014f4 <BMP180_GetPress+0x2c8>)
 80013e2:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 80013e4:	4b52      	ldr	r3, [pc, #328]	@ (8001530 <BMP180_GetPress+0x304>)
 80013e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f89a 	bl	8000524 <__aeabi_i2d>
 80013f0:	4604      	mov	r4, r0
 80013f2:	460d      	mov	r5, r1
 80013f4:	4b45      	ldr	r3, [pc, #276]	@ (800150c <BMP180_GetPress+0x2e0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a44      	ldr	r2, [pc, #272]	@ (800150c <BMP180_GetPress+0x2e0>)
 80013fa:	6812      	ldr	r2, [r2, #0]
 80013fc:	fb02 f303 	mul.w	r3, r2, r3
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f88f 	bl	8000524 <__aeabi_i2d>
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	4b42      	ldr	r3, [pc, #264]	@ (8001514 <BMP180_GetPress+0x2e8>)
 800140c:	f7ff fa1e 	bl	800084c <__aeabi_ddiv>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4620      	mov	r0, r4
 8001416:	4629      	mov	r1, r5
 8001418:	f7ff f8ee 	bl	80005f8 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b42      	ldr	r3, [pc, #264]	@ (8001534 <BMP180_GetPress+0x308>)
 800142a:	f7ff fa0f 	bl	800084c <__aeabi_ddiv>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fb8f 	bl	8000b58 <__aeabi_d2iz>
 800143a:	4603      	mov	r3, r0
 800143c:	4a31      	ldr	r2, [pc, #196]	@ (8001504 <BMP180_GetPress+0x2d8>)
 800143e:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001440:	4b2c      	ldr	r3, [pc, #176]	@ (80014f4 <BMP180_GetPress+0x2c8>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b2f      	ldr	r3, [pc, #188]	@ (8001504 <BMP180_GetPress+0x2d8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4413      	add	r3, r2
 800144a:	3302      	adds	r3, #2
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f869 	bl	8000524 <__aeabi_i2d>
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4b38      	ldr	r3, [pc, #224]	@ (8001538 <BMP180_GetPress+0x30c>)
 8001458:	f7ff f9f8 	bl	800084c <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fb78 	bl	8000b58 <__aeabi_d2iz>
 8001468:	4603      	mov	r3, r0
 800146a:	4a2c      	ldr	r2, [pc, #176]	@ (800151c <BMP180_GetPress+0x2f0>)
 800146c:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 800146e:	4b33      	ldr	r3, [pc, #204]	@ (800153c <BMP180_GetPress+0x310>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	4b29      	ldr	r3, [pc, #164]	@ (800151c <BMP180_GetPress+0x2f0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800147c:	fb02 f303 	mul.w	r3, r2, r3
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f83f 	bl	8000504 <__aeabi_ui2d>
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <BMP180_GetPress+0x2c4>)
 800148c:	f7ff f9de 	bl	800084c <__aeabi_ddiv>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	f7ff fb86 	bl	8000ba8 <__aeabi_d2uiz>
 800149c:	4603      	mov	r3, r0
 800149e:	4a28      	ldr	r2, [pc, #160]	@ (8001540 <BMP180_GetPress+0x314>)
 80014a0:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 80014a2:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <BMP180_GetPress+0x2b4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <BMP180_GetPress+0x2f8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	fa41 f202 	asr.w	r2, r1, r2
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	4a21      	ldr	r2, [pc, #132]	@ (8001544 <BMP180_GetPress+0x318>)
 80014be:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 80014c0:	4b20      	ldr	r3, [pc, #128]	@ (8001544 <BMP180_GetPress+0x318>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db41      	blt.n	800154c <BMP180_GetPress+0x320>
 80014c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001544 <BMP180_GetPress+0x318>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	005a      	lsls	r2, r3, #1
 80014ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001540 <BMP180_GetPress+0x314>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <BMP180_GetPress+0x31c>)
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	e040      	b.n	8001560 <BMP180_GetPress+0x334>
 80014de:	bf00      	nop
 80014e0:	20000218 	.word	0x20000218
 80014e4:	20000214 	.word	0x20000214
 80014e8:	20000206 	.word	0x20000206
 80014ec:	20000204 	.word	0x20000204
 80014f0:	40e00000 	.word	0x40e00000
 80014f4:	2000021c 	.word	0x2000021c
 80014f8:	2000020e 	.word	0x2000020e
 80014fc:	40a00000 	.word	0x40a00000
 8001500:	20000210 	.word	0x20000210
 8001504:	20000220 	.word	0x20000220
 8001508:	2000022c 	.word	0x2000022c
 800150c:	20000234 	.word	0x20000234
 8001510:	2000020a 	.word	0x2000020a
 8001514:	40b00000 	.word	0x40b00000
 8001518:	200001fe 	.word	0x200001fe
 800151c:	20000224 	.word	0x20000224
 8001520:	200001fc 	.word	0x200001fc
 8001524:	20000228 	.word	0x20000228
 8001528:	20000200 	.word	0x20000200
 800152c:	40c00000 	.word	0x40c00000
 8001530:	20000208 	.word	0x20000208
 8001534:	40f00000 	.word	0x40f00000
 8001538:	40100000 	.word	0x40100000
 800153c:	20000202 	.word	0x20000202
 8001540:	20000230 	.word	0x20000230
 8001544:	20000238 	.word	0x20000238
 8001548:	2000023c 	.word	0x2000023c
	else Press = (B7/B4)*2;
 800154c:	4b46      	ldr	r3, [pc, #280]	@ (8001668 <BMP180_GetPress+0x43c>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b46      	ldr	r3, [pc, #280]	@ (800166c <BMP180_GetPress+0x440>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	fbb2 f3f3 	udiv	r3, r2, r3
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	461a      	mov	r2, r3
 800155c:	4b44      	ldr	r3, [pc, #272]	@ (8001670 <BMP180_GetPress+0x444>)
 800155e:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 8001560:	4b43      	ldr	r3, [pc, #268]	@ (8001670 <BMP180_GetPress+0x444>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe ffdd 	bl	8000524 <__aeabi_i2d>
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	4b41      	ldr	r3, [pc, #260]	@ (8001674 <BMP180_GetPress+0x448>)
 8001570:	f7ff f96c 	bl	800084c <__aeabi_ddiv>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4614      	mov	r4, r2
 800157a:	461d      	mov	r5, r3
 800157c:	4b3c      	ldr	r3, [pc, #240]	@ (8001670 <BMP180_GetPress+0x444>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ffcf 	bl	8000524 <__aeabi_i2d>
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	4b3a      	ldr	r3, [pc, #232]	@ (8001674 <BMP180_GetPress+0x448>)
 800158c:	f7ff f95e 	bl	800084c <__aeabi_ddiv>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4620      	mov	r0, r4
 8001596:	4629      	mov	r1, r5
 8001598:	f7ff f82e 	bl	80005f8 <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f7ff fad8 	bl	8000b58 <__aeabi_d2iz>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4a33      	ldr	r2, [pc, #204]	@ (8001678 <BMP180_GetPress+0x44c>)
 80015ac:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 80015ae:	4b32      	ldr	r3, [pc, #200]	@ (8001678 <BMP180_GetPress+0x44c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f640 32de 	movw	r2, #3038	@ 0xbde
 80015b6:	fb02 f303 	mul.w	r3, r2, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe ffb2 	bl	8000524 <__aeabi_i2d>
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <BMP180_GetPress+0x450>)
 80015c6:	f7ff f941 	bl	800084c <__aeabi_ddiv>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff fac1 	bl	8000b58 <__aeabi_d2iz>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a27      	ldr	r2, [pc, #156]	@ (8001678 <BMP180_GetPress+0x44c>)
 80015da:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 80015dc:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <BMP180_GetPress+0x444>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a27      	ldr	r2, [pc, #156]	@ (8001680 <BMP180_GetPress+0x454>)
 80015e2:	fb02 f303 	mul.w	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe ff9c 	bl	8000524 <__aeabi_i2d>
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	4b22      	ldr	r3, [pc, #136]	@ (800167c <BMP180_GetPress+0x450>)
 80015f2:	f7ff f92b 	bl	800084c <__aeabi_ddiv>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	f7ff faab 	bl	8000b58 <__aeabi_d2iz>
 8001602:	4603      	mov	r3, r0
 8001604:	4a1f      	ldr	r2, [pc, #124]	@ (8001684 <BMP180_GetPress+0x458>)
 8001606:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 8001608:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <BMP180_GetPress+0x444>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ff89 	bl	8000524 <__aeabi_i2d>
 8001612:	4604      	mov	r4, r0
 8001614:	460d      	mov	r5, r1
 8001616:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <BMP180_GetPress+0x44c>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <BMP180_GetPress+0x458>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff7d 	bl	8000524 <__aeabi_i2d>
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <BMP180_GetPress+0x45c>)
 8001630:	f7ff f90c 	bl	800084c <__aeabi_ddiv>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4620      	mov	r0, r4
 800163a:	4629      	mov	r1, r5
 800163c:	f7fe fe26 	bl	800028c <__adddf3>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	f7ff fa86 	bl	8000b58 <__aeabi_d2iz>
 800164c:	4603      	mov	r3, r0
 800164e:	4a08      	ldr	r2, [pc, #32]	@ (8001670 <BMP180_GetPress+0x444>)
 8001650:	6013      	str	r3, [r2, #0]

	return Press;
 8001652:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <BMP180_GetPress+0x444>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800165e:	eeb0 0a67 	vmov.f32	s0, s15
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bdb0      	pop	{r4, r5, r7, pc}
 8001668:	20000238 	.word	0x20000238
 800166c:	20000230 	.word	0x20000230
 8001670:	2000023c 	.word	0x2000023c
 8001674:	40700000 	.word	0x40700000
 8001678:	2000021c 	.word	0x2000021c
 800167c:	40f00000 	.word	0x40f00000
 8001680:	ffffe343 	.word	0xffffe343
 8001684:	20000220 	.word	0x20000220
 8001688:	40300000 	.word	0x40300000
 800168c:	00000000 	.word	0x00000000

08001690 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fdc7 	bl	800122c <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 800169e:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <BMP180_GetAlt+0x88>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016aa:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800171c <BMP180_GetAlt+0x8c>
 80016ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016b2:	ee16 0a90 	vmov	r0, s13
 80016b6:	f7fe ff47 	bl	8000548 <__aeabi_f2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001708 <BMP180_GetAlt+0x78>
 80016c2:	ec43 2b10 	vmov	d0, r2, r3
 80016c6:	f00c fa79 	bl	800dbbc <pow>
 80016ca:	ec53 2b10 	vmov	r2, r3, d0
 80016ce:	f04f 0000 	mov.w	r0, #0
 80016d2:	4913      	ldr	r1, [pc, #76]	@ (8001720 <BMP180_GetAlt+0x90>)
 80016d4:	f7fe fdd8 	bl	8000288 <__aeabi_dsub>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	a30b      	add	r3, pc, #44	@ (adr r3, 8001710 <BMP180_GetAlt+0x80>)
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	f7fe ff87 	bl	80005f8 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	f7ff fa79 	bl	8000be8 <__aeabi_d2f>
 80016f6:	4603      	mov	r3, r0
 80016f8:	ee07 3a90 	vmov	s15, r3
}
 80016fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	ccd745e4 	.word	0xccd745e4
 800170c:	3fc85b95 	.word	0x3fc85b95
 8001710:	00000000 	.word	0x00000000
 8001714:	40e5a540 	.word	0x40e5a540
 8001718:	2000023c 	.word	0x2000023c
 800171c:	47c5e680 	.word	0x47c5e680
 8001720:	3ff00000 	.word	0x3ff00000

08001724 <BMP180_Start>:

void BMP180_Start (void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	read_calliberation_data();
 8001728:	f7ff fc7a 	bl	8001020 <read_calliberation_data>
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	ed87 0a01 	vstr	s0, [r7, #4]
 800173a:	edd7 7a01 	vldr	s15, [r7, #4]
 800173e:	eef0 7ae7 	vabs.f32	s15, s15
 8001742:	eeb0 0a67 	vmov.f32	s0, s15
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <_ZN3GPSC1EP12GPIO_TypeDeft>:
#include <math.h>

extern UART_HandleTypeDef huart1;
MySerial Serial1(&huart1);

GPS::GPS(GPIO_TypeDef* thePort, uint16_t thePin){
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	4613      	mov	r3, r2
 800175c:	80fb      	strh	r3, [r7, #6]
	this->port = thePort;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	this->pin = thePin;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	88fa      	ldrh	r2, [r7, #6]
 800176a:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
}
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <_ZN3GPS20setKgainConstantRollEff>:

void GPS::setKgainConstantRoll(float thePgainRoll, float theDgainRoll){
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	ed87 0a02 	vstr	s0, [r7, #8]
 8001788:	edc7 0a01 	vstr	s1, [r7, #4]
	this->Pgain = thePgainRoll;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	this->Dgain = theDgainRoll;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_ZN3GPS4InitEv>:

HAL_StatusTypeDef GPS :: Init()
{
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b090      	sub	sp, #64	@ 0x40
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	Serial1.Init();
 80017b0:	483d      	ldr	r0, [pc, #244]	@ (80018a8 <_ZN3GPS4InitEv+0x100>)
 80017b2:	f002 fce9 	bl	8004188 <_ZN8MySerial4InitEv>
	uint8_t Disable_GPGSV[11] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x03, 0x00, 0xFD, 0x15};
 80017b6:	4a3d      	ldr	r2, [pc, #244]	@ (80018ac <_ZN3GPS4InitEv+0x104>)
 80017b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80017be:	c303      	stmia	r3!, {r0, r1}
 80017c0:	801a      	strh	r2, [r3, #0]
 80017c2:	3302      	adds	r3, #2
 80017c4:	0c12      	lsrs	r2, r2, #16
 80017c6:	701a      	strb	r2, [r3, #0]
	uint8_t Set_to_5Hz[14] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00,0xC8,
 80017c8:	4b39      	ldr	r3, [pc, #228]	@ (80018b0 <_ZN3GPS4InitEv+0x108>)
 80017ca:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80017ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017d0:	c407      	stmia	r4!, {r0, r1, r2}
 80017d2:	8023      	strh	r3, [r4, #0]
			0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A};
	uint8_t Set_to_57kbps[28] = {0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00,
 80017d4:	4b37      	ldr	r3, [pc, #220]	@ (80018b4 <_ZN3GPS4InitEv+0x10c>)
 80017d6:	f107 0408 	add.w	r4, r7, #8
 80017da:	461d      	mov	r5, r3
 80017dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			0xD0, 0x08, 0x00, 0x00, 0x00, 0xE1, 0x00, 0x00, 0x07, 0x00,
			0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE2, 0xE1};

	// Vo hieu hoa goi tin GPGSV bang giao thuc Ublox
	if ( HAL_UART_Transmit(Serial1.uart, Disable_GPGSV, 11, 500) != HAL_OK){
 80017e8:	4b2f      	ldr	r3, [pc, #188]	@ (80018a8 <_ZN3GPS4InitEv+0x100>)
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80017f0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80017f4:	220b      	movs	r2, #11
 80017f6:	f00b fa15 	bl	800cc24 <HAL_UART_Transmit>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf14      	ite	ne
 8001800:	2301      	movne	r3, #1
 8001802:	2300      	moveq	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <_ZN3GPS4InitEv+0x66>
		return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e048      	b.n	80018a0 <_ZN3GPS4InitEv+0xf8>
	}
	// Khoang thoi gian nho nhat de giao tiep voi module GPS o baundrat 9600bps
	HAL_Delay(350);
 800180e:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8001812:	f006 fb65 	bl	8007ee0 <HAL_Delay>

	// Thiet lap refresh rate la 5Hz bang giao thuc ublox
	if ( HAL_UART_Transmit(Serial1.uart, Set_to_5Hz, 14, 500) != HAL_OK){
 8001816:	4b24      	ldr	r3, [pc, #144]	@ (80018a8 <_ZN3GPS4InitEv+0x100>)
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800181e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001822:	220e      	movs	r2, #14
 8001824:	f00b f9fe 	bl	800cc24 <HAL_UART_Transmit>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf14      	ite	ne
 800182e:	2301      	movne	r3, #1
 8001830:	2300      	moveq	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <_ZN3GPS4InitEv+0x94>
		return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e031      	b.n	80018a0 <_ZN3GPS4InitEv+0xf8>
	}
	// Khoang thoi gian nho nhat de giao tiep voi module GPS o baundrate 9600bps
	HAL_Delay(350);
 800183c:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8001840:	f006 fb4e 	bl	8007ee0 <HAL_Delay>

	// Thiet lap toc do baud rate = 57.6kbps bang giao thuc ublox
	if ( HAL_UART_Transmit(Serial1.uart, Set_to_57kbps, 28, 500) != HAL_OK){
 8001844:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <_ZN3GPS4InitEv+0x100>)
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	f107 0108 	add.w	r1, r7, #8
 800184c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001850:	221c      	movs	r2, #28
 8001852:	f00b f9e7 	bl	800cc24 <HAL_UART_Transmit>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	bf14      	ite	ne
 800185c:	2301      	movne	r3, #1
 800185e:	2300      	moveq	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <_ZN3GPS4InitEv+0xc2>
		return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e01a      	b.n	80018a0 <_ZN3GPS4InitEv+0xf8>
	}
	HAL_Delay(200);
 800186a:	20c8      	movs	r0, #200	@ 0xc8
 800186c:	f006 fb38 	bl	8007ee0 <HAL_Delay>

	Serial1.uart->Init.BaudRate = 57600;
 8001870:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <_ZN3GPS4InitEv+0x100>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001878:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(Serial1.uart) != HAL_OK)
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <_ZN3GPS4InitEv+0x100>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f00b f980 	bl	800cb84 <HAL_UART_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	bf14      	ite	ne
 800188a:	2301      	movne	r3, #1
 800188c:	2300      	moveq	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <_ZN3GPS4InitEv+0xf0>
	{
		return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e003      	b.n	80018a0 <_ZN3GPS4InitEv+0xf8>
	}
	HAL_Delay(200);
 8001898:	20c8      	movs	r0, #200	@ 0xc8
 800189a:	f006 fb21 	bl	8007ee0 <HAL_Delay>

	return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3740      	adds	r7, #64	@ 0x40
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bdb0      	pop	{r4, r5, r7, pc}
 80018a8:	20000240 	.word	0x20000240
 80018ac:	080146d8 	.word	0x080146d8
 80018b0:	080146e4 	.word	0x080146e4
 80018b4:	080146f4 	.word	0x080146f4

080018b8 <_ZN3GPS7ReadGPSEhPhS0_f>:

void GPS :: ReadGPS(uint8_t theStateMachine, uint8_t* theError, uint8_t* theFlightMode, float theAngleYaw)
{
 80018b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018bc:	b088      	sub	sp, #32
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6178      	str	r0, [r7, #20]
 80018c2:	60fa      	str	r2, [r7, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80018ca:	460b      	mov	r3, r1
 80018cc:	74fb      	strb	r3, [r7, #19]
	if (gpsAddCounter >= 0)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	@ 0x8a
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db42      	blt.n	800195e <_ZN3GPS7ReadGPSEhPhS0_f+0xa6>
	{
		gpsAddCounter --;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	@ 0x8a
 80018de:	b29b      	uxth	r3, r3
 80018e0:	3b01      	subs	r3, #1
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	b21a      	sxth	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
	}
	while (Serial1.IsDataAvailable() && !newLineFound )
 80018ec:	e037      	b.n	800195e <_ZN3GPS7ReadGPSEhPhS0_f+0xa6>
	{
		char readSerialByte = Serial1.Read();
 80018ee:	4822      	ldr	r0, [pc, #136]	@ (8001978 <_ZN3GPS7ReadGPSEhPhS0_f+0xc0>)
 80018f0:	f002 fc9b 	bl	800422a <_ZN8MySerial4ReadEv>
 80018f4:	4603      	mov	r3, r0
 80018f6:	77fb      	strb	r3, [r7, #31]
		if (readSerialByte == '$') {
 80018f8:	7ffb      	ldrb	r3, [r7, #31]
 80018fa:	2b24      	cmp	r3, #36	@ 0x24
 80018fc:	d118      	bne.n	8001930 <_ZN3GPS7ReadGPSEhPhS0_f+0x78>
			for (messageCounter = 0; messageCounter <= 99; messageCounter ++)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2200      	movs	r2, #0
 8001902:	805a      	strh	r2, [r3, #2]
 8001904:	e00c      	b.n	8001920 <_ZN3GPS7ReadGPSEhPhS0_f+0x68>
			{
				incommingMessage[messageCounter] = '-';
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	885b      	ldrh	r3, [r3, #2]
 800190a:	461a      	mov	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	4413      	add	r3, r2
 8001910:	222d      	movs	r2, #45	@ 0x2d
 8001912:	765a      	strb	r2, [r3, #25]
			for (messageCounter = 0; messageCounter <= 99; messageCounter ++)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	885b      	ldrh	r3, [r3, #2]
 8001918:	3301      	adds	r3, #1
 800191a:	b29a      	uxth	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	805a      	strh	r2, [r3, #2]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	885b      	ldrh	r3, [r3, #2]
 8001924:	2b63      	cmp	r3, #99	@ 0x63
 8001926:	d9ee      	bls.n	8001906 <_ZN3GPS7ReadGPSEhPhS0_f+0x4e>
			}
			messageCounter = 0;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2200      	movs	r2, #0
 800192c:	805a      	strh	r2, [r3, #2]
 800192e:	e009      	b.n	8001944 <_ZN3GPS7ReadGPSEhPhS0_f+0x8c>
		}
		else if (messageCounter <= 99)messageCounter ++;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	885b      	ldrh	r3, [r3, #2]
 8001934:	2b63      	cmp	r3, #99	@ 0x63
 8001936:	d805      	bhi.n	8001944 <_ZN3GPS7ReadGPSEhPhS0_f+0x8c>
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	885b      	ldrh	r3, [r3, #2]
 800193c:	3301      	adds	r3, #1
 800193e:	b29a      	uxth	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	805a      	strh	r2, [r3, #2]
		incommingMessage[messageCounter] = readSerialByte;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	885b      	ldrh	r3, [r3, #2]
 8001948:	461a      	mov	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	4413      	add	r3, r2
 800194e:	7ffa      	ldrb	r2, [r7, #31]
 8001950:	765a      	strb	r2, [r3, #25]
		if (readSerialByte == '*') newLineFound = 1;
 8001952:	7ffb      	ldrb	r3, [r7, #31]
 8001954:	2b2a      	cmp	r3, #42	@ 0x2a
 8001956:	d102      	bne.n	800195e <_ZN3GPS7ReadGPSEhPhS0_f+0xa6>
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2201      	movs	r2, #1
 800195c:	731a      	strb	r2, [r3, #12]
	while (Serial1.IsDataAvailable() && !newLineFound )
 800195e:	4806      	ldr	r0, [pc, #24]	@ (8001978 <_ZN3GPS7ReadGPSEhPhS0_f+0xc0>)
 8001960:	f002 fc98 	bl	8004294 <_ZN8MySerial15IsDataAvailableEv>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d008      	beq.n	800197c <_ZN3GPS7ReadGPSEhPhS0_f+0xc4>
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	7b1b      	ldrb	r3, [r3, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d104      	bne.n	800197c <_ZN3GPS7ReadGPSEhPhS0_f+0xc4>
 8001972:	2301      	movs	r3, #1
 8001974:	e003      	b.n	800197e <_ZN3GPS7ReadGPSEhPhS0_f+0xc6>
 8001976:	bf00      	nop
 8001978:	20000240 	.word	0x20000240
 800197c:	2300      	movs	r3, #0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1b5      	bne.n	80018ee <_ZN3GPS7ReadGPSEhPhS0_f+0x36>
	}
	if (newLineFound == 1)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	7b1b      	ldrb	r3, [r3, #12]
 8001986:	2b01      	cmp	r3, #1
 8001988:	f040 8219 	bne.w	8001dbe <_ZN3GPS7ReadGPSEhPhS0_f+0x506>
	{
		newLineFound = 0;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2200      	movs	r2, #0
 8001990:	731a      	strb	r2, [r3, #12]
		if (incommingMessage[4] == 'L' && incommingMessage[5] == 'L' && incommingMessage[7] == ',')
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	7f5b      	ldrb	r3, [r3, #29]
 8001996:	2b4c      	cmp	r3, #76	@ 0x4c
 8001998:	d118      	bne.n	80019cc <_ZN3GPS7ReadGPSEhPhS0_f+0x114>
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	7f9b      	ldrb	r3, [r3, #30]
 800199e:	2b4c      	cmp	r3, #76	@ 0x4c
 80019a0:	d114      	bne.n	80019cc <_ZN3GPS7ReadGPSEhPhS0_f+0x114>
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a8:	2b2c      	cmp	r3, #44	@ 0x2c
 80019aa:	d10f      	bne.n	80019cc <_ZN3GPS7ReadGPSEhPhS0_f+0x114>
		{
// Đặt một số biến thành 0 nếu mô-đun GPS không tìm thấy thông tin hợp lệ. Điều này là cần thiết cho việc mất GPS khi bay.
			latGPS = 0;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2200      	movs	r2, #0
 80019b0:	605a      	str	r2, [r3, #4]
			lonGPS = 0;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
			previousLatGPS = 0;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	2200      	movs	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
			previousLonGPS = 0;
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
			numberUsedSats = 0;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
		}
// Nếu đường bắt đầu bằng GA và nếu có bản sửa lỗi GPS, chúng ta có thể quét đường để tìm vĩ độ, kinh độ và số lượng vệ tinh.
		if (incommingMessage[4] == 'G' && incommingMessage[5] == 'A' && (incommingMessage[44] == '1' || incommingMessage[44] == '2'))
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	7f5b      	ldrb	r3, [r3, #29]
 80019d0:	2b47      	cmp	r3, #71	@ 0x47
 80019d2:	f040 81e4 	bne.w	8001d9e <_ZN3GPS7ReadGPSEhPhS0_f+0x4e6>
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	7f9b      	ldrb	r3, [r3, #30]
 80019da:	2b41      	cmp	r3, #65	@ 0x41
 80019dc:	f040 81df 	bne.w	8001d9e <_ZN3GPS7ReadGPSEhPhS0_f+0x4e6>
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80019e6:	2b31      	cmp	r3, #49	@ 0x31
 80019e8:	d005      	beq.n	80019f6 <_ZN3GPS7ReadGPSEhPhS0_f+0x13e>
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80019f0:	2b32      	cmp	r3, #50	@ 0x32
 80019f2:	f040 81d4 	bne.w	8001d9e <_ZN3GPS7ReadGPSEhPhS0_f+0x4e6>
		{
			actualLatGPS = ((int)incommingMessage[19] - 48) *  (long)10000000;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80019fc:	3b30      	subs	r3, #48	@ 0x30
 80019fe:	4aa4      	ldr	r2, [pc, #656]	@ (8001c90 <_ZN3GPS7ReadGPSEhPhS0_f+0x3d8>)
 8001a00:	fb03 f202 	mul.w	r2, r3, r2
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			actualLatGPS += ((int)incommingMessage[20] - 48) * (long)1000000;
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001a16:	3b30      	subs	r3, #48	@ 0x30
 8001a18:	499e      	ldr	r1, [pc, #632]	@ (8001c94 <_ZN3GPS7ReadGPSEhPhS0_f+0x3dc>)
 8001a1a:	fb01 f303 	mul.w	r3, r1, r3
 8001a1e:	441a      	add	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			actualLatGPS += ((int)incommingMessage[22] - 48) * (long)100000;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001a32:	3b30      	subs	r3, #48	@ 0x30
 8001a34:	4998      	ldr	r1, [pc, #608]	@ (8001c98 <_ZN3GPS7ReadGPSEhPhS0_f+0x3e0>)
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	441a      	add	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			actualLatGPS += ((int)incommingMessage[23] - 48) * (long)10000;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a4e:	3b30      	subs	r3, #48	@ 0x30
 8001a50:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001a54:	fb01 f303 	mul.w	r3, r1, r3
 8001a58:	441a      	add	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			actualLatGPS += ((int)incommingMessage[24] - 48) * (long)1000;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001a6c:	3b30      	subs	r3, #48	@ 0x30
 8001a6e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a72:	fb01 f303 	mul.w	r3, r1, r3
 8001a76:	441a      	add	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			actualLatGPS += ((int)incommingMessage[25] - 48) * (long)100;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001a8a:	3b30      	subs	r3, #48	@ 0x30
 8001a8c:	2164      	movs	r1, #100	@ 0x64
 8001a8e:	fb01 f303 	mul.w	r3, r1, r3
 8001a92:	441a      	add	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			actualLatGPS += ((int)incommingMessage[26] - 48) * (long)10;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8001aa6:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	18ca      	adds	r2, r1, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			actualLatGPS /= (long)6;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ac0:	4a76      	ldr	r2, [pc, #472]	@ (8001c9c <_ZN3GPS7ReadGPSEhPhS0_f+0x3e4>)
 8001ac2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac6:	17db      	asrs	r3, r3, #31
 8001ac8:	1ad2      	subs	r2, r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			actualLatGPS += ((int)incommingMessage[17] - 48) *  (long)100000000;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001adc:	3b30      	subs	r3, #48	@ 0x30
 8001ade:	4970      	ldr	r1, [pc, #448]	@ (8001ca0 <_ZN3GPS7ReadGPSEhPhS0_f+0x3e8>)
 8001ae0:	fb01 f303 	mul.w	r3, r1, r3
 8001ae4:	441a      	add	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			actualLatGPS += ((int)incommingMessage[18] - 48) *  (long)10000000;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001af8:	3b30      	subs	r3, #48	@ 0x30
 8001afa:	4965      	ldr	r1, [pc, #404]	@ (8001c90 <_ZN3GPS7ReadGPSEhPhS0_f+0x3d8>)
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	441a      	add	r2, r3
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			actualLatGPS /= 10;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b0e:	4a65      	ldr	r2, [pc, #404]	@ (8001ca4 <_ZN3GPS7ReadGPSEhPhS0_f+0x3ec>)
 8001b10:	fb82 1203 	smull	r1, r2, r2, r3
 8001b14:	1092      	asrs	r2, r2, #2
 8001b16:	17db      	asrs	r3, r3, #31
 8001b18:	1ad2      	subs	r2, r2, r3
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

			actualLonGPS = ((int)incommingMessage[33] - 48) *  (long)10000000;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001b26:	3b30      	subs	r3, #48	@ 0x30
 8001b28:	4a59      	ldr	r2, [pc, #356]	@ (8001c90 <_ZN3GPS7ReadGPSEhPhS0_f+0x3d8>)
 8001b2a:	fb03 f202 	mul.w	r2, r3, r2
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			actualLonGPS += ((int)incommingMessage[34] - 48) * (long)1000000;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001b40:	3b30      	subs	r3, #48	@ 0x30
 8001b42:	4954      	ldr	r1, [pc, #336]	@ (8001c94 <_ZN3GPS7ReadGPSEhPhS0_f+0x3dc>)
 8001b44:	fb01 f303 	mul.w	r3, r1, r3
 8001b48:	441a      	add	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			actualLonGPS += ((int)incommingMessage[36] - 48) * (long)100000;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b5c:	3b30      	subs	r3, #48	@ 0x30
 8001b5e:	494e      	ldr	r1, [pc, #312]	@ (8001c98 <_ZN3GPS7ReadGPSEhPhS0_f+0x3e0>)
 8001b60:	fb01 f303 	mul.w	r3, r1, r3
 8001b64:	441a      	add	r2, r3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			actualLonGPS += ((int)incommingMessage[37] - 48) * (long)10000;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001b78:	3b30      	subs	r3, #48	@ 0x30
 8001b7a:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	441a      	add	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			actualLonGPS += ((int)incommingMessage[38] - 48) * (long)1000;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001b96:	3b30      	subs	r3, #48	@ 0x30
 8001b98:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ba0:	441a      	add	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			actualLonGPS += ((int)incommingMessage[39] - 48) * (long)100;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bb4:	3b30      	subs	r3, #48	@ 0x30
 8001bb6:	2164      	movs	r1, #100	@ 0x64
 8001bb8:	fb01 f303 	mul.w	r3, r1, r3
 8001bbc:	441a      	add	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			actualLonGPS += ((int)incommingMessage[40] - 48) * (long)10;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bd0:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	18ca      	adds	r2, r1, r3
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			actualLonGPS /= (long)6;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001bea:	4a2c      	ldr	r2, [pc, #176]	@ (8001c9c <_ZN3GPS7ReadGPSEhPhS0_f+0x3e4>)
 8001bec:	fb82 1203 	smull	r1, r2, r2, r3
 8001bf0:	17db      	asrs	r3, r3, #31
 8001bf2:	1ad2      	subs	r2, r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			actualLonGPS += ((int)incommingMessage[30] - 48) * (long)1000000000;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8001c06:	3b30      	subs	r3, #48	@ 0x30
 8001c08:	4927      	ldr	r1, [pc, #156]	@ (8001ca8 <_ZN3GPS7ReadGPSEhPhS0_f+0x3f0>)
 8001c0a:	fb01 f303 	mul.w	r3, r1, r3
 8001c0e:	441a      	add	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			actualLonGPS += ((int)incommingMessage[31] - 48) * (long)100000000;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c22:	3b30      	subs	r3, #48	@ 0x30
 8001c24:	491e      	ldr	r1, [pc, #120]	@ (8001ca0 <_ZN3GPS7ReadGPSEhPhS0_f+0x3e8>)
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
 8001c2a:	441a      	add	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			actualLonGPS += ((int)incommingMessage[32] - 48) * (long)10000000;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001c3e:	3b30      	subs	r3, #48	@ 0x30
 8001c40:	4913      	ldr	r1, [pc, #76]	@ (8001c90 <_ZN3GPS7ReadGPSEhPhS0_f+0x3d8>)
 8001c42:	fb01 f303 	mul.w	r3, r1, r3
 8001c46:	441a      	add	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			actualLonGPS /= 10;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c54:	4a13      	ldr	r2, [pc, #76]	@ (8001ca4 <_ZN3GPS7ReadGPSEhPhS0_f+0x3ec>)
 8001c56:	fb82 1203 	smull	r1, r2, r2, r3
 8001c5a:	1092      	asrs	r2, r2, #2
 8001c5c:	17db      	asrs	r3, r3, #31
 8001c5e:	1ad2      	subs	r2, r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

			if (incommingMessage[28] == 'N')
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c6c:	2b4e      	cmp	r3, #78	@ 0x4e
 8001c6e:	d103      	bne.n	8001c78 <_ZN3GPS7ReadGPSEhPhS0_f+0x3c0>
				latitudeNorth = 1;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]
 8001c76:	e002      	b.n	8001c7e <_ZN3GPS7ReadGPSEhPhS0_f+0x3c6>
			else
				latitudeNorth = 0;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]

			if (incommingMessage[42] == 'E')
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001c84:	2b45      	cmp	r3, #69	@ 0x45
 8001c86:	d111      	bne.n	8001cac <_ZN3GPS7ReadGPSEhPhS0_f+0x3f4>
				longtiudeEast = 1;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	705a      	strb	r2, [r3, #1]
 8001c8e:	e010      	b.n	8001cb2 <_ZN3GPS7ReadGPSEhPhS0_f+0x3fa>
 8001c90:	00989680 	.word	0x00989680
 8001c94:	000f4240 	.word	0x000f4240
 8001c98:	000186a0 	.word	0x000186a0
 8001c9c:	2aaaaaab 	.word	0x2aaaaaab
 8001ca0:	05f5e100 	.word	0x05f5e100
 8001ca4:	66666667 	.word	0x66666667
 8001ca8:	3b9aca00 	.word	0x3b9aca00
			else
				longtiudeEast = 0;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	705a      	strb	r2, [r3, #1]

			numberUsedSats = ((int)incommingMessage[46] - 48) * (long)10;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001cb8:	461a      	mov	r2, r3
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	3320      	adds	r3, #32
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			numberUsedSats += (int)incommingMessage[47] - 48;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f893 2212 	ldrb.w	r2, [r3, #530]	@ 0x212
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001cd8:	4413      	add	r3, r2
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	3b30      	subs	r3, #48	@ 0x30
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212

			if ( previousLatGPS == 0 && previousLonGPS == 0){
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10d      	bne.n	8001d0a <_ZN3GPS7ReadGPSEhPhS0_f+0x452>
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d109      	bne.n	8001d0a <_ZN3GPS7ReadGPSEhPhS0_f+0x452>
				previousLatGPS = actualLatGPS;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	615a      	str	r2, [r3, #20]
				previousLonGPS = actualLonGPS;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	611a      	str	r2, [r3, #16]
			}

			lat_gps_loop_add = (float)(actualLatGPS - previousLatGPS) / 10.0;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	ee07 3a90 	vmov	s15, r3
 8001d1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d1e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001d22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
			lon_gps_loop_add = (float)(actualLonGPS - previousLonGPS) / 10.0;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d40:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001d44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0

			latGPS = previousLatGPS;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	605a      	str	r2, [r3, #4]
			lonGPS = previousLonGPS;
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	691a      	ldr	r2, [r3, #16]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	609a      	str	r2, [r3, #8]

			previousLatGPS = actualLatGPS;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	615a      	str	r2, [r3, #20]
			previousLonGPS = actualLonGPS;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	611a      	str	r2, [r3, #16]

//GPS được đặt ở tốc độ làm mới 5Hz. Giữa mỗi 2 phép đo GPS, 9 giá trị GPS được mô phỏng.
			gpsAddCounter = 5;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2205      	movs	r2, #5
 8001d76:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
			new_gps_dataCounter = 9;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2209      	movs	r2, #9
 8001d7e:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			lat_gps_add = 0;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			lon_gps_add = 0;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
			new_gpsDataAvailable = 1;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
		}

//If the line starts with SA and if there is a GPS fix we can scan the line for the fix type (none, 2D or 3D).
		if (incommingMessage[4] == 'S' && incommingMessage[5] == 'A')
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	7f5b      	ldrb	r3, [r3, #29]
 8001da2:	2b53      	cmp	r3, #83	@ 0x53
 8001da4:	d10b      	bne.n	8001dbe <_ZN3GPS7ReadGPSEhPhS0_f+0x506>
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	7f9b      	ldrb	r3, [r3, #30]
 8001daa:	2b41      	cmp	r3, #65	@ 0x41
 8001dac:	d107      	bne.n	8001dbe <_ZN3GPS7ReadGPSEhPhS0_f+0x506>
			fixType = (int)incommingMessage[9] - 48;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001db4:	3b30      	subs	r3, #48	@ 0x30
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213

	}

//After 5 program loops 5 x 4ms = 20ms the gps_add_counter is 0.
	if (gpsAddCounter == 0 && new_gps_dataCounter > 0){
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	@ 0x8a
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f040 808c 	bne.w	8001ee2 <_ZN3GPS7ReadGPSEhPhS0_f+0x62a>
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 8086 	beq.w	8001ee2 <_ZN3GPS7ReadGPSEhPhS0_f+0x62a>
		new_gpsDataAvailable = 1;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
		new_gps_dataCounter--;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
		gpsAddCounter = 5;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2205      	movs	r2, #5
 8001df2:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

		lat_gps_add += lat_gps_loop_add;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	ed93 7a29 	vldr	s14, [r3, #164]	@ 0xa4
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
 8001e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
		if (abs(lat_gps_add) >= 1) {
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 8001e12:	eeb0 0a67 	vmov.f32	s0, s15
 8001e16:	f7ff fc8b 	bl	8001730 <_ZSt3absf>
 8001e1a:	eef0 7a40 	vmov.f32	s15, s0
 8001e1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2a:	bfac      	ite	ge
 8001e2c:	2301      	movge	r3, #1
 8001e2e:	2300      	movlt	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d01a      	beq.n	8001e6c <_ZN3GPS7ReadGPSEhPhS0_f+0x5b4>
			latGPS += (int)lat_gps_add;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	edd2 7a29 	vldr	s15, [r2, #164]	@ 0xa4
 8001e40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e44:	ee17 2a90 	vmov	r2, s15
 8001e48:	441a      	add	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	605a      	str	r2, [r3, #4]
			lat_gps_add -= (int)lat_gps_add;
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	ed93 7a29 	vldr	s14, [r3, #164]	@ 0xa4
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 8001e5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
		}

		lon_gps_add += lon_gps_loop_add;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
 8001e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
		if (abs(lon_gps_add) >= 1) {
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 8001e88:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8c:	f7ff fc50 	bl	8001730 <_ZSt3absf>
 8001e90:	eef0 7a40 	vmov.f32	s15, s0
 8001e94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea0:	bfac      	ite	ge
 8001ea2:	2301      	movge	r3, #1
 8001ea4:	2300      	movlt	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01a      	beq.n	8001ee2 <_ZN3GPS7ReadGPSEhPhS0_f+0x62a>
			lonGPS += (int)lon_gps_add;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	edd2 7a2a 	vldr	s15, [r2, #168]	@ 0xa8
 8001eb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eba:	ee17 2a90 	vmov	r2, s15
 8001ebe:	441a      	add	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	609a      	str	r2, [r3, #8]
			lon_gps_add -= (int)lon_gps_add;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 8001ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
		}
	}

	if (new_gpsDataAvailable) {
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8211 	beq.w	8002310 <_ZN3GPS7ReadGPSEhPhS0_f+0xa58>
		if (numberUsedSats < 8){
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f893 3212 	ldrb.w	r3, [r3, #530]	@ 0x212
 8001ef4:	2b07      	cmp	r3, #7
 8001ef6:	d80a      	bhi.n	8001f0e <_ZN3GPS7ReadGPSEhPhS0_f+0x656>
			HAL_GPIO_TogglePin(this->port, this->pin);  // Thay đổi đèn LED trên STM32 để chỉ báo nhận GPS
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8001f04:	4619      	mov	r1, r3
 8001f06:	4610      	mov	r0, r2
 8001f08:	f006 ff99 	bl	8008e3e <HAL_GPIO_TogglePin>
 8001f0c:	e009      	b.n	8001f22 <_ZN3GPS7ReadGPSEhPhS0_f+0x66a>
		}
		else {
			HAL_GPIO_WritePin(this->port, this->pin, GPIO_PIN_RESET);
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f006 ff75 	bl	8008e0c <HAL_GPIO_WritePin>
		}
		gps_watchdogTimer = HAL_GetTick();
 8001f22:	f005 ffd1 	bl	8007ec8 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
		new_gpsDataAvailable = 0;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

		if (*theFlightMode >= 3 && waypointSet == 0) { // bật FlightMode = 3 , thì lấy vị trí lưu lại
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d912      	bls.n	8001f64 <_ZN3GPS7ReadGPSEhPhS0_f+0x6ac>
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10d      	bne.n	8001f64 <_ZN3GPS7ReadGPSEhPhS0_f+0x6ac>
			waypointSet = 1;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			l_latWaypoint = latGPS;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			l_lonWaypoint = lonGPS;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
		}

		if (*theFlightMode >= 3 && waypointSet == 1) {
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	f240 81d1 	bls.w	8002310 <_ZN3GPS7ReadGPSEhPhS0_f+0xa58>
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	f040 81cb 	bne.w	8002310 <_ZN3GPS7ReadGPSEhPhS0_f+0xa58>
			gps_lonError = l_lonWaypoint - lonGPS;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	1ad2      	subs	r2, r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f8c3 21fc 	str.w	r2, [r3, #508]	@ 0x1fc
			gps_latError = latGPS - l_latWaypoint;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f96:	1ad2      	subs	r2, r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8

			gps_latTotalAvarage -=  gps_latRotatingMem[ gps_rotatingMemLocation];
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 8001faa:	4619      	mov	r1, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	312e      	adds	r1, #46	@ 0x2e
 8001fb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fb4:	1ad2      	subs	r2, r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
			gps_latRotatingMem[ gps_rotatingMemLocation] = gps_latError - gps_latErrorPrevious;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f8d3 21f8 	ldr.w	r2, [r3, #504]	@ 0x1f8
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001fc8:	6979      	ldr	r1, [r7, #20]
 8001fca:	f891 10ae 	ldrb.w	r1, [r1, #174]	@ 0xae
 8001fce:	4608      	mov	r0, r1
 8001fd0:	1ad1      	subs	r1, r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f100 022e 	add.w	r2, r0, #46	@ 0x2e
 8001fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gps_latTotalAvarage +=  gps_latRotatingMem[ gps_rotatingMemLocation];
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 8001fe8:	4619      	mov	r1, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	312e      	adds	r1, #46	@ 0x2e
 8001fee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ff2:	441a      	add	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
			gps_lonTotalAvarage -=  gps_lonRotatingMem[ gps_rotatingMemLocation];
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 8002006:	4619      	mov	r1, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	3156      	adds	r1, #86	@ 0x56
 800200c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002010:	1ad2      	subs	r2, r2, r3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
			gps_lonRotatingMem[ gps_rotatingMemLocation] = gps_lonError - gps_lonErrorPrevious;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f8d3 21fc 	ldr.w	r2, [r3, #508]	@ 0x1fc
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002024:	6979      	ldr	r1, [r7, #20]
 8002026:	f891 10ae 	ldrb.w	r1, [r1, #174]	@ 0xae
 800202a:	4608      	mov	r0, r1
 800202c:	1ad1      	subs	r1, r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f100 0256 	add.w	r2, r0, #86	@ 0x56
 8002034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gps_lonTotalAvarage +=  gps_lonRotatingMem[ gps_rotatingMemLocation];
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 8002044:	4619      	mov	r1, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	3156      	adds	r1, #86	@ 0x56
 800204a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800204e:	441a      	add	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
			gps_rotatingMemLocation++;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800205c:	3301      	adds	r3, #1
 800205e:	b2da      	uxtb	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
			if ( gps_rotatingMemLocation == 35) gps_rotatingMemLocation = 0;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800206c:	2b23      	cmp	r3, #35	@ 0x23
 800206e:	d103      	bne.n	8002078 <_ZN3GPS7ReadGPSEhPhS0_f+0x7c0>
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae

			gps_latErrorPrevious = gps_latError;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f8d3 21f8 	ldr.w	r2, [r3, #504]	@ 0x1f8
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			gps_lonErrorPrevious = gps_lonError;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f8d3 21fc 	ldr.w	r2, [r3, #508]	@ 0x1fc
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

			gpsPitchAdjustNorth = (float)gps_latError * Pgain + (float)gps_latTotalAvarage * Dgain;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f8d3 31f8 	ldr.w	r3, [r3, #504]	@ 0x1f8
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	edd3 7a85 	vldr	s15, [r3, #532]	@ 0x214
 80020a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80020ae:	ee07 3a90 	vmov	s15, r3
 80020b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	edd3 7a86 	vldr	s15, [r3, #536]	@ 0x218
 80020bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
			gpsPitchAdjustNorth = (float)gps_lonError * Pgain + (float)gps_lonTotalAvarage * Dgain;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	edd3 7a85 	vldr	s15, [r3, #532]	@ 0x214
 80020de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80020e8:	ee07 3a90 	vmov	s15, r3
 80020ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	edd3 7a86 	vldr	s15, [r3, #536]	@ 0x218
 80020f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94

			if (!latitudeNorth)gpsPitchAdjustNorth *= -1;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d107      	bne.n	800211c <_ZN3GPS7ReadGPSEhPhS0_f+0x864>
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8002112:	eef1 7a67 	vneg.f32	s15, s15
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
			if (!longtiudeEast)gpsRollAdjustNorth *= -1;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	785b      	ldrb	r3, [r3, #1]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <_ZN3GPS7ReadGPSEhPhS0_f+0x87c>
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 800212a:	eef1 7a67 	vneg.f32	s15, s15
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98

			gpsRollAdjust = ((float)gpsRollAdjustNorth * cos(theAngleYaw * 0.017453)) + ((float)gpsPitchAdjustNorth * cos((theAngleYaw - 90) * 0.017453));
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fa04 	bl	8000548 <__aeabi_f2d>
 8002140:	4604      	mov	r4, r0
 8002142:	460d      	mov	r5, r1
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7fe f9ff 	bl	8000548 <__aeabi_f2d>
 800214a:	a3ad      	add	r3, pc, #692	@ (adr r3, 8002400 <_ZN3GPS7ReadGPSEhPhS0_f+0xb48>)
 800214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002150:	f7fe fa52 	bl	80005f8 <__aeabi_dmul>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	ec43 2b17 	vmov	d7, r2, r3
 800215c:	eeb0 0a47 	vmov.f32	s0, s14
 8002160:	eef0 0a67 	vmov.f32	s1, s15
 8002164:	f00b fdc8 	bl	800dcf8 <cos>
 8002168:	ec53 2b10 	vmov	r2, r3, d0
 800216c:	4620      	mov	r0, r4
 800216e:	4629      	mov	r1, r5
 8002170:	f7fe fa42 	bl	80005f8 <__aeabi_dmul>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4690      	mov	r8, r2
 800217a:	4699      	mov	r9, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe f9e0 	bl	8000548 <__aeabi_f2d>
 8002188:	4604      	mov	r4, r0
 800218a:	460d      	mov	r5, r1
 800218c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002190:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8002408 <_ZN3GPS7ReadGPSEhPhS0_f+0xb50>
 8002194:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002198:	ee17 0a90 	vmov	r0, s15
 800219c:	f7fe f9d4 	bl	8000548 <__aeabi_f2d>
 80021a0:	a397      	add	r3, pc, #604	@ (adr r3, 8002400 <_ZN3GPS7ReadGPSEhPhS0_f+0xb48>)
 80021a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a6:	f7fe fa27 	bl	80005f8 <__aeabi_dmul>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	ec43 2b17 	vmov	d7, r2, r3
 80021b2:	eeb0 0a47 	vmov.f32	s0, s14
 80021b6:	eef0 0a67 	vmov.f32	s1, s15
 80021ba:	f00b fd9d 	bl	800dcf8 <cos>
 80021be:	ec53 2b10 	vmov	r2, r3, d0
 80021c2:	4620      	mov	r0, r4
 80021c4:	4629      	mov	r1, r5
 80021c6:	f7fe fa17 	bl	80005f8 <__aeabi_dmul>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4640      	mov	r0, r8
 80021d0:	4649      	mov	r1, r9
 80021d2:	f7fe f85b 	bl	800028c <__adddf3>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	f7fe fd03 	bl	8000be8 <__aeabi_d2f>
 80021e2:	4602      	mov	r2, r0
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
			gpsPitchAdjust = ((float)gpsPitchAdjustNorth * cos(theAngleYaw * 0.017453)) + ((float)gpsRollAdjustNorth * cos((theAngleYaw + 90) * 0.017453));
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f9a9 	bl	8000548 <__aeabi_f2d>
 80021f6:	4604      	mov	r4, r0
 80021f8:	460d      	mov	r5, r1
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fe f9a4 	bl	8000548 <__aeabi_f2d>
 8002200:	a37f      	add	r3, pc, #508	@ (adr r3, 8002400 <_ZN3GPS7ReadGPSEhPhS0_f+0xb48>)
 8002202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002206:	f7fe f9f7 	bl	80005f8 <__aeabi_dmul>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	ec43 2b17 	vmov	d7, r2, r3
 8002212:	eeb0 0a47 	vmov.f32	s0, s14
 8002216:	eef0 0a67 	vmov.f32	s1, s15
 800221a:	f00b fd6d 	bl	800dcf8 <cos>
 800221e:	ec53 2b10 	vmov	r2, r3, d0
 8002222:	4620      	mov	r0, r4
 8002224:	4629      	mov	r1, r5
 8002226:	f7fe f9e7 	bl	80005f8 <__aeabi_dmul>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4690      	mov	r8, r2
 8002230:	4699      	mov	r9, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe f985 	bl	8000548 <__aeabi_f2d>
 800223e:	4604      	mov	r4, r0
 8002240:	460d      	mov	r5, r1
 8002242:	edd7 7a01 	vldr	s15, [r7, #4]
 8002246:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8002408 <_ZN3GPS7ReadGPSEhPhS0_f+0xb50>
 800224a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800224e:	ee17 0a90 	vmov	r0, s15
 8002252:	f7fe f979 	bl	8000548 <__aeabi_f2d>
 8002256:	a36a      	add	r3, pc, #424	@ (adr r3, 8002400 <_ZN3GPS7ReadGPSEhPhS0_f+0xb48>)
 8002258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225c:	f7fe f9cc 	bl	80005f8 <__aeabi_dmul>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	ec43 2b17 	vmov	d7, r2, r3
 8002268:	eeb0 0a47 	vmov.f32	s0, s14
 800226c:	eef0 0a67 	vmov.f32	s1, s15
 8002270:	f00b fd42 	bl	800dcf8 <cos>
 8002274:	ec53 2b10 	vmov	r2, r3, d0
 8002278:	4620      	mov	r0, r4
 800227a:	4629      	mov	r1, r5
 800227c:	f7fe f9bc 	bl	80005f8 <__aeabi_dmul>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4640      	mov	r0, r8
 8002286:	4649      	mov	r1, r9
 8002288:	f7fe f800 	bl	800028c <__adddf3>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	f7fe fca8 	bl	8000be8 <__aeabi_d2f>
 8002298:	4602      	mov	r2, r0
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

			if (gpsRollAdjust > 300) gpsRollAdjust = 300;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	edd3 7a88 	vldr	s15, [r3, #544]	@ 0x220
 80022a6:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800240c <_ZN3GPS7ReadGPSEhPhS0_f+0xb54>
 80022aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b2:	dd03      	ble.n	80022bc <_ZN3GPS7ReadGPSEhPhS0_f+0xa04>
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	4a56      	ldr	r2, [pc, #344]	@ (8002410 <_ZN3GPS7ReadGPSEhPhS0_f+0xb58>)
 80022b8:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
			if (gpsRollAdjust < -300) gpsRollAdjust = -300;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	edd3 7a88 	vldr	s15, [r3, #544]	@ 0x220
 80022c2:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8002414 <_ZN3GPS7ReadGPSEhPhS0_f+0xb5c>
 80022c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ce:	d503      	bpl.n	80022d8 <_ZN3GPS7ReadGPSEhPhS0_f+0xa20>
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	4a51      	ldr	r2, [pc, #324]	@ (8002418 <_ZN3GPS7ReadGPSEhPhS0_f+0xb60>)
 80022d4:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
			if (gpsPitchAdjust > 300) gpsPitchAdjust = 300;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	edd3 7a87 	vldr	s15, [r3, #540]	@ 0x21c
 80022de:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800240c <_ZN3GPS7ReadGPSEhPhS0_f+0xb54>
 80022e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ea:	dd03      	ble.n	80022f4 <_ZN3GPS7ReadGPSEhPhS0_f+0xa3c>
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	4a48      	ldr	r2, [pc, #288]	@ (8002410 <_ZN3GPS7ReadGPSEhPhS0_f+0xb58>)
 80022f0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			if (gpsPitchAdjust < -300) gpsPitchAdjust = -300;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	edd3 7a87 	vldr	s15, [r3, #540]	@ 0x21c
 80022fa:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8002414 <_ZN3GPS7ReadGPSEhPhS0_f+0xb5c>
 80022fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002306:	d503      	bpl.n	8002310 <_ZN3GPS7ReadGPSEhPhS0_f+0xa58>
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	4a43      	ldr	r2, [pc, #268]	@ (8002418 <_ZN3GPS7ReadGPSEhPhS0_f+0xb60>)
 800230c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
		}
	}

	if (gps_watchdogTimer + 1000 < HAL_GetTick()) {
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8002316:	f503 747a 	add.w	r4, r3, #1000	@ 0x3e8
 800231a:	f005 fdd5 	bl	8007ec8 <HAL_GetTick>
 800231e:	4603      	mov	r3, r0
 8002320:	429c      	cmp	r4, r3
 8002322:	bf34      	ite	cc
 8002324:	2301      	movcc	r3, #1
 8002326:	2300      	movcs	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00c      	beq.n	8002348 <_ZN3GPS7ReadGPSEhPhS0_f+0xa90>
		if (*theFlightMode >= 3 && theStateMachine > 0) {
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d908      	bls.n	8002348 <_ZN3GPS7ReadGPSEhPhS0_f+0xa90>
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <_ZN3GPS7ReadGPSEhPhS0_f+0xa90>
			*theFlightMode = 2;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2202      	movs	r2, #2
 8002340:	701a      	strb	r2, [r3, #0]
			*theError = 4;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2204      	movs	r2, #4
 8002346:	701a      	strb	r2, [r3, #0]
		}
	}

	if (*theFlightMode < 3 && waypointSet > 0) {
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d852      	bhi.n	80023f6 <_ZN3GPS7ReadGPSEhPhS0_f+0xb3e>
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8002356:	2b00      	cmp	r3, #0
 8002358:	d04d      	beq.n	80023f6 <_ZN3GPS7ReadGPSEhPhS0_f+0xb3e>
		gpsRollAdjust = 0;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
		gpsPitchAdjust = 0;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
		if (waypointSet == 1) {
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8002374:	2b01      	cmp	r3, #1
 8002376:	d107      	bne.n	8002388 <_ZN3GPS7ReadGPSEhPhS0_f+0xad0>
			gps_rotatingMemLocation = 0;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
			waypointSet = 2;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		}
		gps_lonRotatingMem[ gps_rotatingMemLocation] = 0;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800238e:	461a      	mov	r2, r3
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3256      	adds	r2, #86	@ 0x56
 8002394:	2100      	movs	r1, #0
 8002396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		gps_latRotatingMem[ gps_rotatingMemLocation] = 0;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 80023a0:	461a      	mov	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	322e      	adds	r2, #46	@ 0x2e
 80023a6:	2100      	movs	r1, #0
 80023a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		gps_rotatingMemLocation++;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 80023b2:	3301      	adds	r3, #1
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		if (gps_rotatingMemLocation == 36) {
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 80023c2:	2b24      	cmp	r3, #36	@ 0x24
 80023c4:	d117      	bne.n	80023f6 <_ZN3GPS7ReadGPSEhPhS0_f+0xb3e>
			waypointSet = 0;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			gps_latErrorPrevious = 0;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			gps_lonErrorPrevious = 0;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2200      	movs	r2, #0
 80023da:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
			gps_latTotalAvarage = 0;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
			gps_lonTotalAvarage = 0;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
			gps_rotatingMemLocation = 0;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		}
	}

}
 80023f6:	bf00      	nop
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002400:	00de4c51 	.word	0x00de4c51
 8002404:	3f91df33 	.word	0x3f91df33
 8002408:	42b40000 	.word	0x42b40000
 800240c:	43960000 	.word	0x43960000
 8002410:	43960000 	.word	0x43960000
 8002414:	c3960000 	.word	0xc3960000
 8002418:	c3960000 	.word	0xc3960000

0800241c <USART1_IRQHandler>:
}

extern "C"
{
void USART1_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	Serial1.UartIsr();
 8002420:	4803      	ldr	r0, [pc, #12]	@ (8002430 <USART1_IRQHandler+0x14>)
 8002422:	f001 ff53 	bl	80042cc <_ZN8MySerial7UartIsrEv>
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8002426:	4803      	ldr	r0, [pc, #12]	@ (8002434 <USART1_IRQHandler+0x18>)
 8002428:	f00a fc88 	bl	800cd3c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000240 	.word	0x20000240
 8002434:	200005f4 	.word	0x200005f4

08002438 <_Z41__static_initialization_and_destruction_0v>:
}
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
MySerial Serial1(&huart1);
 800243c:	4902      	ldr	r1, [pc, #8]	@ (8002448 <_Z41__static_initialization_and_destruction_0v+0x10>)
 800243e:	4803      	ldr	r0, [pc, #12]	@ (800244c <_Z41__static_initialization_and_destruction_0v+0x14>)
 8002440:	f001 fe84 	bl	800414c <_ZN8MySerialC1EP20__UART_HandleTypeDef>
}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}
 8002448:	200005f4 	.word	0x200005f4
 800244c:	20000240 	.word	0x20000240

08002450 <_GLOBAL__sub_I_Serial1>:
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
 8002454:	f7ff fff0 	bl	8002438 <_Z41__static_initialization_and_destruction_0v>
 8002458:	bd80      	pop	{r7, pc}

0800245a <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	ed87 0a01 	vstr	s0, [r7, #4]
 8002464:	ed97 0a01 	vldr	s0, [r7, #4]
 8002468:	f00b fcee 	bl	800de48 <asinf>
 800246c:	eef0 7a40 	vmov.f32	s15, s0
 8002470:	eeb0 0a67 	vmov.f32	s0, s15
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	ed87 0a01 	vstr	s0, [r7, #4]
 8002484:	edc7 0a00 	vstr	s1, [r7]
 8002488:	edd7 0a00 	vldr	s1, [r7]
 800248c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002490:	f00b fd06 	bl	800dea0 <atan2f>
 8002494:	eef0 7a40 	vmov.f32	s15, s0
 8002498:	eeb0 0a67 	vmov.f32	s0, s15
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80024ac:	4b0f      	ldr	r3, [pc, #60]	@ (80024ec <DWT_Delay_us+0x48>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80024b2:	f008 fed5 	bl	800b260 <HAL_RCC_GetHCLKFreq>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4a0d      	ldr	r2, [pc, #52]	@ (80024f0 <DWT_Delay_us+0x4c>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	0c9b      	lsrs	r3, r3, #18
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80024c8:	bf00      	nop
 80024ca:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <DWT_Delay_us+0x48>)
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad2      	subs	r2, r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	bf34      	ite	cc
 80024d8:	2301      	movcc	r3, #1
 80024da:	2300      	movcs	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f3      	bne.n	80024ca <DWT_Delay_us+0x26>
}
 80024e2:	bf00      	nop
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	e0001000 	.word	0xe0001000
 80024f0:	431bde83 	.word	0x431bde83

080024f4 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv>:
 * Long-term averaging (50 mẫu short-term) → lấy nền ổn định (gravity).
 * Integration → ước lượng vận tốc / độ cao.
 * Drift correction → tránh sai số tích phân khi đứng yên.
 */
void IMU9DOF::VerticalAccelerationCalculations()  //Tính toán gia tốc theo phương dọc
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	indexShortAverageRotatingMem++;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002502:	3301      	adds	r3, #1
 8002504:	b2da      	uxtb	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	if (indexShortAverageRotatingMem == 25)indexShortAverageRotatingMem = 0;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002512:	2b19      	cmp	r3, #25
 8002514:	d103      	bne.n	800251e <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x2a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

	shortTotalAccel_Z -= shortAverageAccel_Z[indexShortAverageRotatingMem];
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	3338      	adds	r3, #56	@ 0x38
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	440b      	add	r3, r1
 8002532:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002536:	1ad2      	subs	r2, r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	shortAverageAccel_Z[indexShortAverageRotatingMem] = accelTotalVector;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800254a:	b211      	sxth	r1, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	3338      	adds	r3, #56	@ 0x38
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	460a      	mov	r2, r1
 8002556:	80da      	strh	r2, [r3, #6]
	shortTotalAccel_Z += shortAverageAccel_Z[indexShortAverageRotatingMem];
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	3338      	adds	r3, #56	@ 0x38
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	440b      	add	r3, r1
 800256c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002570:	441a      	add	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

	if (indexShortAverageRotatingMem == 0) {
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800257e:	2b00      	cmp	r3, #0
 8002580:	d140      	bne.n	8002604 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x110>
		indexLongAverageRotatingMem++;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8002588:	3301      	adds	r3, #1
 800258a:	b2da      	uxtb	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75

		if (indexLongAverageRotatingMem == 50)indexLongAverageRotatingMem = 0;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8002598:	2b32      	cmp	r3, #50	@ 0x32
 800259a:	d103      	bne.n	80025a4 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0xb0>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75

		longTotalAccel_Z -= longAverageAccel_Z[indexLongAverageRotatingMem];
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	f892 2075 	ldrb.w	r2, [r2, #117]	@ 0x75
 80025b0:	4611      	mov	r1, r2
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	3154      	adds	r1, #84	@ 0x54
 80025b6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80025ba:	1a9a      	subs	r2, r3, r2
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
		longAverageAccel_Z[indexLongAverageRotatingMem] = shortTotalAccel_Z / 25;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80025c8:	4a46      	ldr	r2, [pc, #280]	@ (80026e4 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1f0>)
 80025ca:	fb82 1203 	smull	r1, r2, r2, r3
 80025ce:	10d2      	asrs	r2, r2, #3
 80025d0:	17db      	asrs	r3, r3, #31
 80025d2:	1ad1      	subs	r1, r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80025da:	461a      	mov	r2, r3
 80025dc:	b209      	sxth	r1, r1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3254      	adds	r2, #84	@ 0x54
 80025e2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		longTotalAccel_Z += longAverageAccel_Z[indexLongAverageRotatingMem];
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	f892 2075 	ldrb.w	r2, [r2, #117]	@ 0x75
 80025f2:	4611      	mov	r1, r2
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	3154      	adds	r1, #84	@ 0x54
 80025f8:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80025fc:	441a      	add	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
	}
	accelAverageTotal = longTotalAccel_Z / 50;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800260a:	4a36      	ldr	r2, [pc, #216]	@ (80026e4 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1f0>)
 800260c:	fb82 1203 	smull	r1, r2, r2, r3
 8002610:	1112      	asrs	r2, r2, #4
 8002612:	17db      	asrs	r3, r3, #31
 8002614:	1ad2      	subs	r2, r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114


	accelAltIntegrated += accelTotalVector - accelAverageTotal;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800262e:	1acb      	subs	r3, r1, r3
 8002630:	441a      	add	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
	if (accelTotalVector - accelAverageTotal < 400 || accelTotalVector - accelAverageTotal > 400) {
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800264a:	db09      	blt.n	8002660 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x16c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800265e:	dd3b      	ble.n	80026d8 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1e4>
		if (shortTotalAccel_Z / 25 - accelAverageTotal < 500 && shortTotalAccel_Z / 25 - accelAverageTotal > -500)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002666:	4a1f      	ldr	r2, [pc, #124]	@ (80026e4 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1f0>)
 8002668:	fb82 1203 	smull	r1, r2, r2, r3
 800266c:	10d2      	asrs	r2, r2, #3
 800266e:	17db      	asrs	r3, r3, #31
 8002670:	1ad2      	subs	r2, r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800267e:	da2b      	bge.n	80026d8 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1e4>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002686:	4a17      	ldr	r2, [pc, #92]	@ (80026e4 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1f0>)
 8002688:	fb82 1203 	smull	r1, r2, r2, r3
 800268c:	10d2      	asrs	r2, r2, #3
 800268e:	17db      	asrs	r3, r3, #31
 8002690:	1ad2      	subs	r2, r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 800269e:	dd1b      	ble.n	80026d8 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1e4>
		{
			if (accelAltIntegrated > 200)accelAltIntegrated -= 200;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80026a6:	2bc8      	cmp	r3, #200	@ 0xc8
 80026a8:	dd08      	ble.n	80026bc <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1c8>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80026b0:	f1a3 02c8 	sub.w	r2, r3, #200	@ 0xc8
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
			else if (accelAltIntegrated < -200)accelAltIntegrated += 200;
		}
	}
}
 80026ba:	e00d      	b.n	80026d8 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1e4>
			else if (accelAltIntegrated < -200)accelAltIntegrated += 200;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80026c2:	f113 0fc8 	cmn.w	r3, #200	@ 0xc8
 80026c6:	da07      	bge.n	80026d8 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1e4>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80026ce:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	51eb851f 	.word	0x51eb851f

080026e8 <_ZN7IMU9DOFC1EP17I2C_HandleTypeDefhm>:
/*
 * Hàm constructor class IMU9OF
 */
IMU9DOF::IMU9DOF(I2C_HandleTypeDef * theI2c, uint8_t theSector, uint32_t theAddrs)
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	4613      	mov	r3, r2
 80026f6:	71fb      	strb	r3, [r7, #7]
{
	this->hi2c = theI2c;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	669a      	str	r2, [r3, #104]	@ 0x68
	this->sectorFlash = theSector;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	79fa      	ldrb	r2, [r7, #7]
 8002702:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
	this->addrsFlash = theAddrs;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
}
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	0000      	movs	r0, r0
	...

08002720 <_ZN7IMU9DOF11ReadCompassEv>:

/*
 * tính heading (góc phương vị) từ cảm biến HMC5883L và có tính đến hiệu chỉnh roll/pitch của MPU6050.
 */
IMU9DOF_Result IMU9DOF::ReadCompass()
{
 8002720:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
	magn.y *= -1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002730:	b29b      	uxth	r3, r3
 8002732:	425b      	negs	r3, r3
 8002734:	b29b      	uxth	r3, r3
 8002736:	b21a      	sxth	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	83da      	strh	r2, [r3, #30]
	magn.x *= -1;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002742:	b29b      	uxth	r3, r3
 8002744:	425b      	negs	r3, r3
 8002746:	b29b      	uxth	r3, r3
 8002748:	b21a      	sxth	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	839a      	strh	r2, [r3, #28]

	// calib lại giá trị thô vừa đọc để sử dụng tính toán heading lúc khởi động
	if (isAlreadyCalibCompass == 0)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8002754:	2b00      	cmp	r3, #0
 8002756:	d14c      	bne.n	80027f2 <_ZN7IMU9DOF11ReadCompassEv+0xd2>
	{
		magn.y += compassOffset_Y;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800275e:	b29a      	uxth	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f9b3 313a 	ldrsh.w	r3, [r3, #314]	@ 0x13a
 8002766:	b29b      	uxth	r3, r3
 8002768:	4413      	add	r3, r2
 800276a:	b29b      	uxth	r3, r3
 800276c:	b21a      	sxth	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	83da      	strh	r2, [r3, #30]
		magn.y = (int16_t) ((float)(magn.y) *compassScaleY);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002778:	ee07 3a90 	vmov	s15, r3
 800277c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 8002786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800278e:	ee17 3a90 	vmov	r3, s15
 8002792:	b21a      	sxth	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	83da      	strh	r2, [r3, #30]
		magn.z += compassOffset_Z;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f9b3 313c 	ldrsh.w	r3, [r3, #316]	@ 0x13c
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	b21a      	sxth	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	841a      	strh	r2, [r3, #32]
		magn.z = (int16_t) ((float)(magn.z) *compassScaleZ);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80027b8:	ee07 3a90 	vmov	s15, r3
 80027bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	edd3 7a51 	vldr	s15, [r3, #324]	@ 0x144
 80027c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ce:	ee17 3a90 	vmov	r3, s15
 80027d2:	b21a      	sxth	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	841a      	strh	r2, [r3, #32]
		magn.x += compassOffset_X;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80027de:	b29a      	uxth	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f9b3 3138 	ldrsh.w	r3, [r3, #312]	@ 0x138
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	b21a      	sxth	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	839a      	strh	r2, [r3, #28]
	/*
	 * Giá trị compass sẽ thay đổi khi góc roll và pitch thay đổi.
	 * Do đó các giá trị compass x&y cần được hiệu chỉnh lại theo
	 * các góc roll và pitch để đạt được vị trí phương ngang ảo.
	 */
	compassHorizontal_X = (float)magn.x * cos(anglePitch * -0.0174533) + (float)magn.y * sin(angleRoll * 0.0174533) * sin(anglePitch * -0.0174533) - (float)magn.z * cos(angleRoll * 0.0174533) * sin(anglePitch * -0.0174533);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80027f8:	ee07 3a90 	vmov	s15, r3
 80027fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002800:	ee17 0a90 	vmov	r0, s15
 8002804:	f7fd fea0 	bl	8000548 <__aeabi_f2d>
 8002808:	4604      	mov	r4, r0
 800280a:	460d      	mov	r5, r1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd fe99 	bl	8000548 <__aeabi_f2d>
 8002816:	a3dc      	add	r3, pc, #880	@ (adr r3, 8002b88 <_ZN7IMU9DOF11ReadCompassEv+0x468>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f7fd feec 	bl	80005f8 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	ec43 2b17 	vmov	d7, r2, r3
 8002828:	eeb0 0a47 	vmov.f32	s0, s14
 800282c:	eef0 0a67 	vmov.f32	s1, s15
 8002830:	f00b fa62 	bl	800dcf8 <cos>
 8002834:	ec53 2b10 	vmov	r2, r3, d0
 8002838:	4620      	mov	r0, r4
 800283a:	4629      	mov	r1, r5
 800283c:	f7fd fedc 	bl	80005f8 <__aeabi_dmul>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4690      	mov	r8, r2
 8002846:	4699      	mov	r9, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800284e:	ee07 3a90 	vmov	s15, r3
 8002852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002856:	ee17 0a90 	vmov	r0, s15
 800285a:	f7fd fe75 	bl	8000548 <__aeabi_f2d>
 800285e:	4604      	mov	r4, r0
 8002860:	460d      	mov	r5, r1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd fe6e 	bl	8000548 <__aeabi_f2d>
 800286c:	a3c8      	add	r3, pc, #800	@ (adr r3, 8002b90 <_ZN7IMU9DOF11ReadCompassEv+0x470>)
 800286e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002872:	f7fd fec1 	bl	80005f8 <__aeabi_dmul>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	ec43 2b17 	vmov	d7, r2, r3
 800287e:	eeb0 0a47 	vmov.f32	s0, s14
 8002882:	eef0 0a67 	vmov.f32	s1, s15
 8002886:	f00b fa8b 	bl	800dda0 <sin>
 800288a:	ec53 2b10 	vmov	r2, r3, d0
 800288e:	4620      	mov	r0, r4
 8002890:	4629      	mov	r1, r5
 8002892:	f7fd feb1 	bl	80005f8 <__aeabi_dmul>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4614      	mov	r4, r2
 800289c:	461d      	mov	r5, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fd fe50 	bl	8000548 <__aeabi_f2d>
 80028a8:	a3b7      	add	r3, pc, #732	@ (adr r3, 8002b88 <_ZN7IMU9DOF11ReadCompassEv+0x468>)
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	f7fd fea3 	bl	80005f8 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	ec43 2b17 	vmov	d7, r2, r3
 80028ba:	eeb0 0a47 	vmov.f32	s0, s14
 80028be:	eef0 0a67 	vmov.f32	s1, s15
 80028c2:	f00b fa6d 	bl	800dda0 <sin>
 80028c6:	ec53 2b10 	vmov	r2, r3, d0
 80028ca:	4620      	mov	r0, r4
 80028cc:	4629      	mov	r1, r5
 80028ce:	f7fd fe93 	bl	80005f8 <__aeabi_dmul>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4640      	mov	r0, r8
 80028d8:	4649      	mov	r1, r9
 80028da:	f7fd fcd7 	bl	800028c <__adddf3>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4690      	mov	r8, r2
 80028e4:	4699      	mov	r9, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80028ec:	ee07 3a90 	vmov	s15, r3
 80028f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f4:	ee17 0a90 	vmov	r0, s15
 80028f8:	f7fd fe26 	bl	8000548 <__aeabi_f2d>
 80028fc:	4604      	mov	r4, r0
 80028fe:	460d      	mov	r5, r1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd fe1f 	bl	8000548 <__aeabi_f2d>
 800290a:	a3a1      	add	r3, pc, #644	@ (adr r3, 8002b90 <_ZN7IMU9DOF11ReadCompassEv+0x470>)
 800290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002910:	f7fd fe72 	bl	80005f8 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	ec43 2b17 	vmov	d7, r2, r3
 800291c:	eeb0 0a47 	vmov.f32	s0, s14
 8002920:	eef0 0a67 	vmov.f32	s1, s15
 8002924:	f00b f9e8 	bl	800dcf8 <cos>
 8002928:	ec53 2b10 	vmov	r2, r3, d0
 800292c:	4620      	mov	r0, r4
 800292e:	4629      	mov	r1, r5
 8002930:	f7fd fe62 	bl	80005f8 <__aeabi_dmul>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4614      	mov	r4, r2
 800293a:	461d      	mov	r5, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd fe01 	bl	8000548 <__aeabi_f2d>
 8002946:	a392      	add	r3, pc, #584	@ (adr r3, 8002b90 <_ZN7IMU9DOF11ReadCompassEv+0x470>)
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	f7fd fe54 	bl	80005f8 <__aeabi_dmul>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	ec43 2b17 	vmov	d7, r2, r3
 8002958:	eeb0 0a47 	vmov.f32	s0, s14
 800295c:	eef0 0a67 	vmov.f32	s1, s15
 8002960:	f00b fa1e 	bl	800dda0 <sin>
 8002964:	ec53 2b10 	vmov	r2, r3, d0
 8002968:	4620      	mov	r0, r4
 800296a:	4629      	mov	r1, r5
 800296c:	f7fd fe44 	bl	80005f8 <__aeabi_dmul>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4640      	mov	r0, r8
 8002976:	4649      	mov	r1, r9
 8002978:	f7fd fc88 	bl	800028c <__adddf3>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	f7fe f930 	bl	8000be8 <__aeabi_d2f>
 8002988:	4602      	mov	r2, r0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	609a      	str	r2, [r3, #8]
	compassHorizontal_Y = (float)magn.y * cos(angleRoll * 0.0174533) + (float)magn.z * sin(angleRoll * 0.0174533);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002994:	ee07 3a90 	vmov	s15, r3
 8002998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800299c:	ee17 0a90 	vmov	r0, s15
 80029a0:	f7fd fdd2 	bl	8000548 <__aeabi_f2d>
 80029a4:	4604      	mov	r4, r0
 80029a6:	460d      	mov	r5, r1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fd fdcb 	bl	8000548 <__aeabi_f2d>
 80029b2:	a377      	add	r3, pc, #476	@ (adr r3, 8002b90 <_ZN7IMU9DOF11ReadCompassEv+0x470>)
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	f7fd fe1e 	bl	80005f8 <__aeabi_dmul>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	ec43 2b17 	vmov	d7, r2, r3
 80029c4:	eeb0 0a47 	vmov.f32	s0, s14
 80029c8:	eef0 0a67 	vmov.f32	s1, s15
 80029cc:	f00b f994 	bl	800dcf8 <cos>
 80029d0:	ec53 2b10 	vmov	r2, r3, d0
 80029d4:	4620      	mov	r0, r4
 80029d6:	4629      	mov	r1, r5
 80029d8:	f7fd fe0e 	bl	80005f8 <__aeabi_dmul>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4690      	mov	r8, r2
 80029e2:	4699      	mov	r9, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80029ea:	ee07 3a90 	vmov	s15, r3
 80029ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029f2:	ee17 0a90 	vmov	r0, s15
 80029f6:	f7fd fda7 	bl	8000548 <__aeabi_f2d>
 80029fa:	4604      	mov	r4, r0
 80029fc:	460d      	mov	r5, r1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fd fda0 	bl	8000548 <__aeabi_f2d>
 8002a08:	a361      	add	r3, pc, #388	@ (adr r3, 8002b90 <_ZN7IMU9DOF11ReadCompassEv+0x470>)
 8002a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0e:	f7fd fdf3 	bl	80005f8 <__aeabi_dmul>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	ec43 2b17 	vmov	d7, r2, r3
 8002a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a1e:	eef0 0a67 	vmov.f32	s1, s15
 8002a22:	f00b f9bd 	bl	800dda0 <sin>
 8002a26:	ec53 2b10 	vmov	r2, r3, d0
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	4629      	mov	r1, r5
 8002a2e:	f7fd fde3 	bl	80005f8 <__aeabi_dmul>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4640      	mov	r0, r8
 8002a38:	4649      	mov	r1, r9
 8002a3a:	f7fd fc27 	bl	800028c <__adddf3>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4610      	mov	r0, r2
 8002a44:	4619      	mov	r1, r3
 8002a46:	f7fe f8cf 	bl	8000be8 <__aeabi_d2f>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	60da      	str	r2, [r3, #12]
	//Now that the horizontal values are known the heading can be calculated. With the following lines of code the heading is calculated in degrees.
	//Please note that the atan2 uses radians in stead of degrees. That is why the 180/3.14 is used.
	if (compassHorizontal_Y < 0)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5e:	d531      	bpl.n	8002ac4 <_ZN7IMU9DOF11ReadCompassEv+0x3a4>
	{
		actualCompassHeading = 180 + (180 + ((atan2(compassHorizontal_Y, compassHorizontal_X)) * (180 / 3.14)));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a6c:	eef0 0a47 	vmov.f32	s1, s14
 8002a70:	eeb0 0a67 	vmov.f32	s0, s15
 8002a74:	f7ff fd01 	bl	800247a <_ZSt5atan2ff>
 8002a78:	ee10 3a10 	vmov	r3, s0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fd63 	bl	8000548 <__aeabi_f2d>
 8002a82:	a33d      	add	r3, pc, #244	@ (adr r3, 8002b78 <_ZN7IMU9DOF11ReadCompassEv+0x458>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f7fd fdb6 	bl	80005f8 <__aeabi_dmul>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	4b39      	ldr	r3, [pc, #228]	@ (8002b80 <_ZN7IMU9DOF11ReadCompassEv+0x460>)
 8002a9a:	f7fd fbf7 	bl	800028c <__adddf3>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	4b35      	ldr	r3, [pc, #212]	@ (8002b80 <_ZN7IMU9DOF11ReadCompassEv+0x460>)
 8002aac:	f7fd fbee 	bl	800028c <__adddf3>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7fe f896 	bl	8000be8 <__aeabi_d2f>
 8002abc:	4602      	mov	r2, r0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	611a      	str	r2, [r3, #16]
 8002ac2:	e01e      	b.n	8002b02 <_ZN7IMU9DOF11ReadCompassEv+0x3e2>
	}
	else
	{
		actualCompassHeading = (atan2(compassHorizontal_Y, compassHorizontal_X)) * (180 / 3.14);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ad0:	eef0 0a47 	vmov.f32	s1, s14
 8002ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ad8:	f7ff fccf 	bl	800247a <_ZSt5atan2ff>
 8002adc:	ee10 3a10 	vmov	r3, s0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fd31 	bl	8000548 <__aeabi_f2d>
 8002ae6:	a324      	add	r3, pc, #144	@ (adr r3, 8002b78 <_ZN7IMU9DOF11ReadCompassEv+0x458>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd fd84 	bl	80005f8 <__aeabi_dmul>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f7fe f876 	bl	8000be8 <__aeabi_d2f>
 8002afc:	4602      	mov	r2, r0
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	611a      	str	r2, [r3, #16]
	}

	actualCompassHeading += declination;                                 //Add the declination to the magnetic compass heading to get the geographic north.
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	ed93 7a04 	vldr	s14, [r3, #16]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	edc3 7a04 	vstr	s15, [r3, #16]
	if (actualCompassHeading < 0) actualCompassHeading += 360;         //If the compass heading becomes smaller then 0, 360 is added to keep it in the 0 till 360 degrees range.
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b26:	d50a      	bpl.n	8002b3e <_ZN7IMU9DOF11ReadCompassEv+0x41e>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b2e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002b84 <_ZN7IMU9DOF11ReadCompassEv+0x464>
 8002b32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	edc3 7a04 	vstr	s15, [r3, #16]
 8002b3c:	e013      	b.n	8002b66 <_ZN7IMU9DOF11ReadCompassEv+0x446>
	else if (actualCompassHeading >= 360) actualCompassHeading -= 360; //If the compass heading becomes larger then 360, 360 is subtracted to keep it in the 0 till 360 degrees range.
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b44:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002b84 <_ZN7IMU9DOF11ReadCompassEv+0x464>
 8002b48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b50:	db09      	blt.n	8002b66 <_ZN7IMU9DOF11ReadCompassEv+0x446>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b58:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002b84 <_ZN7IMU9DOF11ReadCompassEv+0x464>
 8002b5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	edc3 7a04 	vstr	s15, [r3, #16]

	return IMU9DOF_Result_Ok;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b72:	bf00      	nop
 8002b74:	f3af 8000 	nop.w
 8002b78:	61d59ae7 	.word	0x61d59ae7
 8002b7c:	404ca994 	.word	0x404ca994
 8002b80:	40668000 	.word	0x40668000
 8002b84:	43b40000 	.word	0x43b40000
 8002b88:	22d4405f 	.word	0x22d4405f
 8002b8c:	bf91df47 	.word	0xbf91df47
 8002b90:	22d4405f 	.word	0x22d4405f
 8002b94:	3f91df47 	.word	0x3f91df47

08002b98 <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev>:

/*
 * Kiểm tra Init GY-86 - MPU6050
 */
IMU9DOF_Result IMU9DOF::IsReadyToInterfaceMPU6050()
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af04      	add	r7, sp, #16
 8002b9e:	6078      	str	r0, [r7, #4]
	uint8_t data;	// value to wakeup MPU6050

	/**** Kiểm tra giao tiếp I2C của MPU6050 *****/
	if (HAL_I2C_IsDeviceReady(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, 2, 5) != HAL_OK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8002ba4:	2305      	movs	r3, #5
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	21d0      	movs	r1, #208	@ 0xd0
 8002baa:	f007 f903 	bl	8009db4 <HAL_I2C_IsDeviceReady>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev+0x2a>
	{
		return IMU9DFO_Result_MPU6050_NotConnected;
 8002bbe:	2304      	movs	r3, #4
 8002bc0:	e03a      	b.n	8002c38 <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev+0xa0>
	}

	/* Check who am I */
	if (HAL_I2C_Mem_Read(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &data, 1, 500) != HAL_OK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8002bc6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002bca:	9302      	str	r3, [sp, #8]
 8002bcc:	2301      	movs	r3, #1
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	f107 030f 	add.w	r3, r7, #15
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	2275      	movs	r2, #117	@ 0x75
 8002bda:	21d0      	movs	r1, #208	@ 0xd0
 8002bdc:	f006 feb8 	bl	8009950 <HAL_I2C_Mem_Read>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	bf14      	ite	ne
 8002be6:	2301      	movne	r3, #1
 8002be8:	2300      	moveq	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev+0x60>
	{
		return IMU9DFO_Result_MPU6050_NotConnected;
 8002bf0:	2304      	movs	r3, #4
 8002bf2:	e021      	b.n	8002c38 <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev+0xa0>

	/* Checking */
	while(data != MPU6050_I_AM)
	{
		/* Return error */
		return IMU9DFO_Result_MPU6050_NotConnected;
 8002bf4:	2304      	movs	r3, #4
 8002bf6:	e01f      	b.n	8002c38 <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev+0xa0>
	while(data != MPU6050_I_AM)
 8002bf8:	bf00      	nop
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b68      	cmp	r3, #104	@ 0x68
 8002bfe:	d1f9      	bne.n	8002bf4 <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev+0x5c>
	}

	data = 0x00;
 8002c00:	2300      	movs	r3, #0
 8002c02:	73fb      	strb	r3, [r7, #15]
	/* Wakeup MPU6050 */
	if (HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &data, 1, 500) != HAL_OK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8002c08:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002c0c:	9302      	str	r3, [sp, #8]
 8002c0e:	2301      	movs	r3, #1
 8002c10:	9301      	str	r3, [sp, #4]
 8002c12:	f107 030f 	add.w	r3, r7, #15
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2301      	movs	r3, #1
 8002c1a:	226b      	movs	r2, #107	@ 0x6b
 8002c1c:	21d0      	movs	r1, #208	@ 0xd0
 8002c1e:	f006 fd9d 	bl	800975c <HAL_I2C_Mem_Write>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf14      	ite	ne
 8002c28:	2301      	movne	r3, #1
 8002c2a:	2300      	moveq	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev+0x9e>
	{
		return IMU9DFO_Result_MPU6050_NotConnected;
 8002c32:	2304      	movs	r3, #4
 8002c34:	e000      	b.n	8002c38 <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev+0xa0>
	}

	return IMU9DOF_Result_Ok;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <_ZN7IMU9DOF26IsReadyToInterfaceHMC5883LEv>:

/*
 * Kiểm tra Init GY-86 - HMC5883L
 */
IMU9DOF_Result IMU9DOF::IsReadyToInterfaceHMC5883L()
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af04      	add	r7, sp, #16
 8002c46:	6078      	str	r0, [r7, #4]

	// Tắt chế độ I2C master mode
	uint8_t data = 0x00;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_USER_CTRL, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8002c50:	2332      	movs	r3, #50	@ 0x32
 8002c52:	9302      	str	r3, [sp, #8]
 8002c54:	2301      	movs	r3, #1
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	f107 030f 	add.w	r3, r7, #15
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	2301      	movs	r3, #1
 8002c60:	226a      	movs	r2, #106	@ 0x6a
 8002c62:	21d0      	movs	r1, #208	@ 0xd0
 8002c64:	f006 fd7a 	bl	800975c <HAL_I2C_Mem_Write>

	// Bật chế độ I2C master bypass mode
	data = 0x02;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_INT_PIN_CFG, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8002c70:	2332      	movs	r3, #50	@ 0x32
 8002c72:	9302      	str	r3, [sp, #8]
 8002c74:	2301      	movs	r3, #1
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	f107 030f 	add.w	r3, r7, #15
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	2301      	movs	r3, #1
 8002c80:	2237      	movs	r2, #55	@ 0x37
 8002c82:	21d0      	movs	r1, #208	@ 0xd0
 8002c84:	f006 fd6a 	bl	800975c <HAL_I2C_Mem_Write>

	/**** Kiểm tra giao tiếp I2C của HMC5883L *****/
	if (HAL_I2C_IsDeviceReady(this->hi2c, (uint16_t)HMC5883L_ADDRESS, 2, 5) != HAL_OK)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8002c8c:	2305      	movs	r3, #5
 8002c8e:	2202      	movs	r2, #2
 8002c90:	213c      	movs	r1, #60	@ 0x3c
 8002c92:	f007 f88f 	bl	8009db4 <HAL_I2C_IsDeviceReady>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf14      	ite	ne
 8002c9c:	2301      	movne	r3, #1
 8002c9e:	2300      	moveq	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <_ZN7IMU9DOF26IsReadyToInterfaceHMC5883LEv+0x6a>
	{
		return IMU9DFO_Result_HMC5883L_NotConnected;
 8002ca6:	2305      	movs	r3, #5
 8002ca8:	e020      	b.n	8002cec <_ZN7IMU9DOF26IsReadyToInterfaceHMC5883LEv+0xac>
	}

	// Tắt chế độ I2C master bypass mode
	data = 0x00;
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_INT_PIN_CFG, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8002cb2:	2332      	movs	r3, #50	@ 0x32
 8002cb4:	9302      	str	r3, [sp, #8]
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	9301      	str	r3, [sp, #4]
 8002cba:	f107 030f 	add.w	r3, r7, #15
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	2237      	movs	r2, #55	@ 0x37
 8002cc4:	21d0      	movs	r1, #208	@ 0xd0
 8002cc6:	f006 fd49 	bl	800975c <HAL_I2C_Mem_Write>

	// Bật chế độ I2C master mode
	data = 0x20;
 8002cca:	2320      	movs	r3, #32
 8002ccc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_USER_CTRL, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8002cd2:	2332      	movs	r3, #50	@ 0x32
 8002cd4:	9302      	str	r3, [sp, #8]
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	f107 030f 	add.w	r3, r7, #15
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	226a      	movs	r2, #106	@ 0x6a
 8002ce4:	21d0      	movs	r1, #208	@ 0xd0
 8002ce6:	f006 fd39 	bl	800975c <HAL_I2C_Mem_Write>

	return IMU9DOF_Result_Ok;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <_ZN7IMU9DOF19ReadRawAllParameterEv>:
/*
 * Hàm đọc giá trị MPU6050 và la bàn
 * Có vấn đề, có thể sai ở đây
 */
IMU9DOF_Result IMU9DOF::ReadRawAllParameter()   // đọc các giá trị thô
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08c      	sub	sp, #48	@ 0x30
 8002cf8:	af04      	add	r7, sp, #16
 8002cfa:	6078      	str	r0, [r7, #4]
	uint8_t data[20];

	if (HAL_I2C_Mem_Read(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, data, 20, 500) != HAL_OK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8002d00:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002d04:	9302      	str	r3, [sp, #8]
 8002d06:	2314      	movs	r3, #20
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	f107 030c 	add.w	r3, r7, #12
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	2301      	movs	r3, #1
 8002d12:	223b      	movs	r2, #59	@ 0x3b
 8002d14:	21d0      	movs	r1, #208	@ 0xd0
 8002d16:	f006 fe1b 	bl	8009950 <HAL_I2C_Mem_Read>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <_ZN7IMU9DOF19ReadRawAllParameterEv+0x3a>
	{
		return IMU9DOF_Result_Error;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e06d      	b.n	8002e0a <_ZN7IMU9DOF19ReadRawAllParameterEv+0x116>
	}

	/* Format accelerometer data */
	// -139, -640 la gia tri offset theo cac phuong x, y do viec dat cam bien MPU6050 khong nam thang bang
	this->accel.y = (int16_t)(data[0] << 8 | data[1]) - 139 ;
 8002d2e:	7b3b      	ldrb	r3, [r7, #12]
 8002d30:	b21b      	sxth	r3, r3
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	b21a      	sxth	r2, r3
 8002d36:	7b7b      	ldrb	r3, [r7, #13]
 8002d38:	b21b      	sxth	r3, r3
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	b21b      	sxth	r3, r3
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b8b      	subs	r3, #139	@ 0x8b
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	b21a      	sxth	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
	this->accel.x = (int16_t)(data[2] << 8 | data[3]) - 640;
 8002d4a:	7bbb      	ldrb	r3, [r7, #14]
 8002d4c:	b21b      	sxth	r3, r3
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	b21a      	sxth	r2, r3
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	b21b      	sxth	r3, r3
 8002d56:	4313      	orrs	r3, r2
 8002d58:	b21b      	sxth	r3, r3
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	b21a      	sxth	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	851a      	strh	r2, [r3, #40]	@ 0x28
	this->accel.z = (int16_t)(data[4] << 8 | data[5]);
 8002d68:	7c3b      	ldrb	r3, [r7, #16]
 8002d6a:	b21b      	sxth	r3, r3
 8002d6c:	021b      	lsls	r3, r3, #8
 8002d6e:	b21a      	sxth	r2, r3
 8002d70:	7c7b      	ldrb	r3, [r7, #17]
 8002d72:	b21b      	sxth	r3, r3
 8002d74:	4313      	orrs	r3, r2
 8002d76:	b21a      	sxth	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	859a      	strh	r2, [r3, #44]	@ 0x2c

		/* Format temperature */
	this->temp = (data[6] << 8 | data[7]);
 8002d7c:	7cbb      	ldrb	r3, [r7, #18]
 8002d7e:	b21b      	sxth	r3, r3
 8002d80:	021b      	lsls	r3, r3, #8
 8002d82:	b21a      	sxth	r2, r3
 8002d84:	7cfb      	ldrb	r3, [r7, #19]
 8002d86:	b21b      	sxth	r3, r3
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	b21a      	sxth	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	831a      	strh	r2, [r3, #24]

	/* Format gyroscope data */
	this->gyro.x = (int16_t)(data[8] << 8 | data[9]);
 8002d90:	7d3b      	ldrb	r3, [r7, #20]
 8002d92:	b21b      	sxth	r3, r3
 8002d94:	021b      	lsls	r3, r3, #8
 8002d96:	b21a      	sxth	r2, r3
 8002d98:	7d7b      	ldrb	r3, [r7, #21]
 8002d9a:	b21b      	sxth	r3, r3
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	b21a      	sxth	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	869a      	strh	r2, [r3, #52]	@ 0x34
	this->gyro.y = (int16_t)(data[10] << 8 | data[11]);
 8002da4:	7dbb      	ldrb	r3, [r7, #22]
 8002da6:	b21b      	sxth	r3, r3
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	b21a      	sxth	r2, r3
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
 8002dae:	b21b      	sxth	r3, r3
 8002db0:	4313      	orrs	r3, r2
 8002db2:	b21a      	sxth	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	86da      	strh	r2, [r3, #54]	@ 0x36
	this->gyro.z = (int16_t)(data[12] << 8 | data[13]);
 8002db8:	7e3b      	ldrb	r3, [r7, #24]
 8002dba:	b21b      	sxth	r3, r3
 8002dbc:	021b      	lsls	r3, r3, #8
 8002dbe:	b21a      	sxth	r2, r3
 8002dc0:	7e7b      	ldrb	r3, [r7, #25]
 8002dc2:	b21b      	sxth	r3, r3
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	b21a      	sxth	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	871a      	strh	r2, [r3, #56]	@ 0x38

	this->magn.y   = (int16_t)(data[14] << 8 | data[15]);
 8002dcc:	7ebb      	ldrb	r3, [r7, #26]
 8002dce:	b21b      	sxth	r3, r3
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	b21a      	sxth	r2, r3
 8002dd4:	7efb      	ldrb	r3, [r7, #27]
 8002dd6:	b21b      	sxth	r3, r3
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	b21a      	sxth	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	83da      	strh	r2, [r3, #30]
	this->magn.z   = (int16_t)(data[16] << 8 | data[17]);
 8002de0:	7f3b      	ldrb	r3, [r7, #28]
 8002de2:	b21b      	sxth	r3, r3
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	b21a      	sxth	r2, r3
 8002de8:	7f7b      	ldrb	r3, [r7, #29]
 8002dea:	b21b      	sxth	r3, r3
 8002dec:	4313      	orrs	r3, r2
 8002dee:	b21a      	sxth	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	841a      	strh	r2, [r3, #32]
	this->magn.x   = (int16_t)(data[18] << 8 | data[19]);
 8002df4:	7fbb      	ldrb	r3, [r7, #30]
 8002df6:	b21b      	sxth	r3, r3
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	b21a      	sxth	r2, r3
 8002dfc:	7ffb      	ldrb	r3, [r7, #31]
 8002dfe:	b21b      	sxth	r3, r3
 8002e00:	4313      	orrs	r3, r2
 8002e02:	b21a      	sxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	839a      	strh	r2, [r3, #28]

	/* Return OK */
	return IMU9DOF_Result_Ok;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3720      	adds	r7, #32
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <_ZN7IMU9DOF26SetAccelSensitivityMPU6050E21MPU6050_Accelerometer>:

/*
 * Thiết lập độ nhạy cho Accel MPU6050
 */
HAL_StatusTypeDef IMU9DOF::SetAccelSensitivityMPU6050(MPU6050_Accelerometer theAccelSens)  // SetupGyro
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af04      	add	r7, sp, #16
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	70fb      	strb	r3, [r7, #3]
	uint8_t data;

	HAL_I2C_Mem_Read(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 500);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8002e24:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002e28:	9302      	str	r3, [sp, #8]
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	f107 030f 	add.w	r3, r7, #15
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	2301      	movs	r3, #1
 8002e36:	221c      	movs	r2, #28
 8002e38:	21d0      	movs	r1, #208	@ 0xd0
 8002e3a:	f006 fd89 	bl	8009950 <HAL_I2C_Mem_Read>

	data = (data & 0xE7) | ((uint8_t)theAccelSens << 3);
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	b25b      	sxtb	r3, r3
 8002e42:	f023 0318 	bic.w	r3, r3, #24
 8002e46:	b25a      	sxtb	r2, r3
 8002e48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	b25b      	sxtb	r3, r3
 8002e50:	4313      	orrs	r3, r2
 8002e52:	b25b      	sxtb	r3, r3
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 500);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8002e5c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002e60:	9302      	str	r3, [sp, #8]
 8002e62:	2301      	movs	r3, #1
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	f107 030f 	add.w	r3, r7, #15
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	221c      	movs	r2, #28
 8002e70:	21d0      	movs	r1, #208	@ 0xd0
 8002e72:	f006 fc73 	bl	800975c <HAL_I2C_Mem_Write>

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (theAccelSens) {
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d81f      	bhi.n	8002ebc <_ZN7IMU9DOF26SetAccelSensitivityMPU6050E21MPU6050_Accelerometer+0xa8>
 8002e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e84 <_ZN7IMU9DOF26SetAccelSensitivityMPU6050E21MPU6050_Accelerometer+0x70>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002e95 	.word	0x08002e95
 8002e88:	08002e9f 	.word	0x08002e9f
 8002e8c:	08002ea9 	.word	0x08002ea9
 8002e90:	08002eb3 	.word	0x08002eb3
	case MPU6050_Accelerometer_2G:
		this->accel.accelMult= (float)1 / MPU6050_ACCE_SENS_2;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f04f 5262 	mov.w	r2, #947912704	@ 0x38800000
 8002e9a:	631a      	str	r2, [r3, #48]	@ 0x30
		break;
 8002e9c:	e00f      	b.n	8002ebe <_ZN7IMU9DOF26SetAccelSensitivityMPU6050E21MPU6050_Accelerometer+0xaa>
	case MPU6050_Accelerometer_4G:
		this->accel.accelMult = (float)1 / MPU6050_ACCE_SENS_4;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f04f 5264 	mov.w	r2, #956301312	@ 0x39000000
 8002ea4:	631a      	str	r2, [r3, #48]	@ 0x30
		break;
 8002ea6:	e00a      	b.n	8002ebe <_ZN7IMU9DOF26SetAccelSensitivityMPU6050E21MPU6050_Accelerometer+0xaa>
	case MPU6050_Accelerometer_8G:
		this->accel.accelMult = (float)1 / MPU6050_ACCE_SENS_8;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f04f 5266 	mov.w	r2, #964689920	@ 0x39800000
 8002eae:	631a      	str	r2, [r3, #48]	@ 0x30
		break;
 8002eb0:	e005      	b.n	8002ebe <_ZN7IMU9DOF26SetAccelSensitivityMPU6050E21MPU6050_Accelerometer+0xaa>
	case MPU6050_Accelerometer_16G:
		this->accel.accelMult = (float)1 / MPU6050_ACCE_SENS_16;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f04f 5268 	mov.w	r2, #973078528	@ 0x3a000000
 8002eb8:	631a      	str	r2, [r3, #48]	@ 0x30
		break;
 8002eba:	e000      	b.n	8002ebe <_ZN7IMU9DOF26SetAccelSensitivityMPU6050E21MPU6050_Accelerometer+0xaa>
	default:
		break;
 8002ebc:	bf00      	nop
	}
	/* Return OK */
	return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope>:

/*
 * Thiết lập độ nhạy Gyro
 */
HAL_StatusTypeDef IMU9DOF::SetGyroSensitivityMPU6050(MPU6050_Gyroscope theGyroSens) // SetupGyro
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af04      	add	r7, sp, #16
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	70fb      	strb	r3, [r7, #3]
	uint8_t data;

	HAL_I2C_Mem_Read(this->hi2c, (uint16_t) MPU6050_I2C_ADDR, (uint16_t)MPU6050_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 500);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8002ed8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002edc:	9302      	str	r3, [sp, #8]
 8002ede:	2301      	movs	r3, #1
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	f107 030f 	add.w	r3, r7, #15
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2301      	movs	r3, #1
 8002eea:	221b      	movs	r2, #27
 8002eec:	21d0      	movs	r1, #208	@ 0xd0
 8002eee:	f006 fd2f 	bl	8009950 <HAL_I2C_Mem_Read>


	data = (data & 0xE7) | ((uint8_t)theGyroSens << 3);
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	b25b      	sxtb	r3, r3
 8002ef6:	f023 0318 	bic.w	r3, r3, #24
 8002efa:	b25a      	sxtb	r2, r3
 8002efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	b25b      	sxtb	r3, r3
 8002f04:	4313      	orrs	r3, r2
 8002f06:	b25b      	sxtb	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(this->hi2c, (uint16_t) MPU6050_I2C_ADDR, (uint16_t)MPU6050_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 500);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8002f10:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002f14:	9302      	str	r3, [sp, #8]
 8002f16:	2301      	movs	r3, #1
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	f107 030f 	add.w	r3, r7, #15
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2301      	movs	r3, #1
 8002f22:	221b      	movs	r2, #27
 8002f24:	21d0      	movs	r1, #208	@ 0xd0
 8002f26:	f006 fc19 	bl	800975c <HAL_I2C_Mem_Write>


	switch (theGyroSens) {
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d81b      	bhi.n	8002f68 <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0xa0>
 8002f30:	a201      	add	r2, pc, #4	@ (adr r2, 8002f38 <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0x70>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002f49 	.word	0x08002f49
 8002f3c:	08002f51 	.word	0x08002f51
 8002f40:	08002f59 	.word	0x08002f59
 8002f44:	08002f61 	.word	0x08002f61
	case MPU6050_Gyroscope_250s:
		this->gyro.gyroMult = (float)1 / MPU6050_GYRO_SENS_250;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f74 <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0xac>)
 8002f4c:	649a      	str	r2, [r3, #72]	@ 0x48
		break;
 8002f4e:	e00c      	b.n	8002f6a <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0xa2>
	case MPU6050_Gyroscope_500s:
		this->gyro.gyroMult = (float)1 / MPU6050_GYRO_SENS_500;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a09      	ldr	r2, [pc, #36]	@ (8002f78 <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0xb0>)
 8002f54:	649a      	str	r2, [r3, #72]	@ 0x48
		break;
 8002f56:	e008      	b.n	8002f6a <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0xa2>
	case MPU6050_Gyroscope_1000s:
		this->gyro.gyroMult = (float)1 / MPU6050_GYRO_SENS_1000;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a08      	ldr	r2, [pc, #32]	@ (8002f7c <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0xb4>)
 8002f5c:	649a      	str	r2, [r3, #72]	@ 0x48
		break;
 8002f5e:	e004      	b.n	8002f6a <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0xa2>
	case MPU6050_Gyroscope_2000s:
		this->gyro.gyroMult = (float)1 / MPU6050_GYRO_SENS_2000;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a07      	ldr	r2, [pc, #28]	@ (8002f80 <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0xb8>)
 8002f64:	649a      	str	r2, [r3, #72]	@ 0x48
		break;
 8002f66:	e000      	b.n	8002f6a <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0xa2>
	default:
		break;
 8002f68:	bf00      	nop
	}

	return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	3bfa232d 	.word	0x3bfa232d
 8002f78:	3c7a232d 	.word	0x3c7a232d
 8002f7c:	3cf9c190 	.word	0x3cf9c190
 8002f80:	3d79c190 	.word	0x3d79c190

08002f84 <_ZN7IMU9DOF9SetupGyroEv>:

/*
 * Init độ nhạy và thiết lập digital by pass mode
 */
HAL_StatusTypeDef IMU9DOF::SetupGyro(){ // init
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af04      	add	r7, sp, #16
 8002f8a:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x00;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]

	/* Config accelerometer */
	if ( SetAccelSensitivityMPU6050(MPU6050_Accelerometer_8G) != HAL_OK){
 8002f90:	2102      	movs	r1, #2
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ff3e 	bl	8002e14 <_ZN7IMU9DOF26SetAccelSensitivityMPU6050E21MPU6050_Accelerometer>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf14      	ite	ne
 8002f9e:	2301      	movne	r3, #1
 8002fa0:	2300      	moveq	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <_ZN7IMU9DOF9SetupGyroEv+0x28>
		return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e028      	b.n	8002ffe <_ZN7IMU9DOF9SetupGyroEv+0x7a>
	}

	/* Config Gyroscope */
	if ( SetGyroSensitivityMPU6050(MPU6050_Gyroscope_500s) != HAL_OK){
 8002fac:	2101      	movs	r1, #1
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff ff8a 	bl	8002ec8 <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bf14      	ite	ne
 8002fba:	2301      	movne	r3, #1
 8002fbc:	2300      	moveq	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <_ZN7IMU9DOF9SetupGyroEv+0x44>
		return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e01a      	b.n	8002ffe <_ZN7IMU9DOF9SetupGyroEv+0x7a>
	}

	// Thiết lập digital low pass filter với tần số là 43Hz
	data = 0x03;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8002fd0:	2332      	movs	r3, #50	@ 0x32
 8002fd2:	9302      	str	r3, [sp, #8]
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	9301      	str	r3, [sp, #4]
 8002fd8:	f107 030f 	add.w	r3, r7, #15
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	2301      	movs	r3, #1
 8002fe0:	221a      	movs	r2, #26
 8002fe2:	21d0      	movs	r1, #208	@ 0xd0
 8002fe4:	f006 fbba 	bl	800975c <HAL_I2C_Mem_Write>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf14      	ite	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	2300      	moveq	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <_ZN7IMU9DOF9SetupGyroEv+0x78>
		return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <_ZN7IMU9DOF9SetupGyroEv+0x7a>
	}

	return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <_ZN7IMU9DOF12SetupCompassEv>:

/*
 * khởi tạo cảm biến từ trường HMC5883L (la bàn điện tử)
 * Init compass đọc hướng, tắt I2C master mode của MPU6050
 */
HAL_StatusTypeDef IMU9DOF::SetupCompass(){ // init
 8003006:	b580      	push	{r7, lr}
 8003008:	b088      	sub	sp, #32
 800300a:	af04      	add	r7, sp, #16
 800300c:	6078      	str	r0, [r7, #4]
	// Tắt chế độ I2C master mode
	uint8_t data = 0x00;
 800300e:	2300      	movs	r3, #0
 8003010:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_USER_CTRL, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8003016:	2332      	movs	r3, #50	@ 0x32
 8003018:	9302      	str	r3, [sp, #8]
 800301a:	2301      	movs	r3, #1
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	f107 030f 	add.w	r3, r7, #15
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	2301      	movs	r3, #1
 8003026:	226a      	movs	r2, #106	@ 0x6a
 8003028:	21d0      	movs	r1, #208	@ 0xd0
 800302a:	f006 fb97 	bl	800975c <HAL_I2C_Mem_Write>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf14      	ite	ne
 8003034:	2301      	movne	r3, #1
 8003036:	2300      	moveq	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <_ZN7IMU9DOF12SetupCompassEv+0x3c>
		return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e09c      	b.n	800317c <_ZN7IMU9DOF12SetupCompassEv+0x176>
	}

	// Bật chế độ I2C master bypass mode
	data = 0x02;
 8003042:	2302      	movs	r3, #2
 8003044:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_INT_PIN_CFG, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800304a:	2332      	movs	r3, #50	@ 0x32
 800304c:	9302      	str	r3, [sp, #8]
 800304e:	2301      	movs	r3, #1
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	f107 030f 	add.w	r3, r7, #15
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2301      	movs	r3, #1
 800305a:	2237      	movs	r2, #55	@ 0x37
 800305c:	21d0      	movs	r1, #208	@ 0xd0
 800305e:	f006 fb7d 	bl	800975c <HAL_I2C_Mem_Write>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf14      	ite	ne
 8003068:	2301      	movne	r3, #1
 800306a:	2300      	moveq	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <_ZN7IMU9DOF12SetupCompassEv+0x70>
		return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e082      	b.n	800317c <_ZN7IMU9DOF12SetupCompassEv+0x176>
	}

	// Thiết lập sample rate = 75Hz và số lần lấy mẫu trung bình là 8
	data = 0x78;
 8003076:	2378      	movs	r3, #120	@ 0x78
 8003078:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)HMC5883L_ADDRESS, (uint16_t)HMC5883L_CONFIG_A, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800307e:	2332      	movs	r3, #50	@ 0x32
 8003080:	9302      	str	r3, [sp, #8]
 8003082:	2301      	movs	r3, #1
 8003084:	9301      	str	r3, [sp, #4]
 8003086:	f107 030f 	add.w	r3, r7, #15
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	2301      	movs	r3, #1
 800308e:	2200      	movs	r2, #0
 8003090:	213c      	movs	r1, #60	@ 0x3c
 8003092:	f006 fb63 	bl	800975c <HAL_I2C_Mem_Write>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf14      	ite	ne
 800309c:	2301      	movne	r3, #1
 800309e:	2300      	moveq	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <_ZN7IMU9DOF12SetupCompassEv+0xa4>
		return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e068      	b.n	800317c <_ZN7IMU9DOF12SetupCompassEv+0x176>
	}

	// Thiết lập full scale = +/- 1.3 Gauss
	data= 0x20;
 80030aa:	2320      	movs	r3, #32
 80030ac:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)HMC5883L_ADDRESS, (uint16_t)HMC5883L_CONFIG_B, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80030b2:	2332      	movs	r3, #50	@ 0x32
 80030b4:	9302      	str	r3, [sp, #8]
 80030b6:	2301      	movs	r3, #1
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	f107 030f 	add.w	r3, r7, #15
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	2301      	movs	r3, #1
 80030c2:	2201      	movs	r2, #1
 80030c4:	213c      	movs	r1, #60	@ 0x3c
 80030c6:	f006 fb49 	bl	800975c <HAL_I2C_Mem_Write>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf14      	ite	ne
 80030d0:	2301      	movne	r3, #1
 80030d2:	2300      	moveq	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <_ZN7IMU9DOF12SetupCompassEv+0xd8>
		return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e04e      	b.n	800317c <_ZN7IMU9DOF12SetupCompassEv+0x176>
	}

	// Bật chế độ continuous measurement
	data = 0x00;
 80030de:	2300      	movs	r3, #0
 80030e0:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)HMC5883L_ADDRESS, (uint16_t)HMC5883L_MODE_REG, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80030e6:	2332      	movs	r3, #50	@ 0x32
 80030e8:	9302      	str	r3, [sp, #8]
 80030ea:	2301      	movs	r3, #1
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	f107 030f 	add.w	r3, r7, #15
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2301      	movs	r3, #1
 80030f6:	2202      	movs	r2, #2
 80030f8:	213c      	movs	r1, #60	@ 0x3c
 80030fa:	f006 fb2f 	bl	800975c <HAL_I2C_Mem_Write>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf14      	ite	ne
 8003104:	2301      	movne	r3, #1
 8003106:	2300      	moveq	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <_ZN7IMU9DOF12SetupCompassEv+0x10c>
		return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e034      	b.n	800317c <_ZN7IMU9DOF12SetupCompassEv+0x176>
	}

	// Tắt chế độ I2C master bypass mode
	data = 0x00;
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_INT_PIN_CFG, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800311a:	2332      	movs	r3, #50	@ 0x32
 800311c:	9302      	str	r3, [sp, #8]
 800311e:	2301      	movs	r3, #1
 8003120:	9301      	str	r3, [sp, #4]
 8003122:	f107 030f 	add.w	r3, r7, #15
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2301      	movs	r3, #1
 800312a:	2237      	movs	r2, #55	@ 0x37
 800312c:	21d0      	movs	r1, #208	@ 0xd0
 800312e:	f006 fb15 	bl	800975c <HAL_I2C_Mem_Write>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf14      	ite	ne
 8003138:	2301      	movne	r3, #1
 800313a:	2300      	moveq	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <_ZN7IMU9DOF12SetupCompassEv+0x140>
		return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e01a      	b.n	800317c <_ZN7IMU9DOF12SetupCompassEv+0x176>
	}

	// Bật chế độ I2C master mode
	data = 0x20;
 8003146:	2320      	movs	r3, #32
 8003148:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_USER_CTRL, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800314e:	2332      	movs	r3, #50	@ 0x32
 8003150:	9302      	str	r3, [sp, #8]
 8003152:	2301      	movs	r3, #1
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	f107 030f 	add.w	r3, r7, #15
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	2301      	movs	r3, #1
 800315e:	226a      	movs	r2, #106	@ 0x6a
 8003160:	21d0      	movs	r1, #208	@ 0xd0
 8003162:	f006 fafb 	bl	800975c <HAL_I2C_Mem_Write>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf14      	ite	ne
 800316c:	2301      	movne	r3, #1
 800316e:	2300      	moveq	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <_ZN7IMU9DOF12SetupCompassEv+0x174>
		return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <_ZN7IMU9DOF12SetupCompassEv+0x176>
	}

	return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <_ZN7IMU9DOF25SetupAutomaticReadCompassEv>:
/*
 * MPU6050 (có I2C Master) để tự động đọc dữ liệu từ cảm biến từ trường HMC5883L (trên module GY-86).
 * Thay vì MCU trực tiếp đọc HMC5883L, MPU6050 sẽ làm
 * "master phụ" và copy dữ liệu về trong các thanh ghi EXT_SENS_DATA_xx.
 */
HAL_StatusTypeDef IMU9DOF::SetupAutomaticReadCompass(){  // init
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af04      	add	r7, sp, #16
 800318a:	6078      	str	r0, [r7, #4]
	// Thiết lập địa chỉ của thanh ghi cần đọc là HMC5883L
	uint8_t data = HMC5883L_ADDRESS_DATASHEET | 0x80;
 800318c:	239e      	movs	r3, #158	@ 0x9e
 800318e:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_I2C_SLV0_ADDR, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8003194:	2332      	movs	r3, #50	@ 0x32
 8003196:	9302      	str	r3, [sp, #8]
 8003198:	2301      	movs	r3, #1
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	f107 030f 	add.w	r3, r7, #15
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	2301      	movs	r3, #1
 80031a4:	2225      	movs	r2, #37	@ 0x25
 80031a6:	21d0      	movs	r1, #208	@ 0xd0
 80031a8:	f006 fad8 	bl	800975c <HAL_I2C_Mem_Write>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf14      	ite	ne
 80031b2:	2301      	movne	r3, #1
 80031b4:	2300      	moveq	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <_ZN7IMU9DOF25SetupAutomaticReadCompassEv+0x3c>
		return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e04e      	b.n	800325e <_ZN7IMU9DOF25SetupAutomaticReadCompassEv+0xda>
	}

	// Bắt đầu đọc giá trị địa chỉ thanh ghi là 0x03 (x axis)
	data = 0x03;
 80031c0:	2303      	movs	r3, #3
 80031c2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_I2C_SLV0_REG, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80031c8:	2332      	movs	r3, #50	@ 0x32
 80031ca:	9302      	str	r3, [sp, #8]
 80031cc:	2301      	movs	r3, #1
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	f107 030f 	add.w	r3, r7, #15
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	2301      	movs	r3, #1
 80031d8:	2226      	movs	r2, #38	@ 0x26
 80031da:	21d0      	movs	r1, #208	@ 0xd0
 80031dc:	f006 fabe 	bl	800975c <HAL_I2C_Mem_Write>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <_ZN7IMU9DOF25SetupAutomaticReadCompassEv+0x70>
		return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e034      	b.n	800325e <_ZN7IMU9DOF25SetupAutomaticReadCompassEv+0xda>
	}

	// Đọc 6 thanh ghi liên tiếp trong HMC5883L
	data = 6 | 0x80;
 80031f4:	2386      	movs	r3, #134	@ 0x86
 80031f6:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_I2C_SLV0_CTRL, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80031fc:	2332      	movs	r3, #50	@ 0x32
 80031fe:	9302      	str	r3, [sp, #8]
 8003200:	2301      	movs	r3, #1
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	f107 030f 	add.w	r3, r7, #15
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	2301      	movs	r3, #1
 800320c:	2227      	movs	r2, #39	@ 0x27
 800320e:	21d0      	movs	r1, #208	@ 0xd0
 8003210:	f006 faa4 	bl	800975c <HAL_I2C_Mem_Write>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	bf14      	ite	ne
 800321a:	2301      	movne	r3, #1
 800321c:	2300      	moveq	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <_ZN7IMU9DOF25SetupAutomaticReadCompassEv+0xa4>
		return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e01a      	b.n	800325e <_ZN7IMU9DOF25SetupAutomaticReadCompassEv+0xda>
	}
	// cho phép slave 0
	data = 1;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)0x67, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8003230:	2332      	movs	r3, #50	@ 0x32
 8003232:	9302      	str	r3, [sp, #8]
 8003234:	2301      	movs	r3, #1
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	f107 030f 	add.w	r3, r7, #15
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	2301      	movs	r3, #1
 8003240:	2267      	movs	r2, #103	@ 0x67
 8003242:	21d0      	movs	r1, #208	@ 0xd0
 8003244:	f006 fa8a 	bl	800975c <HAL_I2C_Mem_Write>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	bf14      	ite	ne
 800324e:	2301      	movne	r3, #1
 8003250:	2300      	moveq	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <_ZN7IMU9DOF25SetupAutomaticReadCompassEv+0xd8>
		return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <_ZN7IMU9DOF25SetupAutomaticReadCompassEv+0xda>
	}

	return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <_ZN7IMU9DOF4InitEv>:
 * Hàm Init() có mục đích khởi tạo cảm biến + load dữ liệu hiệu chuẩn từ Flash
 * + tính toán offset/scale cho Compass và Accel, để đảm bảo dữ liệu đọc ra sau này (Gyro, Accel, Compass)
 * là chính xác và đã bù trừ sai số.
 */
HAL_StatusTypeDef IMU9DOF::Init()
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]

	if (SetupGyro() != HAL_OK){
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff fe87 	bl	8002f84 <_ZN7IMU9DOF9SetupGyroEv>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <_ZN7IMU9DOF4InitEv+0x22>
		return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e0f0      	b.n	800346c <_ZN7IMU9DOF4InitEv+0x204>
	}
	if (SetupCompass() != HAL_OK){
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff febb 	bl	8003006 <_ZN7IMU9DOF12SetupCompassEv>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	bf14      	ite	ne
 8003296:	2301      	movne	r3, #1
 8003298:	2300      	moveq	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <_ZN7IMU9DOF4InitEv+0x3c>
		return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0e3      	b.n	800346c <_ZN7IMU9DOF4InitEv+0x204>
	}
	if (SetupAutomaticReadCompass() != HAL_OK){
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff ff6d 	bl	8003184 <_ZN7IMU9DOF25SetupAutomaticReadCompassEv>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf14      	ite	ne
 80032b0:	2301      	movne	r3, #1
 80032b2:	2300      	moveq	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <_ZN7IMU9DOF4InitEv+0x56>
		return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e0d6      	b.n	800346c <_ZN7IMU9DOF4InitEv+0x204>
	}


	MyFlash_SetSectorAddrs(this->sectorFlash, this->addrsFlash);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 2148 	ldrb.w	r2, [r3, #328]	@ 0x148
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80032ca:	4619      	mov	r1, r3
 80032cc:	4610      	mov	r0, r2
 80032ce:	f002 fcd9 	bl	8005c84 <MyFlash_SetSectorAddrs>
	MyFlash_ReadN(0, dataFlash, 6, DATA_TYPE_16);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
 80032d8:	2301      	movs	r3, #1
 80032da:	2206      	movs	r2, #6
 80032dc:	2000      	movs	r0, #0
 80032de:	f002 fd61 	bl	8005da4 <MyFlash_ReadN>

	compassScaleY = ((float)dataFlash[1] - dataFlash[0]) / (dataFlash[3] - dataFlash[2]);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f9b3 3152 	ldrsh.w	r3, [r3, #338]	@ 0x152
 80032e8:	ee07 3a90 	vmov	s15, r3
 80032ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f9b3 3150 	ldrsh.w	r3, [r3, #336]	@ 0x150
 80032f6:	ee07 3a90 	vmov	s15, r3
 80032fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032fe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	@ 0x156
 8003308:	461a      	mov	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f9b3 3154 	ldrsh.w	r3, [r3, #340]	@ 0x154
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800331a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140
	compassScaleZ = ((float)dataFlash[1] - dataFlash[0]) / (dataFlash[5] - dataFlash[4]);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f9b3 3152 	ldrsh.w	r3, [r3, #338]	@ 0x152
 800332a:	ee07 3a90 	vmov	s15, r3
 800332e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f9b3 3150 	ldrsh.w	r3, [r3, #336]	@ 0x150
 8003338:	ee07 3a90 	vmov	s15, r3
 800333c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003340:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	@ 0x15a
 800334a:	461a      	mov	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	@ 0x158
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	ee07 3a90 	vmov	s15, r3
 8003358:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800335c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	edc3 7a51 	vstr	s15, [r3, #324]	@ 0x144

	compassOffset_X = (dataFlash[1] - dataFlash[0]) / 2 - dataFlash[1];
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f9b3 3152 	ldrsh.w	r3, [r3, #338]	@ 0x152
 800336c:	461a      	mov	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f9b3 3150 	ldrsh.w	r3, [r3, #336]	@ 0x150
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	0fda      	lsrs	r2, r3, #31
 8003378:	4413      	add	r3, r2
 800337a:	105b      	asrs	r3, r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f9b3 3152 	ldrsh.w	r3, [r3, #338]	@ 0x152
 8003384:	b29b      	uxth	r3, r3
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	b29b      	uxth	r3, r3
 800338a:	b21a      	sxth	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
	compassOffset_Y = (((float)dataFlash[3] - dataFlash[2]) / 2 - dataFlash[3]) * compassScaleY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	@ 0x156
 8003398:	ee07 3a90 	vmov	s15, r3
 800339c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f9b3 3154 	ldrsh.w	r3, [r3, #340]	@ 0x154
 80033a6:	ee07 3a90 	vmov	s15, r3
 80033aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80033b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	@ 0x156
 80033c0:	ee07 3a90 	vmov	s15, r3
 80033c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 80033d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033da:	ee17 3a90 	vmov	r3, s15
 80033de:	b21a      	sxth	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8a3 213a 	strh.w	r2, [r3, #314]	@ 0x13a
	compassOffset_Z = (((float)dataFlash[5] - dataFlash[4]) / 2 - dataFlash[5]) * compassScaleZ;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	@ 0x15a
 80033ec:	ee07 3a90 	vmov	s15, r3
 80033f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	@ 0x158
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003406:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800340a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	@ 0x15a
 8003414:	ee07 3a90 	vmov	s15, r3
 8003418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800341c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	edd3 7a51 	vldr	s15, [r3, #324]	@ 0x144
 8003426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800342e:	ee17 3a90 	vmov	r3, s15
 8003432:	b21a      	sxth	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c

	MyFlash_SetSectorAddrs(10, 0x080D0000);
 800343a:	490e      	ldr	r1, [pc, #56]	@ (8003474 <_ZN7IMU9DOF4InitEv+0x20c>)
 800343c:	200a      	movs	r0, #10
 800343e:	f002 fc21 	bl	8005c84 <MyFlash_SetSectorAddrs>
	MyFlash_ReadN(0, accelCalValue, 2, DATA_TYPE_32);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f103 016c 	add.w	r1, r3, #108	@ 0x6c
 8003448:	2302      	movs	r3, #2
 800344a:	2202      	movs	r2, #2
 800344c:	2000      	movs	r0, #0
 800344e:	f002 fca9 	bl	8005da4 <MyFlash_ReadN>
	accPitchCalValue = accelCalValue[0];
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003456:	b21a      	sxth	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	accRollCalValue = accelCalValue[1];
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003462:	b21a      	sxth	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

	return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	080d0000 	.word	0x080d0000

08003478 <_ZN7IMU9DOF13ReadGyroAccelEv>:
/*
 * đọc dữ liệu thô từ MPU6050 (gia tốc kế + con quay hồi chuyển),
 * sau đó hiệu chỉnh (calibrate) dữ liệu này để loại bỏ sai số offset
 */
void IMU9DOF::ReadGyroAccel()
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	ReadRawAllParameter();
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff fc37 	bl	8002cf4 <_ZN7IMU9DOF19ReadRawAllParameterEv>

	gyro.y *= -1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 800348c:	b29b      	uxth	r3, r3
 800348e:	425b      	negs	r3, r3
 8003490:	b29b      	uxth	r3, r3
 8003492:	b21a      	sxth	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	86da      	strh	r2, [r3, #54]	@ 0x36
	gyro.z *= -1;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 800349e:	b29b      	uxth	r3, r3
 80034a0:	425b      	negs	r3, r3
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	b21a      	sxth	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	871a      	strh	r2, [r3, #56]	@ 0x38

	if (isOnLevelCalib == 0)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3137 	ldrb.w	r3, [r3, #311]	@ 0x137
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d119      	bne.n	80034e8 <_ZN7IMU9DOF13ReadGyroAccelEv+0x70>
	{
		accel.y -= accPitchCalValue;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	b21a      	sxth	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
		accel.x -= accRollCalValue ;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	@ 0x4e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	b21a      	sxth	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	851a      	strh	r2, [r3, #40]	@ 0x28
	}

	if (IsAlreadyCalibGyro >= 2000)  // lấy 2000 mẫu để hiệu chuẩn
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	@ 0x134
 80034ee:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80034f2:	db23      	blt.n	800353c <_ZN7IMU9DOF13ReadGyroAccelEv+0xc4>
	{
		gyro.x -= gyroRollCalValue;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003500:	b29b      	uxth	r3, r3
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	b29b      	uxth	r3, r3
 8003506:	b21a      	sxth	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	869a      	strh	r2, [r3, #52]	@ 0x34
		gyro.y -= gyroPitchCalValue;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 8003512:	b29a      	uxth	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003518:	b29b      	uxth	r3, r3
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	b29b      	uxth	r3, r3
 800351e:	b21a      	sxth	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	86da      	strh	r2, [r3, #54]	@ 0x36
		gyro.z -= gyroYawCalValue;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 800352a:	b29a      	uxth	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003530:	b29b      	uxth	r3, r3
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	b29b      	uxth	r3, r3
 8003536:	b21a      	sxth	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	871a      	strh	r2, [r3, #56]	@ 0x38
	}
}
 800353c:	bf00      	nop
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <_ZN7IMU9DOF12CalibCompassEv>:

	return HAL_OK;
}


void IMU9DOF::CalibCompass(){
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	isAlreadyCalibCompass = 1;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
	//TODO tao den bao trang thai

		// TODO gui du lieu
		DWT_Delay_us(3700);
 8003554:	f640 6074 	movw	r0, #3700	@ 0xe74
 8003558:	f7fe ffa4 	bl	80024a4 <DWT_Delay_us>
		ReadRawAllParameter();
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff fbc9 	bl	8002cf4 <_ZN7IMU9DOF19ReadRawAllParameterEv>
		ReadCompass();
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff f8dc 	bl	8002720 <_ZN7IMU9DOF11ReadCompassEv>

		if ( magn.x < dataFlash[0]){
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f9b3 3150 	ldrsh.w	r3, [r3, #336]	@ 0x150
 8003574:	429a      	cmp	r2, r3
 8003576:	da05      	bge.n	8003584 <_ZN7IMU9DOF12CalibCompassEv+0x40>
			dataFlash[0] = magn.x;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8a3 2150 	strh.w	r2, [r3, #336]	@ 0x150
		}
		if ( magn.x > dataFlash[1]){
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f9b3 3152 	ldrsh.w	r3, [r3, #338]	@ 0x152
 8003590:	429a      	cmp	r2, r3
 8003592:	dd05      	ble.n	80035a0 <_ZN7IMU9DOF12CalibCompassEv+0x5c>
			dataFlash[1] = magn.x;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8a3 2152 	strh.w	r2, [r3, #338]	@ 0x152
		}
		if ( magn.y < dataFlash[2]){
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f9b3 3154 	ldrsh.w	r3, [r3, #340]	@ 0x154
 80035ac:	429a      	cmp	r2, r3
 80035ae:	da05      	bge.n	80035bc <_ZN7IMU9DOF12CalibCompassEv+0x78>
			dataFlash[2] = magn.y;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
		}
		if ( magn.y > dataFlash[3]){
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	@ 0x156
 80035c8:	429a      	cmp	r2, r3
 80035ca:	dd05      	ble.n	80035d8 <_ZN7IMU9DOF12CalibCompassEv+0x94>
			dataFlash[3] = magn.y;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8a3 2156 	strh.w	r2, [r3, #342]	@ 0x156
		}
		if ( magn.z < dataFlash[4]){
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	@ 0x158
 80035e4:	429a      	cmp	r2, r3
 80035e6:	da05      	bge.n	80035f4 <_ZN7IMU9DOF12CalibCompassEv+0xb0>
			dataFlash[4] = magn.z;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
		}
		if ( magn.z > dataFlash[5]){
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	@ 0x15a
 8003600:	429a      	cmp	r2, r3
 8003602:	dd05      	ble.n	8003610 <_ZN7IMU9DOF12CalibCompassEv+0xcc>
			dataFlash[5] = magn.z;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a
		}


	isAlreadyCalibCompass = 0;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
	MyFlash_SetSectorAddrs(this->sectorFlash, this->addrsFlash);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 2148 	ldrb.w	r2, [r3, #328]	@ 0x148
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8003624:	4619      	mov	r1, r3
 8003626:	4610      	mov	r0, r2
 8003628:	f002 fb2c 	bl	8005c84 <MyFlash_SetSectorAddrs>
	MyFlash_WriteN(0, dataFlash, 6, DATA_TYPE_16);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
 8003632:	2301      	movs	r3, #1
 8003634:	2206      	movs	r2, #6
 8003636:	2000      	movs	r0, #0
 8003638:	f002 fb3a 	bl	8005cb0 <MyFlash_WriteN>

	SetupCompass();
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff fce2 	bl	8003006 <_ZN7IMU9DOF12SetupCompassEv>
	ReadRawAllParameter();
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff fb56 	bl	8002cf4 <_ZN7IMU9DOF19ReadRawAllParameterEv>
	ReadCompass();
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7ff f869 	bl	8002720 <_ZN7IMU9DOF11ReadCompassEv>
	angleYaw = actualCompassHeading;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	665a      	str	r2, [r3, #100]	@ 0x64

	// TODO bao de trang thai ket thuc qua trinh calib
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <_ZN7IMU9DOF10CalibLevelEPh>:

/*
 * hiệu chuẩn la bàn (HMC5883L trong GY-86)
 * bằng cách ghi lại giá trị min/max theo 3 trục x, y, z của từ trường.
 */
void IMU9DOF::CalibLevel(uint8_t* theError){  // Qua trinh calib mat phang , lấy roll pitch khi khởi động
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
	isOnLevelCalib = 1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2137 	strb.w	r2, [r3, #311]	@ 0x137


	//TODO bao den trang thai

	accelCalValue[0] = 0;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	66da      	str	r2, [r3, #108]	@ 0x6c
	accelCalValue[1] = 0;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	671a      	str	r2, [r3, #112]	@ 0x70

	for ( int i = 0; i < 64; i++){
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	e037      	b.n	80036f4 <_ZN7IMU9DOF10CalibLevelEPh+0x94>
		//TODO gui du lieu telemetry
		ReadGyroAccel();
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff fef7 	bl	8003478 <_ZN7IMU9DOF13ReadGyroAccelEv>
		accelCalValue[0] += accel.y;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	f9b2 202a 	ldrsh.w	r2, [r2, #42]	@ 0x2a
 8003694:	441a      	add	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	66da      	str	r2, [r3, #108]	@ 0x6c
		accelCalValue[1] += accel.x;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	@ 0x28
 80036a4:	441a      	add	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	671a      	str	r2, [r3, #112]	@ 0x70
		if ( accel.y > 500 || accel.y < -500){
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 80036b0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80036b4:	dc05      	bgt.n	80036c2 <_ZN7IMU9DOF10CalibLevelEPh+0x62>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 80036bc:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80036c0:	da02      	bge.n	80036c8 <_ZN7IMU9DOF10CalibLevelEPh+0x68>
			*theError = 80;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2250      	movs	r2, #80	@ 0x50
 80036c6:	701a      	strb	r2, [r3, #0]
		}
		if ( accel.x > 500 || accel.x < -500){
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 80036ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80036d2:	dc05      	bgt.n	80036e0 <_ZN7IMU9DOF10CalibLevelEPh+0x80>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 80036da:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80036de:	da02      	bge.n	80036e6 <_ZN7IMU9DOF10CalibLevelEPh+0x86>
			*theError = 80;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2250      	movs	r2, #80	@ 0x50
 80036e4:	701a      	strb	r2, [r3, #0]
		}
		DWT_Delay_us(3700);
 80036e6:	f640 6074 	movw	r0, #3700	@ 0xe74
 80036ea:	f7fe fedb 	bl	80024a4 <DWT_Delay_us>
	for ( int i = 0; i < 64; i++){
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	3301      	adds	r3, #1
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80036f8:	ddc4      	ble.n	8003684 <_ZN7IMU9DOF10CalibLevelEPh+0x24>
	}

	accelCalValue[0] /= 64;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	da00      	bge.n	8003704 <_ZN7IMU9DOF10CalibLevelEPh+0xa4>
 8003702:	333f      	adds	r3, #63	@ 0x3f
 8003704:	119b      	asrs	r3, r3, #6
 8003706:	461a      	mov	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	66da      	str	r2, [r3, #108]	@ 0x6c
	accelCalValue[1] /= 64;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003710:	2b00      	cmp	r3, #0
 8003712:	da00      	bge.n	8003716 <_ZN7IMU9DOF10CalibLevelEPh+0xb6>
 8003714:	333f      	adds	r3, #63	@ 0x3f
 8003716:	119b      	asrs	r3, r3, #6
 8003718:	461a      	mov	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	671a      	str	r2, [r3, #112]	@ 0x70
	// TODO bao trang thai
	if (*theError < 80){
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b4f      	cmp	r3, #79	@ 0x4f
 8003724:	d80f      	bhi.n	8003746 <_ZN7IMU9DOF10CalibLevelEPh+0xe6>
		MyFlash_SetSectorAddrs(10, 0x080D0000);
 8003726:	4966      	ldr	r1, [pc, #408]	@ (80038c0 <_ZN7IMU9DOF10CalibLevelEPh+0x260>)
 8003728:	200a      	movs	r0, #10
 800372a:	f002 faab 	bl	8005c84 <MyFlash_SetSectorAddrs>
		MyFlash_WriteN(0, accelCalValue, 2, DATA_TYPE_32);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f103 016c 	add.w	r1, r3, #108	@ 0x6c
 8003734:	2302      	movs	r3, #2
 8003736:	2202      	movs	r2, #2
 8003738:	2000      	movs	r0, #0
 800373a:	f002 fab9 	bl	8005cb0 <MyFlash_WriteN>
		//TODO nhay den bao trang thai
		*theError = 0;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	e002      	b.n	800374c <_ZN7IMU9DOF10CalibLevelEPh+0xec>
	}
	else{
		*theError = 3;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2203      	movs	r2, #3
 800374a:	701a      	strb	r2, [r3, #0]
	}

	isOnLevelCalib = 0;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2137 	strb.w	r2, [r3, #311]	@ 0x137
	//todo moi them vao
	accPitchCalValue = (int16_t)accelCalValue[0];
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003758:	b21a      	sxth	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	accRollCalValue = (int16_t)accelCalValue[1];
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003764:	b21a      	sxth	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	ReadGyroAccel();
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff fe83 	bl	8003478 <_ZN7IMU9DOF13ReadGyroAccelEv>

	accelTotalVector  = sqrt((accel.x * accel.x) + (accel.y * accel.y) + (accel.z * accel.z));    //Tính tổng vectơ gia tốc kế.
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8003778:	461a      	mov	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8003780:	fb03 f202 	mul.w	r2, r3, r2
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 800378a:	4619      	mov	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	441a      	add	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 800379e:	4619      	mov	r1, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
 80037aa:	4413      	add	r3, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fcb5 	bl	800411c <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80037b2:	ec53 2b10 	vmov	r2, r3, d0
 80037b6:	4610      	mov	r0, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	f7fd f9cd 	bl	8000b58 <__aeabi_d2iz>
 80037be:	4602      	mov	r2, r0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

	if (abs(accel.y) < accelTotalVector) {                                             //Ngăn chặn chức năng asin tạo ra NaN.
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bfb8      	it	lt
 80037d0:	425b      	neglt	r3, r3
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80037dc:	429a      	cmp	r2, r3
 80037de:	da27      	bge.n	8003830 <_ZN7IMU9DOF10CalibLevelEPh+0x1d0>
	    anglePitchAccel = asin((float)accel.y / accelTotalVector) * 57.296;              //Calculate the pitch angle.
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80037f4:	ee07 3a90 	vmov	s15, r3
 80037f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037fc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003800:	eeb0 0a66 	vmov.f32	s0, s13
 8003804:	f7fe fe29 	bl	800245a <_ZSt4asinf>
 8003808:	ee10 3a10 	vmov	r3, s0
 800380c:	4618      	mov	r0, r3
 800380e:	f7fc fe9b 	bl	8000548 <__aeabi_f2d>
 8003812:	a329      	add	r3, pc, #164	@ (adr r3, 80038b8 <_ZN7IMU9DOF10CalibLevelEPh+0x258>)
 8003814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003818:	f7fc feee 	bl	80005f8 <__aeabi_dmul>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4610      	mov	r0, r2
 8003822:	4619      	mov	r1, r3
 8003824:	f7fd f9e0 	bl	8000be8 <__aeabi_d2f>
 8003828:	4602      	mov	r2, r0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
	  }
	  if (abs(accel.x) < accelTotalVector) {                                             //Ngăn chặn chức năng asin tạo ra NaN.
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8003836:	2b00      	cmp	r3, #0
 8003838:	bfb8      	it	lt
 800383a:	425b      	neglt	r3, r3
 800383c:	b29b      	uxth	r3, r3
 800383e:	461a      	mov	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003846:	429a      	cmp	r2, r3
 8003848:	da27      	bge.n	800389a <_ZN7IMU9DOF10CalibLevelEPh+0x23a>
		  angleRollAccel = asin((float)accel.x / accelTotalVector) * 57.296;               //Calculate the roll angle.
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8003850:	ee07 3a90 	vmov	s15, r3
 8003854:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800385e:	ee07 3a90 	vmov	s15, r3
 8003862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003866:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800386a:	eeb0 0a66 	vmov.f32	s0, s13
 800386e:	f7fe fdf4 	bl	800245a <_ZSt4asinf>
 8003872:	ee10 3a10 	vmov	r3, s0
 8003876:	4618      	mov	r0, r3
 8003878:	f7fc fe66 	bl	8000548 <__aeabi_f2d>
 800387c:	a30e      	add	r3, pc, #56	@ (adr r3, 80038b8 <_ZN7IMU9DOF10CalibLevelEPh+0x258>)
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	f7fc feb9 	bl	80005f8 <__aeabi_dmul>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4610      	mov	r0, r2
 800388c:	4619      	mov	r1, r3
 800388e:	f7fd f9ab 	bl	8000be8 <__aeabi_d2f>
 8003892:	4602      	mov	r2, r0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	  }
	  anglePitch = anglePitchAccel;        //Đặt góc của con quay hồi chuyển bằng góc bước của gia tốc kế khi khởi động quadcopter.
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	661a      	str	r2, [r3, #96]	@ 0x60
	  angleRoll = angleRollAccel;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	65da      	str	r2, [r3, #92]	@ 0x5c

}
 80038ae:	bf00      	nop
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	53f7ced9 	.word	0x53f7ced9
 80038bc:	404ca5e3 	.word	0x404ca5e3
 80038c0:	080d0000 	.word	0x080d0000

080038c4 <_ZN7IMU9DOF9CalibGyroEv>:

/*
 * Hiệu chuẩn con quay hồi chuyển (gyroscope) của MPU6050.
 */
void IMU9DOF::CalibGyro()
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	IsAlreadyCalibGyro = 0;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
	if (IsAlreadyCalibGyro != 2000) {
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	@ 0x134
 80038da:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80038de:	d053      	beq.n	8003988 <_ZN7IMU9DOF9CalibGyroEv+0xc4>
		//Hãy lấy nhiều mẫu dữ liệu con quay hồi chuyển để chúng ta có thể xác định độ lệch con quay hồi chuyển trung bình (calibration).
		for (IsAlreadyCalibGyro = 0; IsAlreadyCalibGyro < 2000 ; IsAlreadyCalibGyro ++)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
 80038e8:	e02a      	b.n	8003940 <_ZN7IMU9DOF9CalibGyroEv+0x7c>
		{                                  //Take 2000 readings for calibration.
			if (IsAlreadyCalibGyro % 25 == 0)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	@ 0x134
			{
				// TODO : báo hiệu đèn đang trong trạng thái calib

			}
			ReadGyroAccel();                                                                //Read the gyro output.
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff fdc1 	bl	8003478 <_ZN7IMU9DOF13ReadGyroAccelEv>
			gyroRollCalValue += gyro.x;                                                     //Ad roll value to gyro_roll_cal.
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	f9b2 2034 	ldrsh.w	r2, [r2, #52]	@ 0x34
 8003900:	441a      	add	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	651a      	str	r2, [r3, #80]	@ 0x50
			gyroPitchCalValue += gyro.y;                                                   //Ad pitch value to gyro_pitch_cal.
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	f9b2 2036 	ldrsh.w	r2, [r2, #54]	@ 0x36
 8003910:	441a      	add	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	655a      	str	r2, [r3, #84]	@ 0x54
			gyroYawCalValue += gyro.z;                                                       //Ad yaw value to gyro_yaw_cal.
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	f9b2 2038 	ldrsh.w	r2, [r2, #56]	@ 0x38
 8003920:	441a      	add	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	659a      	str	r2, [r3, #88]	@ 0x58
			HAL_Delay(4);                                                                       //Small delay to simulate a 250Hz loop during calibration.
 8003926:	2004      	movs	r0, #4
 8003928:	f004 fada 	bl	8007ee0 <HAL_Delay>
		for (IsAlreadyCalibGyro = 0; IsAlreadyCalibGyro < 2000 ; IsAlreadyCalibGyro ++)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	@ 0x134
 8003932:	b29b      	uxth	r3, r3
 8003934:	3301      	adds	r3, #1
 8003936:	b29b      	uxth	r3, r3
 8003938:	b21a      	sxth	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	@ 0x134
 8003946:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800394a:	dbce      	blt.n	80038ea <_ZN7IMU9DOF9CalibGyroEv+0x26>
		}
		// TODO báo hiệu
		//Now that we have 2000 measures, we need to devide by 2000 to get the average gyro offset.
		gyroRollCalValue /= 2000;                                                            //Divide the roll total by 2000.
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003950:	4a0f      	ldr	r2, [pc, #60]	@ (8003990 <_ZN7IMU9DOF9CalibGyroEv+0xcc>)
 8003952:	fb82 1203 	smull	r1, r2, r2, r3
 8003956:	11d2      	asrs	r2, r2, #7
 8003958:	17db      	asrs	r3, r3, #31
 800395a:	1ad2      	subs	r2, r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	651a      	str	r2, [r3, #80]	@ 0x50
		gyroPitchCalValue /= 2000;                                                           //Divide the pitch total by 2000.
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003964:	4a0a      	ldr	r2, [pc, #40]	@ (8003990 <_ZN7IMU9DOF9CalibGyroEv+0xcc>)
 8003966:	fb82 1203 	smull	r1, r2, r2, r3
 800396a:	11d2      	asrs	r2, r2, #7
 800396c:	17db      	asrs	r3, r3, #31
 800396e:	1ad2      	subs	r2, r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	655a      	str	r2, [r3, #84]	@ 0x54
		gyroYawCalValue /= 2000;                                                             //Divide the yaw total by 2000.
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003978:	4a05      	ldr	r2, [pc, #20]	@ (8003990 <_ZN7IMU9DOF9CalibGyroEv+0xcc>)
 800397a:	fb82 1203 	smull	r1, r2, r2, r3
 800397e:	11d2      	asrs	r2, r2, #7
 8003980:	17db      	asrs	r3, r3, #31
 8003982:	1ad2      	subs	r2, r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	659a      	str	r2, [r3, #88]	@ 0x58
	}
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	10624dd3 	.word	0x10624dd3
 8003994:	00000000 	.word	0x00000000

08003998 <_ZN7IMU9DOF12ReadAngleRPYEv>:
 * Gyro → đo thay đổi tức thời
 * Accelerometer → hiệu chỉnh drift Roll/Pitch
 * Compass → hiệu chỉnh drift Yaw
 */
void IMU9DOF::ReadAngleRPY()
{
 8003998:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
	//Gyro angle calculations
	//0.0000611 = 1 / (250Hz / 65.5)
	anglePitch += (float)gyro.y * 0.0000611;        //tính góc pitch angle đã di chuyển and thêm nó vào biến anglepitch .
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fc fdce 	bl	8000548 <__aeabi_f2d>
 80039ac:	4604      	mov	r4, r0
 80039ae:	460d      	mov	r5, r1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039be:	ee17 0a90 	vmov	r0, s15
 80039c2:	f7fc fdc1 	bl	8000548 <__aeabi_f2d>
 80039c6:	a3a3      	add	r3, pc, #652	@ (adr r3, 8003c54 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2bc>)
 80039c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039cc:	f7fc fe14 	bl	80005f8 <__aeabi_dmul>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4620      	mov	r0, r4
 80039d6:	4629      	mov	r1, r5
 80039d8:	f7fc fc58 	bl	800028c <__adddf3>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4610      	mov	r0, r2
 80039e2:	4619      	mov	r1, r3
 80039e4:	f7fd f900 	bl	8000be8 <__aeabi_d2f>
 80039e8:	4602      	mov	r2, r0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	661a      	str	r2, [r3, #96]	@ 0x60
	angleRoll += (float)gyro.x * 0.0000611;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fc fda8 	bl	8000548 <__aeabi_f2d>
 80039f8:	4604      	mov	r4, r0
 80039fa:	460d      	mov	r5, r1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a0a:	ee17 0a90 	vmov	r0, s15
 8003a0e:	f7fc fd9b 	bl	8000548 <__aeabi_f2d>
 8003a12:	a390      	add	r3, pc, #576	@ (adr r3, 8003c54 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2bc>)
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f7fc fdee 	bl	80005f8 <__aeabi_dmul>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4620      	mov	r0, r4
 8003a22:	4629      	mov	r1, r5
 8003a24:	f7fc fc32 	bl	800028c <__adddf3>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	4619      	mov	r1, r3
 8003a30:	f7fd f8da 	bl	8000be8 <__aeabi_d2f>
 8003a34:	4602      	mov	r2, r0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	65da      	str	r2, [r3, #92]	@ 0x5c
	angleYaw += (float)gyro.z * 0.0000611;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fc fd82 	bl	8000548 <__aeabi_f2d>
 8003a44:	4604      	mov	r4, r0
 8003a46:	460d      	mov	r5, r1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a56:	ee17 0a90 	vmov	r0, s15
 8003a5a:	f7fc fd75 	bl	8000548 <__aeabi_f2d>
 8003a5e:	a37d      	add	r3, pc, #500	@ (adr r3, 8003c54 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2bc>)
 8003a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a64:	f7fc fdc8 	bl	80005f8 <__aeabi_dmul>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	4629      	mov	r1, r5
 8003a70:	f7fc fc0c 	bl	800028c <__adddf3>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	f7fd f8b4 	bl	8000be8 <__aeabi_d2f>
 8003a80:	4602      	mov	r2, r0
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	665a      	str	r2, [r3, #100]	@ 0x64
	if (angleYaw < 0) angleYaw += 360;                //Nếu la bàn nhỏ hơn thì 0, 360 được thêm vào để giữ nó trong phạm vi 0 đến 360 độ.
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8003a8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a94:	d50a      	bpl.n	8003aac <_ZN7IMU9DOF12ReadAngleRPYEv+0x114>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8003a9c:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8003c5c <_ZN7IMU9DOF12ReadAngleRPYEv+0x2c4>
 8003aa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
 8003aaa:	e013      	b.n	8003ad4 <_ZN7IMU9DOF12ReadAngleRPYEv+0x13c>
	else if (angleYaw >= 360) angleYaw -= 360;        //Nếu la bànlớn hơn thì 360, 360 được trừ đi để giữ nó trong phạm vi 0 đến 360 độ
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8003ab2:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8003c5c <_ZN7IMU9DOF12ReadAngleRPYEv+0x2c4>
 8003ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003abe:	db09      	blt.n	8003ad4 <_ZN7IMU9DOF12ReadAngleRPYEv+0x13c>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8003ac6:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8003c5c <_ZN7IMU9DOF12ReadAngleRPYEv+0x2c4>
 8003aca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64

	//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) Hàm sin STM32 tính bằng radian chứ không phải độ
	anglePitch -= angleRoll * sin((float)gyro.z * 0.000001066);    //nếu IMU bị lệch thì chuyên roll sang pitch
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fc fd35 	bl	8000548 <__aeabi_f2d>
 8003ade:	4604      	mov	r4, r0
 8003ae0:	460d      	mov	r5, r1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fc fd2e 	bl	8000548 <__aeabi_f2d>
 8003aec:	4680      	mov	r8, r0
 8003aee:	4689      	mov	r9, r1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003afe:	ee17 0a90 	vmov	r0, s15
 8003b02:	f7fc fd21 	bl	8000548 <__aeabi_f2d>
 8003b06:	a350      	add	r3, pc, #320	@ (adr r3, 8003c48 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2b0>)
 8003b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0c:	f7fc fd74 	bl	80005f8 <__aeabi_dmul>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	ec43 2b17 	vmov	d7, r2, r3
 8003b18:	eeb0 0a47 	vmov.f32	s0, s14
 8003b1c:	eef0 0a67 	vmov.f32	s1, s15
 8003b20:	f00a f93e 	bl	800dda0 <sin>
 8003b24:	ec53 2b10 	vmov	r2, r3, d0
 8003b28:	4640      	mov	r0, r8
 8003b2a:	4649      	mov	r1, r9
 8003b2c:	f7fc fd64 	bl	80005f8 <__aeabi_dmul>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4620      	mov	r0, r4
 8003b36:	4629      	mov	r1, r5
 8003b38:	f7fc fba6 	bl	8000288 <__aeabi_dsub>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4610      	mov	r0, r2
 8003b42:	4619      	mov	r1, r3
 8003b44:	f7fd f850 	bl	8000be8 <__aeabi_d2f>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	661a      	str	r2, [r3, #96]	@ 0x60
	angleRoll += anglePitch * sin((float)gyro.z * 0.000001066);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fc fcf8 	bl	8000548 <__aeabi_f2d>
 8003b58:	4604      	mov	r4, r0
 8003b5a:	460d      	mov	r5, r1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fc fcf1 	bl	8000548 <__aeabi_f2d>
 8003b66:	4680      	mov	r8, r0
 8003b68:	4689      	mov	r9, r1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8003b70:	ee07 3a90 	vmov	s15, r3
 8003b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b78:	ee17 0a90 	vmov	r0, s15
 8003b7c:	f7fc fce4 	bl	8000548 <__aeabi_f2d>
 8003b80:	a331      	add	r3, pc, #196	@ (adr r3, 8003c48 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2b0>)
 8003b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b86:	f7fc fd37 	bl	80005f8 <__aeabi_dmul>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	ec43 2b17 	vmov	d7, r2, r3
 8003b92:	eeb0 0a47 	vmov.f32	s0, s14
 8003b96:	eef0 0a67 	vmov.f32	s1, s15
 8003b9a:	f00a f901 	bl	800dda0 <sin>
 8003b9e:	ec53 2b10 	vmov	r2, r3, d0
 8003ba2:	4640      	mov	r0, r8
 8003ba4:	4649      	mov	r1, r9
 8003ba6:	f7fc fd27 	bl	80005f8 <__aeabi_dmul>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4620      	mov	r0, r4
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	f7fc fb6b 	bl	800028c <__adddf3>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4610      	mov	r0, r2
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	f7fd f813 	bl	8000be8 <__aeabi_d2f>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	65da      	str	r2, [r3, #92]	@ 0x5c

	angleYaw -= CourseDeviation(angleYaw, actualCompassHeading) / 1200.0; //Tính toán sự khác biệt giữa actualCompassHeading và angleYaw và thực hiện một hiệu chỉnh nhỏ.
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	ed93 7a04 	vldr	s14, [r3, #16]
 8003bd4:	eef0 0a47 	vmov.f32	s1, s14
 8003bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fa2b 	bl	8004038 <_ZN7IMU9DOF15CourseDeviationEff>
 8003be2:	ee10 3a10 	vmov	r3, s0
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fc fcae 	bl	8000548 <__aeabi_f2d>
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	4b17      	ldr	r3, [pc, #92]	@ (8003c50 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2b8>)
 8003bf2:	f7fc fe2b 	bl	800084c <__aeabi_ddiv>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4614      	mov	r4, r2
 8003bfc:	461d      	mov	r5, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fc fca0 	bl	8000548 <__aeabi_f2d>
 8003c08:	4622      	mov	r2, r4
 8003c0a:	462b      	mov	r3, r5
 8003c0c:	f7fc fb3c 	bl	8000288 <__aeabi_dsub>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4610      	mov	r0, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	f7fc ffe6 	bl	8000be8 <__aeabi_d2f>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	665a      	str	r2, [r3, #100]	@ 0x64
	if (angleYaw < 0) angleYaw += 360;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8003c28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c30:	d516      	bpl.n	8003c60 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2c8>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8003c38:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8003c5c <_ZN7IMU9DOF12ReadAngleRPYEv+0x2c4>
 8003c3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
 8003c46:	e01f      	b.n	8003c88 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2f0>
 8003c48:	652c6e62 	.word	0x652c6e62
 8003c4c:	3eb1e26f 	.word	0x3eb1e26f
 8003c50:	4092c000 	.word	0x4092c000
 8003c54:	01d41596 	.word	0x01d41596
 8003c58:	3f10045a 	.word	0x3f10045a
 8003c5c:	43b40000 	.word	0x43b40000
	else if (angleYaw >= 360) angleYaw -= 360;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8003c66:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 8003c5c <_ZN7IMU9DOF12ReadAngleRPYEv+0x2c4>
 8003c6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c72:	db09      	blt.n	8003c88 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2f0>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8003c7a:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 8003c5c <_ZN7IMU9DOF12ReadAngleRPYEv+0x2c4>
 8003c7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64


	//Accelerometer angle calculations
	accelTotalVector = sqrt((accel.x * accel.x) + (accel.y * accel.y) + (accel.z * accel.z));    //Tính tổng vectơ gia tốc kế.
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8003c8e:	461a      	mov	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8003c96:	fb03 f202 	mul.w	r2, r3, r2
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	441a      	add	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fa2a 	bl	800411c <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8003cc8:	ec53 2b10 	vmov	r2, r3, d0
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	f7fc ff42 	bl	8000b58 <__aeabi_d2iz>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

	if (abs(accel.y) < accelTotalVector) {                                             //tránh góc asin bị lỗi.
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	bfb8      	it	lt
 8003ce6:	425b      	neglt	r3, r3
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	da27      	bge.n	8003d46 <_ZN7IMU9DOF12ReadAngleRPYEv+0x3ae>
		anglePitchAccel = asin((float)accel.y / accelTotalVector) * 57.296;              //Calculate the pitch angle.
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8003cfc:	ee07 3a90 	vmov	s15, r3
 8003d00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d12:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d16:	eeb0 0a66 	vmov.f32	s0, s13
 8003d1a:	f7fe fb9e 	bl	800245a <_ZSt4asinf>
 8003d1e:	ee10 3a10 	vmov	r3, s0
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fc fc10 	bl	8000548 <__aeabi_f2d>
 8003d28:	a34d      	add	r3, pc, #308	@ (adr r3, 8003e60 <_ZN7IMU9DOF12ReadAngleRPYEv+0x4c8>)
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f7fc fc63 	bl	80005f8 <__aeabi_dmul>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f7fc ff55 	bl	8000be8 <__aeabi_d2f>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
	}
	if (abs(accel.x) < accelTotalVector) {                                             //tránh góc asin bị lỗi.
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bfb8      	it	lt
 8003d50:	425b      	neglt	r3, r3
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	461a      	mov	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	da27      	bge.n	8003db0 <_ZN7IMU9DOF12ReadAngleRPYEv+0x418>
		angleRollAccel = asin((float)accel.x / accelTotalVector) * 57.296;               //Calculate the roll angle.
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003d74:	ee07 3a90 	vmov	s15, r3
 8003d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d80:	eeb0 0a66 	vmov.f32	s0, s13
 8003d84:	f7fe fb69 	bl	800245a <_ZSt4asinf>
 8003d88:	ee10 3a10 	vmov	r3, s0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fc fbdb 	bl	8000548 <__aeabi_f2d>
 8003d92:	a333      	add	r3, pc, #204	@ (adr r3, 8003e60 <_ZN7IMU9DOF12ReadAngleRPYEv+0x4c8>)
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	f7fc fc2e 	bl	80005f8 <__aeabi_dmul>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4610      	mov	r0, r2
 8003da2:	4619      	mov	r1, r3
 8003da4:	f7fc ff20 	bl	8000be8 <__aeabi_d2f>
 8003da8:	4602      	mov	r2, r0
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	}

	anglePitch = anglePitch * 0.9996 + anglePitchAccel * 0.0004;                   //Hiệu chỉnh độ lệch góc của con quay hồi chuyển bằng góc của gia tốc kế..
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fc fbc7 	bl	8000548 <__aeabi_f2d>
 8003dba:	a32b      	add	r3, pc, #172	@ (adr r3, 8003e68 <_ZN7IMU9DOF12ReadAngleRPYEv+0x4d0>)
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f7fc fc1a 	bl	80005f8 <__aeabi_dmul>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4614      	mov	r4, r2
 8003dca:	461d      	mov	r5, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fc fbb8 	bl	8000548 <__aeabi_f2d>
 8003dd8:	a325      	add	r3, pc, #148	@ (adr r3, 8003e70 <_ZN7IMU9DOF12ReadAngleRPYEv+0x4d8>)
 8003dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dde:	f7fc fc0b 	bl	80005f8 <__aeabi_dmul>
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4620      	mov	r0, r4
 8003de8:	4629      	mov	r1, r5
 8003dea:	f7fc fa4f 	bl	800028c <__adddf3>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	f7fc fef7 	bl	8000be8 <__aeabi_d2f>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	661a      	str	r2, [r3, #96]	@ 0x60
	angleRoll = angleRoll * 0.9996 + angleRollAccel * 0.0004;                      //Điều chỉnh độ lệch của góc con quay hồi chuyển bằng góc của gia tốc kế
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fc fb9f 	bl	8000548 <__aeabi_f2d>
 8003e0a:	a317      	add	r3, pc, #92	@ (adr r3, 8003e68 <_ZN7IMU9DOF12ReadAngleRPYEv+0x4d0>)
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f7fc fbf2 	bl	80005f8 <__aeabi_dmul>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4614      	mov	r4, r2
 8003e1a:	461d      	mov	r5, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fc fb90 	bl	8000548 <__aeabi_f2d>
 8003e28:	a311      	add	r3, pc, #68	@ (adr r3, 8003e70 <_ZN7IMU9DOF12ReadAngleRPYEv+0x4d8>)
 8003e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2e:	f7fc fbe3 	bl	80005f8 <__aeabi_dmul>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4620      	mov	r0, r4
 8003e38:	4629      	mov	r1, r5
 8003e3a:	f7fc fa27 	bl	800028c <__adddf3>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4610      	mov	r0, r2
 8003e44:	4619      	mov	r1, r3
 8003e46:	f7fc fecf 	bl	8000be8 <__aeabi_d2f>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	65da      	str	r2, [r3, #92]	@ 0x5c

}
 8003e50:	bf00      	nop
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e5a:	bf00      	nop
 8003e5c:	f3af 8000 	nop.w
 8003e60:	53f7ced9 	.word	0x53f7ced9
 8003e64:	404ca5e3 	.word	0x404ca5e3
 8003e68:	23a29c78 	.word	0x23a29c78
 8003e6c:	3feffcb9 	.word	0x3feffcb9
 8003e70:	eb1c432d 	.word	0xeb1c432d
 8003e74:	3f3a36e2 	.word	0x3f3a36e2

08003e78 <_ZN7IMU9DOF18CalculateGyroInputEv>:
 * tính giá trị tốc độ góc (deg/sec) dùng cho PID hoặc điều khiển,
 * dựa trên dữ liệu từ gyroscope của MPU6050, đồng thời làm mượt tín hiệu
 * bằng bộ lọc trung bình lũy thừa (exponential moving average).
 */
void IMU9DOF::CalculateGyroInput()   //65.5 = 1 deg/sec (check the datasheet of the MPU-6050 for more information).
{
 8003e78:	b5b0      	push	{r4, r5, r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
	gyro.rollInput = (gyro.rollInput * 0.7) + (((float)gyro.x / 65.5) * 0.3);  //Gyro pid input is deg/sec.
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fc fb5f 	bl	8000548 <__aeabi_f2d>
 8003e8a:	a351      	add	r3, pc, #324	@ (adr r3, 8003fd0 <_ZN7IMU9DOF18CalculateGyroInputEv+0x158>)
 8003e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e90:	f7fc fbb2 	bl	80005f8 <__aeabi_dmul>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4614      	mov	r4, r2
 8003e9a:	461d      	mov	r5, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eaa:	ee17 0a90 	vmov	r0, s15
 8003eae:	f7fc fb4b 	bl	8000548 <__aeabi_f2d>
 8003eb2:	a349      	add	r3, pc, #292	@ (adr r3, 8003fd8 <_ZN7IMU9DOF18CalculateGyroInputEv+0x160>)
 8003eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb8:	f7fc fcc8 	bl	800084c <__aeabi_ddiv>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	a346      	add	r3, pc, #280	@ (adr r3, 8003fe0 <_ZN7IMU9DOF18CalculateGyroInputEv+0x168>)
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	f7fc fb95 	bl	80005f8 <__aeabi_dmul>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	f7fc f9d9 	bl	800028c <__adddf3>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4610      	mov	r0, r2
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f7fc fe81 	bl	8000be8 <__aeabi_d2f>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	63da      	str	r2, [r3, #60]	@ 0x3c
	gyro.pitchInput = (gyro.pitchInput * 0.7) + (((float)gyro.y / 65.5) * 0.3);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fc fb29 	bl	8000548 <__aeabi_f2d>
 8003ef6:	a336      	add	r3, pc, #216	@ (adr r3, 8003fd0 <_ZN7IMU9DOF18CalculateGyroInputEv+0x158>)
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	f7fc fb7c 	bl	80005f8 <__aeabi_dmul>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4614      	mov	r4, r2
 8003f06:	461d      	mov	r5, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f16:	ee17 0a90 	vmov	r0, s15
 8003f1a:	f7fc fb15 	bl	8000548 <__aeabi_f2d>
 8003f1e:	a32e      	add	r3, pc, #184	@ (adr r3, 8003fd8 <_ZN7IMU9DOF18CalculateGyroInputEv+0x160>)
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f7fc fc92 	bl	800084c <__aeabi_ddiv>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	4619      	mov	r1, r3
 8003f30:	a32b      	add	r3, pc, #172	@ (adr r3, 8003fe0 <_ZN7IMU9DOF18CalculateGyroInputEv+0x168>)
 8003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f36:	f7fc fb5f 	bl	80005f8 <__aeabi_dmul>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4620      	mov	r0, r4
 8003f40:	4629      	mov	r1, r5
 8003f42:	f7fc f9a3 	bl	800028c <__adddf3>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	f7fc fe4b 	bl	8000be8 <__aeabi_d2f>
 8003f52:	4602      	mov	r2, r0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	641a      	str	r2, [r3, #64]	@ 0x40
	gyro.yawInput = (gyro.yawInput * 0.7) + (((float)gyro.z / 65.5) * 0.3);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fc faf3 	bl	8000548 <__aeabi_f2d>
 8003f62:	a31b      	add	r3, pc, #108	@ (adr r3, 8003fd0 <_ZN7IMU9DOF18CalculateGyroInputEv+0x158>)
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	f7fc fb46 	bl	80005f8 <__aeabi_dmul>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4614      	mov	r4, r2
 8003f72:	461d      	mov	r5, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f82:	ee17 0a90 	vmov	r0, s15
 8003f86:	f7fc fadf 	bl	8000548 <__aeabi_f2d>
 8003f8a:	a313      	add	r3, pc, #76	@ (adr r3, 8003fd8 <_ZN7IMU9DOF18CalculateGyroInputEv+0x160>)
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	f7fc fc5c 	bl	800084c <__aeabi_ddiv>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4610      	mov	r0, r2
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	a310      	add	r3, pc, #64	@ (adr r3, 8003fe0 <_ZN7IMU9DOF18CalculateGyroInputEv+0x168>)
 8003f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa2:	f7fc fb29 	bl	80005f8 <__aeabi_dmul>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4620      	mov	r0, r4
 8003fac:	4629      	mov	r1, r5
 8003fae:	f7fc f96d 	bl	800028c <__adddf3>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f7fc fe15 	bl	8000be8 <__aeabi_d2f>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8003fc4:	bf00      	nop
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bdb0      	pop	{r4, r5, r7, pc}
 8003fcc:	f3af 8000 	nop.w
 8003fd0:	66666666 	.word	0x66666666
 8003fd4:	3fe66666 	.word	0x3fe66666
 8003fd8:	00000000 	.word	0x00000000
 8003fdc:	40506000 	.word	0x40506000
 8003fe0:	33333333 	.word	0x33333333
 8003fe4:	3fd33333 	.word	0x3fd33333

08003fe8 <_ZN7IMU9DOF14setLevelAdjustEhh>:
 * Khi khởi động, drone có thể không hoàn toàn thăng bằng.
 * Hàm này tính ra offset ban đầu (pitchLevelAdjust và rollLevelAdjust)
 *  dùng để bù góc lệch trong các thuật toán cân bằng sau đó.
 */
void IMU9DOF::setLevelAdjust(uint8_t theRateRoll, uint8_t theRatePitch)// hiệu chỉnh cân bằng ban đầu khi khởi động
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	70fb      	strb	r3, [r7, #3]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	70bb      	strb	r3, [r7, #2]
	pitchLevelAdjust = anglePitch * theRatePitch;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8003ffe:	78bb      	ldrb	r3, [r7, #2]
 8004000:	ee07 3a90 	vmov	s15, r3
 8004004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
	rollLevelAdjust = angleRoll * theRateRoll;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <_ZN7IMU9DOF15CourseDeviationEff>:
/*
 * tính sai lệch góc giữa hai hướng (course/heading) theo compass,
 * với xử lý đặc biệt khi góc vượt quá 180° để tránh lỗi “quay vòng” của la bàn.
 */
float IMU9DOF::CourseDeviation(float theValue1, float theValue2)
{
 8004038:	b480      	push	{r7}
 800403a:	b089      	sub	sp, #36	@ 0x24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	ed87 0a02 	vstr	s0, [r7, #8]
 8004044:	edc7 0a01 	vstr	s1, [r7, #4]
	float actualCourseMirrored = 0;
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
	float baseCourseMirrored = 0;
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	61bb      	str	r3, [r7, #24]
	float result = theValue1 - theValue2;
 8004054:	ed97 7a02 	vldr	s14, [r7, #8]
 8004058:	edd7 7a01 	vldr	s15, [r7, #4]
 800405c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004060:	edc7 7a05 	vstr	s15, [r7, #20]

	if (result < -180 || result > 180) {
 8004064:	edd7 7a05 	vldr	s15, [r7, #20]
 8004068:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8004114 <_ZN7IMU9DOF15CourseDeviationEff+0xdc>
 800406c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004074:	d408      	bmi.n	8004088 <_ZN7IMU9DOF15CourseDeviationEff+0x50>
 8004076:	edd7 7a05 	vldr	s15, [r7, #20]
 800407a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8004118 <_ZN7IMU9DOF15CourseDeviationEff+0xe0>
 800407e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004086:	dd3b      	ble.n	8004100 <_ZN7IMU9DOF15CourseDeviationEff+0xc8>
		if (theValue2 > 180){
 8004088:	edd7 7a01 	vldr	s15, [r7, #4]
 800408c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004118 <_ZN7IMU9DOF15CourseDeviationEff+0xe0>
 8004090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004098:	dd08      	ble.n	80040ac <_ZN7IMU9DOF15CourseDeviationEff+0x74>
			baseCourseMirrored = theValue2 - 180;
 800409a:	edd7 7a01 	vldr	s15, [r7, #4]
 800409e:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8004118 <_ZN7IMU9DOF15CourseDeviationEff+0xe0>
 80040a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040a6:	edc7 7a06 	vstr	s15, [r7, #24]
 80040aa:	e007      	b.n	80040bc <_ZN7IMU9DOF15CourseDeviationEff+0x84>
		}
		else {
			baseCourseMirrored = theValue2 + 180;
 80040ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80040b0:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8004118 <_ZN7IMU9DOF15CourseDeviationEff+0xe0>
 80040b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040b8:	edc7 7a06 	vstr	s15, [r7, #24]
		}
		if (theValue1 > 180){
 80040bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80040c0:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8004118 <_ZN7IMU9DOF15CourseDeviationEff+0xe0>
 80040c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040cc:	dd08      	ble.n	80040e0 <_ZN7IMU9DOF15CourseDeviationEff+0xa8>
			actualCourseMirrored = theValue1 - 180;
 80040ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80040d2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004118 <_ZN7IMU9DOF15CourseDeviationEff+0xe0>
 80040d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040da:	edc7 7a07 	vstr	s15, [r7, #28]
 80040de:	e007      	b.n	80040f0 <_ZN7IMU9DOF15CourseDeviationEff+0xb8>
		}
		else {
			actualCourseMirrored = theValue1 + 180;
 80040e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80040e4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004118 <_ZN7IMU9DOF15CourseDeviationEff+0xe0>
 80040e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040ec:	edc7 7a07 	vstr	s15, [r7, #28]
		}
		result = actualCourseMirrored - baseCourseMirrored;
 80040f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80040f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80040f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040fc:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return result;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	ee07 3a90 	vmov	s15, r3
}
 8004106:	eeb0 0a67 	vmov.f32	s0, s15
 800410a:	3724      	adds	r7, #36	@ 0x24
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	c3340000 	.word	0xc3340000
 8004118:	43340000 	.word	0x43340000

0800411c <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7fc f9fd 	bl	8000524 <__aeabi_i2d>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	ec43 2b10 	vmov	d0, r2, r3
 8004132:	f009 fdb3 	bl	800dc9c <sqrt>
 8004136:	eeb0 7a40 	vmov.f32	s14, s0
 800413a:	eef0 7a60 	vmov.f32	s15, s1
 800413e:	eeb0 0a47 	vmov.f32	s0, s14
 8004142:	eef0 0a67 	vmov.f32	s1, s15
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <_ZN8MySerialC1EP20__UART_HandleTypeDef>:
 */

#include <string.h>
#include "MySerial.h"

MySerial::MySerial(UART_HandleTypeDef *huart)
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
{
	uart = huart;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	601a      	str	r2, [r3, #0]
	rx_buffer = { { 0 }, 0, 0};
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3304      	adds	r3, #4
 8004160:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f00c ff87 	bl	801107a <memset>
	tx_buffer = { { 0 }, 0, 0};
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8004172:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f00c ff7e 	bl	801107a <memset>
}
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <_ZN8MySerial4InitEv>:
void MySerial::Init(void)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	_rx_buffer = &rx_buffer;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	1d1a      	adds	r2, r3, #4
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	_tx_buffer = &tx_buffer;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f503 7286 	add.w	r2, r3, #268	@ 0x10c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695a      	ldr	r2, [r3, #20]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0201 	orr.w	r2, r2, #1
 80041b8:	615a      	str	r2, [r3, #20]

	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f042 0220 	orr.w	r2, r2, #32
 80041cc:	60da      	str	r2, [r3, #12]
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <_ZN8MySerial9StoreCharEhP12RingBuffer_t>:

void MySerial::StoreChar(unsigned char c, RingBuffer_t *buffer)
{
 80041da:	b480      	push	{r7}
 80041dc:	b087      	sub	sp, #28
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	460b      	mov	r3, r1
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	72fb      	strb	r3, [r7, #11]
	unsigned int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80041ee:	3301      	adds	r3, #1
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	617b      	str	r3, [r7, #20]

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if(i != buffer->tail) {
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	bf14      	ite	ne
 8004200:	2301      	movne	r3, #1
 8004202:	2300      	moveq	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <_ZN8MySerial9StoreCharEhP12RingBuffer_t+0x44>
		buffer->buffer[buffer->head] = c;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	7af9      	ldrb	r1, [r7, #11]
 8004214:	54d1      	strb	r1, [r2, r3]
		buffer->head = i;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	}
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <_ZN8MySerial4ReadEv>:
int MySerial::Read(void)
{
 800422a:	b480      	push	{r7}
 800422c:	b085      	sub	sp, #20
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
	// if the head isn't ahead of the tail, we don't have any characters
	if(_rx_buffer->head == _rx_buffer->tail)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004238:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004242:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8004246:	429a      	cmp	r2, r3
 8004248:	bf0c      	ite	eq
 800424a:	2301      	moveq	r3, #1
 800424c:	2300      	movne	r3, #0
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <_ZN8MySerial4ReadEv+0x30>
	{
		return -1;
 8004254:	f04f 33ff 	mov.w	r3, #4294967295
 8004258:	e016      	b.n	8004288 <_ZN8MySerial4ReadEv+0x5e>
	}
	else
	{
		unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004266:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800426a:	5cd3      	ldrb	r3, [r2, r3]
 800426c:	73fb      	strb	r3, [r7, #15]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004274:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
		return c;
 8004286:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <_ZN8MySerial15IsDataAvailableEv>:
//				HAL_UART_Transmit(uart, _tx_buffer->buffer, sizeof(_tx_buffer->buffer), 1000);

	}
}
int MySerial::IsDataAvailable(void)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
	return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80042a2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80042ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80042bc:	b29b      	uxth	r3, r3
 80042be:	b2db      	uxtb	r3, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <_ZN8MySerial7UartIsrEv>:
	return 0;
}


void MySerial::UartIsr ()
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	uint32_t isrflags   = READ_REG(this->uart->Instance->SR);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(this->uart->Instance->CR1);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d016      	beq.n	8004320 <_ZN8MySerial7UartIsrEv+0x54>
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d011      	beq.n	8004320 <_ZN8MySerial7UartIsrEv+0x54>
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.

		 *********************/
		this->uart->Instance->SR;                       /* Read status register */
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
		unsigned char c = this->uart->Instance->DR;     /* Read data register */
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	73fb      	strb	r3, [r7, #15]
		this->StoreChar(c, _rx_buffer);  // store data in buffer
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	4619      	mov	r1, r3
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff ff5e 	bl	80041da <_ZN8MySerial9StoreCharEhP12RingBuffer_t>
		return;
 800431e:	e03b      	b.n	8004398 <_ZN8MySerial7UartIsrEv+0xcc>
	}

	/*If interrupt is caused due to Transmit Data Register Empty */
	if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004326:	2b00      	cmp	r3, #0
 8004328:	d036      	beq.n	8004398 <_ZN8MySerial7UartIsrEv+0xcc>
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004330:	2b00      	cmp	r3, #0
 8004332:	d031      	beq.n	8004398 <_ZN8MySerial7UartIsrEv+0xcc>
	{
		if(tx_buffer.head == tx_buffer.tail)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004340:	429a      	cmp	r2, r3
 8004342:	bf0c      	ite	eq
 8004344:	2301      	moveq	r3, #1
 8004346:	2300      	movne	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <_ZN8MySerial7UartIsrEv+0x98>
		{
			// Buffer empty, so disable interrupts
			__HAL_UART_DISABLE_IT(this->uart, UART_IT_TXE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004360:	60da      	str	r2, [r3, #12]

			this->uart->Instance->SR;
			this->uart->Instance->DR = c;

		}
		return;
 8004362:	e018      	b.n	8004396 <_ZN8MySerial7UartIsrEv+0xca>
			unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4413      	add	r3, r2
 800436e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8004372:	73bb      	strb	r3, [r7, #14]
			tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800437a:	3301      	adds	r3, #1
 800437c:	b2da      	uxtb	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			this->uart->Instance->SR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
			this->uart->Instance->DR = c;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	7bba      	ldrb	r2, [r7, #14]
 8004394:	605a      	str	r2, [r3, #4]
		return;
 8004396:	bf00      	nop
	}
}
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <CS_Select>:
#define NRF24_CSN_PORT   GPIOA
#define NRF24_CSN_PIN    GPIO_PIN_4


void CS_Select (void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 80043a4:	2200      	movs	r2, #0
 80043a6:	2110      	movs	r1, #16
 80043a8:	4802      	ldr	r0, [pc, #8]	@ (80043b4 <CS_Select+0x14>)
 80043aa:	f004 fd2f 	bl	8008e0c <HAL_GPIO_WritePin>
}
 80043ae:	bf00      	nop
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40020000 	.word	0x40020000

080043b8 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80043bc:	2201      	movs	r2, #1
 80043be:	2110      	movs	r1, #16
 80043c0:	4802      	ldr	r0, [pc, #8]	@ (80043cc <CS_UnSelect+0x14>)
 80043c2:	f004 fd23 	bl	8008e0c <HAL_GPIO_WritePin>
}
 80043c6:	bf00      	nop
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40020000 	.word	0x40020000

080043d0 <CE_Enable>:


void CE_Enable (void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80043d4:	2201      	movs	r2, #1
 80043d6:	2120      	movs	r1, #32
 80043d8:	4802      	ldr	r0, [pc, #8]	@ (80043e4 <CE_Enable+0x14>)
 80043da:	f004 fd17 	bl	8008e0c <HAL_GPIO_WritePin>
}
 80043de:	bf00      	nop
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40020800 	.word	0x40020800

080043e8 <CE_Disable>:

void CE_Disable (void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80043ec:	2200      	movs	r2, #0
 80043ee:	2120      	movs	r1, #32
 80043f0:	4802      	ldr	r0, [pc, #8]	@ (80043fc <CE_Disable+0x14>)
 80043f2:	f004 fd0b 	bl	8008e0c <HAL_GPIO_WritePin>
}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40020800 	.word	0x40020800

08004400 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	460a      	mov	r2, r1
 800440a:	71fb      	strb	r3, [r7, #7]
 800440c:	4613      	mov	r3, r2
 800440e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	f043 0320 	orr.w	r3, r3, #32
 8004416:	b2db      	uxtb	r3, r3
 8004418:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 800441a:	79bb      	ldrb	r3, [r7, #6]
 800441c:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800441e:	f7ff ffbf 	bl	80043a0 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8004422:	f107 010c 	add.w	r1, r7, #12
 8004426:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800442a:	2202      	movs	r2, #2
 800442c:	4804      	ldr	r0, [pc, #16]	@ (8004440 <nrf24_WriteReg+0x40>)
 800442e:	f006 ffd4 	bl	800b3da <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8004432:	f7ff ffc1 	bl	80043b8 <CS_UnSelect>
}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000554 	.word	0x20000554

08004444 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	f043 0320 	orr.w	r3, r3, #32
 8004458:	b2db      	uxtb	r3, r3
 800445a:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800445c:	f7ff ffa0 	bl	80043a0 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8004460:	f107 0114 	add.w	r1, r7, #20
 8004464:	2364      	movs	r3, #100	@ 0x64
 8004466:	2201      	movs	r2, #1
 8004468:	4808      	ldr	r0, [pc, #32]	@ (800448c <nrf24_WriteRegMulti+0x48>)
 800446a:	f006 ffb6 	bl	800b3da <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	b29a      	uxth	r2, r3
 8004472:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	4804      	ldr	r0, [pc, #16]	@ (800448c <nrf24_WriteRegMulti+0x48>)
 800447a:	f006 ffae 	bl	800b3da <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800447e:	f7ff ff9b 	bl	80043b8 <CS_UnSelect>
}
 8004482:	bf00      	nop
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	20000554 	.word	0x20000554

08004490 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800449a:	2300      	movs	r3, #0
 800449c:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800449e:	f7ff ff7f 	bl	80043a0 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80044a2:	1df9      	adds	r1, r7, #7
 80044a4:	2364      	movs	r3, #100	@ 0x64
 80044a6:	2201      	movs	r2, #1
 80044a8:	4808      	ldr	r0, [pc, #32]	@ (80044cc <nrf24_ReadReg+0x3c>)
 80044aa:	f006 ff96 	bl	800b3da <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 80044ae:	f107 010f 	add.w	r1, r7, #15
 80044b2:	2364      	movs	r3, #100	@ 0x64
 80044b4:	2201      	movs	r2, #1
 80044b6:	4805      	ldr	r0, [pc, #20]	@ (80044cc <nrf24_ReadReg+0x3c>)
 80044b8:	f007 f8d3 	bl	800b662 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80044bc:	f7ff ff7c 	bl	80043b8 <CS_UnSelect>

	return data;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	20000554 	.word	0x20000554

080044d0 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80044da:	f7ff ff61 	bl	80043a0 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80044de:	1df9      	adds	r1, r7, #7
 80044e0:	2364      	movs	r3, #100	@ 0x64
 80044e2:	2201      	movs	r2, #1
 80044e4:	4804      	ldr	r0, [pc, #16]	@ (80044f8 <nrfsendCmd+0x28>)
 80044e6:	f006 ff78 	bl	800b3da <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80044ea:	f7ff ff65 	bl	80043b8 <CS_UnSelect>
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000554 	.word	0x20000554

080044fc <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	2b07      	cmp	r3, #7
 800450a:	d104      	bne.n	8004516 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 800450c:	2100      	movs	r1, #0
 800450e:	2007      	movs	r0, #7
 8004510:	f7ff ff76 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8004514:	e090      	b.n	8004638 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	2b17      	cmp	r3, #23
 800451a:	d104      	bne.n	8004526 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 800451c:	2111      	movs	r1, #17
 800451e:	2017      	movs	r0, #23
 8004520:	f7ff ff6e 	bl	8004400 <nrf24_WriteReg>
}
 8004524:	e088      	b.n	8004638 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8004526:	2108      	movs	r1, #8
 8004528:	2000      	movs	r0, #0
 800452a:	f7ff ff69 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 800452e:	213f      	movs	r1, #63	@ 0x3f
 8004530:	2001      	movs	r0, #1
 8004532:	f7ff ff65 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8004536:	2103      	movs	r1, #3
 8004538:	2002      	movs	r0, #2
 800453a:	f7ff ff61 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 800453e:	2103      	movs	r1, #3
 8004540:	2003      	movs	r0, #3
 8004542:	f7ff ff5d 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8004546:	2103      	movs	r1, #3
 8004548:	2004      	movs	r0, #4
 800454a:	f7ff ff59 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 800454e:	2102      	movs	r1, #2
 8004550:	2005      	movs	r0, #5
 8004552:	f7ff ff55 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8004556:	210e      	movs	r1, #14
 8004558:	2006      	movs	r0, #6
 800455a:	f7ff ff51 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 800455e:	2100      	movs	r1, #0
 8004560:	2007      	movs	r0, #7
 8004562:	f7ff ff4d 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8004566:	2100      	movs	r1, #0
 8004568:	2008      	movs	r0, #8
 800456a:	f7ff ff49 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800456e:	2100      	movs	r1, #0
 8004570:	2009      	movs	r0, #9
 8004572:	f7ff ff45 	bl	8004400 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8004576:	4a32      	ldr	r2, [pc, #200]	@ (8004640 <nrf24_reset+0x144>)
 8004578:	f107 0318 	add.w	r3, r7, #24
 800457c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004580:	6018      	str	r0, [r3, #0]
 8004582:	3304      	adds	r3, #4
 8004584:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8004586:	f107 0318 	add.w	r3, r7, #24
 800458a:	2205      	movs	r2, #5
 800458c:	4619      	mov	r1, r3
 800458e:	200a      	movs	r0, #10
 8004590:	f7ff ff58 	bl	8004444 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8004594:	4a2b      	ldr	r2, [pc, #172]	@ (8004644 <nrf24_reset+0x148>)
 8004596:	f107 0310 	add.w	r3, r7, #16
 800459a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800459e:	6018      	str	r0, [r3, #0]
 80045a0:	3304      	adds	r3, #4
 80045a2:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80045a4:	f107 0310 	add.w	r3, r7, #16
 80045a8:	2205      	movs	r2, #5
 80045aa:	4619      	mov	r1, r3
 80045ac:	200b      	movs	r0, #11
 80045ae:	f7ff ff49 	bl	8004444 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80045b2:	21c3      	movs	r1, #195	@ 0xc3
 80045b4:	200c      	movs	r0, #12
 80045b6:	f7ff ff23 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80045ba:	21c4      	movs	r1, #196	@ 0xc4
 80045bc:	200d      	movs	r0, #13
 80045be:	f7ff ff1f 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80045c2:	21c5      	movs	r1, #197	@ 0xc5
 80045c4:	200e      	movs	r0, #14
 80045c6:	f7ff ff1b 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80045ca:	21c6      	movs	r1, #198	@ 0xc6
 80045cc:	200f      	movs	r0, #15
 80045ce:	f7ff ff17 	bl	8004400 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80045d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004640 <nrf24_reset+0x144>)
 80045d4:	f107 0308 	add.w	r3, r7, #8
 80045d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045dc:	6018      	str	r0, [r3, #0]
 80045de:	3304      	adds	r3, #4
 80045e0:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80045e2:	f107 0308 	add.w	r3, r7, #8
 80045e6:	2205      	movs	r2, #5
 80045e8:	4619      	mov	r1, r3
 80045ea:	2010      	movs	r0, #16
 80045ec:	f7ff ff2a 	bl	8004444 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80045f0:	2100      	movs	r1, #0
 80045f2:	2011      	movs	r0, #17
 80045f4:	f7ff ff04 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80045f8:	2100      	movs	r1, #0
 80045fa:	2012      	movs	r0, #18
 80045fc:	f7ff ff00 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8004600:	2100      	movs	r1, #0
 8004602:	2013      	movs	r0, #19
 8004604:	f7ff fefc 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8004608:	2100      	movs	r1, #0
 800460a:	2014      	movs	r0, #20
 800460c:	f7ff fef8 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8004610:	2100      	movs	r1, #0
 8004612:	2015      	movs	r0, #21
 8004614:	f7ff fef4 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8004618:	2100      	movs	r1, #0
 800461a:	2016      	movs	r0, #22
 800461c:	f7ff fef0 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8004620:	2111      	movs	r1, #17
 8004622:	2017      	movs	r0, #23
 8004624:	f7ff feec 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8004628:	2100      	movs	r1, #0
 800462a:	201c      	movs	r0, #28
 800462c:	f7ff fee8 	bl	8004400 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8004630:	2100      	movs	r1, #0
 8004632:	201d      	movs	r0, #29
 8004634:	f7ff fee4 	bl	8004400 <nrf24_WriteReg>
}
 8004638:	bf00      	nop
 800463a:	3720      	adds	r7, #32
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	08014710 	.word	0x08014710
 8004644:	08014718 	.word	0x08014718

08004648 <NRF24_Init>:




void NRF24_Init (void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 800464c:	f7ff fecc 	bl	80043e8 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8004650:	2000      	movs	r0, #0
 8004652:	f7ff ff53 	bl	80044fc <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8004656:	2100      	movs	r1, #0
 8004658:	2000      	movs	r0, #0
 800465a:	f7ff fed1 	bl	8004400 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 800465e:	2100      	movs	r1, #0
 8004660:	2001      	movs	r0, #1
 8004662:	f7ff fecd 	bl	8004400 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8004666:	2100      	movs	r1, #0
 8004668:	2002      	movs	r0, #2
 800466a:	f7ff fec9 	bl	8004400 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800466e:	2103      	movs	r1, #3
 8004670:	2003      	movs	r0, #3
 8004672:	f7ff fec5 	bl	8004400 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8004676:	2100      	movs	r1, #0
 8004678:	2004      	movs	r0, #4
 800467a:	f7ff fec1 	bl	8004400 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800467e:	2100      	movs	r1, #0
 8004680:	2005      	movs	r0, #5
 8004682:	f7ff febd 	bl	8004400 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8004686:	210e      	movs	r1, #14
 8004688:	2006      	movs	r0, #6
 800468a:	f7ff feb9 	bl	8004400 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800468e:	f7ff fe9f 	bl	80043d0 <CE_Enable>

}
 8004692:	bf00      	nop
 8004694:	bd80      	pop	{r7, pc}

08004696 <NRF24_RxMode>:

	return 0;
}

void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	460b      	mov	r3, r1
 80046a0:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 80046a2:	f7ff fea1 	bl	80043e8 <CE_Disable>

	nrf24_reset (STATUS);
 80046a6:	2007      	movs	r0, #7
 80046a8:	f7ff ff28 	bl	80044fc <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	4619      	mov	r1, r3
 80046b0:	2005      	movs	r0, #5
 80046b2:	f7ff fea5 	bl	8004400 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 80046b6:	2002      	movs	r0, #2
 80046b8:	f7ff feea 	bl	8004490 <nrf24_ReadReg>
 80046bc:	4603      	mov	r3, r0
 80046be:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	f043 0304 	orr.w	r3, r3, #4
 80046c6:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	4619      	mov	r1, r3
 80046cc:	2002      	movs	r0, #2
 80046ce:	f7ff fe97 	bl	8004400 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80046d2:	2205      	movs	r2, #5
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	200b      	movs	r0, #11
 80046d8:	f7ff feb4 	bl	8004444 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 80046dc:	21ee      	movs	r1, #238	@ 0xee
 80046de:	200c      	movs	r0, #12
 80046e0:	f7ff fe8e 	bl	8004400 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 80046e4:	2120      	movs	r1, #32
 80046e6:	2013      	movs	r0, #19
 80046e8:	f7ff fe8a 	bl	8004400 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 80046ec:	2000      	movs	r0, #0
 80046ee:	f7ff fecf 	bl	8004490 <nrf24_ReadReg>
 80046f2:	4603      	mov	r3, r0
 80046f4:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 80046f6:	7bbb      	ldrb	r3, [r7, #14]
 80046f8:	f043 0303 	orr.w	r3, r3, #3
 80046fc:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 80046fe:	7bbb      	ldrb	r3, [r7, #14]
 8004700:	4619      	mov	r1, r3
 8004702:	2000      	movs	r0, #0
 8004704:	f7ff fe7c 	bl	8004400 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8004708:	f7ff fe62 	bl	80043d0 <CE_Enable>
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 800471c:	2007      	movs	r0, #7
 800471e:	f7ff feb7 	bl	8004490 <nrf24_ReadReg>
 8004722:	4603      	mov	r3, r0
 8004724:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00b      	beq.n	8004748 <isDataAvailable+0x34>
 8004730:	7bfa      	ldrb	r2, [r7, #15]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	4013      	ands	r3, r2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 800473c:	2140      	movs	r1, #64	@ 0x40
 800473e:	2007      	movs	r0, #7
 8004740:	f7ff fe5e 	bl	8004400 <nrf24_WriteReg>

		return 1;
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <isDataAvailable+0x36>
	}

	return 0;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8004760:	f7ff fe1e 	bl	80043a0 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8004764:	2361      	movs	r3, #97	@ 0x61
 8004766:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8004768:	f107 010f 	add.w	r1, r7, #15
 800476c:	2364      	movs	r3, #100	@ 0x64
 800476e:	2201      	movs	r2, #1
 8004770:	480c      	ldr	r0, [pc, #48]	@ (80047a4 <NRF24_Receive+0x50>)
 8004772:	f006 fe32 	bl	800b3da <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8004776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800477a:	2220      	movs	r2, #32
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4809      	ldr	r0, [pc, #36]	@ (80047a4 <NRF24_Receive+0x50>)
 8004780:	f006 ff6f 	bl	800b662 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8004784:	f7ff fe18 	bl	80043b8 <CS_UnSelect>

	HAL_Delay(1);
 8004788:	2001      	movs	r0, #1
 800478a:	f003 fba9 	bl	8007ee0 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 800478e:	23e2      	movs	r3, #226	@ 0xe2
 8004790:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8004792:	7bfb      	ldrb	r3, [r7, #15]
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff fe9b 	bl	80044d0 <nrfsendCmd>
}
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000554 	.word	0x20000554

080047a8 <_ZN14PID_HorizontalC1Ev>:


#include "PIDHorizontal.h"


PID_Horizontal::PID_Horizontal() {
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	4a04      	ldr	r2, [pc, #16]	@ (80047c4 <_ZN14PID_HorizontalC1Ev+0x1c>)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	08014728 	.word	0x08014728

080047c8 <_ZN14PID_HorizontalD1Ev>:

PID_Horizontal::~PID_Horizontal() {
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	4a04      	ldr	r2, [pc, #16]	@ (80047e4 <_ZN14PID_HorizontalD1Ev+0x1c>)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4618      	mov	r0, r3
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	08014728 	.word	0x08014728

080047e8 <_ZN14PID_HorizontalD0Ev>:
PID_Horizontal::~PID_Horizontal() {
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
}
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff ffe9 	bl	80047c8 <_ZN14PID_HorizontalD1Ev>
 80047f6:	2198      	movs	r1, #152	@ 0x98
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f009 f9db 	bl	800dbb4 <_ZdlPvj>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <_ZN14PID_Horizontal20setKgainConstantRollEffff>:

void PID_Horizontal::setKgainConstantRoll(float thePgainRoll, float theIgainRoll, float theDgainRoll, float theMaxOutputValue)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	6178      	str	r0, [r7, #20]
 8004810:	ed87 0a04 	vstr	s0, [r7, #16]
 8004814:	edc7 0a03 	vstr	s1, [r7, #12]
 8004818:	ed87 1a02 	vstr	s2, [r7, #8]
 800481c:	edc7 1a01 	vstr	s3, [r7, #4]
	this->roll.Pgain = thePgainRoll;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	605a      	str	r2, [r3, #4]
	this->roll.Igain = theIgainRoll;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	609a      	str	r2, [r3, #8]
	this->roll.Dgain = theDgainRoll;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	60da      	str	r2, [r3, #12]
	this->roll.maxOutputValue = theMaxOutputValue;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	615a      	str	r2, [r3, #20]
}
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <_ZN14PID_Horizontal21setKgainConstantPitchEffff>:
void PID_Horizontal::setKgainConstantPitch(float thePgainPitch, float theIgainPitch, float theDgainPitch, float theMaxOutputValue)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6178      	str	r0, [r7, #20]
 800484c:	ed87 0a04 	vstr	s0, [r7, #16]
 8004850:	edc7 0a03 	vstr	s1, [r7, #12]
 8004854:	ed87 1a02 	vstr	s2, [r7, #8]
 8004858:	edc7 1a01 	vstr	s3, [r7, #4]
	this->pitch.Pgain = thePgainPitch;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	635a      	str	r2, [r3, #52]	@ 0x34
	this->pitch.Igain = theIgainPitch;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	639a      	str	r2, [r3, #56]	@ 0x38
	this->pitch.Dgain = theDgainPitch;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	63da      	str	r2, [r3, #60]	@ 0x3c
	this->pitch.maxOutputValue = theMaxOutputValue;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8004874:	bf00      	nop
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <_ZN14PID_Horizontal19setKgainConstantYawEffff>:
void PID_Horizontal::setKgainConstantYaw(float thePgainYaw, float theIgainYaw, float theDgainYaw, float theMaxOutputValue)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	6178      	str	r0, [r7, #20]
 8004888:	ed87 0a04 	vstr	s0, [r7, #16]
 800488c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004890:	ed87 1a02 	vstr	s2, [r7, #8]
 8004894:	edc7 1a01 	vstr	s3, [r7, #4]
	this->yaw.Pgain = thePgainYaw;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	665a      	str	r2, [r3, #100]	@ 0x64
	this->yaw.Igain = theIgainYaw;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	669a      	str	r2, [r3, #104]	@ 0x68
	this->yaw.Dgain = theDgainYaw;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	66da      	str	r2, [r3, #108]	@ 0x6c
	this->yaw.maxOutputValue = theMaxOutputValue;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <_ZN14PID_Horizontal14setLevelAdjustEff>:

void PID_Horizontal::setLevelAdjust(float theLevelAdjustRoll, float theLevelAdjustPitch)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80048c8:	edc7 0a01 	vstr	s1, [r7, #4]
	roll.levelAdjust = theLevelAdjustRoll;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	pitch.levelAdjust = theLevelAdjustPitch;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80048d8:	bf00      	nop
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <_ZN14PID_Horizontal12calculatePIDEv>:
void PID_Horizontal::calculatePID()
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
	// Chuyển đổi setPointRoll sang đơn vị dps để cùng kiểu dữ liệu với inputRoll
	// Chuyển đổi đơn vị bằng cách chia giá trị cho 3 ta được giá trị lớn nhất của setPointRoll ( (500-8)/3 = 164d/s ).
	roll.setPoint = 0;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	621a      	str	r2, [r3, #32]
	// Thiết lập khoảng deadBand là 16us để đạt được độ ổn định
	if (roll.setPointBase > 1526)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f8:	f240 52f6 	movw	r2, #1526	@ 0x5f6
 80048fc:	4293      	cmp	r3, r2
 80048fe:	dd0b      	ble.n	8004918 <_ZN14PID_Horizontal12calculatePIDEv+0x34>
	{
		roll.setPoint = roll.setPointBase - 1526;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004904:	f2a3 53f6 	subw	r3, r3, #1526	@ 0x5f6
 8004908:	ee07 3a90 	vmov	s15, r3
 800490c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	edc3 7a08 	vstr	s15, [r3, #32]
 8004916:	e010      	b.n	800493a <_ZN14PID_Horizontal12calculatePIDEv+0x56>
	}
	else if (roll.setPointBase < 1510)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491c:	f240 52e5 	movw	r2, #1509	@ 0x5e5
 8004920:	4293      	cmp	r3, r2
 8004922:	dc0a      	bgt.n	800493a <_ZN14PID_Horizontal12calculatePIDEv+0x56>
	{
		roll.setPoint  =  roll.setPointBase - 1510;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004928:	f2a3 53e6 	subw	r3, r3, #1510	@ 0x5e6
 800492c:	ee07 3a90 	vmov	s15, r3
 8004930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	edc3 7a08 	vstr	s15, [r3, #32]
	}

	roll.setPoint -= roll.levelAdjust;                                          //Subtract the angle correction from the standardized receiver roll input value.
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	ed93 7a08 	vldr	s14, [r3, #32]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	edc3 7a08 	vstr	s15, [r3, #32]
	roll.setPoint /= 3.0;                                                        //Divide the setpoint for the PID roll controller by 3 to get angles in degrees.
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	ed93 7a08 	vldr	s14, [r3, #32]
 8004956:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800495a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	edc3 7a08 	vstr	s15, [r3, #32]


	//The PID set point in degrees per second is determined by the pitch receiver input.
	//In the case of deviding by 3 the max pitch rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
	pitch.setPoint = 0;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	651a      	str	r2, [r3, #80]	@ 0x50
	//We need a little dead band of 16us for better results.
	if (pitch.setPointBase > 1511)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004970:	f5b3 6fbd 	cmp.w	r3, #1512	@ 0x5e8
 8004974:	db0b      	blt.n	800498e <_ZN14PID_Horizontal12calculatePIDEv+0xaa>
	{
		pitch.setPoint = pitch.setPointBase - 1511;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800497a:	f2a3 53e7 	subw	r3, r3, #1511	@ 0x5e7
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
 800498c:	e010      	b.n	80049b0 <_ZN14PID_Horizontal12calculatePIDEv+0xcc>
	}
	else if (pitch.setPointBase < 1495)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004992:	f240 52d6 	movw	r2, #1494	@ 0x5d6
 8004996:	4293      	cmp	r3, r2
 8004998:	dc0a      	bgt.n	80049b0 <_ZN14PID_Horizontal12calculatePIDEv+0xcc>
	{
		pitch.setPoint = pitch.setPointBase - 1495;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800499e:	f2a3 53d7 	subw	r3, r3, #1495	@ 0x5d7
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	}

	pitch.setPoint -= pitch.levelAdjust;                                        //Subtract the angle correction from the standardized receiver pitch input value.
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80049bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	pitch.setPoint /= 3.0;                                                       //Divide the setpoint for the PID pitch controller by 3 to get angles in degrees.
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 80049cc:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80049d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

	//The PID set point in degrees per second is determined by the yaw receiver input.
	//In the case of deviding by 3 the max yaw rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
	yaw.setPoint = 0;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	//We need a little dead band of 16us for better results.
	if (throttleSetpoint > 1200) { //Do not yaw when turning off the motors.
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049ea:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80049ee:	dd3c      	ble.n	8004a6a <_ZN14PID_Horizontal12calculatePIDEv+0x186>
		if (yaw.setPointBase > 1514)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f6:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 80049fa:	4293      	cmp	r3, r2
 80049fc:	dd17      	ble.n	8004a2e <_ZN14PID_Horizontal12calculatePIDEv+0x14a>
		{
			yaw.setPoint = (yaw.setPointBase - 1514) / 3.0;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a04:	f2a3 53ea 	subw	r3, r3, #1514	@ 0x5ea
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fb fd8b 	bl	8000524 <__aeabi_i2d>
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	4bb3      	ldr	r3, [pc, #716]	@ (8004ce0 <_ZN14PID_Horizontal12calculatePIDEv+0x3fc>)
 8004a14:	f7fb ff1a 	bl	800084c <__aeabi_ddiv>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f7fc f8e2 	bl	8000be8 <__aeabi_d2f>
 8004a24:	4602      	mov	r2, r0
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004a2c:	e01d      	b.n	8004a6a <_ZN14PID_Horizontal12calculatePIDEv+0x186>
		}
		else if (yaw.setPointBase < 1498)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a34:	f240 52d9 	movw	r2, #1497	@ 0x5d9
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	dc16      	bgt.n	8004a6a <_ZN14PID_Horizontal12calculatePIDEv+0x186>
		{
			yaw.setPoint = (yaw.setPointBase - 1498) / 3.0;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a42:	f2a3 53da 	subw	r3, r3, #1498	@ 0x5da
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fb fd6c 	bl	8000524 <__aeabi_i2d>
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	4ba3      	ldr	r3, [pc, #652]	@ (8004ce0 <_ZN14PID_Horizontal12calculatePIDEv+0x3fc>)
 8004a52:	f7fb fefb 	bl	800084c <__aeabi_ddiv>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	f7fc f8c3 	bl	8000be8 <__aeabi_d2f>
 8004a62:	4602      	mov	r2, r0
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		}
	}

	//Roll calculations
	roll.momentError = roll.inputValue - roll.setPoint;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	ed93 7a06 	vldr	s14, [r3, #24]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	edd3 7a08 	vldr	s15, [r3, #32]
 8004a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	roll.ImemValue += roll.Igain * roll.momentError;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	ed93 7a07 	vldr	s14, [r3, #28]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	edc3 7a07 	vstr	s15, [r3, #28]
	if (roll.ImemValue > roll.maxOutputValue)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	ed93 7a07 	vldr	s14, [r3, #28]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	edd3 7a05 	vldr	s15, [r3, #20]
 8004aac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab4:	dd04      	ble.n	8004ac0 <_ZN14PID_Horizontal12calculatePIDEv+0x1dc>
	{
		roll.ImemValue = roll.maxOutputValue;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695a      	ldr	r2, [r3, #20]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	61da      	str	r2, [r3, #28]
 8004abe:	e014      	b.n	8004aea <_ZN14PID_Horizontal12calculatePIDEv+0x206>
	}
	else if (roll.ImemValue < roll.maxOutputValue * -1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	ed93 7a07 	vldr	s14, [r3, #28]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	edd3 7a05 	vldr	s15, [r3, #20]
 8004acc:	eef1 7a67 	vneg.f32	s15, s15
 8004ad0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad8:	d507      	bpl.n	8004aea <_ZN14PID_Horizontal12calculatePIDEv+0x206>
	{
		roll.ImemValue = roll.maxOutputValue * -1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	edd3 7a05 	vldr	s15, [r3, #20]
 8004ae0:	eef1 7a67 	vneg.f32	s15, s15
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	edc3 7a07 	vstr	s15, [r3, #28]
	}

	roll.outputValue = roll.Pgain * roll.momentError + roll.ImemValue + roll.Dgain * (roll.momentError - roll.previousError);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	ed93 7a01 	vldr	s14, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004af6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	edd3 7a07 	vldr	s15, [r3, #28]
 8004b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	edd3 6a03 	vldr	s13, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004b16:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	edc3 7a04 	vstr	s15, [r3, #16]
	if (roll.outputValue > roll.maxOutputValue)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	ed93 7a04 	vldr	s14, [r3, #16]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	edd3 7a05 	vldr	s15, [r3, #20]
 8004b34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3c:	dd04      	ble.n	8004b48 <_ZN14PID_Horizontal12calculatePIDEv+0x264>
	{
		roll.outputValue = roll.maxOutputValue;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695a      	ldr	r2, [r3, #20]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	611a      	str	r2, [r3, #16]
 8004b46:	e014      	b.n	8004b72 <_ZN14PID_Horizontal12calculatePIDEv+0x28e>
	}
	else if (roll.outputValue  < roll.maxOutputValue * -1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	ed93 7a04 	vldr	s14, [r3, #16]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	edd3 7a05 	vldr	s15, [r3, #20]
 8004b54:	eef1 7a67 	vneg.f32	s15, s15
 8004b58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b60:	d507      	bpl.n	8004b72 <_ZN14PID_Horizontal12calculatePIDEv+0x28e>
	{
		roll.outputValue = roll.maxOutputValue* -1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	edd3 7a05 	vldr	s15, [r3, #20]
 8004b68:	eef1 7a67 	vneg.f32	s15, s15
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	roll.previousError = roll.momentError;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	625a      	str	r2, [r3, #36]	@ 0x24

	//Pitch calculations
	pitch.momentError = pitch.inputValue - pitch.setPoint;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8004b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
	pitch.ImemValue += pitch.Igain * pitch.momentError;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8004ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	if (pitch.ImemValue > pitch.maxOutputValue)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004bbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc4:	dd04      	ble.n	8004bd0 <_ZN14PID_Horizontal12calculatePIDEv+0x2ec>
	{
		pitch.ImemValue = pitch.maxOutputValue;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004bce:	e014      	b.n	8004bfa <_ZN14PID_Horizontal12calculatePIDEv+0x316>
	}
	else if (pitch.ImemValue < pitch.maxOutputValue * -1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004bdc:	eef1 7a67 	vneg.f32	s15, s15
 8004be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be8:	d507      	bpl.n	8004bfa <_ZN14PID_Horizontal12calculatePIDEv+0x316>
	{
		pitch.ImemValue = pitch.maxOutputValue * -1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004bf0:	eef1 7a67 	vneg.f32	s15, s15
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	}

	pitch.outputValue = pitch.Pgain * pitch.momentError + pitch.ImemValue + pitch.Dgain * (pitch.momentError - pitch.previousError);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8004c06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8004c10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	ed93 6a16 	vldr	s12, [r3, #88]	@ 0x58
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8004c26:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004c2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	if (pitch.outputValue > pitch.maxOutputValue)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004c44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4c:	dd04      	ble.n	8004c58 <_ZN14PID_Horizontal12calculatePIDEv+0x374>
	{
		pitch.outputValue = pitch.maxOutputValue;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c56:	e014      	b.n	8004c82 <_ZN14PID_Horizontal12calculatePIDEv+0x39e>
	}
	else if (pitch.outputValue  < pitch.maxOutputValue * -1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004c64:	eef1 7a67 	vneg.f32	s15, s15
 8004c68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c70:	d507      	bpl.n	8004c82 <_ZN14PID_Horizontal12calculatePIDEv+0x39e>
	{
		pitch.outputValue = pitch.maxOutputValue* -1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004c78:	eef1 7a67 	vneg.f32	s15, s15
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	}

	pitch.previousError = pitch.momentError;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	655a      	str	r2, [r3, #84]	@ 0x54

	//Yaw calculations
	yaw.momentError = yaw.inputValue - yaw.setPoint;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	ed93 7a1e 	vldr	s14, [r3, #120]	@ 0x78
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 8004c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
	yaw.ImemValue += yaw.Igain * yaw.momentError;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	ed93 7a1f 	vldr	s14, [r3, #124]	@ 0x7c
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	edd3 6a1a 	vldr	s13, [r3, #104]	@ 0x68
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8004cb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
	if (yaw.ImemValue > yaw.maxOutputValue)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	ed93 7a1f 	vldr	s14, [r3, #124]	@ 0x7c
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8004ccc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd4:	dd06      	ble.n	8004ce4 <_ZN14PID_Horizontal12calculatePIDEv+0x400>
	{
		yaw.ImemValue = yaw.maxOutputValue;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004cde:	e016      	b.n	8004d0e <_ZN14PID_Horizontal12calculatePIDEv+0x42a>
 8004ce0:	40080000 	.word	0x40080000
	}
	else if (yaw.ImemValue < yaw.maxOutputValue * -1)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	ed93 7a1f 	vldr	s14, [r3, #124]	@ 0x7c
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8004cf0:	eef1 7a67 	vneg.f32	s15, s15
 8004cf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cfc:	d507      	bpl.n	8004d0e <_ZN14PID_Horizontal12calculatePIDEv+0x42a>
	{
		yaw.ImemValue = yaw.maxOutputValue * -1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8004d04:	eef1 7a67 	vneg.f32	s15, s15
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
	}

	yaw.outputValue = yaw.Pgain * yaw.momentError + yaw.ImemValue + yaw.Dgain * (yaw.momentError - yaw.previousError);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8004d1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 8004d24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	edd3 6a1b 	vldr	s13, [r3, #108]	@ 0x6c
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	ed93 6a22 	vldr	s12, [r3, #136]	@ 0x88
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8004d3a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004d3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
	if (yaw.outputValue > yaw.maxOutputValue)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8004d58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d60:	dd04      	ble.n	8004d6c <_ZN14PID_Horizontal12calculatePIDEv+0x488>
	{
		yaw.outputValue = yaw.maxOutputValue;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	671a      	str	r2, [r3, #112]	@ 0x70
 8004d6a:	e014      	b.n	8004d96 <_ZN14PID_Horizontal12calculatePIDEv+0x4b2>
	}
	else if (yaw.outputValue  < yaw.maxOutputValue * -1)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8004d78:	eef1 7a67 	vneg.f32	s15, s15
 8004d7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d84:	d507      	bpl.n	8004d96 <_ZN14PID_Horizontal12calculatePIDEv+0x4b2>
	{
		yaw.outputValue = yaw.maxOutputValue* -1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8004d8c:	eef1 7a67 	vneg.f32	s15, s15
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
	}

	yaw.previousError = yaw.momentError;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop

08004dac <_ZN9BarometerC1EP17I2C_HandleTypeDef>:
#define MS5611_CMD_RESET              		(0x1E)
#define MS5611_CMD_CONV_D1_4096           	(0x48)
#define MS5611_CMD_CONV_D2_4096            	(0x58)
#define MS5611_CMD_READ_PROM          		(0xA2)

Barometer::Barometer(I2C_HandleTypeDef * theI2c)
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
{
	this->hi2c = theI2c;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	601a      	str	r2, [r3, #0]
}
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <_ZN9Barometer5ResetEv>:
 * Gửi lệnh reset (MS5611_CMD_RESET) đến cảm biến.
 * Chờ 10 ms cho cảm biến khởi động lại
 * Return: HAL_OK
 */
HAL_StatusTypeDef Barometer::Reset()
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b086      	sub	sp, #24
 8004dce:	af02      	add	r7, sp, #8
 8004dd0:	6078      	str	r0, [r7, #4]
	uint8_t tempCmd = MS5611_CMD_RESET;
 8004dd2:	231e      	movs	r3, #30
 8004dd4:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Master_Transmit(this->hi2c, (uint16_t) MS5611_ADDRESS, &tempCmd, 1, 500) != HAL_OK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	f107 020f 	add.w	r2, r7, #15
 8004dde:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	2301      	movs	r3, #1
 8004de6:	21ee      	movs	r1, #238	@ 0xee
 8004de8:	f004 f988 	bl	80090fc <HAL_I2C_Master_Transmit>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	bf14      	ite	ne
 8004df2:	2301      	movne	r3, #1
 8004df4:	2300      	moveq	r3, #0
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <_ZN9Barometer5ResetEv+0x36>
	{
		return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e003      	b.n	8004e08 <_ZN9Barometer5ResetEv+0x3e>
	}
	HAL_Delay(10);
 8004e00:	200a      	movs	r0, #10
 8004e02:	f003 f86d 	bl	8007ee0 <HAL_Delay>
	return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <_ZN9Barometer8ReadPromEv>:
 * Đọc 6 hệ số hiệu chuẩn (C1…C6) từ bộ nhớ PROM của MS5611.
 * Mỗi hệ số là 16-bit → dùng để bù nhiệt độ và áp suất.
 * Return HAL_OK
 */
HAL_StatusTypeDef Barometer::ReadProm()
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	6078      	str	r0, [r7, #4]
	uint8_t tempData[2] = {0};
 8004e18:	2300      	movs	r3, #0
 8004e1a:	81bb      	strh	r3, [r7, #12]
	uint8_t theCmd = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	72fb      	strb	r3, [r7, #11]
	for (uint8_t offset = 0; offset < 6; offset++)
 8004e20:	2300      	movs	r3, #0
 8004e22:	73fb      	strb	r3, [r7, #15]
 8004e24:	e044      	b.n	8004eb0 <_ZN9Barometer8ReadPromEv+0xa0>
	{
		theCmd = MS5611_CMD_READ_PROM + (offset * 2);
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
 8004e28:	3351      	adds	r3, #81	@ 0x51
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	72fb      	strb	r3, [r7, #11]
		if ( HAL_I2C_Master_Transmit(this->hi2c, (uint16_t) MS5611_ADDRESS, &theCmd, 1, 500) != HAL_OK){
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	f107 020b 	add.w	r2, r7, #11
 8004e3a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	2301      	movs	r3, #1
 8004e42:	21ee      	movs	r1, #238	@ 0xee
 8004e44:	f004 f95a 	bl	80090fc <HAL_I2C_Master_Transmit>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bf14      	ite	ne
 8004e4e:	2301      	movne	r3, #1
 8004e50:	2300      	moveq	r3, #0
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <_ZN9Barometer8ReadPromEv+0x4c>
			return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e02d      	b.n	8004eb8 <_ZN9Barometer8ReadPromEv+0xa8>
		}
		HAL_Delay(10);
 8004e5c:	200a      	movs	r0, #10
 8004e5e:	f003 f83f 	bl	8007ee0 <HAL_Delay>
		if ( HAL_I2C_Master_Receive(this->hi2c, (uint16_t) MS5611_ADDRESS, tempData, 2, 500) != HAL_OK){
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	f107 020c 	add.w	r2, r7, #12
 8004e6a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	2302      	movs	r3, #2
 8004e72:	21ee      	movs	r1, #238	@ 0xee
 8004e74:	f004 fa40 	bl	80092f8 <HAL_I2C_Master_Receive>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	bf14      	ite	ne
 8004e7e:	2301      	movne	r3, #1
 8004e80:	2300      	moveq	r3, #0
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <_ZN9Barometer8ReadPromEv+0x7c>
			return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e015      	b.n	8004eb8 <_ZN9Barometer8ReadPromEv+0xa8>
		}
		this->dataProm[offset] = tempData[0] << 8 | tempData[1];
 8004e8c:	7b3b      	ldrb	r3, [r7, #12]
 8004e8e:	b21b      	sxth	r3, r3
 8004e90:	021b      	lsls	r3, r3, #8
 8004e92:	b21a      	sxth	r2, r3
 8004e94:	7b7b      	ldrb	r3, [r7, #13]
 8004e96:	b21b      	sxth	r3, r3
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	b21a      	sxth	r2, r3
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	b291      	uxth	r1, r2
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	4413      	add	r3, r2
 8004ea6:	460a      	mov	r2, r1
 8004ea8:	809a      	strh	r2, [r3, #4]
	for (uint8_t offset = 0; offset < 6; offset++)
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	3301      	adds	r3, #1
 8004eae:	73fb      	strb	r3, [r7, #15]
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	2b05      	cmp	r3, #5
 8004eb4:	d9b7      	bls.n	8004e26 <_ZN9Barometer8ReadPromEv+0x16>
	}
	return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <_ZN9Barometer4InitEv>:
/*
 * Gọi Reset() và ReadProm().
 * Nếu cả hai thành công → cảm biến sẵn sàng.
 */
HAL_StatusTypeDef Barometer::Init()
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
	if ( Reset() != HAL_OK) {
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff ff7e 	bl	8004dca <_ZN9Barometer5ResetEv>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <_ZN9Barometer4InitEv+0x22>
		return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e00d      	b.n	8004efe <_ZN9Barometer4InitEv+0x3e>
	}

	if ( ReadProm() != HAL_OK){
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff ff94 	bl	8004e10 <_ZN9Barometer8ReadPromEv>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bf14      	ite	ne
 8004eee:	2301      	movne	r3, #1
 8004ef0:	2300      	moveq	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <_ZN9Barometer4InitEv+0x3c>
		return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e000      	b.n	8004efe <_ZN9Barometer4InitEv+0x3e>
	}

	return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <_ZN9Barometer17SetGroundPressureEv>:
/*
 * Đặt lại áp suất mặt đất (baseline).
 * Thường gọi ngay khi drone bật nguồn, lúc chưa cất cánh.
 */
void Barometer::SetGroundPressure()
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
	this->actualPressure = 0;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <_ZN9Barometer26GetDataFromPreviousRequestEv>:
 * Sau khi gửi lệnh đo (áp suất hoặc nhiệt độ), dữ liệu không có ngay → cần gọi sau ~9ms
 * Hàm này gửi ADC_READ để lấy kết quả 24-bit từ conversion trước đó
 * Cơ chế “request–then–read” của MS5611
 */
uint32_t Barometer::GetDataFromPreviousRequest()
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	6078      	str	r0, [r7, #4]
	uint8_t tempCmd = MS5611_CMD_ADC_READ;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	73fb      	strb	r3, [r7, #15]
	uint8_t tempData[3] = {0};
 8004f30:	f107 030c 	add.w	r3, r7, #12
 8004f34:	2100      	movs	r1, #0
 8004f36:	460a      	mov	r2, r1
 8004f38:	801a      	strh	r2, [r3, #0]
 8004f3a:	460a      	mov	r2, r1
 8004f3c:	709a      	strb	r2, [r3, #2]

	// Đọc dữ liệu từ câu lệnh request trước đó
	HAL_I2C_Master_Transmit(this->hi2c, (uint16_t) MS5611_ADDRESS, &tempCmd, 1, 10);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	f107 020f 	add.w	r2, r7, #15
 8004f46:	230a      	movs	r3, #10
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	21ee      	movs	r1, #238	@ 0xee
 8004f4e:	f004 f8d5 	bl	80090fc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(this->hi2c, (uint16_t) MS5611_ADDRESS, tempData, 3, 10);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	f107 020c 	add.w	r2, r7, #12
 8004f5a:	230a      	movs	r3, #10
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	2303      	movs	r3, #3
 8004f60:	21ee      	movs	r1, #238	@ 0xee
 8004f62:	f004 f9c9 	bl	80092f8 <HAL_I2C_Master_Receive>
	return  ((tempData[0] << 16) | (tempData[1] << 8) | (tempData[2]));
 8004f66:	7b3b      	ldrb	r3, [r7, #12]
 8004f68:	041a      	lsls	r2, r3, #16
 8004f6a:	7b7b      	ldrb	r3, [r7, #13]
 8004f6c:	021b      	lsls	r3, r3, #8
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	7bba      	ldrb	r2, [r7, #14]
 8004f72:	4313      	orrs	r3, r2

}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <_ZN9Barometer18IsReadyToInterfaceEv>:
/*
 * Kiểm tra xem thiết bị ở địa chỉ MS5611_ADDRESS có trả lời I2C không.
 * Return: BAROMETER_Result_Ok;
 */
BAROMETER_Result Barometer::IsReadyToInterface()
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
	/**** Kiểm tra giao tiếp I2C của MS5611 *****/
	if(HAL_I2C_IsDeviceReady(this->hi2c, MS5611_ADDRESS, 2, 5) != HAL_OK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6818      	ldr	r0, [r3, #0]
 8004f88:	2305      	movs	r3, #5
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	21ee      	movs	r1, #238	@ 0xee
 8004f8e:	f004 ff11 	bl	8009db4 <HAL_I2C_IsDeviceReady>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	bf14      	ite	ne
 8004f98:	2301      	movne	r3, #1
 8004f9a:	2300      	moveq	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <_ZN9Barometer18IsReadyToInterfaceEv+0x2a>
	{
		return BAROMETER_Result_DeviceNotConnected;
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e000      	b.n	8004fa8 <_ZN9Barometer18IsReadyToInterfaceEv+0x2c>
	}

	return BAROMETER_Result_Ok;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <_ZN9Barometer21GetAverageTemperatureEv>:
 * Dùng buffer rawTemperatureRotatingMemory[6] để tính trung bình trượt.
 * Trả về giá trị trung bình (giảm nhiễu).
 *
 */
uint32_t Barometer::GetAverageTemperature()
{
 8004fb0:	b590      	push	{r4, r7, lr}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
	rawAverageTemperatureTotal -= rawTemperatureRotatingMemory[indexAverageTemperatureMem];
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	330c      	adds	r3, #12
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	1ad2      	subs	r2, r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	64da      	str	r2, [r3, #76]	@ 0x4c
	// Đọc dữ liệu nhiệt độ
	rawTemperatureRotatingMemory[indexAverageTemperatureMem] = GetDataFromPreviousRequest();
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004fd8:	461c      	mov	r4, r3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff ffa2 	bl	8004f24 <_ZN9Barometer26GetDataFromPreviousRequestEv>
 8004fe0:	4601      	mov	r1, r0
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	f104 030c 	add.w	r3, r4, #12
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	6059      	str	r1, [r3, #4]
	rawAverageTemperatureTotal += rawTemperatureRotatingMemory[indexAverageTemperatureMem];
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	330c      	adds	r3, #12
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	440b      	add	r3, r1
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	441a      	add	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	64da      	str	r2, [r3, #76]	@ 0x4c
	indexAverageTemperatureMem++;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800500e:	3301      	adds	r3, #1
 8005010:	b2da      	uxtb	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	if (indexAverageTemperatureMem == 5)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800501e:	2b05      	cmp	r3, #5
 8005020:	d103      	bne.n	800502a <_ZN9Barometer21GetAverageTemperatureEv+0x7a>
	{
		indexAverageTemperatureMem = 0;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	}
	return rawAverageTemperatureTotal / 5;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800502e:	4a04      	ldr	r2, [pc, #16]	@ (8005040 <_ZN9Barometer21GetAverageTemperatureEv+0x90>)
 8005030:	fba2 2303 	umull	r2, r3, r2, r3
 8005034:	089b      	lsrs	r3, r3, #2
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	bd90      	pop	{r4, r7, pc}
 800503e:	bf00      	nop
 8005040:	cccccccd 	.word	0xcccccccd

08005044 <_ZN9Barometer25RequestGetTemperatureDataEv>:
/*
 * Gửi lệnh đo nhiệt độ (D2) hoặc áp suất (D1).
 * Kết quả chưa có ngay, cần gọi GetDataFromPreviousRequest() sau đó.
 */
void Barometer::RequestGetTemperatureData()
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af02      	add	r7, sp, #8
 800504a:	6078      	str	r0, [r7, #4]
	uint8_t tempCmd = MS5611_CMD_CONV_D2_4096;
 800504c:	2358      	movs	r3, #88	@ 0x58
 800504e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(this->hi2c, (uint16_t) MS5611_ADDRESS, &tempCmd, 1, 4);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	f107 020f 	add.w	r2, r7, #15
 8005058:	2304      	movs	r3, #4
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	2301      	movs	r3, #1
 800505e:	21ee      	movs	r1, #238	@ 0xee
 8005060:	f004 f84c 	bl	80090fc <HAL_I2C_Master_Transmit>
}
 8005064:	bf00      	nop
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <_ZN9Barometer22RequestGetPressureDataEv>:

void Barometer::RequestGetPressureData()
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af02      	add	r7, sp, #8
 8005072:	6078      	str	r0, [r7, #4]
	uint8_t tempCmd = MS5611_CMD_CONV_D1_4096;
 8005074:	2348      	movs	r3, #72	@ 0x48
 8005076:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(this->hi2c, (uint16_t) MS5611_ADDRESS, &tempCmd, 1, 4);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	f107 020f 	add.w	r2, r7, #15
 8005080:	2304      	movs	r3, #4
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	2301      	movs	r3, #1
 8005086:	21ee      	movs	r1, #238	@ 0xee
 8005088:	f004 f838 	bl	80090fc <HAL_I2C_Master_Transmit>
}
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <_ZN9Barometer18CompensatePressureEv>:
 * Tính OFF, SENS (offset và sensitivity)
 * Áp dụng second-order compensation nếu nhiệt độ thấp
 * Result: áp suất đã bù chính xác.
 */
int64_t Barometer::CompensatePressure()
{
 8005094:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8005098:	b0c1      	sub	sp, #260	@ 0x104
 800509a:	af00      	add	r7, sp, #0
 800509c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	int32_t dT = rawTemperature - ((uint32_t)dataProm[4] << 8);
 80050a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050a4:	6a1a      	ldr	r2, [r3, #32]
 80050a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050aa:	899b      	ldrh	r3, [r3, #12]
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	int64_t OFF = (int64_t)dataProm[1] * 65536 + (int64_t)dataProm[3] * (int64_t)dT / 128;
 80050b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050b8:	88db      	ldrh	r3, [r3, #6]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2200      	movs	r2, #0
 80050be:	461c      	mov	r4, r3
 80050c0:	4615      	mov	r5, r2
 80050c2:	f04f 0800 	mov.w	r8, #0
 80050c6:	f04f 0900 	mov.w	r9, #0
 80050ca:	ea4f 4905 	mov.w	r9, r5, lsl #16
 80050ce:	ea49 4914 	orr.w	r9, r9, r4, lsr #16
 80050d2:	ea4f 4804 	mov.w	r8, r4, lsl #16
 80050d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050da:	895b      	ldrh	r3, [r3, #10]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2200      	movs	r2, #0
 80050e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050e4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80050e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ec:	17da      	asrs	r2, r3, #31
 80050ee:	469a      	mov	sl, r3
 80050f0:	4693      	mov	fp, r2
 80050f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80050f6:	460b      	mov	r3, r1
 80050f8:	fb0a f203 	mul.w	r2, sl, r3
 80050fc:	4603      	mov	r3, r0
 80050fe:	fb03 f30b 	mul.w	r3, r3, fp
 8005102:	4413      	add	r3, r2
 8005104:	4602      	mov	r2, r0
 8005106:	fba2 120a 	umull	r1, r2, r2, sl
 800510a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800510e:	460a      	mov	r2, r1
 8005110:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8005114:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8005118:	4413      	add	r3, r2
 800511a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800511e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8005122:	2b00      	cmp	r3, #0
 8005124:	da07      	bge.n	8005136 <_ZN9Barometer18CompensatePressureEv+0xa2>
 8005126:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 800512a:	6439      	str	r1, [r7, #64]	@ 0x40
 800512c:	f143 0300 	adc.w	r3, r3, #0
 8005130:	647b      	str	r3, [r7, #68]	@ 0x44
 8005132:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005136:	f04f 0000 	mov.w	r0, #0
 800513a:	f04f 0100 	mov.w	r1, #0
 800513e:	09d0      	lsrs	r0, r2, #7
 8005140:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8005144:	11d9      	asrs	r1, r3, #7
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	eb18 0102 	adds.w	r1, r8, r2
 800514e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005150:	eb49 0303 	adc.w	r3, r9, r3
 8005154:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005156:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800515a:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0
	int64_t SENS = (int64_t)dataProm[0] * 32768 + (int64_t)dataProm[2] * dT / 256;
 800515e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005162:	889b      	ldrh	r3, [r3, #4]
 8005164:	b29b      	uxth	r3, r3
 8005166:	2200      	movs	r2, #0
 8005168:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800516c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005170:	f04f 0400 	mov.w	r4, #0
 8005174:	f04f 0500 	mov.w	r5, #0
 8005178:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800517c:	4613      	mov	r3, r2
 800517e:	03dd      	lsls	r5, r3, #15
 8005180:	460b      	mov	r3, r1
 8005182:	ea45 4553 	orr.w	r5, r5, r3, lsr #17
 8005186:	460b      	mov	r3, r1
 8005188:	03dc      	lsls	r4, r3, #15
 800518a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800518e:	891b      	ldrh	r3, [r3, #8]
 8005190:	b29b      	uxth	r3, r3
 8005192:	2200      	movs	r2, #0
 8005194:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005198:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800519c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051a0:	17da      	asrs	r2, r3, #31
 80051a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051a6:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80051aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80051ae:	464b      	mov	r3, r9
 80051b0:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 80051b4:	4652      	mov	r2, sl
 80051b6:	fb02 f203 	mul.w	r2, r2, r3
 80051ba:	465b      	mov	r3, fp
 80051bc:	4641      	mov	r1, r8
 80051be:	fb01 f303 	mul.w	r3, r1, r3
 80051c2:	4413      	add	r3, r2
 80051c4:	4642      	mov	r2, r8
 80051c6:	4651      	mov	r1, sl
 80051c8:	fba2 1201 	umull	r1, r2, r2, r1
 80051cc:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80051d0:	460a      	mov	r2, r1
 80051d2:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80051d6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80051da:	4413      	add	r3, r2
 80051dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051e0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	da07      	bge.n	80051f8 <_ZN9Barometer18CompensatePressureEv+0x164>
 80051e8:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 80051ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80051ee:	f143 0300 	adc.w	r3, r3, #0
 80051f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80051f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80051f8:	f04f 0000 	mov.w	r0, #0
 80051fc:	f04f 0100 	mov.w	r1, #0
 8005200:	0a10      	lsrs	r0, r2, #8
 8005202:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8005206:	1219      	asrs	r1, r3, #8
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	18a1      	adds	r1, r4, r2
 800520e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005210:	eb45 0303 	adc.w	r3, r5, r3
 8005214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005216:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800521a:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
	int32_t TEMP;

	TEMP = 2000 + ((int64_t) dT * this->dataProm[5]) / 8388608;
 800521e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005222:	17da      	asrs	r2, r3, #31
 8005224:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005228:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800522c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005230:	89db      	ldrh	r3, [r3, #14]
 8005232:	b29b      	uxth	r3, r3
 8005234:	2200      	movs	r2, #0
 8005236:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800523a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800523e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005242:	462b      	mov	r3, r5
 8005244:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005248:	4642      	mov	r2, r8
 800524a:	fb02 f203 	mul.w	r2, r2, r3
 800524e:	464b      	mov	r3, r9
 8005250:	4621      	mov	r1, r4
 8005252:	fb01 f303 	mul.w	r3, r1, r3
 8005256:	4413      	add	r3, r2
 8005258:	4622      	mov	r2, r4
 800525a:	4641      	mov	r1, r8
 800525c:	fba2 1201 	umull	r1, r2, r2, r1
 8005260:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005264:	460a      	mov	r2, r1
 8005266:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 800526a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800526e:	4413      	add	r3, r2
 8005270:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005274:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8005278:	2b00      	cmp	r3, #0
 800527a:	da07      	bge.n	800528c <_ZN9Barometer18CompensatePressureEv+0x1f8>
 800527c:	4996      	ldr	r1, [pc, #600]	@ (80054d8 <_ZN9Barometer18CompensatePressureEv+0x444>)
 800527e:	1851      	adds	r1, r2, r1
 8005280:	6239      	str	r1, [r7, #32]
 8005282:	f143 0300 	adc.w	r3, r3, #0
 8005286:	627b      	str	r3, [r7, #36]	@ 0x24
 8005288:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800528c:	f04f 0000 	mov.w	r0, #0
 8005290:	f04f 0100 	mov.w	r1, #0
 8005294:	0dd0      	lsrs	r0, r2, #23
 8005296:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 800529a:	15d9      	asrs	r1, r3, #23
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4613      	mov	r3, r2
 80052a2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80052a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4


	if (TEMP < -1500)
 80052aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80052ae:	4b8b      	ldr	r3, [pc, #556]	@ (80054dc <_ZN9Barometer18CompensatePressureEv+0x448>)
 80052b0:	429a      	cmp	r2, r3
 80052b2:	da4d      	bge.n	8005350 <_ZN9Barometer18CompensatePressureEv+0x2bc>
	{
		OFF2 = OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 80052b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052b8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80052bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c0:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 80052c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c8:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80052cc:	fb03 f202 	mul.w	r2, r3, r2
 80052d0:	4613      	mov	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	17da      	asrs	r2, r3, #31
 80052d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052dc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80052e0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80052e4:	4623      	mov	r3, r4
 80052e6:	18c3      	adds	r3, r0, r3
 80052e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052ea:	462b      	mov	r3, r5
 80052ec:	eb41 0303 	adc.w	r3, r1, r3
 80052f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80052f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052f6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80052fa:	e9c3 1204 	strd	r1, r2, [r3, #16]
		SENS2 = SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 80052fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005302:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8005306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800530a:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 800530e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005312:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8005316:	fb03 f202 	mul.w	r2, r3, r2
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	441a      	add	r2, r3
 8005324:	0fd3      	lsrs	r3, r2, #31
 8005326:	4413      	add	r3, r2
 8005328:	105b      	asrs	r3, r3, #1
 800532a:	17da      	asrs	r2, r3, #31
 800532c:	673b      	str	r3, [r7, #112]	@ 0x70
 800532e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005330:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8005334:	4623      	mov	r3, r4
 8005336:	18c3      	adds	r3, r0, r3
 8005338:	66bb      	str	r3, [r7, #104]	@ 0x68
 800533a:	462b      	mov	r3, r5
 800533c:	eb41 0303 	adc.w	r3, r1, r3
 8005340:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005346:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800534a:	e9c3 1206 	strd	r1, r2, [r3, #24]
 800534e:	e048      	b.n	80053e2 <_ZN9Barometer18CompensatePressureEv+0x34e>
	}

	else if (TEMP < 2000)
 8005350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005354:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005358:	da33      	bge.n	80053c2 <_ZN9Barometer18CompensatePressureEv+0x32e>
	{
		OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 800535a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800535e:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 8005362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005366:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800536a:	fb03 f202 	mul.w	r2, r3, r2
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	441a      	add	r2, r3
 8005374:	0fd3      	lsrs	r3, r2, #31
 8005376:	4413      	add	r3, r2
 8005378:	105b      	asrs	r3, r3, #1
 800537a:	17da      	asrs	r2, r3, #31
 800537c:	663b      	str	r3, [r7, #96]	@ 0x60
 800537e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005384:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005388:	e9c3 1204 	strd	r1, r2, [r3, #16]
		SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 800538c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005390:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 8005394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005398:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800539c:	fb03 f202 	mul.w	r2, r3, r2
 80053a0:	4613      	mov	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	da00      	bge.n	80053ac <_ZN9Barometer18CompensatePressureEv+0x318>
 80053aa:	3303      	adds	r3, #3
 80053ac:	109b      	asrs	r3, r3, #2
 80053ae:	17da      	asrs	r2, r3, #31
 80053b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053b2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80053b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053b8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80053bc:	e9c3 1206 	strd	r1, r2, [r3, #24]
 80053c0:	e00f      	b.n	80053e2 <_ZN9Barometer18CompensatePressureEv+0x34e>
	}

	else
	{
		OFF2 = 0;
 80053c2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	f04f 0300 	mov.w	r3, #0
 80053ce:	e9c1 2304 	strd	r2, r3, [r1, #16]
		SENS2 = 0;
 80053d2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	f04f 0300 	mov.w	r3, #0
 80053de:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}

	OFF = OFF - OFF2;
 80053e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053e6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80053ea:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 80053ee:	1a14      	subs	r4, r2, r0
 80053f0:	61bc      	str	r4, [r7, #24]
 80053f2:	eb63 0301 	sbc.w	r3, r3, r1
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80053fc:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0
	SENS = SENS - SENS2;
 8005400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005404:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8005408:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 800540c:	1a14      	subs	r4, r2, r0
 800540e:	613c      	str	r4, [r7, #16]
 8005410:	eb63 0301 	sbc.w	r3, r3, r1
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800541a:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8

	return (((rawPressure * SENS) / 2097152 - OFF) / 32768);
 800541e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005424:	2200      	movs	r2, #0
 8005426:	653b      	str	r3, [r7, #80]	@ 0x50
 8005428:	657a      	str	r2, [r7, #84]	@ 0x54
 800542a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800542e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8005432:	462a      	mov	r2, r5
 8005434:	fb02 f203 	mul.w	r2, r2, r3
 8005438:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800543c:	4621      	mov	r1, r4
 800543e:	fb01 f303 	mul.w	r3, r1, r3
 8005442:	4413      	add	r3, r2
 8005444:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8005448:	4621      	mov	r1, r4
 800544a:	fba2 1201 	umull	r1, r2, r2, r1
 800544e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005452:	460a      	mov	r2, r1
 8005454:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8005458:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800545c:	4413      	add	r3, r2
 800545e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005462:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8005466:	2b00      	cmp	r3, #0
 8005468:	da07      	bge.n	800547a <_ZN9Barometer18CompensatePressureEv+0x3e6>
 800546a:	491d      	ldr	r1, [pc, #116]	@ (80054e0 <_ZN9Barometer18CompensatePressureEv+0x44c>)
 800546c:	1851      	adds	r1, r2, r1
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	f143 0300 	adc.w	r3, r3, #0
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800547a:	f04f 0000 	mov.w	r0, #0
 800547e:	f04f 0100 	mov.w	r1, #0
 8005482:	0d50      	lsrs	r0, r2, #21
 8005484:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8005488:	1559      	asrs	r1, r3, #21
 800548a:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 800548e:	1a84      	subs	r4, r0, r2
 8005490:	64bc      	str	r4, [r7, #72]	@ 0x48
 8005492:	eb61 0303 	sbc.w	r3, r1, r3
 8005496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005498:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800549c:	2b00      	cmp	r3, #0
 800549e:	da08      	bge.n	80054b2 <_ZN9Barometer18CompensatePressureEv+0x41e>
 80054a0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80054a4:	1851      	adds	r1, r2, r1
 80054a6:	6039      	str	r1, [r7, #0]
 80054a8:	f143 0300 	adc.w	r3, r3, #0
 80054ac:	607b      	str	r3, [r7, #4]
 80054ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054b2:	f04f 0000 	mov.w	r0, #0
 80054b6:	f04f 0100 	mov.w	r1, #0
 80054ba:	0bd0      	lsrs	r0, r2, #15
 80054bc:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80054c0:	13d9      	asrs	r1, r3, #15
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
}
 80054c6:	4610      	mov	r0, r2
 80054c8:	4619      	mov	r1, r3
 80054ca:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 80054ce:	46bd      	mov	sp, r7
 80054d0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	007fffff 	.word	0x007fffff
 80054dc:	fffffa24 	.word	0xfffffa24
 80054e0:	001fffff 	.word	0x001fffff

080054e4 <_ZN9Barometer18GetAveragePressureEv>:
/*
 * Dùng bộ nhớ vòng pressureRotatingMemory[20] để lấy trung bình áp suất.
 * Trả về giá trị trung bình (giảm nhiễu, chống rung động)
 */
float Barometer::GetAveragePressure()
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
	//To get a smoother pressure value we will use a 20 location rotating memory.
	averagePressureTotal -= pressureRotatingMemory[indexAveragePressureMem];
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80054f8:	4619      	mov	r1, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3114      	adds	r1, #20
 80054fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005502:	1ad2      	subs	r2, r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	pressureRotatingMemory[indexAveragePressureMem] = this->compensatedPressure;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 8005516:	4608      	mov	r0, r1
 8005518:	4611      	mov	r1, r2
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f100 0214 	add.w	r2, r0, #20
 8005520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	averagePressureTotal += pressureRotatingMemory[indexAveragePressureMem];
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8005530:	4619      	mov	r1, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3114      	adds	r1, #20
 8005536:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800553a:	441a      	add	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	indexAveragePressureMem++;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8005548:	3301      	adds	r3, #1
 800554a:	b2da      	uxtb	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
	if (indexAveragePressureMem == 20)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8005558:	2b14      	cmp	r3, #20
 800555a:	d103      	bne.n	8005564 <_ZN9Barometer18GetAveragePressureEv+0x80>
	{
		indexAveragePressureMem = 0;                              //Start at 0 when the memory location 20 is reached.
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
	}

	return (float)averagePressureTotal / 20.0;      //Calculate the average pressure of the last 20 pressure readings.
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005572:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8005576:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800557a:	eef0 7a66 	vmov.f32	s15, s13
}
 800557e:	eeb0 0a67 	vmov.f32	s0, s15
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <_ZN9Barometer22UseComplementaryFilterEv>:
 * Điều chỉnh giá trị slow theo chênh lệch với fast.
 * Trả về áp suất cuối cùng mượt mà, ổn định hơn.
 * Giúp drone có phản ứng nhanh nhưng không rung lắc.
 */
float Barometer::UseComplementaryFilter()
{
 800558c:	b5b0      	push	{r4, r5, r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
	//To get better results we will use a complementary fillter that can be adjusted by the fast average.
	actualPressureSlow = actualPressureSlow * (float)0.985 + actualPressureFast * (float)0.015;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 800559a:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8005690 <_ZN9Barometer22UseComplementaryFilterEv+0x104>
 800559e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	edd3 7a4a 	vldr	s15, [r3, #296]	@ 0x128
 80055a8:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8005694 <_ZN9Barometer22UseComplementaryFilterEv+0x108>
 80055ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80055b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
	actualPressureDiff = actualPressureSlow - actualPressureFast;                                       //Calculate the difference between the fast and the slow avarage value.
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	edd3 7a4a 	vldr	s15, [r3, #296]	@ 0x128
 80055c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
	if (actualPressureDiff > 8)actualPressureDiff = 8;                                                    //If the difference is larger then 8 limit the difference to 8.
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	edd3 7a4b 	vldr	s15, [r3, #300]	@ 0x12c
 80055d6:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80055da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e2:	dd04      	ble.n	80055ee <_ZN9Barometer22UseComplementaryFilterEv+0x62>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80055ea:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	if (actualPressureDiff < -8)actualPressureDiff = -8;                                                  //If the difference is smaller then -8 limit the difference to -8.
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	edd3 7a4b 	vldr	s15, [r3, #300]	@ 0x12c
 80055f4:	eeba 7a00 	vmov.f32	s14, #160	@ 0xc1000000 -8.0
 80055f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005600:	d504      	bpl.n	800560c <_ZN9Barometer22UseComplementaryFilterEv+0x80>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8005608:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	//If the difference is larger then 1 or smaller then -1 the slow average is adjuste based on the error between the fast and slow average.
	if (actualPressureDiff > 1 || actualPressureDiff < -1)actualPressureSlow -= actualPressureDiff / 6.0;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	edd3 7a4b 	vldr	s15, [r3, #300]	@ 0x12c
 8005612:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800561a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800561e:	dc09      	bgt.n	8005634 <_ZN9Barometer22UseComplementaryFilterEv+0xa8>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	edd3 7a4b 	vldr	s15, [r3, #300]	@ 0x12c
 8005626:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800562a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800562e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005632:	d522      	bpl.n	800567a <_ZN9Barometer22UseComplementaryFilterEv+0xee>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800563a:	4618      	mov	r0, r3
 800563c:	f7fa ff84 	bl	8000548 <__aeabi_f2d>
 8005640:	4604      	mov	r4, r0
 8005642:	460d      	mov	r5, r1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800564a:	4618      	mov	r0, r3
 800564c:	f7fa ff7c 	bl	8000548 <__aeabi_f2d>
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	4b10      	ldr	r3, [pc, #64]	@ (8005698 <_ZN9Barometer22UseComplementaryFilterEv+0x10c>)
 8005656:	f7fb f8f9 	bl	800084c <__aeabi_ddiv>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4620      	mov	r0, r4
 8005660:	4629      	mov	r1, r5
 8005662:	f7fa fe11 	bl	8000288 <__aeabi_dsub>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4610      	mov	r0, r2
 800566c:	4619      	mov	r1, r3
 800566e:	f7fb fabb 	bl	8000be8 <__aeabi_d2f>
 8005672:	4602      	mov	r2, r0
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

	return actualPressureSlow;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8005680:	ee07 3a90 	vmov	s15, r3
}
 8005684:	eeb0 0a67 	vmov.f32	s0, s15
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bdb0      	pop	{r4, r5, r7, pc}
 800568e:	bf00      	nop
 8005690:	3f7c28f6 	.word	0x3f7c28f6
 8005694:	3c75c28f 	.word	0x3c75c28f
 8005698:	40180000 	.word	0x40180000

0800569c <_ZN9Barometer23CalculateLongtermChangeEv>:
 * Tính tốc độ lên/xuống (D-term của PID).
 * Giúp drone phát hiện rơi tự do hoặc thay đổi độ cao đột ngột.
 *
 */
void Barometer::CalculateLongtermChange()
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
	//In the following part a rotating buffer is used to calculate the long term change between the various pressure measurements.
	//This total value can be used to detect the direction (up/down) and speed of the quadcopter and functions as the D-controller of the total PID-controller.
	if (manualAltitudeChange == 1)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d109      	bne.n	80056c2 <_ZN9Barometer23CalculateLongtermChangeEv+0x26>
	{
		pressureParachutePrevious = actualPressure * 10;                       								//During manual altitude change the up/down detection is disabled.
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 80056b4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80056b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	edc3 7a71 	vstr	s15, [r3, #452]	@ 0x1c4
	}
	parachuteThrottle -= parachuteBuffer[parachuteRotatingMemLocation];                                  	//Subtract the current memory position to make room for the new value.
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 21c0 	ldr.w	r2, [r3, #448]	@ 0x1c0
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	334c      	adds	r3, #76	@ 0x4c
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	440b      	add	r3, r1
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	1ad2      	subs	r2, r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
	parachuteBuffer[parachuteRotatingMemLocation] = actualPressure * 10 - pressureParachutePrevious;   		//Calculate the new change between the actual pressure and the previous measurement.
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 80056e6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80056ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	edd3 7a71 	vldr	s15, [r3, #452]	@ 0x1c4
 80056f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 80056fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005702:	ee17 1a90 	vmov	r1, s15
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	334c      	adds	r3, #76	@ 0x4c
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	6059      	str	r1, [r3, #4]
	parachuteThrottle += parachuteBuffer[parachuteRotatingMemLocation];                                  	//Add the new value to the long term avarage value.
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 21c0 	ldr.w	r2, [r3, #448]	@ 0x1c0
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	334c      	adds	r3, #76	@ 0x4c
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	440b      	add	r3, r1
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	441a      	add	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
	pressureParachutePrevious = actualPressure * 10;                                                      	 //Store the current measurement for the next loop.
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 8005734:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	edc3 7a71 	vstr	s15, [r3, #452]	@ 0x1c4
	parachuteRotatingMemLocation++;                                                                        	//Increase the rotating memory location.
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8005748:	3301      	adds	r3, #1
 800574a:	b2da      	uxtb	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
	if (parachuteRotatingMemLocation == 30)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8005758:	2b1e      	cmp	r3, #30
 800575a:	d103      	bne.n	8005764 <_ZN9Barometer23CalculateLongtermChangeEv+0xc8>
	{
		parachuteRotatingMemLocation = 0;                            //Start at 0 when the memory location 20 is reached.
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
	}
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <_ZN9Barometer20GetPidOutputAltitudeEv>:

/*
 * Trả về giá trị điều khiển PID (dùng để chỉnh ga)
 */
float Barometer::GetPidOutputAltitude()
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	return this->pidOutputAltitude;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800577e:	ee07 3a90 	vmov	s15, r3
}
 8005782:	eeb0 0a67 	vmov.f32	s0, s15
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <_ZN9Barometer17GetActualPressureEv>:


float Barometer::GetActualPressure()
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
	return this->actualPressure;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800579e:	ee07 3a90 	vmov	s15, r3
}
 80057a2:	eeb0 0a67 	vmov.f32	s0, s15
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <_ZN9Barometer20CalculateAltitudePIDEh>:
 * D: dựa trên tốc độ thay đổi áp suất (parachuteThrottle).
 *
 * @Result: pidOutputAltitude dùng điều chỉnh ga motor.
 */
void Barometer::CalculateAltitudePID(uint8_t TheStateThrottle)
{
 80057b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	460b      	mov	r3, r1
 80057bc:	70fb      	strb	r3, [r7, #3]
	if (pidAltitudeSetpoint == 0)  pidAltitudeSetpoint = actualPressure; // If not yet set, set the PID altitude setpoint.
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	edd3 7a75 	vldr	s15, [r3, #468]	@ 0x1d4
 80057c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80057c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057cc:	d105      	bne.n	80057da <_ZN9Barometer20CalculateAltitudePIDEh+0x2a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
	// Khi vị trí cần ga được tăng hoặc giảm, chức năng giữ độ cao bị vô hiệu hóa một phần. Biến manual_altitude_change
	manualAltitudeChange = 0; // Preset the manual_altitude_change variable to 0.
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	manualThrottle = 0;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f8a3 2130 	strh.w	r2, [r3, #304]	@ 0x130
	if (TheStateThrottle == 1) {  // tăng jostick lên
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d109      	bne.n	8005804 <_ZN9Barometer20CalculateAltitudePIDEh+0x54>
		manualAltitudeChange = 1; // Đặt biến manual_altitude_change thành 1 để cho biết rằng độ cao đã được điều chỉnh.
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		pidAltitudeSetpoint = actualPressure; // Điều chỉnh điểm đặt đến giá trị áp suất thực tế để đầu ra của bộ điều khiển P- và I bằng 0.
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
//		manualThrottle = (theThrottle - 1600) / 3; // Để ngăn chặn những thay đổi rất nhanh về chiều cao, giới hạn chức năng của van tiết lưu.
	}
	if (TheStateThrottle == 0) { // // hạ jostick xuống
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d109      	bne.n	800581e <_ZN9Barometer20CalculateAltitudePIDEh+0x6e>
		manualAltitudeChange = 1;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		pidAltitudeSetpoint = actualPressure;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
//		manualThrottle = (theThrottle - 1400) / 5;
	}
	// Tính toán đầu ra PID của độ cao giữ.
	pidAltitudeInput = actualPressure;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
	pidErrorAltitudeTemp = pidAltitudeInput - pidAltitudeSetpoint;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	ed93 7a76 	vldr	s14, [r3, #472]	@ 0x1d8
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	edd3 7a75 	vldr	s15, [r3, #468]	@ 0x1d4
 8005836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	edc3 7a73 	vstr	s15, [r3, #460]	@ 0x1cc
	//Để có được kết quả tốt hơn, độ lợi P được tăng lên khi sai số giữa điểm đặt và giá trị áp suất thực tế tăng lên.
	// Biến pid_error_gain_altitude sẽ được sử dụng để điều chỉnh độ lợi P của bộ điều khiển PID.
	pidErrorGainAltitude = 0;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f04f 0200 	mov.w	r2, #0
 8005846:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
	// Nếu sai số giữa điểm đặt và áp suất thực lớn hơn 10 hoặc nhỏ hơn thì -10.
	if (pidErrorAltitudeTemp > 10 || pidErrorAltitudeTemp < -10)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	edd3 7a73 	vldr	s15, [r3, #460]	@ 0x1cc
 8005850:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800585c:	dc09      	bgt.n	8005872 <_ZN9Barometer20CalculateAltitudePIDEh+0xc2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	edd3 7a73 	vldr	s15, [r3, #460]	@ 0x1cc
 8005864:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8005868:	eef4 7ac7 	vcmpe.f32	s15, s14
 800586c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005870:	d52d      	bpl.n	80058ce <_ZN9Barometer20CalculateAltitudePIDEh+0x11e>
	{
		pidErrorGainAltitude = (abs(pidErrorAltitudeTemp) - 10) / 20.0;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	edd3 7a73 	vldr	s15, [r3, #460]	@ 0x1cc
 8005878:	eeb0 0a67 	vmov.f32	s0, s15
 800587c:	f7fb ff58 	bl	8001730 <_ZSt3absf>
 8005880:	eef0 7a40 	vmov.f32	s15, s0
 8005884:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005888:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800588c:	ee17 0a90 	vmov	r0, s15
 8005890:	f7fa fe5a 	bl	8000548 <__aeabi_f2d>
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	4b70      	ldr	r3, [pc, #448]	@ (8005a5c <_ZN9Barometer20CalculateAltitudePIDEh+0x2ac>)
 800589a:	f7fa ffd7 	bl	800084c <__aeabi_ddiv>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	f7fb f99f 	bl	8000be8 <__aeabi_d2f>
 80058aa:	4602      	mov	r2, r0
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
		if (pidErrorGainAltitude > 3) // giới hạn lại
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	edd3 7a72 	vldr	s15, [r3, #456]	@ 0x1c8
 80058b8:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80058bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c4:	dd03      	ble.n	80058ce <_ZN9Barometer20CalculateAltitudePIDEh+0x11e>
		{
			pidErrorGainAltitude = 3;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a65      	ldr	r2, [pc, #404]	@ (8005a60 <_ZN9Barometer20CalculateAltitudePIDEh+0x2b0>)
 80058ca:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
		}
	}

	pid_Imem_Altitude += (pid_Igain_Altitude / 100.0) * pidErrorAltitudeTemp;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fa fe37 	bl	8000548 <__aeabi_f2d>
 80058da:	4604      	mov	r4, r0
 80058dc:	460d      	mov	r5, r1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	@ 0x1e8
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fa fe2f 	bl	8000548 <__aeabi_f2d>
 80058ea:	f04f 0200 	mov.w	r2, #0
 80058ee:	4b5d      	ldr	r3, [pc, #372]	@ (8005a64 <_ZN9Barometer20CalculateAltitudePIDEh+0x2b4>)
 80058f0:	f7fa ffac 	bl	800084c <__aeabi_ddiv>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4690      	mov	r8, r2
 80058fa:	4699      	mov	r9, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8005902:	4618      	mov	r0, r3
 8005904:	f7fa fe20 	bl	8000548 <__aeabi_f2d>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4640      	mov	r0, r8
 800590e:	4649      	mov	r1, r9
 8005910:	f7fa fe72 	bl	80005f8 <__aeabi_dmul>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4620      	mov	r0, r4
 800591a:	4629      	mov	r1, r5
 800591c:	f7fa fcb6 	bl	800028c <__adddf3>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4610      	mov	r0, r2
 8005926:	4619      	mov	r1, r3
 8005928:	f7fb f95e 	bl	8000be8 <__aeabi_d2f>
 800592c:	4602      	mov	r2, r0
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
	if (pid_Imem_Altitude > pidMaxAltitude)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	ed93 7a74 	vldr	s14, [r3, #464]	@ 0x1d0
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	@ 0x1f0
 8005940:	ee07 3a90 	vmov	s15, r3
 8005944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800594c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005950:	dd0a      	ble.n	8005968 <_ZN9Barometer20CalculateAltitudePIDEh+0x1b8>
	{
		pid_Imem_Altitude = pidMaxAltitude;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	@ 0x1f0
 8005958:	ee07 3a90 	vmov	s15, r3
 800595c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	edc3 7a74 	vstr	s15, [r3, #464]	@ 0x1d0
 8005966:	e01a      	b.n	800599e <_ZN9Barometer20CalculateAltitudePIDEh+0x1ee>
	}
	else if (pid_Imem_Altitude < pidMaxAltitude * -1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	ed93 7a74 	vldr	s14, [r3, #464]	@ 0x1d0
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	@ 0x1f0
 8005974:	425b      	negs	r3, r3
 8005976:	ee07 3a90 	vmov	s15, r3
 800597a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800597e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005986:	d50a      	bpl.n	800599e <_ZN9Barometer20CalculateAltitudePIDEh+0x1ee>
	{
		pid_Imem_Altitude = pidMaxAltitude * -1;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	@ 0x1f0
 800598e:	425b      	negs	r3, r3
 8005990:	ee07 3a90 	vmov	s15, r3
 8005994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	edc3 7a74 	vstr	s15, [r3, #464]	@ 0x1d0
	}
	pidOutputAltitude = (pid_Pgain_Altitude + pidErrorGainAltitude) * pidErrorAltitudeTemp + pid_Imem_Altitude + pid_Dgain_Altitude * parachuteThrottle;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	ed93 7a79 	vldr	s14, [r3, #484]	@ 0x1e4
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	edd3 7a72 	vldr	s15, [r3, #456]	@ 0x1c8
 80059aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	edd3 7a73 	vldr	s15, [r3, #460]	@ 0x1cc
 80059b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	edd3 7a74 	vldr	s15, [r3, #464]	@ 0x1d0
 80059be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	edd3 6a7b 	vldr	s13, [r3, #492]	@ 0x1ec
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	edc3 7a77 	vstr	s15, [r3, #476]	@ 0x1dc
	if (pidOutputAltitude > pidMaxAltitude)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	ed93 7a77 	vldr	s14, [r3, #476]	@ 0x1dc
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	@ 0x1f0
 80059f0:	ee07 3a90 	vmov	s15, r3
 80059f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80059fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a00:	dd0a      	ble.n	8005a18 <_ZN9Barometer20CalculateAltitudePIDEh+0x268>
	{
		pidOutputAltitude = pidMaxAltitude;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	@ 0x1f0
 8005a08:	ee07 3a90 	vmov	s15, r3
 8005a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	edc3 7a77 	vstr	s15, [r3, #476]	@ 0x1dc
	}
	else if (pidOutputAltitude < pidMaxAltitude * -1)
	{
		pidOutputAltitude = pidMaxAltitude * -1;
	}
}
 8005a16:	e01b      	b.n	8005a50 <_ZN9Barometer20CalculateAltitudePIDEh+0x2a0>
	else if (pidOutputAltitude < pidMaxAltitude * -1)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	ed93 7a77 	vldr	s14, [r3, #476]	@ 0x1dc
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	@ 0x1f0
 8005a24:	425b      	negs	r3, r3
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a36:	d400      	bmi.n	8005a3a <_ZN9Barometer20CalculateAltitudePIDEh+0x28a>
}
 8005a38:	e00a      	b.n	8005a50 <_ZN9Barometer20CalculateAltitudePIDEh+0x2a0>
		pidOutputAltitude = pidMaxAltitude * -1;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	@ 0x1f0
 8005a40:	425b      	negs	r3, r3
 8005a42:	ee07 3a90 	vmov	s15, r3
 8005a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	edc3 7a77 	vstr	s15, [r3, #476]	@ 0x1dc
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40340000 	.word	0x40340000
 8005a60:	40400000 	.word	0x40400000
 8005a64:	40590000 	.word	0x40590000

08005a68 <_ZN9Barometer16ResetValuesOfPIDEv>:

/*
 * Reset toàn bộ biến PID khi đổi mode hoặc reset.
 */
void Barometer::ResetValuesOfPID()
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
	pidAltitudeSetpoint = 0;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
	pidOutputAltitude = 0;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
	pid_Imem_Altitude = 0;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f04f 0200 	mov.w	r2, #0
 8005a8a:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
	manualThrottle = 0;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f8a3 2130 	strh.w	r2, [r3, #304]	@ 0x130
	manualAltitudeChange = 1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <_ZN9Barometer11SetKgainPIDEfffs>:

/*
 * Cho phép chỉnh hệ số PID từ ngoài (main).
 */
void Barometer::SetKgainPID(float thePgain,float theIgain, float theDgain, int16_t theMaxPID)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b087      	sub	sp, #28
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6178      	str	r0, [r7, #20]
 8005ab2:	ed87 0a04 	vstr	s0, [r7, #16]
 8005ab6:	edc7 0a03 	vstr	s1, [r7, #12]
 8005aba:	ed87 1a02 	vstr	s2, [r7, #8]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	80fb      	strh	r3, [r7, #6]
	this->pid_Pgain_Altitude = thePgain;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
	this->pid_Igain_Altitude = theIgain;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
	this->pid_Dgain_Altitude = theDgain;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
	this->pidMaxAltitude = theMaxPID;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	88fa      	ldrh	r2, [r7, #6]
 8005ade:	f8a3 21f0 	strh.w	r2, [r3, #496]	@ 0x1f0
}
 8005ae2:	bf00      	nop
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <_ZN9Barometer28ReadAndCalculatePIDBarometerEhhh>:
 * Stage 2: tính áp suất đã bù → lọc áp suất.
 * Stage 3: cập nhật thay đổi lâu dài, tính PID nếu đang ở chế độ giữ độ cao.
 * Lặp lại 1–2–3 theo chu kỳ.
 */
void Barometer::ReadAndCalculatePIDBarometer(uint8_t theFlightMode, uint8_t theTakeoffDetected, uint8_t TheStateThrottle )
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b082      	sub	sp, #8
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	4608      	mov	r0, r1
 8005af8:	4611      	mov	r1, r2
 8005afa:	461a      	mov	r2, r3
 8005afc:	4603      	mov	r3, r0
 8005afe:	70fb      	strb	r3, [r7, #3]
 8005b00:	460b      	mov	r3, r1
 8005b02:	70bb      	strb	r3, [r7, #2]
 8005b04:	4613      	mov	r3, r2
 8005b06:	707b      	strb	r3, [r7, #1]
	// Mỗi khi hàm này được gọi, biến barometer_counter được tăng lên. Bằng cách này, một hành động cụ thể
	//is executed at the correct moment. This is needed because requesting data from the MS5611 takes around 9ms to complete.
	stageOfBarometer++;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b0e:	3301      	adds	r3, #1
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	if (stageOfBarometer == 1)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d129      	bne.n	8005b76 <_ZN9Barometer28ReadAndCalculatePIDBarometerEhhh+0x88>
	{
		//Get temperature data from MS-5611
		if (stageOfTemperature == 0)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d106      	bne.n	8005b3a <_ZN9Barometer28ReadAndCalculatePIDBarometerEhhh+0x4c>
		{
			rawTemperature = GetAverageTemperature(); // lấy trung bình 5 giá trị nhiệt độ
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff fa3f 	bl	8004fb0 <_ZN9Barometer21GetAverageTemperatureEv>
 8005b32:	4602      	mov	r2, r0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	621a      	str	r2, [r3, #32]
 8005b38:	e005      	b.n	8005b46 <_ZN9Barometer28ReadAndCalculatePIDBarometerEhhh+0x58>
		}
		else
		{
			//Get pressure data from MS-5611
			rawPressure = GetDataFromPreviousRequest();
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff f9f2 	bl	8004f24 <_ZN9Barometer26GetDataFromPreviousRequestEv>
 8005b40:	4602      	mov	r2, r0
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	625a      	str	r2, [r3, #36]	@ 0x24
		}

		stageOfTemperature++;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

		if(stageOfTemperature == 20)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005b5c:	2b14      	cmp	r3, #20
 8005b5e:	d107      	bne.n	8005b70 <_ZN9Barometer28ReadAndCalculatePIDBarometerEhhh+0x82>
		{
			//Yêu cầu dữ liệu nhiệt độ
			stageOfTemperature = 0;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			RequestGetTemperatureData();
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7ff fa6b 	bl	8005044 <_ZN9Barometer25RequestGetTemperatureDataEv>
 8005b6e:	e002      	b.n	8005b76 <_ZN9Barometer28ReadAndCalculatePIDBarometerEhhh+0x88>
		}
		else
		{
			//Request pressure data
			RequestGetPressureData();
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff fa7b 	bl	800506c <_ZN9Barometer22RequestGetPressureDataEv>
		}
	}

	if (stageOfBarometer == 2) // Tính toán áp suất như được giải thích trong bảng dữ liệu của MS-5611
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d117      	bne.n	8005bb0 <_ZN9Barometer28ReadAndCalculatePIDBarometerEhhh+0xc2>
	{
		compensatedPressure = CompensatePressure();
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff fa87 	bl	8005094 <_ZN9Barometer18CompensatePressureEv>
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		actualPressureFast = GetAveragePressure();
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7ff fca7 	bl	80054e4 <_ZN9Barometer18GetAveragePressureEv>
 8005b96:	eef0 7a40 	vmov.f32	s15, s0
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
		actualPressure = UseComplementaryFilter();
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7ff fcf3 	bl	800558c <_ZN9Barometer22UseComplementaryFilterEv>
 8005ba6:	eef0 7a40 	vmov.f32	s15, s0
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120
	}

	if (stageOfBarometer == 3)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d120      	bne.n	8005bfc <_ZN9Barometer28ReadAndCalculatePIDBarometerEhhh+0x10e>
	{
		stageOfBarometer = 0;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		CalculateLongtermChange();
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff fd6a 	bl	800569c <_ZN9Barometer23CalculateLongtermChangeEv>
		if (theFlightMode >= 2 && theTakeoffDetected ==1) // Nếu máy bay quadcopter đang ở chế độ độ cao và đang bay.
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d908      	bls.n	8005be0 <_ZN9Barometer28ReadAndCalculatePIDBarometerEhhh+0xf2>
 8005bce:	78bb      	ldrb	r3, [r7, #2]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d105      	bne.n	8005be0 <_ZN9Barometer28ReadAndCalculatePIDBarometerEhhh+0xf2>
		{
			CalculateAltitudePID(TheStateThrottle);
 8005bd4:	787b      	ldrb	r3, [r7, #1]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff fde9 	bl	80057b0 <_ZN9Barometer20CalculateAltitudePIDEh>
		else if (theFlightMode < 2 && pidAltitudeSetpoint != 0)
		{
			ResetValuesOfPID();
		}
	}
}
 8005bde:	e00d      	b.n	8005bfc <_ZN9Barometer28ReadAndCalculatePIDBarometerEhhh+0x10e>
		else if (theFlightMode < 2 && pidAltitudeSetpoint != 0)
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d80a      	bhi.n	8005bfc <_ZN9Barometer28ReadAndCalculatePIDBarometerEhhh+0x10e>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	edd3 7a75 	vldr	s15, [r3, #468]	@ 0x1d4
 8005bec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf4:	d002      	beq.n	8005bfc <_ZN9Barometer28ReadAndCalculatePIDBarometerEhhh+0x10e>
			ResetValuesOfPID();
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7ff ff36 	bl	8005a68 <_ZN9Barometer16ResetValuesOfPIDEv>
}
 8005bfc:	bf00      	nop
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8005c08:	4b14      	ldr	r3, [pc, #80]	@ (8005c5c <DWT_Delay_Init+0x58>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	4a13      	ldr	r2, [pc, #76]	@ (8005c5c <DWT_Delay_Init+0x58>)
 8005c0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c12:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8005c14:	4b11      	ldr	r3, [pc, #68]	@ (8005c5c <DWT_Delay_Init+0x58>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	4a10      	ldr	r2, [pc, #64]	@ (8005c5c <DWT_Delay_Init+0x58>)
 8005c1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c1e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8005c20:	4b0f      	ldr	r3, [pc, #60]	@ (8005c60 <DWT_Delay_Init+0x5c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a0e      	ldr	r2, [pc, #56]	@ (8005c60 <DWT_Delay_Init+0x5c>)
 8005c26:	f023 0301 	bic.w	r3, r3, #1
 8005c2a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8005c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c60 <DWT_Delay_Init+0x5c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a0b      	ldr	r2, [pc, #44]	@ (8005c60 <DWT_Delay_Init+0x5c>)
 8005c32:	f043 0301 	orr.w	r3, r3, #1
 8005c36:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8005c38:	4b09      	ldr	r3, [pc, #36]	@ (8005c60 <DWT_Delay_Init+0x5c>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8005c3e:	bf00      	nop
     __ASM volatile ("NOP");
 8005c40:	bf00      	nop
  __ASM volatile ("NOP");
 8005c42:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8005c44:	4b06      	ldr	r3, [pc, #24]	@ (8005c60 <DWT_Delay_Init+0x5c>)
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	e000      	b.n	8005c52 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8005c50:	2301      	movs	r3, #1
  }
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	e000edf0 	.word	0xe000edf0
 8005c60:	e0001000 	.word	0xe0001000

08005c64 <MyFlash_EraseSector>:
static uint8_t sectorNum;

//functions definitions
//1. Erase Sector
void MyFlash_EraseSector(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8005c68:	f002 fd8a 	bl	8008780 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(sectorNum, FLASH_VOLTAGE_RANGE_3);
 8005c6c:	4b04      	ldr	r3, [pc, #16]	@ (8005c80 <MyFlash_EraseSector+0x1c>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2102      	movs	r1, #2
 8005c72:	4618      	mov	r0, r3
 8005c74:	f002 fee6 	bl	8008a44 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8005c78:	f002 fda4 	bl	80087c4 <HAL_FLASH_Lock>
}
 8005c7c:	bf00      	nop
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20000460 	.word	0x20000460

08005c84 <MyFlash_SetSectorAddrs>:

//2. Set Sector Adress
void MyFlash_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	6039      	str	r1, [r7, #0]
 8005c8e:	71fb      	strb	r3, [r7, #7]
	sectorNum = sector;
 8005c90:	4a05      	ldr	r2, [pc, #20]	@ (8005ca8 <MyFlash_SetSectorAddrs+0x24>)
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	7013      	strb	r3, [r2, #0]
	sectorAddrs = addrs;
 8005c96:	4a05      	ldr	r2, [pc, #20]	@ (8005cac <MyFlash_SetSectorAddrs+0x28>)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	6013      	str	r3, [r2, #0]
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	20000460 	.word	0x20000460
 8005cac:	2000045c 	.word	0x2000045c

08005cb0 <MyFlash_WriteN>:

//3. Write Flash
void MyFlash_WriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8005cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cb4:	b088      	sub	sp, #32
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	607a      	str	r2, [r7, #4]
 8005cbe:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = sectorAddrs + idx;
 8005cc0:	4b37      	ldr	r3, [pc, #220]	@ (8005da0 <MyFlash_WriteN+0xf0>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	61fb      	str	r3, [r7, #28]

	//Erase sector before write
	MyFlash_EraseSector();
 8005cca:	f7ff ffcb 	bl	8005c64 <MyFlash_EraseSector>

	//Unlock Flash
	HAL_FLASH_Unlock();
 8005cce:	f002 fd57 	bl	8008780 <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d03f      	beq.n	8005d58 <MyFlash_WriteN+0xa8>
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	dc59      	bgt.n	8005d90 <MyFlash_WriteN+0xe0>
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <MyFlash_WriteN+0x36>
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d01c      	beq.n	8005d1e <MyFlash_WriteN+0x6e>
 8005ce4:	e054      	b.n	8005d90 <MyFlash_WriteN+0xe0>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61bb      	str	r3, [r7, #24]
 8005cea:	e013      	b.n	8005d14 <MyFlash_WriteN+0x64>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	469a      	mov	sl, r3
 8005cfa:	4693      	mov	fp, r2
 8005cfc:	4652      	mov	r2, sl
 8005cfe:	465b      	mov	r3, fp
 8005d00:	69f9      	ldr	r1, [r7, #28]
 8005d02:	2000      	movs	r0, #0
 8005d04:	f002 fcea 	bl	80086dc <HAL_FLASH_Program>
					flashAddress++;
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	3301      	adds	r3, #1
 8005d12:	61bb      	str	r3, [r7, #24]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d3e7      	bcc.n	8005cec <MyFlash_WriteN+0x3c>
				}
			break;
 8005d1c:	e038      	b.n	8005d90 <MyFlash_WriteN+0xe0>

		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 8005d1e:	2300      	movs	r3, #0
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	e014      	b.n	8005d4e <MyFlash_WriteN+0x9e>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2200      	movs	r2, #0
 8005d32:	4698      	mov	r8, r3
 8005d34:	4691      	mov	r9, r2
 8005d36:	4642      	mov	r2, r8
 8005d38:	464b      	mov	r3, r9
 8005d3a:	69f9      	ldr	r1, [r7, #28]
 8005d3c:	2001      	movs	r0, #1
 8005d3e:	f002 fccd 	bl	80086dc <HAL_FLASH_Program>
					flashAddress+=2;
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	3302      	adds	r3, #2
 8005d46:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d3e6      	bcc.n	8005d24 <MyFlash_WriteN+0x74>
				}
			break;
 8005d56:	e01b      	b.n	8005d90 <MyFlash_WriteN+0xe0>

		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	613b      	str	r3, [r7, #16]
 8005d5c:	e013      	b.n	8005d86 <MyFlash_WriteN+0xd6>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	4413      	add	r3, r2
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	461c      	mov	r4, r3
 8005d6c:	4615      	mov	r5, r2
 8005d6e:	4622      	mov	r2, r4
 8005d70:	462b      	mov	r3, r5
 8005d72:	69f9      	ldr	r1, [r7, #28]
 8005d74:	2002      	movs	r0, #2
 8005d76:	f002 fcb1 	bl	80086dc <HAL_FLASH_Program>
					flashAddress+=4;
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	3301      	adds	r3, #1
 8005d84:	613b      	str	r3, [r7, #16]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d3e7      	bcc.n	8005d5e <MyFlash_WriteN+0xae>
				}
			break;
 8005d8e:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 8005d90:	f002 fd18 	bl	80087c4 <HAL_FLASH_Lock>
}
 8005d94:	bf00      	nop
 8005d96:	3720      	adds	r7, #32
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d9e:	bf00      	nop
 8005da0:	2000045c 	.word	0x2000045c

08005da4 <MyFlash_ReadN>:
//4. Read Flash
void MyFlash_ReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b089      	sub	sp, #36	@ 0x24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = sectorAddrs + idx;
 8005db2:	4b29      	ldr	r3, [pc, #164]	@ (8005e58 <MyFlash_ReadN+0xb4>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	61fb      	str	r3, [r7, #28]

	switch(dataType)
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d02f      	beq.n	8005e22 <MyFlash_ReadN+0x7e>
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	dc42      	bgt.n	8005e4c <MyFlash_ReadN+0xa8>
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <MyFlash_ReadN+0x2c>
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d014      	beq.n	8005df8 <MyFlash_ReadN+0x54>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 8005dce:	e03d      	b.n	8005e4c <MyFlash_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	61bb      	str	r3, [r7, #24]
 8005dd4:	e00b      	b.n	8005dee <MyFlash_ReadN+0x4a>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	440b      	add	r3, r1
 8005dde:	7812      	ldrb	r2, [r2, #0]
 8005de0:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	3301      	adds	r3, #1
 8005de6:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	3301      	adds	r3, #1
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d3ef      	bcc.n	8005dd6 <MyFlash_ReadN+0x32>
			break;
 8005df6:	e029      	b.n	8005e4c <MyFlash_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	e00c      	b.n	8005e18 <MyFlash_ReadN+0x74>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	440b      	add	r3, r1
 8005e08:	8812      	ldrh	r2, [r2, #0]
 8005e0a:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	3302      	adds	r3, #2
 8005e10:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	3301      	adds	r3, #1
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d3ee      	bcc.n	8005dfe <MyFlash_ReadN+0x5a>
			break;
 8005e20:	e014      	b.n	8005e4c <MyFlash_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 8005e22:	2300      	movs	r3, #0
 8005e24:	613b      	str	r3, [r7, #16]
 8005e26:	e00c      	b.n	8005e42 <MyFlash_ReadN+0x9e>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 8005e28:	69fa      	ldr	r2, [r7, #28]
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	68b9      	ldr	r1, [r7, #8]
 8005e30:	440b      	add	r3, r1
 8005e32:	6812      	ldr	r2, [r2, #0]
 8005e34:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	613b      	str	r3, [r7, #16]
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d3ee      	bcc.n	8005e28 <MyFlash_ReadN+0x84>
			break;
 8005e4a:	bf00      	nop
}
 8005e4c:	bf00      	nop
 8005e4e:	3724      	adds	r7, #36	@ 0x24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	2000045c 	.word	0x2000045c

08005e5c <DWT_Delay_us>:
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8005e64:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea4 <DWT_Delay_us+0x48>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8005e6a:	f005 f9f9 	bl	800b260 <HAL_RCC_GetHCLKFreq>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	4a0d      	ldr	r2, [pc, #52]	@ (8005ea8 <DWT_Delay_us+0x4c>)
 8005e72:	fba2 2303 	umull	r2, r3, r2, r3
 8005e76:	0c9b      	lsrs	r3, r3, #18
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	fb02 f303 	mul.w	r3, r2, r3
 8005e7e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8005e80:	bf00      	nop
 8005e82:	4b08      	ldr	r3, [pc, #32]	@ (8005ea4 <DWT_Delay_us+0x48>)
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	1ad2      	subs	r2, r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	bf34      	ite	cc
 8005e90:	2301      	movcc	r3, #1
 8005e92:	2300      	movcs	r3, #0
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f3      	bne.n	8005e82 <DWT_Delay_us+0x26>
}
 8005e9a:	bf00      	nop
 8005e9c:	bf00      	nop
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	e0001000 	.word	0xe0001000
 8005ea8:	431bde83 	.word	0x431bde83
 8005eac:	00000000 	.word	0x00000000

08005eb0 <_Z23ReceiveDataFromNRF24L01v>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ReceiveDataFromNRF24L01()
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
	// bấm BTN5 thì headingLock =1
	// bấm nút BTN1 , flightMode = 2, Bấm BTN6 thì FlightMode =3;
	if(isDataAvailable(2)==1)
 8005eb4:	2002      	movs	r0, #2
 8005eb6:	f7fe fc2d 	bl	8004714 <isDataAvailable>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	bf0c      	ite	eq
 8005ec0:	2301      	moveq	r3, #1
 8005ec2:	2300      	movne	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 8098 	beq.w	8005ffc <_Z23ReceiveDataFromNRF24L01v+0x14c>
	  {
		  NRF24_Receive(RxData);
 8005ecc:	486a      	ldr	r0, [pc, #424]	@ (8006078 <_Z23ReceiveDataFromNRF24L01v+0x1c8>)
 8005ece:	f7fe fc41 	bl	8004754 <NRF24_Receive>
		  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,GPIO_PIN_SET);
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ed8:	4868      	ldr	r0, [pc, #416]	@ (800607c <_Z23ReceiveDataFromNRF24L01v+0x1cc>)
 8005eda:	f002 ff97 	bl	8008e0c <HAL_GPIO_WritePin>

		  if(RxData[0]==1) //  Trai Len , Tang Do Cao
 8005ede:	4b66      	ldr	r3, [pc, #408]	@ (8006078 <_Z23ReceiveDataFromNRF24L01v+0x1c8>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d112      	bne.n	8005f0c <_Z23ReceiveDataFromNRF24L01v+0x5c>
			{
			    stateThrottle =1;
 8005ee6:	4b66      	ldr	r3, [pc, #408]	@ (8006080 <_Z23ReceiveDataFromNRF24L01v+0x1d0>)
 8005ee8:	2201      	movs	r2, #1
 8005eea:	701a      	strb	r2, [r3, #0]
				throttle = throttle + 2;
 8005eec:	4b65      	ldr	r3, [pc, #404]	@ (8006084 <_Z23ReceiveDataFromNRF24L01v+0x1d4>)
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	3302      	adds	r3, #2
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	4b63      	ldr	r3, [pc, #396]	@ (8006084 <_Z23ReceiveDataFromNRF24L01v+0x1d4>)
 8005ef6:	801a      	strh	r2, [r3, #0]
				if(throttle > 1800)  throttle = 1800;
 8005ef8:	4b62      	ldr	r3, [pc, #392]	@ (8006084 <_Z23ReceiveDataFromNRF24L01v+0x1d4>)
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8005f00:	d91e      	bls.n	8005f40 <_Z23ReceiveDataFromNRF24L01v+0x90>
 8005f02:	4b60      	ldr	r3, [pc, #384]	@ (8006084 <_Z23ReceiveDataFromNRF24L01v+0x1d4>)
 8005f04:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8005f08:	801a      	strh	r2, [r3, #0]
 8005f0a:	e019      	b.n	8005f40 <_Z23ReceiveDataFromNRF24L01v+0x90>
			}
			else if(RxData[0]==0) // Trai Xuong , Giam Do Cao
 8005f0c:	4b5a      	ldr	r3, [pc, #360]	@ (8006078 <_Z23ReceiveDataFromNRF24L01v+0x1c8>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d112      	bne.n	8005f3a <_Z23ReceiveDataFromNRF24L01v+0x8a>
			{
				stateThrottle=0;
 8005f14:	4b5a      	ldr	r3, [pc, #360]	@ (8006080 <_Z23ReceiveDataFromNRF24L01v+0x1d0>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	701a      	strb	r2, [r3, #0]
				throttle =throttle - 2;
 8005f1a:	4b5a      	ldr	r3, [pc, #360]	@ (8006084 <_Z23ReceiveDataFromNRF24L01v+0x1d4>)
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	3b02      	subs	r3, #2
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	4b58      	ldr	r3, [pc, #352]	@ (8006084 <_Z23ReceiveDataFromNRF24L01v+0x1d4>)
 8005f24:	801a      	strh	r2, [r3, #0]
				if(throttle < 1000)  throttle = 1000;
 8005f26:	4b57      	ldr	r3, [pc, #348]	@ (8006084 <_Z23ReceiveDataFromNRF24L01v+0x1d4>)
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f2e:	d207      	bcs.n	8005f40 <_Z23ReceiveDataFromNRF24L01v+0x90>
 8005f30:	4b54      	ldr	r3, [pc, #336]	@ (8006084 <_Z23ReceiveDataFromNRF24L01v+0x1d4>)
 8005f32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005f36:	801a      	strh	r2, [r3, #0]
 8005f38:	e002      	b.n	8005f40 <_Z23ReceiveDataFromNRF24L01v+0x90>
			}
			else
			{
				stateThrottle = 255;
 8005f3a:	4b51      	ldr	r3, [pc, #324]	@ (8006080 <_Z23ReceiveDataFromNRF24L01v+0x1d0>)
 8005f3c:	22ff      	movs	r2, #255	@ 0xff
 8005f3e:	701a      	strb	r2, [r3, #0]
			}
		    yaw = RxData[1]*100 + RxData[2];
 8005f40:	4b4d      	ldr	r3, [pc, #308]	@ (8006078 <_Z23ReceiveDataFromNRF24L01v+0x1c8>)
 8005f42:	785b      	ldrb	r3, [r3, #1]
 8005f44:	461a      	mov	r2, r3
 8005f46:	0092      	lsls	r2, r2, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	0091      	lsls	r1, r2, #2
 8005f4e:	461a      	mov	r2, r3
 8005f50:	460b      	mov	r3, r1
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	4a47      	ldr	r2, [pc, #284]	@ (8006078 <_Z23ReceiveDataFromNRF24L01v+0x1c8>)
 8005f5a:	7892      	ldrb	r2, [r2, #2]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	4b49      	ldr	r3, [pc, #292]	@ (8006088 <_Z23ReceiveDataFromNRF24L01v+0x1d8>)
 8005f62:	801a      	strh	r2, [r3, #0]
			roll = RxData[3]*100 + RxData[4];
 8005f64:	4b44      	ldr	r3, [pc, #272]	@ (8006078 <_Z23ReceiveDataFromNRF24L01v+0x1c8>)
 8005f66:	78db      	ldrb	r3, [r3, #3]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	0092      	lsls	r2, r2, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	461a      	mov	r2, r3
 8005f70:	0091      	lsls	r1, r2, #2
 8005f72:	461a      	mov	r2, r3
 8005f74:	460b      	mov	r3, r1
 8005f76:	4413      	add	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	4a3e      	ldr	r2, [pc, #248]	@ (8006078 <_Z23ReceiveDataFromNRF24L01v+0x1c8>)
 8005f7e:	7912      	ldrb	r2, [r2, #4]
 8005f80:	4413      	add	r3, r2
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	4b41      	ldr	r3, [pc, #260]	@ (800608c <_Z23ReceiveDataFromNRF24L01v+0x1dc>)
 8005f86:	801a      	strh	r2, [r3, #0]
			pitch = RxData[5]*100 + RxData[6];
 8005f88:	4b3b      	ldr	r3, [pc, #236]	@ (8006078 <_Z23ReceiveDataFromNRF24L01v+0x1c8>)
 8005f8a:	795b      	ldrb	r3, [r3, #5]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	0092      	lsls	r2, r2, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	461a      	mov	r2, r3
 8005f94:	0091      	lsls	r1, r2, #2
 8005f96:	461a      	mov	r2, r3
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	4a35      	ldr	r2, [pc, #212]	@ (8006078 <_Z23ReceiveDataFromNRF24L01v+0x1c8>)
 8005fa2:	7992      	ldrb	r2, [r2, #6]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	4b39      	ldr	r3, [pc, #228]	@ (8006090 <_Z23ReceiveDataFromNRF24L01v+0x1e0>)
 8005faa:	801a      	strh	r2, [r3, #0]

			if(RxData[7] == 2) flightMode =2;
 8005fac:	4b32      	ldr	r3, [pc, #200]	@ (8006078 <_Z23ReceiveDataFromNRF24L01v+0x1c8>)
 8005fae:	79db      	ldrb	r3, [r3, #7]
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d103      	bne.n	8005fbc <_Z23ReceiveDataFromNRF24L01v+0x10c>
 8005fb4:	4b37      	ldr	r3, [pc, #220]	@ (8006094 <_Z23ReceiveDataFromNRF24L01v+0x1e4>)
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	e00a      	b.n	8005fd2 <_Z23ReceiveDataFromNRF24L01v+0x122>
			else if(RxData[7] == 3) flightMode =3;
 8005fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8006078 <_Z23ReceiveDataFromNRF24L01v+0x1c8>)
 8005fbe:	79db      	ldrb	r3, [r3, #7]
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d103      	bne.n	8005fcc <_Z23ReceiveDataFromNRF24L01v+0x11c>
 8005fc4:	4b33      	ldr	r3, [pc, #204]	@ (8006094 <_Z23ReceiveDataFromNRF24L01v+0x1e4>)
 8005fc6:	2203      	movs	r2, #3
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	e002      	b.n	8005fd2 <_Z23ReceiveDataFromNRF24L01v+0x122>
			else flightMode=1;
 8005fcc:	4b31      	ldr	r3, [pc, #196]	@ (8006094 <_Z23ReceiveDataFromNRF24L01v+0x1e4>)
 8005fce:	2201      	movs	r2, #1
 8005fd0:	701a      	strb	r2, [r3, #0]

			BTN2 = RxData[8];
 8005fd2:	4b29      	ldr	r3, [pc, #164]	@ (8006078 <_Z23ReceiveDataFromNRF24L01v+0x1c8>)
 8005fd4:	7a1b      	ldrb	r3, [r3, #8]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4b2f      	ldr	r3, [pc, #188]	@ (8006098 <_Z23ReceiveDataFromNRF24L01v+0x1e8>)
 8005fda:	601a      	str	r2, [r3, #0]
			BTN3 = RxData[9];
 8005fdc:	4b26      	ldr	r3, [pc, #152]	@ (8006078 <_Z23ReceiveDataFromNRF24L01v+0x1c8>)
 8005fde:	7a5b      	ldrb	r3, [r3, #9]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800609c <_Z23ReceiveDataFromNRF24L01v+0x1ec>)
 8005fe4:	601a      	str	r2, [r3, #0]
			BTN4 = RxData[10];
 8005fe6:	4b24      	ldr	r3, [pc, #144]	@ (8006078 <_Z23ReceiveDataFromNRF24L01v+0x1c8>)
 8005fe8:	7a9b      	ldrb	r3, [r3, #10]
 8005fea:	461a      	mov	r2, r3
 8005fec:	4b2c      	ldr	r3, [pc, #176]	@ (80060a0 <_Z23ReceiveDataFromNRF24L01v+0x1f0>)
 8005fee:	601a      	str	r2, [r3, #0]
			BTN5 = RxData[11];
 8005ff0:	4b21      	ldr	r3, [pc, #132]	@ (8006078 <_Z23ReceiveDataFromNRF24L01v+0x1c8>)
 8005ff2:	7adb      	ldrb	r3, [r3, #11]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	4b2b      	ldr	r3, [pc, #172]	@ (80060a4 <_Z23ReceiveDataFromNRF24L01v+0x1f4>)
 8005ff8:	601a      	str	r2, [r3, #0]
			 stateThrottle = 0;
		}
		 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);

	}
}
 8005ffa:	e036      	b.n	800606a <_Z23ReceiveDataFromNRF24L01v+0x1ba>
		if(takeoffDetected == 1)
 8005ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80060a8 <_Z23ReceiveDataFromNRF24L01v+0x1f8>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d12c      	bne.n	800605e <_Z23ReceiveDataFromNRF24L01v+0x1ae>
			 throttle =throttle - 0.1;
 8006004:	4b1f      	ldr	r3, [pc, #124]	@ (8006084 <_Z23ReceiveDataFromNRF24L01v+0x1d4>)
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	4618      	mov	r0, r3
 800600a:	f7fa fa8b 	bl	8000524 <__aeabi_i2d>
 800600e:	a318      	add	r3, pc, #96	@ (adr r3, 8006070 <_Z23ReceiveDataFromNRF24L01v+0x1c0>)
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	f7fa f938 	bl	8000288 <__aeabi_dsub>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4610      	mov	r0, r2
 800601e:	4619      	mov	r1, r3
 8006020:	f7fa fdc2 	bl	8000ba8 <__aeabi_d2uiz>
 8006024:	4603      	mov	r3, r0
 8006026:	b29a      	uxth	r2, r3
 8006028:	4b16      	ldr	r3, [pc, #88]	@ (8006084 <_Z23ReceiveDataFromNRF24L01v+0x1d4>)
 800602a:	801a      	strh	r2, [r3, #0]
			 if(throttle < 1300) throttle= 1300;
 800602c:	4b15      	ldr	r3, [pc, #84]	@ (8006084 <_Z23ReceiveDataFromNRF24L01v+0x1d4>)
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	f240 5213 	movw	r2, #1299	@ 0x513
 8006034:	4293      	cmp	r3, r2
 8006036:	d803      	bhi.n	8006040 <_Z23ReceiveDataFromNRF24L01v+0x190>
 8006038:	4b12      	ldr	r3, [pc, #72]	@ (8006084 <_Z23ReceiveDataFromNRF24L01v+0x1d4>)
 800603a:	f240 5214 	movw	r2, #1300	@ 0x514
 800603e:	801a      	strh	r2, [r3, #0]
			 yaw = 1473;
 8006040:	4b11      	ldr	r3, [pc, #68]	@ (8006088 <_Z23ReceiveDataFromNRF24L01v+0x1d8>)
 8006042:	f240 52c1 	movw	r2, #1473	@ 0x5c1
 8006046:	801a      	strh	r2, [r3, #0]
			 roll = 1490;
 8006048:	4b10      	ldr	r3, [pc, #64]	@ (800608c <_Z23ReceiveDataFromNRF24L01v+0x1dc>)
 800604a:	f240 52d2 	movw	r2, #1490	@ 0x5d2
 800604e:	801a      	strh	r2, [r3, #0]
			 pitch = 1478;
 8006050:	4b0f      	ldr	r3, [pc, #60]	@ (8006090 <_Z23ReceiveDataFromNRF24L01v+0x1e0>)
 8006052:	f240 52c6 	movw	r2, #1478	@ 0x5c6
 8006056:	801a      	strh	r2, [r3, #0]
			 stateThrottle = 0;
 8006058:	4b09      	ldr	r3, [pc, #36]	@ (8006080 <_Z23ReceiveDataFromNRF24L01v+0x1d0>)
 800605a:	2200      	movs	r2, #0
 800605c:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800605e:	2200      	movs	r2, #0
 8006060:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006064:	4805      	ldr	r0, [pc, #20]	@ (800607c <_Z23ReceiveDataFromNRF24L01v+0x1cc>)
 8006066:	f002 fed1 	bl	8008e0c <HAL_GPIO_WritePin>
}
 800606a:	bf00      	nop
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	9999999a 	.word	0x9999999a
 8006074:	3fb99999 	.word	0x3fb99999
 8006078:	2000063c 	.word	0x2000063c
 800607c:	40020800 	.word	0x40020800
 8006080:	20000005 	.word	0x20000005
 8006084:	20000006 	.word	0x20000006
 8006088:	2000066c 	.word	0x2000066c
 800608c:	20000668 	.word	0x20000668
 8006090:	2000066a 	.word	0x2000066a
 8006094:	2000066e 	.word	0x2000066e
 8006098:	20000680 	.word	0x20000680
 800609c:	2000067c 	.word	0x2000067c
 80060a0:	20000678 	.word	0x20000678
 80060a4:	20000674 	.word	0x20000674
 80060a8:	20000670 	.word	0x20000670

080060ac <_Z18ReadDataFromBMP180v>:
void ReadDataFromBMP180()
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
	DoCao = BMP180_GetAlt(0);
 80060b0:	2000      	movs	r0, #0
 80060b2:	f7fb faed 	bl	8001690 <BMP180_GetAlt>
 80060b6:	eef0 7a40 	vmov.f32	s15, s0
 80060ba:	4b02      	ldr	r3, [pc, #8]	@ (80060c4 <_Z18ReadDataFromBMP180v+0x18>)
 80060bc:	edc3 7a00 	vstr	s15, [r3]
//	NhietDo = BMP180_GetTemp();
}
 80060c0:	bf00      	nop
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	2000065c 	.word	0x2000065c

080060c8 <_Z13ChangeSettingv>:

void ChangeSetting()
{
 80060c8:	b5b0      	push	{r4, r5, r7, lr}
 80060ca:	b08a      	sub	sp, #40	@ 0x28
 80060cc:	af00      	add	r7, sp, #0
	//TODO nhay den bao hieu
	float adjustableRollPitchValuePgain = pidForHorizontal.roll.Pgain;
 80060ce:	4b10      	ldr	r3, [pc, #64]	@ (8006110 <_Z13ChangeSettingv+0x48>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	627b      	str	r3, [r7, #36]	@ 0x24
	float adjustableRollPitchValueIgain = pidForHorizontal.roll.Igain;
 80060d4:	4b0e      	ldr	r3, [pc, #56]	@ (8006110 <_Z13ChangeSettingv+0x48>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	623b      	str	r3, [r7, #32]
	float adjustableRollPitchValueDgain = pidForHorizontal.roll.Dgain;
 80060da:	4b0d      	ldr	r3, [pc, #52]	@ (8006110 <_Z13ChangeSettingv+0x48>)
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	61fb      	str	r3, [r7, #28]

	float adjustableYawValuePgain = pidForHorizontal.yaw.Pgain;
 80060e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006110 <_Z13ChangeSettingv+0x48>)
 80060e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060e4:	61bb      	str	r3, [r7, #24]
	float adjustableYawValueIgain = pidForHorizontal.yaw.Igain;
 80060e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006110 <_Z13ChangeSettingv+0x48>)
 80060e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060ea:	617b      	str	r3, [r7, #20]
	float adjustableYawValueDgain = pidForHorizontal.yaw.Dgain;
 80060ec:	4b08      	ldr	r3, [pc, #32]	@ (8006110 <_Z13ChangeSettingv+0x48>)
 80060ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060f0:	613b      	str	r3, [r7, #16]

	float adjustableAltitudeValuePgain = ms5611.pid_Pgain_Altitude;
 80060f2:	4b08      	ldr	r3, [pc, #32]	@ (8006114 <_Z13ChangeSettingv+0x4c>)
 80060f4:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 80060f8:	60fb      	str	r3, [r7, #12]
	float adjustableAltitudeValueIgain = ms5611.pid_Igain_Altitude;
 80060fa:	4b06      	ldr	r3, [pc, #24]	@ (8006114 <_Z13ChangeSettingv+0x4c>)
 80060fc:	f8d3 31e8 	ldr.w	r3, [r3, #488]	@ 0x1e8
 8006100:	60bb      	str	r3, [r7, #8]
	float adjustableAltitudeValueDgain = ms5611.pid_Dgain_Altitude;
 8006102:	4b04      	ldr	r3, [pc, #16]	@ (8006114 <_Z13ChangeSettingv+0x4c>)
 8006104:	f8d3 31ec 	ldr.w	r3, [r3, #492]	@ 0x1ec
 8006108:	607b      	str	r3, [r7, #4]


	for(int i=1;i<=5;i++)
 800610a:	2301      	movs	r3, #1
 800610c:	603b      	str	r3, [r7, #0]
 800610e:	e3a7      	b.n	8006860 <_Z13ChangeSettingv+0x798>
 8006110:	20000c1c 	.word	0x20000c1c
 8006114:	20000800 	.word	0x20000800
	{
		DWT_Delay_us(4000);
 8006118:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800611c:	f7ff fe9e 	bl	8005e5c <DWT_Delay_us>


			if (roll > 1550) adjustableRollPitchValuePgain += (float)(roll - 1550) * 0.000001;
 8006120:	4bc5      	ldr	r3, [pc, #788]	@ (8006438 <_Z13ChangeSettingv+0x370>)
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	f240 620e 	movw	r2, #1550	@ 0x60e
 8006128:	4293      	cmp	r3, r2
 800612a:	d923      	bls.n	8006174 <_Z13ChangeSettingv+0xac>
 800612c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800612e:	f7fa fa0b 	bl	8000548 <__aeabi_f2d>
 8006132:	4604      	mov	r4, r0
 8006134:	460d      	mov	r5, r1
 8006136:	4bc0      	ldr	r3, [pc, #768]	@ (8006438 <_Z13ChangeSettingv+0x370>)
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	f2a3 630e 	subw	r3, r3, #1550	@ 0x60e
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006146:	ee17 0a90 	vmov	r0, s15
 800614a:	f7fa f9fd 	bl	8000548 <__aeabi_f2d>
 800614e:	a3b8      	add	r3, pc, #736	@ (adr r3, 8006430 <_Z13ChangeSettingv+0x368>)
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	f7fa fa50 	bl	80005f8 <__aeabi_dmul>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4620      	mov	r0, r4
 800615e:	4629      	mov	r1, r5
 8006160:	f7fa f894 	bl	800028c <__adddf3>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4610      	mov	r0, r2
 800616a:	4619      	mov	r1, r3
 800616c:	f7fa fd3c 	bl	8000be8 <__aeabi_d2f>
 8006170:	4603      	mov	r3, r0
 8006172:	627b      	str	r3, [r7, #36]	@ 0x24
			if (roll < 1450) adjustableRollPitchValuePgain -= (float)(1450 - roll) * 0.000001;
 8006174:	4bb0      	ldr	r3, [pc, #704]	@ (8006438 <_Z13ChangeSettingv+0x370>)
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 800617c:	4293      	cmp	r3, r2
 800617e:	d824      	bhi.n	80061ca <_Z13ChangeSettingv+0x102>
 8006180:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006182:	f7fa f9e1 	bl	8000548 <__aeabi_f2d>
 8006186:	4604      	mov	r4, r0
 8006188:	460d      	mov	r5, r1
 800618a:	4bab      	ldr	r3, [pc, #684]	@ (8006438 <_Z13ChangeSettingv+0x370>)
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	f5c3 63b5 	rsb	r3, r3, #1448	@ 0x5a8
 8006192:	3302      	adds	r3, #2
 8006194:	ee07 3a90 	vmov	s15, r3
 8006198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800619c:	ee17 0a90 	vmov	r0, s15
 80061a0:	f7fa f9d2 	bl	8000548 <__aeabi_f2d>
 80061a4:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006430 <_Z13ChangeSettingv+0x368>)
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	f7fa fa25 	bl	80005f8 <__aeabi_dmul>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	4620      	mov	r0, r4
 80061b4:	4629      	mov	r1, r5
 80061b6:	f7fa f867 	bl	8000288 <__aeabi_dsub>
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4610      	mov	r0, r2
 80061c0:	4619      	mov	r1, r3
 80061c2:	f7fa fd11 	bl	8000be8 <__aeabi_d2f>
 80061c6:	4603      	mov	r3, r0
 80061c8:	627b      	str	r3, [r7, #36]	@ 0x24
			if (adjustableRollPitchValuePgain < 0)adjustableRollPitchValuePgain = 0;
 80061ca:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80061ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d6:	d502      	bpl.n	80061de <_Z13ChangeSettingv+0x116>
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pidForHorizontal.roll.Pgain = adjustableRollPitchValuePgain;
 80061de:	4a97      	ldr	r2, [pc, #604]	@ (800643c <_Z13ChangeSettingv+0x374>)
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	6053      	str	r3, [r2, #4]
			pidForHorizontal.pitch.Pgain = adjustableRollPitchValuePgain;
 80061e4:	4a95      	ldr	r2, [pc, #596]	@ (800643c <_Z13ChangeSettingv+0x374>)
 80061e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e8:	6353      	str	r3, [r2, #52]	@ 0x34

			if (pitch > 1550)adjustableRollPitchValueIgain += (float)(pitch - 1550) * 0.000001;
 80061ea:	4b95      	ldr	r3, [pc, #596]	@ (8006440 <_Z13ChangeSettingv+0x378>)
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	f240 620e 	movw	r2, #1550	@ 0x60e
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d923      	bls.n	800623e <_Z13ChangeSettingv+0x176>
 80061f6:	6a38      	ldr	r0, [r7, #32]
 80061f8:	f7fa f9a6 	bl	8000548 <__aeabi_f2d>
 80061fc:	4604      	mov	r4, r0
 80061fe:	460d      	mov	r5, r1
 8006200:	4b8f      	ldr	r3, [pc, #572]	@ (8006440 <_Z13ChangeSettingv+0x378>)
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	f2a3 630e 	subw	r3, r3, #1550	@ 0x60e
 8006208:	ee07 3a90 	vmov	s15, r3
 800620c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006210:	ee17 0a90 	vmov	r0, s15
 8006214:	f7fa f998 	bl	8000548 <__aeabi_f2d>
 8006218:	a385      	add	r3, pc, #532	@ (adr r3, 8006430 <_Z13ChangeSettingv+0x368>)
 800621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621e:	f7fa f9eb 	bl	80005f8 <__aeabi_dmul>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	4620      	mov	r0, r4
 8006228:	4629      	mov	r1, r5
 800622a:	f7fa f82f 	bl	800028c <__adddf3>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4610      	mov	r0, r2
 8006234:	4619      	mov	r1, r3
 8006236:	f7fa fcd7 	bl	8000be8 <__aeabi_d2f>
 800623a:	4603      	mov	r3, r0
 800623c:	623b      	str	r3, [r7, #32]
			if (pitch < 1450)adjustableRollPitchValueIgain -= (float)(1450 - pitch) * 0.000001;
 800623e:	4b80      	ldr	r3, [pc, #512]	@ (8006440 <_Z13ChangeSettingv+0x378>)
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 8006246:	4293      	cmp	r3, r2
 8006248:	d824      	bhi.n	8006294 <_Z13ChangeSettingv+0x1cc>
 800624a:	6a38      	ldr	r0, [r7, #32]
 800624c:	f7fa f97c 	bl	8000548 <__aeabi_f2d>
 8006250:	4604      	mov	r4, r0
 8006252:	460d      	mov	r5, r1
 8006254:	4b7a      	ldr	r3, [pc, #488]	@ (8006440 <_Z13ChangeSettingv+0x378>)
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	f5c3 63b5 	rsb	r3, r3, #1448	@ 0x5a8
 800625c:	3302      	adds	r3, #2
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006266:	ee17 0a90 	vmov	r0, s15
 800626a:	f7fa f96d 	bl	8000548 <__aeabi_f2d>
 800626e:	a370      	add	r3, pc, #448	@ (adr r3, 8006430 <_Z13ChangeSettingv+0x368>)
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	f7fa f9c0 	bl	80005f8 <__aeabi_dmul>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	4620      	mov	r0, r4
 800627e:	4629      	mov	r1, r5
 8006280:	f7fa f802 	bl	8000288 <__aeabi_dsub>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4610      	mov	r0, r2
 800628a:	4619      	mov	r1, r3
 800628c:	f7fa fcac 	bl	8000be8 <__aeabi_d2f>
 8006290:	4603      	mov	r3, r0
 8006292:	623b      	str	r3, [r7, #32]
			if (adjustableRollPitchValueIgain < 0)adjustableRollPitchValueIgain = 0;
 8006294:	edd7 7a08 	vldr	s15, [r7, #32]
 8006298:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800629c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a0:	d502      	bpl.n	80062a8 <_Z13ChangeSettingv+0x1e0>
 80062a2:	f04f 0300 	mov.w	r3, #0
 80062a6:	623b      	str	r3, [r7, #32]
			pidForHorizontal.roll.Igain = adjustableRollPitchValueIgain;
 80062a8:	4a64      	ldr	r2, [pc, #400]	@ (800643c <_Z13ChangeSettingv+0x374>)
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	6093      	str	r3, [r2, #8]
			pidForHorizontal.pitch.Igain = adjustableRollPitchValueIgain;
 80062ae:	4a63      	ldr	r2, [pc, #396]	@ (800643c <_Z13ChangeSettingv+0x374>)
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	6393      	str	r3, [r2, #56]	@ 0x38

			if (yaw > 1550)adjustableRollPitchValueDgain += (float)(yaw - 1550) * 0.000001;
 80062b4:	4b63      	ldr	r3, [pc, #396]	@ (8006444 <_Z13ChangeSettingv+0x37c>)
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	f240 620e 	movw	r2, #1550	@ 0x60e
 80062bc:	4293      	cmp	r3, r2
 80062be:	d923      	bls.n	8006308 <_Z13ChangeSettingv+0x240>
 80062c0:	69f8      	ldr	r0, [r7, #28]
 80062c2:	f7fa f941 	bl	8000548 <__aeabi_f2d>
 80062c6:	4604      	mov	r4, r0
 80062c8:	460d      	mov	r5, r1
 80062ca:	4b5e      	ldr	r3, [pc, #376]	@ (8006444 <_Z13ChangeSettingv+0x37c>)
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	f2a3 630e 	subw	r3, r3, #1550	@ 0x60e
 80062d2:	ee07 3a90 	vmov	s15, r3
 80062d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062da:	ee17 0a90 	vmov	r0, s15
 80062de:	f7fa f933 	bl	8000548 <__aeabi_f2d>
 80062e2:	a353      	add	r3, pc, #332	@ (adr r3, 8006430 <_Z13ChangeSettingv+0x368>)
 80062e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e8:	f7fa f986 	bl	80005f8 <__aeabi_dmul>
 80062ec:	4602      	mov	r2, r0
 80062ee:	460b      	mov	r3, r1
 80062f0:	4620      	mov	r0, r4
 80062f2:	4629      	mov	r1, r5
 80062f4:	f7f9 ffca 	bl	800028c <__adddf3>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4610      	mov	r0, r2
 80062fe:	4619      	mov	r1, r3
 8006300:	f7fa fc72 	bl	8000be8 <__aeabi_d2f>
 8006304:	4603      	mov	r3, r0
 8006306:	61fb      	str	r3, [r7, #28]
			if (yaw < 1450)adjustableRollPitchValueDgain -= (float)(1450 - yaw) * 0.000001;
 8006308:	4b4e      	ldr	r3, [pc, #312]	@ (8006444 <_Z13ChangeSettingv+0x37c>)
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 8006310:	4293      	cmp	r3, r2
 8006312:	d824      	bhi.n	800635e <_Z13ChangeSettingv+0x296>
 8006314:	69f8      	ldr	r0, [r7, #28]
 8006316:	f7fa f917 	bl	8000548 <__aeabi_f2d>
 800631a:	4604      	mov	r4, r0
 800631c:	460d      	mov	r5, r1
 800631e:	4b49      	ldr	r3, [pc, #292]	@ (8006444 <_Z13ChangeSettingv+0x37c>)
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	f5c3 63b5 	rsb	r3, r3, #1448	@ 0x5a8
 8006326:	3302      	adds	r3, #2
 8006328:	ee07 3a90 	vmov	s15, r3
 800632c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006330:	ee17 0a90 	vmov	r0, s15
 8006334:	f7fa f908 	bl	8000548 <__aeabi_f2d>
 8006338:	a33d      	add	r3, pc, #244	@ (adr r3, 8006430 <_Z13ChangeSettingv+0x368>)
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	f7fa f95b 	bl	80005f8 <__aeabi_dmul>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	4620      	mov	r0, r4
 8006348:	4629      	mov	r1, r5
 800634a:	f7f9 ff9d 	bl	8000288 <__aeabi_dsub>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4610      	mov	r0, r2
 8006354:	4619      	mov	r1, r3
 8006356:	f7fa fc47 	bl	8000be8 <__aeabi_d2f>
 800635a:	4603      	mov	r3, r0
 800635c:	61fb      	str	r3, [r7, #28]
			if (adjustableRollPitchValueDgain < 0)adjustableRollPitchValueDgain = 0;
 800635e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006362:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800636a:	d502      	bpl.n	8006372 <_Z13ChangeSettingv+0x2aa>
 800636c:	f04f 0300 	mov.w	r3, #0
 8006370:	61fb      	str	r3, [r7, #28]
			pidForHorizontal.roll.Dgain = adjustableRollPitchValueDgain;
 8006372:	4a32      	ldr	r2, [pc, #200]	@ (800643c <_Z13ChangeSettingv+0x374>)
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	60d3      	str	r3, [r2, #12]
			pidForHorizontal.pitch.Dgain = adjustableRollPitchValueDgain;
 8006378:	4a30      	ldr	r2, [pc, #192]	@ (800643c <_Z13ChangeSettingv+0x374>)
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	63d3      	str	r3, [r2, #60]	@ 0x3c

			///////////////////////////////////////////////////

			if (roll > 1550) adjustableYawValuePgain += (float)(roll - 1550) * 0.000001;
 800637e:	4b2e      	ldr	r3, [pc, #184]	@ (8006438 <_Z13ChangeSettingv+0x370>)
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	f240 620e 	movw	r2, #1550	@ 0x60e
 8006386:	4293      	cmp	r3, r2
 8006388:	d923      	bls.n	80063d2 <_Z13ChangeSettingv+0x30a>
 800638a:	69b8      	ldr	r0, [r7, #24]
 800638c:	f7fa f8dc 	bl	8000548 <__aeabi_f2d>
 8006390:	4604      	mov	r4, r0
 8006392:	460d      	mov	r5, r1
 8006394:	4b28      	ldr	r3, [pc, #160]	@ (8006438 <_Z13ChangeSettingv+0x370>)
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	f2a3 630e 	subw	r3, r3, #1550	@ 0x60e
 800639c:	ee07 3a90 	vmov	s15, r3
 80063a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063a4:	ee17 0a90 	vmov	r0, s15
 80063a8:	f7fa f8ce 	bl	8000548 <__aeabi_f2d>
 80063ac:	a320      	add	r3, pc, #128	@ (adr r3, 8006430 <_Z13ChangeSettingv+0x368>)
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	f7fa f921 	bl	80005f8 <__aeabi_dmul>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4620      	mov	r0, r4
 80063bc:	4629      	mov	r1, r5
 80063be:	f7f9 ff65 	bl	800028c <__adddf3>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4610      	mov	r0, r2
 80063c8:	4619      	mov	r1, r3
 80063ca:	f7fa fc0d 	bl	8000be8 <__aeabi_d2f>
 80063ce:	4603      	mov	r3, r0
 80063d0:	61bb      	str	r3, [r7, #24]
			if (roll < 1450) adjustableYawValuePgain -= (float)(1450 - roll) * 0.000001;
 80063d2:	4b19      	ldr	r3, [pc, #100]	@ (8006438 <_Z13ChangeSettingv+0x370>)
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 80063da:	4293      	cmp	r3, r2
 80063dc:	d834      	bhi.n	8006448 <_Z13ChangeSettingv+0x380>
 80063de:	69b8      	ldr	r0, [r7, #24]
 80063e0:	f7fa f8b2 	bl	8000548 <__aeabi_f2d>
 80063e4:	4604      	mov	r4, r0
 80063e6:	460d      	mov	r5, r1
 80063e8:	4b13      	ldr	r3, [pc, #76]	@ (8006438 <_Z13ChangeSettingv+0x370>)
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	f5c3 63b5 	rsb	r3, r3, #1448	@ 0x5a8
 80063f0:	3302      	adds	r3, #2
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063fa:	ee17 0a90 	vmov	r0, s15
 80063fe:	f7fa f8a3 	bl	8000548 <__aeabi_f2d>
 8006402:	a30b      	add	r3, pc, #44	@ (adr r3, 8006430 <_Z13ChangeSettingv+0x368>)
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f7fa f8f6 	bl	80005f8 <__aeabi_dmul>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4620      	mov	r0, r4
 8006412:	4629      	mov	r1, r5
 8006414:	f7f9 ff38 	bl	8000288 <__aeabi_dsub>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4610      	mov	r0, r2
 800641e:	4619      	mov	r1, r3
 8006420:	f7fa fbe2 	bl	8000be8 <__aeabi_d2f>
 8006424:	4603      	mov	r3, r0
 8006426:	61bb      	str	r3, [r7, #24]
 8006428:	e00e      	b.n	8006448 <_Z13ChangeSettingv+0x380>
 800642a:	bf00      	nop
 800642c:	f3af 8000 	nop.w
 8006430:	a0b5ed8d 	.word	0xa0b5ed8d
 8006434:	3eb0c6f7 	.word	0x3eb0c6f7
 8006438:	20000668 	.word	0x20000668
 800643c:	20000c1c 	.word	0x20000c1c
 8006440:	2000066a 	.word	0x2000066a
 8006444:	2000066c 	.word	0x2000066c
			if (adjustableYawValuePgain < 0)adjustableYawValuePgain = 0;
 8006448:	edd7 7a06 	vldr	s15, [r7, #24]
 800644c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006454:	d502      	bpl.n	800645c <_Z13ChangeSettingv+0x394>
 8006456:	f04f 0300 	mov.w	r3, #0
 800645a:	61bb      	str	r3, [r7, #24]
			pidForHorizontal.yaw.Pgain = adjustableYawValuePgain;
 800645c:	4ac8      	ldr	r2, [pc, #800]	@ (8006780 <_Z13ChangeSettingv+0x6b8>)
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	6653      	str	r3, [r2, #100]	@ 0x64

			if (pitch > 1550)adjustableYawValueIgain += (float)(pitch - 1550) * 0.000001;
 8006462:	4bc8      	ldr	r3, [pc, #800]	@ (8006784 <_Z13ChangeSettingv+0x6bc>)
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	f240 620e 	movw	r2, #1550	@ 0x60e
 800646a:	4293      	cmp	r3, r2
 800646c:	d923      	bls.n	80064b6 <_Z13ChangeSettingv+0x3ee>
 800646e:	6978      	ldr	r0, [r7, #20]
 8006470:	f7fa f86a 	bl	8000548 <__aeabi_f2d>
 8006474:	4604      	mov	r4, r0
 8006476:	460d      	mov	r5, r1
 8006478:	4bc2      	ldr	r3, [pc, #776]	@ (8006784 <_Z13ChangeSettingv+0x6bc>)
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	f2a3 630e 	subw	r3, r3, #1550	@ 0x60e
 8006480:	ee07 3a90 	vmov	s15, r3
 8006484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006488:	ee17 0a90 	vmov	r0, s15
 800648c:	f7fa f85c 	bl	8000548 <__aeabi_f2d>
 8006490:	a3b9      	add	r3, pc, #740	@ (adr r3, 8006778 <_Z13ChangeSettingv+0x6b0>)
 8006492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006496:	f7fa f8af 	bl	80005f8 <__aeabi_dmul>
 800649a:	4602      	mov	r2, r0
 800649c:	460b      	mov	r3, r1
 800649e:	4620      	mov	r0, r4
 80064a0:	4629      	mov	r1, r5
 80064a2:	f7f9 fef3 	bl	800028c <__adddf3>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4610      	mov	r0, r2
 80064ac:	4619      	mov	r1, r3
 80064ae:	f7fa fb9b 	bl	8000be8 <__aeabi_d2f>
 80064b2:	4603      	mov	r3, r0
 80064b4:	617b      	str	r3, [r7, #20]
			if (pitch < 1450)adjustableYawValueIgain -= (float)(1450 - pitch) * 0.000001;
 80064b6:	4bb3      	ldr	r3, [pc, #716]	@ (8006784 <_Z13ChangeSettingv+0x6bc>)
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 80064be:	4293      	cmp	r3, r2
 80064c0:	d824      	bhi.n	800650c <_Z13ChangeSettingv+0x444>
 80064c2:	6978      	ldr	r0, [r7, #20]
 80064c4:	f7fa f840 	bl	8000548 <__aeabi_f2d>
 80064c8:	4604      	mov	r4, r0
 80064ca:	460d      	mov	r5, r1
 80064cc:	4bad      	ldr	r3, [pc, #692]	@ (8006784 <_Z13ChangeSettingv+0x6bc>)
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	f5c3 63b5 	rsb	r3, r3, #1448	@ 0x5a8
 80064d4:	3302      	adds	r3, #2
 80064d6:	ee07 3a90 	vmov	s15, r3
 80064da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064de:	ee17 0a90 	vmov	r0, s15
 80064e2:	f7fa f831 	bl	8000548 <__aeabi_f2d>
 80064e6:	a3a4      	add	r3, pc, #656	@ (adr r3, 8006778 <_Z13ChangeSettingv+0x6b0>)
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	f7fa f884 	bl	80005f8 <__aeabi_dmul>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4620      	mov	r0, r4
 80064f6:	4629      	mov	r1, r5
 80064f8:	f7f9 fec6 	bl	8000288 <__aeabi_dsub>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	4610      	mov	r0, r2
 8006502:	4619      	mov	r1, r3
 8006504:	f7fa fb70 	bl	8000be8 <__aeabi_d2f>
 8006508:	4603      	mov	r3, r0
 800650a:	617b      	str	r3, [r7, #20]
			if (adjustableYawValueIgain < 0)adjustableYawValueIgain = 0;
 800650c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006510:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006518:	d502      	bpl.n	8006520 <_Z13ChangeSettingv+0x458>
 800651a:	f04f 0300 	mov.w	r3, #0
 800651e:	617b      	str	r3, [r7, #20]
			pidForHorizontal.yaw.Igain = adjustableYawValueIgain;
 8006520:	4a97      	ldr	r2, [pc, #604]	@ (8006780 <_Z13ChangeSettingv+0x6b8>)
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	6693      	str	r3, [r2, #104]	@ 0x68

			if (yaw > 1550)adjustableYawValueDgain += (float)(yaw - 1550) * 0.000001;
 8006526:	4b98      	ldr	r3, [pc, #608]	@ (8006788 <_Z13ChangeSettingv+0x6c0>)
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	f240 620e 	movw	r2, #1550	@ 0x60e
 800652e:	4293      	cmp	r3, r2
 8006530:	d923      	bls.n	800657a <_Z13ChangeSettingv+0x4b2>
 8006532:	6938      	ldr	r0, [r7, #16]
 8006534:	f7fa f808 	bl	8000548 <__aeabi_f2d>
 8006538:	4604      	mov	r4, r0
 800653a:	460d      	mov	r5, r1
 800653c:	4b92      	ldr	r3, [pc, #584]	@ (8006788 <_Z13ChangeSettingv+0x6c0>)
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	f2a3 630e 	subw	r3, r3, #1550	@ 0x60e
 8006544:	ee07 3a90 	vmov	s15, r3
 8006548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800654c:	ee17 0a90 	vmov	r0, s15
 8006550:	f7f9 fffa 	bl	8000548 <__aeabi_f2d>
 8006554:	a388      	add	r3, pc, #544	@ (adr r3, 8006778 <_Z13ChangeSettingv+0x6b0>)
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	f7fa f84d 	bl	80005f8 <__aeabi_dmul>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	4620      	mov	r0, r4
 8006564:	4629      	mov	r1, r5
 8006566:	f7f9 fe91 	bl	800028c <__adddf3>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	4610      	mov	r0, r2
 8006570:	4619      	mov	r1, r3
 8006572:	f7fa fb39 	bl	8000be8 <__aeabi_d2f>
 8006576:	4603      	mov	r3, r0
 8006578:	613b      	str	r3, [r7, #16]
			if (yaw < 1450)adjustableYawValueDgain -= (float)(1450 - yaw) * 0.000001;
 800657a:	4b83      	ldr	r3, [pc, #524]	@ (8006788 <_Z13ChangeSettingv+0x6c0>)
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 8006582:	4293      	cmp	r3, r2
 8006584:	d824      	bhi.n	80065d0 <_Z13ChangeSettingv+0x508>
 8006586:	6938      	ldr	r0, [r7, #16]
 8006588:	f7f9 ffde 	bl	8000548 <__aeabi_f2d>
 800658c:	4604      	mov	r4, r0
 800658e:	460d      	mov	r5, r1
 8006590:	4b7d      	ldr	r3, [pc, #500]	@ (8006788 <_Z13ChangeSettingv+0x6c0>)
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	f5c3 63b5 	rsb	r3, r3, #1448	@ 0x5a8
 8006598:	3302      	adds	r3, #2
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065a2:	ee17 0a90 	vmov	r0, s15
 80065a6:	f7f9 ffcf 	bl	8000548 <__aeabi_f2d>
 80065aa:	a373      	add	r3, pc, #460	@ (adr r3, 8006778 <_Z13ChangeSettingv+0x6b0>)
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f7fa f822 	bl	80005f8 <__aeabi_dmul>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4620      	mov	r0, r4
 80065ba:	4629      	mov	r1, r5
 80065bc:	f7f9 fe64 	bl	8000288 <__aeabi_dsub>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4610      	mov	r0, r2
 80065c6:	4619      	mov	r1, r3
 80065c8:	f7fa fb0e 	bl	8000be8 <__aeabi_d2f>
 80065cc:	4603      	mov	r3, r0
 80065ce:	613b      	str	r3, [r7, #16]
			if (adjustableYawValueDgain < 0)adjustableYawValueDgain = 0;
 80065d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80065d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065dc:	d502      	bpl.n	80065e4 <_Z13ChangeSettingv+0x51c>
 80065de:	f04f 0300 	mov.w	r3, #0
 80065e2:	613b      	str	r3, [r7, #16]
			pidForHorizontal.yaw.Dgain = adjustableYawValueDgain;
 80065e4:	4a66      	ldr	r2, [pc, #408]	@ (8006780 <_Z13ChangeSettingv+0x6b8>)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	66d3      	str	r3, [r2, #108]	@ 0x6c

			////////////////////////////////////////////////////

			if (roll > 1550) adjustableAltitudeValuePgain += (float)(roll - 1550) * 0.000001;
 80065ea:	4b68      	ldr	r3, [pc, #416]	@ (800678c <_Z13ChangeSettingv+0x6c4>)
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	f240 620e 	movw	r2, #1550	@ 0x60e
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d923      	bls.n	800663e <_Z13ChangeSettingv+0x576>
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f7f9 ffa6 	bl	8000548 <__aeabi_f2d>
 80065fc:	4604      	mov	r4, r0
 80065fe:	460d      	mov	r5, r1
 8006600:	4b62      	ldr	r3, [pc, #392]	@ (800678c <_Z13ChangeSettingv+0x6c4>)
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	f2a3 630e 	subw	r3, r3, #1550	@ 0x60e
 8006608:	ee07 3a90 	vmov	s15, r3
 800660c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006610:	ee17 0a90 	vmov	r0, s15
 8006614:	f7f9 ff98 	bl	8000548 <__aeabi_f2d>
 8006618:	a357      	add	r3, pc, #348	@ (adr r3, 8006778 <_Z13ChangeSettingv+0x6b0>)
 800661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661e:	f7f9 ffeb 	bl	80005f8 <__aeabi_dmul>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	4620      	mov	r0, r4
 8006628:	4629      	mov	r1, r5
 800662a:	f7f9 fe2f 	bl	800028c <__adddf3>
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	4610      	mov	r0, r2
 8006634:	4619      	mov	r1, r3
 8006636:	f7fa fad7 	bl	8000be8 <__aeabi_d2f>
 800663a:	4603      	mov	r3, r0
 800663c:	60fb      	str	r3, [r7, #12]
			if (roll < 1450) adjustableAltitudeValuePgain -= (float)(1450 - roll) * 0.000001;
 800663e:	4b53      	ldr	r3, [pc, #332]	@ (800678c <_Z13ChangeSettingv+0x6c4>)
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 8006646:	4293      	cmp	r3, r2
 8006648:	d824      	bhi.n	8006694 <_Z13ChangeSettingv+0x5cc>
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f7f9 ff7c 	bl	8000548 <__aeabi_f2d>
 8006650:	4604      	mov	r4, r0
 8006652:	460d      	mov	r5, r1
 8006654:	4b4d      	ldr	r3, [pc, #308]	@ (800678c <_Z13ChangeSettingv+0x6c4>)
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	f5c3 63b5 	rsb	r3, r3, #1448	@ 0x5a8
 800665c:	3302      	adds	r3, #2
 800665e:	ee07 3a90 	vmov	s15, r3
 8006662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006666:	ee17 0a90 	vmov	r0, s15
 800666a:	f7f9 ff6d 	bl	8000548 <__aeabi_f2d>
 800666e:	a342      	add	r3, pc, #264	@ (adr r3, 8006778 <_Z13ChangeSettingv+0x6b0>)
 8006670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006674:	f7f9 ffc0 	bl	80005f8 <__aeabi_dmul>
 8006678:	4602      	mov	r2, r0
 800667a:	460b      	mov	r3, r1
 800667c:	4620      	mov	r0, r4
 800667e:	4629      	mov	r1, r5
 8006680:	f7f9 fe02 	bl	8000288 <__aeabi_dsub>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4610      	mov	r0, r2
 800668a:	4619      	mov	r1, r3
 800668c:	f7fa faac 	bl	8000be8 <__aeabi_d2f>
 8006690:	4603      	mov	r3, r0
 8006692:	60fb      	str	r3, [r7, #12]
			if (adjustableAltitudeValuePgain < 0)adjustableAltitudeValuePgain = 0;
 8006694:	edd7 7a03 	vldr	s15, [r7, #12]
 8006698:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800669c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066a0:	d502      	bpl.n	80066a8 <_Z13ChangeSettingv+0x5e0>
 80066a2:	f04f 0300 	mov.w	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]
			ms5611.pid_Pgain_Altitude = adjustableAltitudeValuePgain;
 80066a8:	4a39      	ldr	r2, [pc, #228]	@ (8006790 <_Z13ChangeSettingv+0x6c8>)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f8c2 31e4 	str.w	r3, [r2, #484]	@ 0x1e4

			if (pitch > 1550)adjustableAltitudeValueIgain += (float)(pitch - 1550) * 0.000001;
 80066b0:	4b34      	ldr	r3, [pc, #208]	@ (8006784 <_Z13ChangeSettingv+0x6bc>)
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	f240 620e 	movw	r2, #1550	@ 0x60e
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d923      	bls.n	8006704 <_Z13ChangeSettingv+0x63c>
 80066bc:	68b8      	ldr	r0, [r7, #8]
 80066be:	f7f9 ff43 	bl	8000548 <__aeabi_f2d>
 80066c2:	4604      	mov	r4, r0
 80066c4:	460d      	mov	r5, r1
 80066c6:	4b2f      	ldr	r3, [pc, #188]	@ (8006784 <_Z13ChangeSettingv+0x6bc>)
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	f2a3 630e 	subw	r3, r3, #1550	@ 0x60e
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066d6:	ee17 0a90 	vmov	r0, s15
 80066da:	f7f9 ff35 	bl	8000548 <__aeabi_f2d>
 80066de:	a326      	add	r3, pc, #152	@ (adr r3, 8006778 <_Z13ChangeSettingv+0x6b0>)
 80066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e4:	f7f9 ff88 	bl	80005f8 <__aeabi_dmul>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4620      	mov	r0, r4
 80066ee:	4629      	mov	r1, r5
 80066f0:	f7f9 fdcc 	bl	800028c <__adddf3>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4610      	mov	r0, r2
 80066fa:	4619      	mov	r1, r3
 80066fc:	f7fa fa74 	bl	8000be8 <__aeabi_d2f>
 8006700:	4603      	mov	r3, r0
 8006702:	60bb      	str	r3, [r7, #8]
			if (pitch < 1450)adjustableAltitudeValueIgain -= (float)(1450 - pitch) * 0.000001;
 8006704:	4b1f      	ldr	r3, [pc, #124]	@ (8006784 <_Z13ChangeSettingv+0x6bc>)
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 800670c:	4293      	cmp	r3, r2
 800670e:	d824      	bhi.n	800675a <_Z13ChangeSettingv+0x692>
 8006710:	68b8      	ldr	r0, [r7, #8]
 8006712:	f7f9 ff19 	bl	8000548 <__aeabi_f2d>
 8006716:	4604      	mov	r4, r0
 8006718:	460d      	mov	r5, r1
 800671a:	4b1a      	ldr	r3, [pc, #104]	@ (8006784 <_Z13ChangeSettingv+0x6bc>)
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	f5c3 63b5 	rsb	r3, r3, #1448	@ 0x5a8
 8006722:	3302      	adds	r3, #2
 8006724:	ee07 3a90 	vmov	s15, r3
 8006728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800672c:	ee17 0a90 	vmov	r0, s15
 8006730:	f7f9 ff0a 	bl	8000548 <__aeabi_f2d>
 8006734:	a310      	add	r3, pc, #64	@ (adr r3, 8006778 <_Z13ChangeSettingv+0x6b0>)
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	f7f9 ff5d 	bl	80005f8 <__aeabi_dmul>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	4620      	mov	r0, r4
 8006744:	4629      	mov	r1, r5
 8006746:	f7f9 fd9f 	bl	8000288 <__aeabi_dsub>
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	4610      	mov	r0, r2
 8006750:	4619      	mov	r1, r3
 8006752:	f7fa fa49 	bl	8000be8 <__aeabi_d2f>
 8006756:	4603      	mov	r3, r0
 8006758:	60bb      	str	r3, [r7, #8]
			if (adjustableAltitudeValueIgain < 0)adjustableAltitudeValueIgain = 0;
 800675a:	edd7 7a02 	vldr	s15, [r7, #8]
 800675e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006766:	d502      	bpl.n	800676e <_Z13ChangeSettingv+0x6a6>
 8006768:	f04f 0300 	mov.w	r3, #0
 800676c:	60bb      	str	r3, [r7, #8]
			ms5611.pid_Igain_Altitude = adjustableAltitudeValueIgain;
 800676e:	4a08      	ldr	r2, [pc, #32]	@ (8006790 <_Z13ChangeSettingv+0x6c8>)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f8c2 31e8 	str.w	r3, [r2, #488]	@ 0x1e8
 8006776:	e00d      	b.n	8006794 <_Z13ChangeSettingv+0x6cc>
 8006778:	a0b5ed8d 	.word	0xa0b5ed8d
 800677c:	3eb0c6f7 	.word	0x3eb0c6f7
 8006780:	20000c1c 	.word	0x20000c1c
 8006784:	2000066a 	.word	0x2000066a
 8006788:	2000066c 	.word	0x2000066c
 800678c:	20000668 	.word	0x20000668
 8006790:	20000800 	.word	0x20000800

			if (yaw > 1550)adjustableAltitudeValueDgain += (float)(yaw - 1550) * 0.000001;
 8006794:	4b3a      	ldr	r3, [pc, #232]	@ (8006880 <_Z13ChangeSettingv+0x7b8>)
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	f240 620e 	movw	r2, #1550	@ 0x60e
 800679c:	4293      	cmp	r3, r2
 800679e:	d923      	bls.n	80067e8 <_Z13ChangeSettingv+0x720>
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7f9 fed1 	bl	8000548 <__aeabi_f2d>
 80067a6:	4604      	mov	r4, r0
 80067a8:	460d      	mov	r5, r1
 80067aa:	4b35      	ldr	r3, [pc, #212]	@ (8006880 <_Z13ChangeSettingv+0x7b8>)
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	f2a3 630e 	subw	r3, r3, #1550	@ 0x60e
 80067b2:	ee07 3a90 	vmov	s15, r3
 80067b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067ba:	ee17 0a90 	vmov	r0, s15
 80067be:	f7f9 fec3 	bl	8000548 <__aeabi_f2d>
 80067c2:	a32d      	add	r3, pc, #180	@ (adr r3, 8006878 <_Z13ChangeSettingv+0x7b0>)
 80067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c8:	f7f9 ff16 	bl	80005f8 <__aeabi_dmul>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4620      	mov	r0, r4
 80067d2:	4629      	mov	r1, r5
 80067d4:	f7f9 fd5a 	bl	800028c <__adddf3>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4610      	mov	r0, r2
 80067de:	4619      	mov	r1, r3
 80067e0:	f7fa fa02 	bl	8000be8 <__aeabi_d2f>
 80067e4:	4603      	mov	r3, r0
 80067e6:	607b      	str	r3, [r7, #4]
			if (yaw < 1450)adjustableAltitudeValueDgain -= (float)(1450 - yaw) * 0.000001;
 80067e8:	4b25      	ldr	r3, [pc, #148]	@ (8006880 <_Z13ChangeSettingv+0x7b8>)
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d824      	bhi.n	800683e <_Z13ChangeSettingv+0x776>
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7f9 fea7 	bl	8000548 <__aeabi_f2d>
 80067fa:	4604      	mov	r4, r0
 80067fc:	460d      	mov	r5, r1
 80067fe:	4b20      	ldr	r3, [pc, #128]	@ (8006880 <_Z13ChangeSettingv+0x7b8>)
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	f5c3 63b5 	rsb	r3, r3, #1448	@ 0x5a8
 8006806:	3302      	adds	r3, #2
 8006808:	ee07 3a90 	vmov	s15, r3
 800680c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006810:	ee17 0a90 	vmov	r0, s15
 8006814:	f7f9 fe98 	bl	8000548 <__aeabi_f2d>
 8006818:	a317      	add	r3, pc, #92	@ (adr r3, 8006878 <_Z13ChangeSettingv+0x7b0>)
 800681a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681e:	f7f9 feeb 	bl	80005f8 <__aeabi_dmul>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	4620      	mov	r0, r4
 8006828:	4629      	mov	r1, r5
 800682a:	f7f9 fd2d 	bl	8000288 <__aeabi_dsub>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	4610      	mov	r0, r2
 8006834:	4619      	mov	r1, r3
 8006836:	f7fa f9d7 	bl	8000be8 <__aeabi_d2f>
 800683a:	4603      	mov	r3, r0
 800683c:	607b      	str	r3, [r7, #4]
			if (adjustableAltitudeValueDgain < 0)adjustableAltitudeValueDgain = 0;
 800683e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006842:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800684a:	d502      	bpl.n	8006852 <_Z13ChangeSettingv+0x78a>
 800684c:	f04f 0300 	mov.w	r3, #0
 8006850:	607b      	str	r3, [r7, #4]
			ms5611.pid_Dgain_Altitude = adjustableAltitudeValueDgain;
 8006852:	4a0c      	ldr	r2, [pc, #48]	@ (8006884 <_Z13ChangeSettingv+0x7bc>)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8c2 31ec 	str.w	r3, [r2, #492]	@ 0x1ec
	for(int i=1;i<=5;i++)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	3301      	adds	r3, #1
 800685e:	603b      	str	r3, [r7, #0]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b05      	cmp	r3, #5
 8006864:	f77f ac58 	ble.w	8006118 <_Z13ChangeSettingv+0x50>

	}
}
 8006868:	bf00      	nop
 800686a:	bf00      	nop
 800686c:	3728      	adds	r7, #40	@ 0x28
 800686e:	46bd      	mov	sp, r7
 8006870:	bdb0      	pop	{r4, r5, r7, pc}
 8006872:	bf00      	nop
 8006874:	f3af 8000 	nop.w
 8006878:	a0b5ed8d 	.word	0xa0b5ed8d
 800687c:	3eb0c6f7 	.word	0x3eb0c6f7
 8006880:	2000066c 	.word	0x2000066c
 8006884:	20000800 	.word	0x20000800

08006888 <_Z16StartStopTakeOffv>:

void StartStopTakeOff(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
	//TODO Bước 1 là nhấn nút BTN5 để bật cơ headingLock;
	// Bước 2 nhấn nút BTN4 để bật stateMachine = 1 ;
	// Bước 3 nhấn nút BTN3
	if ((BTN4 == 1) && (FirstBTN4==0))
 800688c:	4b4b      	ldr	r3, [pc, #300]	@ (80069bc <_Z16StartStopTakeOffv+0x134>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d109      	bne.n	80068a8 <_Z16StartStopTakeOffv+0x20>
 8006894:	4b4a      	ldr	r3, [pc, #296]	@ (80069c0 <_Z16StartStopTakeOffv+0x138>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d105      	bne.n	80068a8 <_Z16StartStopTakeOffv+0x20>
	{
		FirstBTN4=1;
 800689c:	4b48      	ldr	r3, [pc, #288]	@ (80069c0 <_Z16StartStopTakeOffv+0x138>)
 800689e:	2201      	movs	r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
		stateMachine = 1;
 80068a2:	4b48      	ldr	r3, [pc, #288]	@ (80069c4 <_Z16StartStopTakeOffv+0x13c>)
 80068a4:	2201      	movs	r2, #1
 80068a6:	701a      	strb	r2, [r3, #0]
	}

	// Bước 3 nhấn nút BTN3
	if ((stateMachine == 1) && (BTN3 == 1) && (FirstBTN3==0) )
 80068a8:	4b46      	ldr	r3, [pc, #280]	@ (80069c4 <_Z16StartStopTakeOffv+0x13c>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d179      	bne.n	80069a4 <_Z16StartStopTakeOffv+0x11c>
 80068b0:	4b45      	ldr	r3, [pc, #276]	@ (80069c8 <_Z16StartStopTakeOffv+0x140>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d175      	bne.n	80069a4 <_Z16StartStopTakeOffv+0x11c>
 80068b8:	4b44      	ldr	r3, [pc, #272]	@ (80069cc <_Z16StartStopTakeOffv+0x144>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d171      	bne.n	80069a4 <_Z16StartStopTakeOffv+0x11c>
	{
		FirstBTN3=1;
 80068c0:	4b42      	ldr	r3, [pc, #264]	@ (80069cc <_Z16StartStopTakeOffv+0x144>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
		// Thiết lập throttle value về giá trị idle motor speed
		Throttle = idleSpeedMotor;
 80068c6:	4b42      	ldr	r3, [pc, #264]	@ (80069d0 <_Z16StartStopTakeOffv+0x148>)
 80068c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80068cc:	4b41      	ldr	r3, [pc, #260]	@ (80069d4 <_Z16StartStopTakeOffv+0x14c>)
 80068ce:	801a      	strh	r2, [r3, #0]

		// Giá trị góc Roll và Pitch khởi điểm sẽ được tính toán chỉ dựa trên accel
		gy86.anglePitch = gy86.anglePitchAccel;
 80068d0:	4b41      	ldr	r3, [pc, #260]	@ (80069d8 <_Z16StartStopTakeOffv+0x150>)
 80068d2:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80068d6:	4a40      	ldr	r2, [pc, #256]	@ (80069d8 <_Z16StartStopTakeOffv+0x150>)
 80068d8:	6613      	str	r3, [r2, #96]	@ 0x60
		gy86.angleRoll = gy86.angleRollAccel;
 80068da:	4b3f      	ldr	r3, [pc, #252]	@ (80069d8 <_Z16StartStopTakeOffv+0x150>)
 80068dc:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80068e0:	4a3d      	ldr	r2, [pc, #244]	@ (80069d8 <_Z16StartStopTakeOffv+0x150>)
 80068e2:	65d3      	str	r3, [r2, #92]	@ 0x5c

		// Lấy giá trị áp suất tại mặt đất, để tham chiếu cho sau này
		groundPressure = ms5611.GetActualPressure();
 80068e4:	483d      	ldr	r0, [pc, #244]	@ (80069dc <_Z16StartStopTakeOffv+0x154>)
 80068e6:	f7fe ff53 	bl	8005790 <_ZN9Barometer17GetActualPressureEv>
 80068ea:	eef0 7a40 	vmov.f32	s15, s0
 80068ee:	4b3c      	ldr	r3, [pc, #240]	@ (80069e0 <_Z16StartStopTakeOffv+0x158>)
 80068f0:	edc3 7a00 	vstr	s15, [r3]

		gy86.courseLockHeading = gy86.angleYaw;
 80068f4:	4b38      	ldr	r3, [pc, #224]	@ (80069d8 <_Z16StartStopTakeOffv+0x150>)
 80068f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068f8:	4a37      	ldr	r2, [pc, #220]	@ (80069d8 <_Z16StartStopTakeOffv+0x150>)
 80068fa:	6053      	str	r3, [r2, #4]

		gy86.accelTotalVectorAtStart = gy86.accelTotalVector;
 80068fc:	4b36      	ldr	r3, [pc, #216]	@ (80069d8 <_Z16StartStopTakeOffv+0x150>)
 80068fe:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8006902:	4a35      	ldr	r2, [pc, #212]	@ (80069d8 <_Z16StartStopTakeOffv+0x150>)
 8006904:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c

		stateMachine = 2;
 8006908:	4b2e      	ldr	r3, [pc, #184]	@ (80069c4 <_Z16StartStopTakeOffv+0x13c>)
 800690a:	2202      	movs	r2, #2
 800690c:	701a      	strb	r2, [r3, #0]
		gy86.accelAltIntegrated = 0;
 800690e:	4b32      	ldr	r3, [pc, #200]	@ (80069d8 <_Z16StartStopTakeOffv+0x150>)
 8006910:	2200      	movs	r2, #0
 8006912:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
		if ((manualTakeoffThrottle > 1400) && (manualTakeoffThrottle < 1600))  // Tốc độ cất cánh 1500
 8006916:	4b33      	ldr	r3, [pc, #204]	@ (80069e4 <_Z16StartStopTakeOffv+0x15c>)
 8006918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800691c:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8006920:	dd32      	ble.n	8006988 <_Z16StartStopTakeOffv+0x100>
 8006922:	4b30      	ldr	r3, [pc, #192]	@ (80069e4 <_Z16StartStopTakeOffv+0x15c>)
 8006924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006928:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800692c:	da2c      	bge.n	8006988 <_Z16StartStopTakeOffv+0x100>
		{
			takeoffThrottle = 300;
 800692e:	4b2e      	ldr	r3, [pc, #184]	@ (80069e8 <_Z16StartStopTakeOffv+0x160>)
 8006930:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006934:	801a      	strh	r2, [r3, #0]
			// Thiết lập cờ takeoffDetected để chỉ ra rằng quadcopter đang bay
			takeoffDetected = 1;
 8006936:	4b2d      	ldr	r3, [pc, #180]	@ (80069ec <_Z16StartStopTakeOffv+0x164>)
 8006938:	2201      	movs	r2, #1
 800693a:	701a      	strb	r2, [r3, #0]
			//Reset PID để việc cất cánh được smooth hơn
			pidForHorizontal.roll.ImemValue = 0;
 800693c:	4b2c      	ldr	r3, [pc, #176]	@ (80069f0 <_Z16StartStopTakeOffv+0x168>)
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	61da      	str	r2, [r3, #28]
			pidForHorizontal.roll.previousError = 0;
 8006944:	4b2a      	ldr	r3, [pc, #168]	@ (80069f0 <_Z16StartStopTakeOffv+0x168>)
 8006946:	f04f 0200 	mov.w	r2, #0
 800694a:	625a      	str	r2, [r3, #36]	@ 0x24
			pidForHorizontal.roll.outputValue = 0;
 800694c:	4b28      	ldr	r3, [pc, #160]	@ (80069f0 <_Z16StartStopTakeOffv+0x168>)
 800694e:	f04f 0200 	mov.w	r2, #0
 8006952:	611a      	str	r2, [r3, #16]
			pidForHorizontal.pitch.ImemValue = 0;
 8006954:	4b26      	ldr	r3, [pc, #152]	@ (80069f0 <_Z16StartStopTakeOffv+0x168>)
 8006956:	f04f 0200 	mov.w	r2, #0
 800695a:	64da      	str	r2, [r3, #76]	@ 0x4c
			pidForHorizontal.pitch.previousError = 0;
 800695c:	4b24      	ldr	r3, [pc, #144]	@ (80069f0 <_Z16StartStopTakeOffv+0x168>)
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	655a      	str	r2, [r3, #84]	@ 0x54
			pidForHorizontal.pitch.outputValue = 0;
 8006964:	4b22      	ldr	r3, [pc, #136]	@ (80069f0 <_Z16StartStopTakeOffv+0x168>)
 8006966:	f04f 0200 	mov.w	r2, #0
 800696a:	641a      	str	r2, [r3, #64]	@ 0x40
			pidForHorizontal.yaw.ImemValue = 0;
 800696c:	4b20      	ldr	r3, [pc, #128]	@ (80069f0 <_Z16StartStopTakeOffv+0x168>)
 800696e:	f04f 0200 	mov.w	r2, #0
 8006972:	67da      	str	r2, [r3, #124]	@ 0x7c
			pidForHorizontal.yaw.previousError = 0;
 8006974:	4b1e      	ldr	r3, [pc, #120]	@ (80069f0 <_Z16StartStopTakeOffv+0x168>)
 8006976:	f04f 0200 	mov.w	r2, #0
 800697a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			pidForHorizontal.yaw.outputValue = 0;
 800697e:	4b1c      	ldr	r3, [pc, #112]	@ (80069f0 <_Z16StartStopTakeOffv+0x168>)
 8006980:	f04f 0200 	mov.w	r2, #0
 8006984:	671a      	str	r2, [r3, #112]	@ 0x70
 8006986:	e00d      	b.n	80069a4 <_Z16StartStopTakeOffv+0x11c>
		}
		else if (manualTakeoffThrottle)
 8006988:	4b16      	ldr	r3, [pc, #88]	@ (80069e4 <_Z16StartStopTakeOffv+0x15c>)
 800698a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d008      	beq.n	80069a4 <_Z16StartStopTakeOffv+0x11c>
		{                                            //Nếu giá trị không hợp lệ
			error = 5;                                //Error = 5.
 8006992:	4b18      	ldr	r3, [pc, #96]	@ (80069f4 <_Z16StartStopTakeOffv+0x16c>)
 8006994:	2205      	movs	r2, #5
 8006996:	701a      	strb	r2, [r3, #0]
			takeoffThrottle = 0;                      //No hover throttle compensation.
 8006998:	4b13      	ldr	r3, [pc, #76]	@ (80069e8 <_Z16StartStopTakeOffv+0x160>)
 800699a:	2200      	movs	r2, #0
 800699c:	801a      	strh	r2, [r3, #0]
			stateMachine = 0;                          //Set the start variable to 0 to stop the motors.
 800699e:	4b09      	ldr	r3, [pc, #36]	@ (80069c4 <_Z16StartStopTakeOffv+0x13c>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	701a      	strb	r2, [r3, #0]
		}
	}

	//Stopping the motors:Bấm nút BTN2.
	if ( BTN2==1)
 80069a4:	4b14      	ldr	r3, [pc, #80]	@ (80069f8 <_Z16StartStopTakeOffv+0x170>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d105      	bne.n	80069b8 <_Z16StartStopTakeOffv+0x130>
	{
		stateMachine = 0;                   //Đặt biến khởi động thành 0 để tắt động cơ.
 80069ac:	4b05      	ldr	r3, [pc, #20]	@ (80069c4 <_Z16StartStopTakeOffv+0x13c>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	701a      	strb	r2, [r3, #0]
		takeoffDetected = 0;                  //Đặt lại phát hiện tự động cất cánh
 80069b2:	4b0e      	ldr	r3, [pc, #56]	@ (80069ec <_Z16StartStopTakeOffv+0x164>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	701a      	strb	r2, [r3, #0]
	}


}
 80069b8:	bf00      	nop
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	20000678 	.word	0x20000678
 80069c0:	20000684 	.word	0x20000684
 80069c4:	20000671 	.word	0x20000671
 80069c8:	2000067c 	.word	0x2000067c
 80069cc:	20000688 	.word	0x20000688
 80069d0:	20000008 	.word	0x20000008
 80069d4:	20000690 	.word	0x20000690
 80069d8:	200006a0 	.word	0x200006a0
 80069dc:	20000800 	.word	0x20000800
 80069e0:	20000694 	.word	0x20000694
 80069e4:	2000000a 	.word	0x2000000a
 80069e8:	20000698 	.word	0x20000698
 80069ec:	20000670 	.word	0x20000670
 80069f0:	20000c1c 	.word	0x20000c1c
 80069f4:	20000672 	.word	0x20000672
 80069f8:	20000680 	.word	0x20000680

080069fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	ed2d 8b02 	vpush	{d8}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006a06:	f001 f9f9 	bl	8007dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006a0a:	f000 fba3 	bl	8007154 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006a0e:	f000 fe03 	bl	8007618 <_ZL12MX_GPIO_Initv>
  MX_TIM4_Init();
 8006a12:	f000 fd13 	bl	800743c <_ZL12MX_TIM4_Initv>
  MX_USART1_UART_Init();
 8006a16:	f000 fdd1 	bl	80075bc <_ZL19MX_USART1_UART_Initv>
  MX_I2C1_Init();
 8006a1a:	f000 fc6b 	bl	80072f4 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 8006a1e:	f000 fcd1 	bl	80073c4 <_ZL12MX_SPI1_Initv>
  MX_ADC1_Init();
 8006a22:	f000 fc0b 	bl	800723c <_ZL12MX_ADC1_Initv>
  MX_I2C2_Init();
 8006a26:	f000 fc99 	bl	800735c <_ZL12MX_I2C2_Initv>
  /* USER CODE BEGIN 2 */

  gy86.declination = -1.5;
 8006a2a:	4b6f      	ldr	r3, [pc, #444]	@ (8006be8 <main+0x1ec>)
 8006a2c:	4a6f      	ldr	r2, [pc, #444]	@ (8006bec <main+0x1f0>)
 8006a2e:	615a      	str	r2, [r3, #20]
  DWT_Delay_Init();
 8006a30:	f7ff f8e8 	bl	8005c04 <DWT_Delay_Init>
  BMP180_Start();
 8006a34:	f7fa fe76 	bl	8001724 <BMP180_Start>

  // NRF24L01
  NRF24_Init();
 8006a38:	f7fd fe06 	bl	8004648 <NRF24_Init>
   NRF24_RxMode(RxAddress, 10);
 8006a3c:	210a      	movs	r1, #10
 8006a3e:	486c      	ldr	r0, [pc, #432]	@ (8006bf0 <main+0x1f4>)
 8006a40:	f7fd fe29 	bl	8004696 <NRF24_RxMode>
   HAL_Delay(50);  // �?ợi 50ms de on dinh con NRF
 8006a44:	2032      	movs	r0, #50	@ 0x32
 8006a46:	f001 fa4b 	bl	8007ee0 <HAL_Delay>

   ms5611.SetKgainPID(1.4, 0.2, 0.75, 400);
 8006a4a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8006a4e:	eeb6 1a08 	vmov.f32	s2, #104	@ 0x3f400000  0.750
 8006a52:	eddf 0a68 	vldr	s1, [pc, #416]	@ 8006bf4 <main+0x1f8>
 8006a56:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 8006bf8 <main+0x1fc>
 8006a5a:	4868      	ldr	r0, [pc, #416]	@ (8006bfc <main+0x200>)
 8006a5c:	f7ff f825 	bl	8005aaa <_ZN9Barometer11SetKgainPIDEfffs>
   gpsM8N.setKgainConstantRoll(2.7, 6.5);
 8006a60:	eef1 0a0a 	vmov.f32	s1, #26	@ 0x40d00000  6.5
 8006a64:	ed9f 0a66 	vldr	s0, [pc, #408]	@ 8006c00 <main+0x204>
 8006a68:	4866      	ldr	r0, [pc, #408]	@ (8006c04 <main+0x208>)
 8006a6a:	f7fa fe87 	bl	800177c <_ZN3GPS20setKgainConstantRollEff>
//   pidForHorizontal.setKgainConstantRoll(1.4, 0.04 , 25, 400);
//   pidForHorizontal.setKgainConstantPitch(1.4, 0.04, 25, 400);
//   pidForHorizontal.setKgainConstantYaw(1.4, 0.02 , 0, 400);
   pidForHorizontal.setKgainConstantRoll(1.4, 0.052 , 8.08, 400);
 8006a6e:	eddf 1a66 	vldr	s3, [pc, #408]	@ 8006c08 <main+0x20c>
 8006a72:	ed9f 1a66 	vldr	s2, [pc, #408]	@ 8006c0c <main+0x210>
 8006a76:	eddf 0a66 	vldr	s1, [pc, #408]	@ 8006c10 <main+0x214>
 8006a7a:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8006bf8 <main+0x1fc>
 8006a7e:	4865      	ldr	r0, [pc, #404]	@ (8006c14 <main+0x218>)
 8006a80:	f7fd fec2 	bl	8004808 <_ZN14PID_Horizontal20setKgainConstantRollEffff>
   pidForHorizontal.setKgainConstantPitch(1.4, 0.052, 8.08, 400);
 8006a84:	eddf 1a60 	vldr	s3, [pc, #384]	@ 8006c08 <main+0x20c>
 8006a88:	ed9f 1a60 	vldr	s2, [pc, #384]	@ 8006c0c <main+0x210>
 8006a8c:	eddf 0a60 	vldr	s1, [pc, #384]	@ 8006c10 <main+0x214>
 8006a90:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8006bf8 <main+0x1fc>
 8006a94:	485f      	ldr	r0, [pc, #380]	@ (8006c14 <main+0x218>)
 8006a96:	f7fd fed5 	bl	8004844 <_ZN14PID_Horizontal21setKgainConstantPitchEffff>
   pidForHorizontal.setKgainConstantYaw(1, 0.02 , 0, 400);
 8006a9a:	eddf 1a5b 	vldr	s3, [pc, #364]	@ 8006c08 <main+0x20c>
 8006a9e:	ed9f 1a5e 	vldr	s2, [pc, #376]	@ 8006c18 <main+0x21c>
 8006aa2:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 8006c1c <main+0x220>
 8006aa6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006aaa:	485a      	ldr	r0, [pc, #360]	@ (8006c14 <main+0x218>)
 8006aac:	f7fd fee8 	bl	8004880 <_ZN14PID_Horizontal19setKgainConstantYawEffff>

   // Khởi tạo PWM cho việc đi�?u khiển ESC
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	485b      	ldr	r0, [pc, #364]	@ (8006c20 <main+0x224>)
 8006ab4:	f005 fa82 	bl	800bfbc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8006ab8:	2104      	movs	r1, #4
 8006aba:	4859      	ldr	r0, [pc, #356]	@ (8006c20 <main+0x224>)
 8006abc:	f005 fa7e 	bl	800bfbc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8006ac0:	2108      	movs	r1, #8
 8006ac2:	4857      	ldr	r0, [pc, #348]	@ (8006c20 <main+0x224>)
 8006ac4:	f005 fa7a 	bl	800bfbc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8006ac8:	210c      	movs	r1, #12
 8006aca:	4855      	ldr	r0, [pc, #340]	@ (8006c20 <main+0x224>)
 8006acc:	f005 fa76 	bl	800bfbc <HAL_TIM_PWM_Start>

	CHANGE_SPEED_MOTOR_FRONT_RIGHT_CCW(1000);  // 1580
 8006ad0:	4b53      	ldr	r3, [pc, #332]	@ (8006c20 <main+0x224>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006ad8:	635a      	str	r2, [r3, #52]	@ 0x34
	CHANGE_SPEED_MOTOR_REAR_RIGHT_CW(1000);		// 1580
 8006ada:	4b51      	ldr	r3, [pc, #324]	@ (8006c20 <main+0x224>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006ae2:	639a      	str	r2, [r3, #56]	@ 0x38
	CHANGE_SPEED_MOTOR_REAR_LEFT_CCW(1000);		// 1580
 8006ae4:	4b4e      	ldr	r3, [pc, #312]	@ (8006c20 <main+0x224>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006aec:	63da      	str	r2, [r3, #60]	@ 0x3c
	CHANGE_SPEED_MOTOR_FRONT_LEFT_CW(1000);		// 1580
 8006aee:	4b4c      	ldr	r3, [pc, #304]	@ (8006c20 <main+0x224>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006af6:	641a      	str	r2, [r3, #64]	@ 0x40

	// Kiểm tra các cảm biến
	if (((ms5611.IsReadyToInterface() != BAROMETER_Result_Ok))||(gy86.IsReadyToInterfaceMPU6050() != IMU9DOF_Result_Ok) ||(gy86.IsReadyToInterfaceHMC5883L() != IMU9DOF_Result_Ok)) //(ms5611.IsReadyToInterface() != BAROMETER_Result_Ok)
 8006af8:	4840      	ldr	r0, [pc, #256]	@ (8006bfc <main+0x200>)
 8006afa:	f7fe fa3f 	bl	8004f7c <_ZN9Barometer18IsReadyToInterfaceEv>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10b      	bne.n	8006b1c <main+0x120>
 8006b04:	4838      	ldr	r0, [pc, #224]	@ (8006be8 <main+0x1ec>)
 8006b06:	f7fc f847 	bl	8002b98 <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d105      	bne.n	8006b1c <main+0x120>
 8006b10:	4835      	ldr	r0, [pc, #212]	@ (8006be8 <main+0x1ec>)
 8006b12:	f7fc f895 	bl	8002c40 <_ZN7IMU9DOF26IsReadyToInterfaceHMC5883LEv>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <main+0x124>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e000      	b.n	8006b22 <main+0x126>
 8006b20:	2300      	movs	r3, #0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d006      	beq.n	8006b34 <main+0x138>
	{
		HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin,GPIO_PIN_SET);
 8006b26:	2201      	movs	r2, #1
 8006b28:	2104      	movs	r1, #4
 8006b2a:	483e      	ldr	r0, [pc, #248]	@ (8006c24 <main+0x228>)
 8006b2c:	f002 f96e 	bl	8008e0c <HAL_GPIO_WritePin>
		for(;;)
 8006b30:	bf00      	nop
 8006b32:	e7fd      	b.n	8006b30 <main+0x134>
		{
			// Reset Lại Drone ( Cảm biến bị lỗi )
		}
	}
//	 Init các cảm biến
	if ( (gy86.Init() != HAL_OK) || (ms5611.Init() != HAL_OK) || (gpsM8N.Init() != HAL_OK) )   //  || (gpsM8N.Init() != HAL_OK)
 8006b34:	482c      	ldr	r0, [pc, #176]	@ (8006be8 <main+0x1ec>)
 8006b36:	f7fc fb97 	bl	8003268 <_ZN7IMU9DOF4InitEv>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10b      	bne.n	8006b58 <main+0x15c>
 8006b40:	482e      	ldr	r0, [pc, #184]	@ (8006bfc <main+0x200>)
 8006b42:	f7fe f9bd 	bl	8004ec0 <_ZN9Barometer4InitEv>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d105      	bne.n	8006b58 <main+0x15c>
 8006b4c:	482d      	ldr	r0, [pc, #180]	@ (8006c04 <main+0x208>)
 8006b4e:	f7fa fe2b 	bl	80017a8 <_ZN3GPS4InitEv>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <main+0x160>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e000      	b.n	8006b5e <main+0x162>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d006      	beq.n	8006b70 <main+0x174>
	  {
		HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin,GPIO_PIN_SET);
 8006b62:	2201      	movs	r2, #1
 8006b64:	2104      	movs	r1, #4
 8006b66:	482f      	ldr	r0, [pc, #188]	@ (8006c24 <main+0x228>)
 8006b68:	f002 f950 	bl	8008e0c <HAL_GPIO_WritePin>
		for(;;)
 8006b6c:	bf00      	nop
 8006b6e:	e7fd      	b.n	8006b6c <main+0x170>
			// Reset lại Drone
		}
	  }

	// On dinh bo dem cho barometer, khong nhan gia tri sai ban dau (truoc khi vo chuong trinh chinh
	for (int i = 0; i < 100 ; i++)
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	e00e      	b.n	8006b94 <main+0x198>
	{
		ms5611.ReadAndCalculatePIDBarometer(flightMode, takeoffDetected,stateThrottle);
 8006b76:	4b2c      	ldr	r3, [pc, #176]	@ (8006c28 <main+0x22c>)
 8006b78:	7819      	ldrb	r1, [r3, #0]
 8006b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006c2c <main+0x230>)
 8006b7c:	781a      	ldrb	r2, [r3, #0]
 8006b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8006c30 <main+0x234>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	481e      	ldr	r0, [pc, #120]	@ (8006bfc <main+0x200>)
 8006b84:	f7fe ffb3 	bl	8005aee <_ZN9Barometer28ReadAndCalculatePIDBarometerEhhh>
		HAL_Delay(4);
 8006b88:	2004      	movs	r0, #4
 8006b8a:	f001 f9a9 	bl	8007ee0 <HAL_Delay>
	for (int i = 0; i < 100 ; i++)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3301      	adds	r3, #1
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b63      	cmp	r3, #99	@ 0x63
 8006b98:	dded      	ble.n	8006b76 <main+0x17a>
	}

	ms5611.SetGroundPressure();
 8006b9a:	4818      	ldr	r0, [pc, #96]	@ (8006bfc <main+0x200>)
 8006b9c:	f7fe f9b3 	bl	8004f06 <_ZN9Barometer17SetGroundPressureEv>

	gy86.ReadRawAllParameter();
 8006ba0:	4811      	ldr	r0, [pc, #68]	@ (8006be8 <main+0x1ec>)
 8006ba2:	f7fc f8a7 	bl	8002cf4 <_ZN7IMU9DOF19ReadRawAllParameterEv>
	gy86.ReadCompass();
 8006ba6:	4810      	ldr	r0, [pc, #64]	@ (8006be8 <main+0x1ec>)
 8006ba8:	f7fb fdba 	bl	8002720 <_ZN7IMU9DOF11ReadCompassEv>
	gy86.angleYaw = gy86.actualCompassHeading;
 8006bac:	4b0e      	ldr	r3, [pc, #56]	@ (8006be8 <main+0x1ec>)
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8006be8 <main+0x1ec>)
 8006bb2:	6653      	str	r3, [r2, #100]	@ 0x64

	gy86.CalibGyro();
 8006bb4:	480c      	ldr	r0, [pc, #48]	@ (8006be8 <main+0x1ec>)
 8006bb6:	f7fc fe85 	bl	80038c4 <_ZN7IMU9DOF9CalibGyroEv>

//	// �?ưa gia tri accel vao bo dem de on dinh truoc khi vao chuong trinh chinh
	for (int i = 0; i <= 24; i++)
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60bb      	str	r3, [r7, #8]
 8006bbe:	e00c      	b.n	8006bda <main+0x1de>
	{
		gy86.shortAverageAccel_Z[i] = gy86.accel.z;
 8006bc0:	4b09      	ldr	r3, [pc, #36]	@ (8006be8 <main+0x1ec>)
 8006bc2:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	@ 0x2c
 8006bc6:	4a08      	ldr	r2, [pc, #32]	@ (8006be8 <main+0x1ec>)
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	3338      	adds	r3, #56	@ 0x38
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	4413      	add	r3, r2
 8006bd0:	460a      	mov	r2, r1
 8006bd2:	80da      	strh	r2, [r3, #6]
	for (int i = 0; i <= 24; i++)
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	60bb      	str	r3, [r7, #8]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2b18      	cmp	r3, #24
 8006bde:	ddef      	ble.n	8006bc0 <main+0x1c4>
	}
	for (int i = 0; i <= 49; i++)
 8006be0:	2300      	movs	r3, #0
 8006be2:	607b      	str	r3, [r7, #4]
 8006be4:	e031      	b.n	8006c4a <main+0x24e>
 8006be6:	bf00      	nop
 8006be8:	200006a0 	.word	0x200006a0
 8006bec:	bfc00000 	.word	0xbfc00000
 8006bf0:	20000000 	.word	0x20000000
 8006bf4:	3e4ccccd 	.word	0x3e4ccccd
 8006bf8:	3fb33333 	.word	0x3fb33333
 8006bfc:	20000800 	.word	0x20000800
 8006c00:	402ccccd 	.word	0x402ccccd
 8006c04:	200009f8 	.word	0x200009f8
 8006c08:	43c80000 	.word	0x43c80000
 8006c0c:	410147ae 	.word	0x410147ae
 8006c10:	3d54fdf4 	.word	0x3d54fdf4
 8006c14:	20000c1c 	.word	0x20000c1c
 8006c18:	00000000 	.word	0x00000000
 8006c1c:	3ca3d70a 	.word	0x3ca3d70a
 8006c20:	200005ac 	.word	0x200005ac
 8006c24:	40020000 	.word	0x40020000
 8006c28:	2000066e 	.word	0x2000066e
 8006c2c:	20000670 	.word	0x20000670
 8006c30:	20000005 	.word	0x20000005
	{
		gy86.longAverageAccel_Z[i] = gy86.accel.z;
 8006c34:	4bac      	ldr	r3, [pc, #688]	@ (8006ee8 <main+0x4ec>)
 8006c36:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	@ 0x2c
 8006c3a:	4aab      	ldr	r2, [pc, #684]	@ (8006ee8 <main+0x4ec>)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3354      	adds	r3, #84	@ 0x54
 8006c40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i <= 49; i++)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	3301      	adds	r3, #1
 8006c48:	607b      	str	r3, [r7, #4]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b31      	cmp	r3, #49	@ 0x31
 8006c4e:	ddf1      	ble.n	8006c34 <main+0x238>
	}

	gy86.shortTotalAccel_Z = gy86.accel.z * 25;
 8006c50:	4ba5      	ldr	r3, [pc, #660]	@ (8006ee8 <main+0x4ec>)
 8006c52:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8006c56:	461a      	mov	r2, r3
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009a      	lsls	r2, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	4aa1      	ldr	r2, [pc, #644]	@ (8006ee8 <main+0x4ec>)
 8006c64:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
	gy86.longTotalAccel_Z = gy86.accel.z * 50;
 8006c68:	4b9f      	ldr	r3, [pc, #636]	@ (8006ee8 <main+0x4ec>)
 8006c6a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8006c6e:	461a      	mov	r2, r3
 8006c70:	2332      	movs	r3, #50	@ 0x32
 8006c72:	fb02 f303 	mul.w	r3, r2, r3
 8006c76:	4a9c      	ldr	r2, [pc, #624]	@ (8006ee8 <main+0x4ec>)
 8006c78:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  time = HAL_GetTick();
 8006c7c:	f001 f924 	bl	8007ec8 <HAL_GetTick>
 8006c80:	4603      	mov	r3, r0
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	4b99      	ldr	r3, [pc, #612]	@ (8006eec <main+0x4f0>)
 8006c86:	801a      	strh	r2, [r3, #0]

	  // Nhận dữ liệu NRF24
	  ReceiveDataFromNRF24L01();
 8006c88:	f7ff f912 	bl	8005eb0 <_Z23ReceiveDataFromNRF24L01v>
	  ReadDataFromBMP180();
 8006c8c:	f7ff fa0e 	bl	80060ac <_Z18ReadDataFromBMP180v>

	  if ((stateMachine == 0)&& (FirtsMachine0 == 0)  ) // Trạng thái khởi động
 8006c90:	4b97      	ldr	r3, [pc, #604]	@ (8006ef0 <main+0x4f4>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d118      	bne.n	8006cca <main+0x2ce>
 8006c98:	4b96      	ldr	r3, [pc, #600]	@ (8006ef4 <main+0x4f8>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d114      	bne.n	8006cca <main+0x2ce>
	  {
		  FirtsMachine0 = 1;
 8006ca0:	4b94      	ldr	r3, [pc, #592]	@ (8006ef4 <main+0x4f8>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]

		  gy86.CalibCompass();  // hiệu chỉnh la bàn
 8006ca6:	4890      	ldr	r0, [pc, #576]	@ (8006ee8 <main+0x4ec>)
 8006ca8:	f7fc fc4c 	bl	8003544 <_ZN7IMU9DOF12CalibCompassEv>

		  gy86.CalibLevel(&error);  // Hiệu chỉnh cân bằng ban đầu
 8006cac:	4992      	ldr	r1, [pc, #584]	@ (8006ef8 <main+0x4fc>)
 8006cae:	488e      	ldr	r0, [pc, #568]	@ (8006ee8 <main+0x4ec>)
 8006cb0:	f7fc fcd6 	bl	8003660 <_ZN7IMU9DOF10CalibLevelEPh>

		  ChangeSetting();   // change setting
 8006cb4:	f7ff fa08 	bl	80060c8 <_Z13ChangeSettingv>

		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006cbe:	488f      	ldr	r0, [pc, #572]	@ (8006efc <main+0x500>)
 8006cc0:	f002 f8a4 	bl	8008e0c <HAL_GPIO_WritePin>

		  gy86.headingLock = 0; // Xóa cờ heading Lock
 8006cc4:	4b88      	ldr	r3, [pc, #544]	@ (8006ee8 <main+0x4ec>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	701a      	strb	r2, [r3, #0]
	  if(BTN5 == 1 )  // Bấm BTN5
	  {
//		  gy86.headingLock = 1;
	  }

	  gy86.ReadGyroAccel(); // tính toán Gyro và Accel
 8006cca:	4887      	ldr	r0, [pc, #540]	@ (8006ee8 <main+0x4ec>)
 8006ccc:	f7fc fbd4 	bl	8003478 <_ZN7IMU9DOF13ReadGyroAccelEv>
	  gy86.ReadCompass(); // Tính toán la bàn số
 8006cd0:	4885      	ldr	r0, [pc, #532]	@ (8006ee8 <main+0x4ec>)
 8006cd2:	f7fb fd25 	bl	8002720 <_ZN7IMU9DOF11ReadCompassEv>

	  ms5611.ReadAndCalculatePIDBarometer(flightMode, takeoffDetected, stateThrottle);  // Đọc giá trị áp xuất và tính toán PID ổn định độ cao
 8006cd6:	4b8a      	ldr	r3, [pc, #552]	@ (8006f00 <main+0x504>)
 8006cd8:	7819      	ldrb	r1, [r3, #0]
 8006cda:	4b8a      	ldr	r3, [pc, #552]	@ (8006f04 <main+0x508>)
 8006cdc:	781a      	ldrb	r2, [r3, #0]
 8006cde:	4b8a      	ldr	r3, [pc, #552]	@ (8006f08 <main+0x50c>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	488a      	ldr	r0, [pc, #552]	@ (8006f0c <main+0x510>)
 8006ce4:	f7fe ff03 	bl	8005aee <_ZN9Barometer28ReadAndCalculatePIDBarometerEhhh>

	  gpsM8N.ReadGPS(stateMachine, &error, &flightMode, gy86.angleYaw);    // Đọc gia strij GPS và tính toán PID ổn định vị trí
 8006ce8:	4b81      	ldr	r3, [pc, #516]	@ (8006ef0 <main+0x4f4>)
 8006cea:	7819      	ldrb	r1, [r3, #0]
 8006cec:	4b7e      	ldr	r3, [pc, #504]	@ (8006ee8 <main+0x4ec>)
 8006cee:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8006cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8006cf6:	4b82      	ldr	r3, [pc, #520]	@ (8006f00 <main+0x504>)
 8006cf8:	4a7f      	ldr	r2, [pc, #508]	@ (8006ef8 <main+0x4fc>)
 8006cfa:	4885      	ldr	r0, [pc, #532]	@ (8006f10 <main+0x514>)
 8006cfc:	f7fa fddc 	bl	80018b8 <_ZN3GPS7ReadGPSEhPhS0_f>

	  gy86.CalculateGyroInput();  // tính toán gái trị đầu vào feedback cho bộ điều khiển PID, ổn định theo các phương
 8006d00:	4879      	ldr	r0, [pc, #484]	@ (8006ee8 <main+0x4ec>)
 8006d02:	f7fd f8b9 	bl	8003e78 <_ZN7IMU9DOF18CalculateGyroInputEv>
	  gy86.ReadAngleRPY();  // tính toán gọc đo Roll, Pitch, Yaw
 8006d06:	4878      	ldr	r0, [pc, #480]	@ (8006ee8 <main+0x4ec>)
 8006d08:	f7fc fe46 	bl	8003998 <_ZN7IMU9DOF12ReadAngleRPYEv>

	  gy86.setLevelAdjust(0, 0);  // hiệu chỉnh cân bằng ban đầu khi khởi động
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2100      	movs	r1, #0
 8006d10:	4875      	ldr	r0, [pc, #468]	@ (8006ee8 <main+0x4ec>)
 8006d12:	f7fd f969 	bl	8003fe8 <_ZN7IMU9DOF14setLevelAdjustEhh>
	  gy86.VerticalAccelerationCalculations();  // Tính toán gia tốc
 8006d16:	4874      	ldr	r0, [pc, #464]	@ (8006ee8 <main+0x4ec>)
 8006d18:	f7fb fbec 	bl	80024f4 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv>

	  // Thiết lập lại setpoint cho đầu vào bộ PID ổn định roll pitch
	 pidForHorizontal.roll.setPointBase = roll;
 8006d1c:	4b7d      	ldr	r3, [pc, #500]	@ (8006f14 <main+0x518>)
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
 8006d22:	4b7d      	ldr	r3, [pc, #500]	@ (8006f18 <main+0x51c>)
 8006d24:	631a      	str	r2, [r3, #48]	@ 0x30
	 pidForHorizontal.pitch.setPointBase = pitch;
 8006d26:	4b7d      	ldr	r3, [pc, #500]	@ (8006f1c <main+0x520>)
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	4b7a      	ldr	r3, [pc, #488]	@ (8006f18 <main+0x51c>)
 8006d2e:	661a      	str	r2, [r3, #96]	@ 0x60
	 pidForHorizontal.yaw.setPointBase = yaw;
 8006d30:	4b7b      	ldr	r3, [pc, #492]	@ (8006f20 <main+0x524>)
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	4b78      	ldr	r3, [pc, #480]	@ (8006f18 <main+0x51c>)
 8006d38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	 pidForHorizontal.throttleSetpoint = throttle;
 8006d3c:	4b79      	ldr	r3, [pc, #484]	@ (8006f24 <main+0x528>)
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	4b75      	ldr	r3, [pc, #468]	@ (8006f18 <main+0x51c>)
 8006d44:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	 pidForHorizontal.roll.inputValue = gy86.gyro.rollInput;
 8006d48:	4b67      	ldr	r3, [pc, #412]	@ (8006ee8 <main+0x4ec>)
 8006d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d4c:	4a72      	ldr	r2, [pc, #456]	@ (8006f18 <main+0x51c>)
 8006d4e:	6193      	str	r3, [r2, #24]
	 pidForHorizontal.pitch.inputValue = gy86.gyro.pitchInput;
 8006d50:	4b65      	ldr	r3, [pc, #404]	@ (8006ee8 <main+0x4ec>)
 8006d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d54:	4a70      	ldr	r2, [pc, #448]	@ (8006f18 <main+0x51c>)
 8006d56:	6493      	str	r3, [r2, #72]	@ 0x48
	 pidForHorizontal.yaw.inputValue = gy86.gyro.yawInput;
 8006d58:	4b63      	ldr	r3, [pc, #396]	@ (8006ee8 <main+0x4ec>)
 8006d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d5c:	4a6e      	ldr	r2, [pc, #440]	@ (8006f18 <main+0x51c>)
 8006d5e:	6793      	str	r3, [r2, #120]	@ 0x78
//		float headingLockCourseDeviation = gy86.CourseDeviation(gy86.angleYaw, gy86.courseLockHeading);
//		pidForHorizontal.roll.setPointBase = 1500 + ((float)(roll - 1500) * cos(headingLockCourseDeviation * 0.017453)) + ((float)(pitch - 1500) * cos((headingLockCourseDeviation - 90) * 0.017453));
//		pidForHorizontal.pitch.setPointBase = 1500 + ((float)(pitch - 1500) * cos(headingLockCourseDeviation * 0.017453)) + ((float)(roll - 1500) * cos((headingLockCourseDeviation + 90) * 0.017453));
//	  }

	 if (flightMode == 3 && waypointSet == 1)  // có thêm GPS
 8006d60:	4b67      	ldr	r3, [pc, #412]	@ (8006f00 <main+0x504>)
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	d125      	bne.n	8006db4 <main+0x3b8>
 8006d68:	4b6f      	ldr	r3, [pc, #444]	@ (8006f28 <main+0x52c>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d121      	bne.n	8006db4 <main+0x3b8>
	 {
		pidForHorizontal.roll.setPointBase += gpsM8N.gpsRollAdjust;
 8006d70:	4b69      	ldr	r3, [pc, #420]	@ (8006f18 <main+0x51c>)
 8006d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d74:	ee07 3a90 	vmov	s15, r3
 8006d78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d7c:	4b64      	ldr	r3, [pc, #400]	@ (8006f10 <main+0x514>)
 8006d7e:	edd3 7a88 	vldr	s15, [r3, #544]	@ 0x220
 8006d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d8a:	ee17 2a90 	vmov	r2, s15
 8006d8e:	4b62      	ldr	r3, [pc, #392]	@ (8006f18 <main+0x51c>)
 8006d90:	631a      	str	r2, [r3, #48]	@ 0x30
		pidForHorizontal.pitch.setPointBase += gpsM8N.gpsPitchAdjust;
 8006d92:	4b61      	ldr	r3, [pc, #388]	@ (8006f18 <main+0x51c>)
 8006d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d96:	ee07 3a90 	vmov	s15, r3
 8006d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d9e:	4b5c      	ldr	r3, [pc, #368]	@ (8006f10 <main+0x514>)
 8006da0:	edd3 7a87 	vldr	s15, [r3, #540]	@ 0x21c
 8006da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dac:	ee17 2a90 	vmov	r2, s15
 8006db0:	4b59      	ldr	r3, [pc, #356]	@ (8006f18 <main+0x51c>)
 8006db2:	661a      	str	r2, [r3, #96]	@ 0x60
	 }

	 if (pidForHorizontal.roll.setPointBase > 2000)
 8006db4:	4b58      	ldr	r3, [pc, #352]	@ (8006f18 <main+0x51c>)
 8006db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8006dbc:	dd03      	ble.n	8006dc6 <main+0x3ca>
	 {
		pidForHorizontal.roll.setPointBase = 2000;
 8006dbe:	4b56      	ldr	r3, [pc, #344]	@ (8006f18 <main+0x51c>)
 8006dc0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006dc4:	631a      	str	r2, [r3, #48]	@ 0x30
	 }
	 if (pidForHorizontal.roll.setPointBase < 1000)
 8006dc6:	4b54      	ldr	r3, [pc, #336]	@ (8006f18 <main+0x51c>)
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006dce:	da03      	bge.n	8006dd8 <main+0x3dc>
	 {
		pidForHorizontal.roll.setPointBase = 1000;
 8006dd0:	4b51      	ldr	r3, [pc, #324]	@ (8006f18 <main+0x51c>)
 8006dd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006dd6:	631a      	str	r2, [r3, #48]	@ 0x30
	 }
	 if (pidForHorizontal.pitch.setPointBase > 2000)
 8006dd8:	4b4f      	ldr	r3, [pc, #316]	@ (8006f18 <main+0x51c>)
 8006dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ddc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8006de0:	dd03      	ble.n	8006dea <main+0x3ee>
	 {
		pidForHorizontal.pitch.setPointBase = 2000;
 8006de2:	4b4d      	ldr	r3, [pc, #308]	@ (8006f18 <main+0x51c>)
 8006de4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006de8:	661a      	str	r2, [r3, #96]	@ 0x60
	 }
	 if (pidForHorizontal.pitch.setPointBase < 1000)
 8006dea:	4b4b      	ldr	r3, [pc, #300]	@ (8006f18 <main+0x51c>)
 8006dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006df2:	da03      	bge.n	8006dfc <main+0x400>
	 {
		pidForHorizontal.pitch.setPointBase = 1000;
 8006df4:	4b48      	ldr	r3, [pc, #288]	@ (8006f18 <main+0x51c>)
 8006df6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006dfa:	661a      	str	r2, [r3, #96]	@ 0x60
	 }

	 pidForHorizontal.setLevelAdjust(gy86.rollLevelAdjust, gy86.pitchLevelAdjust);
 8006dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8006ee8 <main+0x4ec>)
 8006dfe:	edd3 7a4a 	vldr	s15, [r3, #296]	@ 0x128
 8006e02:	4b39      	ldr	r3, [pc, #228]	@ (8006ee8 <main+0x4ec>)
 8006e04:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 8006e08:	eef0 0a47 	vmov.f32	s1, s14
 8006e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8006e10:	4841      	ldr	r0, [pc, #260]	@ (8006f18 <main+0x51c>)
 8006e12:	f7fd fd53 	bl	80048bc <_ZN14PID_Horizontal14setLevelAdjustEff>
	 pidForHorizontal.calculatePID();
 8006e16:	4840      	ldr	r0, [pc, #256]	@ (8006f18 <main+0x51c>)
 8006e18:	f7fd fd64 	bl	80048e4 <_ZN14PID_Horizontal12calculatePIDEv>

	 StartStopTakeOff();
 8006e1c:	f7ff fd34 	bl	8006888 <_Z16StartStopTakeOffv>

	 // độ cao
	 if (takeoffDetected == 1 && stateMachine == 2)   // Nếu Drone được khởi động và đang bay
 8006e20:	4b38      	ldr	r3, [pc, #224]	@ (8006f04 <main+0x508>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d120      	bne.n	8006e6a <main+0x46e>
 8006e28:	4b31      	ldr	r3, [pc, #196]	@ (8006ef0 <main+0x4f4>)
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d11c      	bne.n	8006e6a <main+0x46e>
	 {
		Throttle = throttle + 0 ;  // takeoffThrottle=300   The base throttle is the receiver throttle tay cam + the detected take-off throttle.
 8006e30:	4b3c      	ldr	r3, [pc, #240]	@ (8006f24 <main+0x528>)
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	b21a      	sxth	r2, r3
 8006e36:	4b3d      	ldr	r3, [pc, #244]	@ (8006f2c <main+0x530>)
 8006e38:	801a      	strh	r2, [r3, #0]
		 if (flightMode == 2)
 8006e3a:	4b31      	ldr	r3, [pc, #196]	@ (8006f00 <main+0x504>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d113      	bne.n	8006e6a <main+0x46e>
		{                                                          //nếu chế dộ độ cao đang hoạt động
			Throttle = throttle  + ms5611.GetPidOutputAltitude();
 8006e42:	4b38      	ldr	r3, [pc, #224]	@ (8006f24 <main+0x528>)
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8006e4e:	482f      	ldr	r0, [pc, #188]	@ (8006f0c <main+0x510>)
 8006e50:	f7fe fc8e 	bl	8005770 <_ZN9Barometer20GetPidOutputAltitudeEv>
 8006e54:	eef0 7a40 	vmov.f32	s15, s0
 8006e58:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006e5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e60:	ee17 3a90 	vmov	r3, s15
 8006e64:	b21a      	sxth	r2, r3
 8006e66:	4b31      	ldr	r3, [pc, #196]	@ (8006f2c <main+0x530>)
 8006e68:	801a      	strh	r2, [r3, #0]
		}
	 }

	 if (stateMachine == 2) // motors đã đc khởi động
 8006e6a:	4b21      	ldr	r3, [pc, #132]	@ (8006ef0 <main+0x4f4>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	f040 8103 	bne.w	800707a <main+0x67e>
	 {
		if (Throttle > 1800)
 8006e74:	4b2d      	ldr	r3, [pc, #180]	@ (8006f2c <main+0x530>)
 8006e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e7a:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8006e7e:	dd03      	ble.n	8006e88 <main+0x48c>
		{
			Throttle = 1800;                                          //Giới hạn lại tốc độ
 8006e80:	4b2a      	ldr	r3, [pc, #168]	@ (8006f2c <main+0x530>)
 8006e82:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8006e86:	801a      	strh	r2, [r3, #0]
		}
		escFrontRightCCW = Throttle - pidForHorizontal.pitch.outputValue + pidForHorizontal.roll.outputValue - pidForHorizontal.yaw.outputValue;
 8006e88:	4b28      	ldr	r3, [pc, #160]	@ (8006f2c <main+0x530>)
 8006e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e96:	4b20      	ldr	r3, [pc, #128]	@ (8006f18 <main+0x51c>)
 8006e98:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006e9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f18 <main+0x51c>)
 8006ea2:	edd3 7a04 	vldr	s15, [r3, #16]
 8006ea6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8006f18 <main+0x51c>)
 8006eac:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8006eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006eb8:	ee17 3a90 	vmov	r3, s15
 8006ebc:	b21a      	sxth	r2, r3
 8006ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8006f30 <main+0x534>)
 8006ec0:	801a      	strh	r2, [r3, #0]
		escRearRightCW = Throttle + pidForHorizontal.pitch.outputValue + pidForHorizontal.roll.outputValue + pidForHorizontal.yaw.outputValue;
 8006ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8006f2c <main+0x530>)
 8006ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ec8:	ee07 3a90 	vmov	s15, r3
 8006ecc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ed0:	4b11      	ldr	r3, [pc, #68]	@ (8006f18 <main+0x51c>)
 8006ed2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006ed6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006eda:	4b0f      	ldr	r3, [pc, #60]	@ (8006f18 <main+0x51c>)
 8006edc:	edd3 7a04 	vldr	s15, [r3, #16]
 8006ee0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ee4:	e026      	b.n	8006f34 <main+0x538>
 8006ee6:	bf00      	nop
 8006ee8:	200006a0 	.word	0x200006a0
 8006eec:	2000069a 	.word	0x2000069a
 8006ef0:	20000671 	.word	0x20000671
 8006ef4:	2000068c 	.word	0x2000068c
 8006ef8:	20000672 	.word	0x20000672
 8006efc:	40020800 	.word	0x40020800
 8006f00:	2000066e 	.word	0x2000066e
 8006f04:	20000670 	.word	0x20000670
 8006f08:	20000005 	.word	0x20000005
 8006f0c:	20000800 	.word	0x20000800
 8006f10:	200009f8 	.word	0x200009f8
 8006f14:	20000668 	.word	0x20000668
 8006f18:	20000c1c 	.word	0x20000c1c
 8006f1c:	2000066a 	.word	0x2000066a
 8006f20:	2000066c 	.word	0x2000066c
 8006f24:	20000006 	.word	0x20000006
 8006f28:	2000066f 	.word	0x2000066f
 8006f2c:	20000690 	.word	0x20000690
 8006f30:	20000660 	.word	0x20000660
 8006f34:	4b7c      	ldr	r3, [pc, #496]	@ (8007128 <main+0x72c>)
 8006f36:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8006f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f42:	ee17 3a90 	vmov	r3, s15
 8006f46:	b21a      	sxth	r2, r3
 8006f48:	4b78      	ldr	r3, [pc, #480]	@ (800712c <main+0x730>)
 8006f4a:	801a      	strh	r2, [r3, #0]
		escRearLeftCCW = Throttle + pidForHorizontal.pitch.outputValue - pidForHorizontal.roll.outputValue - pidForHorizontal.yaw.outputValue;
 8006f4c:	4b78      	ldr	r3, [pc, #480]	@ (8007130 <main+0x734>)
 8006f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f5a:	4b73      	ldr	r3, [pc, #460]	@ (8007128 <main+0x72c>)
 8006f5c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006f60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f64:	4b70      	ldr	r3, [pc, #448]	@ (8007128 <main+0x72c>)
 8006f66:	edd3 7a04 	vldr	s15, [r3, #16]
 8006f6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f6e:	4b6e      	ldr	r3, [pc, #440]	@ (8007128 <main+0x72c>)
 8006f70:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8006f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f7c:	ee17 3a90 	vmov	r3, s15
 8006f80:	b21a      	sxth	r2, r3
 8006f82:	4b6c      	ldr	r3, [pc, #432]	@ (8007134 <main+0x738>)
 8006f84:	801a      	strh	r2, [r3, #0]
		escFrontLeftCW = Throttle - pidForHorizontal.pitch.outputValue - pidForHorizontal.roll.outputValue + pidForHorizontal.yaw.outputValue;
 8006f86:	4b6a      	ldr	r3, [pc, #424]	@ (8007130 <main+0x734>)
 8006f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f8c:	ee07 3a90 	vmov	s15, r3
 8006f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f94:	4b64      	ldr	r3, [pc, #400]	@ (8007128 <main+0x72c>)
 8006f96:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006f9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f9e:	4b62      	ldr	r3, [pc, #392]	@ (8007128 <main+0x72c>)
 8006fa0:	edd3 7a04 	vldr	s15, [r3, #16]
 8006fa4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006fa8:	4b5f      	ldr	r3, [pc, #380]	@ (8007128 <main+0x72c>)
 8006faa:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8006fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fb6:	ee17 3a90 	vmov	r3, s15
 8006fba:	b21a      	sxth	r2, r3
 8006fbc:	4b5e      	ldr	r3, [pc, #376]	@ (8007138 <main+0x73c>)
 8006fbe:	801a      	strh	r2, [r3, #0]

		if (escFrontRightCCW < idleSpeedMotor)
 8006fc0:	4b5e      	ldr	r3, [pc, #376]	@ (800713c <main+0x740>)
 8006fc2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006fc6:	4b5e      	ldr	r3, [pc, #376]	@ (8007140 <main+0x744>)
 8006fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	da04      	bge.n	8006fda <main+0x5de>
		{
			escFrontRightCCW = idleSpeedMotor;                        //Keep the motors running.
 8006fd0:	4b5b      	ldr	r3, [pc, #364]	@ (8007140 <main+0x744>)
 8006fd2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006fd6:	4b59      	ldr	r3, [pc, #356]	@ (800713c <main+0x740>)
 8006fd8:	801a      	strh	r2, [r3, #0]
		}
		if (escRearRightCW < idleSpeedMotor)
 8006fda:	4b54      	ldr	r3, [pc, #336]	@ (800712c <main+0x730>)
 8006fdc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006fe0:	4b57      	ldr	r3, [pc, #348]	@ (8007140 <main+0x744>)
 8006fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	da04      	bge.n	8006ff4 <main+0x5f8>
		{
			escRearRightCW = idleSpeedMotor;                        //Keep the motors running.
 8006fea:	4b55      	ldr	r3, [pc, #340]	@ (8007140 <main+0x744>)
 8006fec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006ff0:	4b4e      	ldr	r3, [pc, #312]	@ (800712c <main+0x730>)
 8006ff2:	801a      	strh	r2, [r3, #0]
		}
		if (escRearLeftCCW < idleSpeedMotor)
 8006ff4:	4b4f      	ldr	r3, [pc, #316]	@ (8007134 <main+0x738>)
 8006ff6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006ffa:	4b51      	ldr	r3, [pc, #324]	@ (8007140 <main+0x744>)
 8006ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007000:	429a      	cmp	r2, r3
 8007002:	da04      	bge.n	800700e <main+0x612>
		{
			escRearLeftCCW = idleSpeedMotor;                        //Keep the motors running.
 8007004:	4b4e      	ldr	r3, [pc, #312]	@ (8007140 <main+0x744>)
 8007006:	f9b3 2000 	ldrsh.w	r2, [r3]
 800700a:	4b4a      	ldr	r3, [pc, #296]	@ (8007134 <main+0x738>)
 800700c:	801a      	strh	r2, [r3, #0]
		}
		if (escFrontLeftCW < idleSpeedMotor)
 800700e:	4b4a      	ldr	r3, [pc, #296]	@ (8007138 <main+0x73c>)
 8007010:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007014:	4b4a      	ldr	r3, [pc, #296]	@ (8007140 <main+0x744>)
 8007016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800701a:	429a      	cmp	r2, r3
 800701c:	da04      	bge.n	8007028 <main+0x62c>
		{
			escFrontLeftCW = idleSpeedMotor;                        //Keep the motors running.
 800701e:	4b48      	ldr	r3, [pc, #288]	@ (8007140 <main+0x744>)
 8007020:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007024:	4b44      	ldr	r3, [pc, #272]	@ (8007138 <main+0x73c>)
 8007026:	801a      	strh	r2, [r3, #0]
		}

		if (escFrontRightCCW > 1800)
 8007028:	4b44      	ldr	r3, [pc, #272]	@ (800713c <main+0x740>)
 800702a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800702e:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8007032:	dd03      	ble.n	800703c <main+0x640>
		{
			escFrontRightCCW = 1800;                                                 //Limit the esc-1 pulse to 2000us.
 8007034:	4b41      	ldr	r3, [pc, #260]	@ (800713c <main+0x740>)
 8007036:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 800703a:	801a      	strh	r2, [r3, #0]
		}
		if (escRearRightCW > 1800)
 800703c:	4b3b      	ldr	r3, [pc, #236]	@ (800712c <main+0x730>)
 800703e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007042:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8007046:	dd03      	ble.n	8007050 <main+0x654>
		{
			escRearRightCW = 1800;                                                 //Limit the esc-2 pulse to 2000us.
 8007048:	4b38      	ldr	r3, [pc, #224]	@ (800712c <main+0x730>)
 800704a:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 800704e:	801a      	strh	r2, [r3, #0]
		}
		if (escRearLeftCCW > 1800)
 8007050:	4b38      	ldr	r3, [pc, #224]	@ (8007134 <main+0x738>)
 8007052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007056:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 800705a:	dd03      	ble.n	8007064 <main+0x668>
		{
			escRearLeftCCW = 1800;                                                 //Limit the esc-3 pulse to 2000us.
 800705c:	4b35      	ldr	r3, [pc, #212]	@ (8007134 <main+0x738>)
 800705e:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8007062:	801a      	strh	r2, [r3, #0]
		}
		if (escFrontLeftCW > 1800)
 8007064:	4b34      	ldr	r3, [pc, #208]	@ (8007138 <main+0x73c>)
 8007066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800706a:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 800706e:	dd14      	ble.n	800709a <main+0x69e>
		{
			escFrontLeftCW = 1800;                                                 //Limit the esc-4 pulse to 2000us.
 8007070:	4b31      	ldr	r3, [pc, #196]	@ (8007138 <main+0x73c>)
 8007072:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8007076:	801a      	strh	r2, [r3, #0]
 8007078:	e00f      	b.n	800709a <main+0x69e>
		}
	}
	else
	{
		escFrontRightCCW = 1000;                                                                  //If start is not 2 keep a 1000us pulse for ess-1.
 800707a:	4b30      	ldr	r3, [pc, #192]	@ (800713c <main+0x740>)
 800707c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007080:	801a      	strh	r2, [r3, #0]
		escRearRightCW = 1000;                                                                  //If start is not 2 keep a 1000us pulse for ess-2.
 8007082:	4b2a      	ldr	r3, [pc, #168]	@ (800712c <main+0x730>)
 8007084:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007088:	801a      	strh	r2, [r3, #0]
		escRearLeftCCW = 1000;                                                                  //If start is not 2 keep a 1000us pulse for ess-3.
 800708a:	4b2a      	ldr	r3, [pc, #168]	@ (8007134 <main+0x738>)
 800708c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007090:	801a      	strh	r2, [r3, #0]
		escFrontLeftCW = 1000;                                                                  //If start is not 2 keep a 1000us pulse for ess-4.
 8007092:	4b29      	ldr	r3, [pc, #164]	@ (8007138 <main+0x73c>)
 8007094:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007098:	801a      	strh	r2, [r3, #0]
	}

	 if(stateMachine == 1)  // mới khởi động thì cho quay nhẹ
 800709a:	4b2a      	ldr	r3, [pc, #168]	@ (8007144 <main+0x748>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d117      	bne.n	80070d2 <main+0x6d6>
	 {
		 Throttle = 1200;
 80070a2:	4b23      	ldr	r3, [pc, #140]	@ (8007130 <main+0x734>)
 80070a4:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80070a8:	801a      	strh	r2, [r3, #0]
		 escFrontRightCCW = Throttle;
 80070aa:	4b21      	ldr	r3, [pc, #132]	@ (8007130 <main+0x734>)
 80070ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80070b0:	4b22      	ldr	r3, [pc, #136]	@ (800713c <main+0x740>)
 80070b2:	801a      	strh	r2, [r3, #0]
		 escRearRightCW = Throttle;
 80070b4:	4b1e      	ldr	r3, [pc, #120]	@ (8007130 <main+0x734>)
 80070b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80070ba:	4b1c      	ldr	r3, [pc, #112]	@ (800712c <main+0x730>)
 80070bc:	801a      	strh	r2, [r3, #0]
		 escRearLeftCCW = Throttle;
 80070be:	4b1c      	ldr	r3, [pc, #112]	@ (8007130 <main+0x734>)
 80070c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80070c4:	4b1b      	ldr	r3, [pc, #108]	@ (8007134 <main+0x738>)
 80070c6:	801a      	strh	r2, [r3, #0]
		 escFrontLeftCW = Throttle;
 80070c8:	4b19      	ldr	r3, [pc, #100]	@ (8007130 <main+0x734>)
 80070ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80070ce:	4b1a      	ldr	r3, [pc, #104]	@ (8007138 <main+0x73c>)
 80070d0:	801a      	strh	r2, [r3, #0]
	 }

	 CHANGE_SPEED_MOTOR_FRONT_LEFT_CW(escFrontLeftCW + 375);
 80070d2:	4b19      	ldr	r3, [pc, #100]	@ (8007138 <main+0x73c>)
 80070d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070d8:	f203 1277 	addw	r2, r3, #375	@ 0x177
 80070dc:	4b1a      	ldr	r3, [pc, #104]	@ (8007148 <main+0x74c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	641a      	str	r2, [r3, #64]	@ 0x40
	 CHANGE_SPEED_MOTOR_FRONT_RIGHT_CCW(escFrontRightCCW + 375);
 80070e2:	4b16      	ldr	r3, [pc, #88]	@ (800713c <main+0x740>)
 80070e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070e8:	f203 1277 	addw	r2, r3, #375	@ 0x177
 80070ec:	4b16      	ldr	r3, [pc, #88]	@ (8007148 <main+0x74c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	635a      	str	r2, [r3, #52]	@ 0x34
	 CHANGE_SPEED_MOTOR_REAR_LEFT_CCW(escRearLeftCCW + 375 );
 80070f2:	4b10      	ldr	r3, [pc, #64]	@ (8007134 <main+0x738>)
 80070f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070f8:	f203 1277 	addw	r2, r3, #375	@ 0x177
 80070fc:	4b12      	ldr	r3, [pc, #72]	@ (8007148 <main+0x74c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	63da      	str	r2, [r3, #60]	@ 0x3c
	 CHANGE_SPEED_MOTOR_REAR_RIGHT_CW(escRearRightCW + 375);
 8007102:	4b0a      	ldr	r3, [pc, #40]	@ (800712c <main+0x730>)
 8007104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007108:	f203 1277 	addw	r2, r3, #375	@ 0x177
 800710c:	4b0e      	ldr	r3, [pc, #56]	@ (8007148 <main+0x74c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	639a      	str	r2, [r3, #56]	@ 0x38

	 time1 = (HAL_GetTick()-time);
 8007112:	f000 fed9 	bl	8007ec8 <HAL_GetTick>
 8007116:	4603      	mov	r3, r0
 8007118:	b29a      	uxth	r2, r3
 800711a:	4b0c      	ldr	r3, [pc, #48]	@ (800714c <main+0x750>)
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	b29a      	uxth	r2, r3
 8007122:	4b0b      	ldr	r3, [pc, #44]	@ (8007150 <main+0x754>)
 8007124:	801a      	strh	r2, [r3, #0]
	  time = HAL_GetTick();
 8007126:	e5a9      	b.n	8006c7c <main+0x280>
 8007128:	20000c1c 	.word	0x20000c1c
 800712c:	20000662 	.word	0x20000662
 8007130:	20000690 	.word	0x20000690
 8007134:	20000664 	.word	0x20000664
 8007138:	20000666 	.word	0x20000666
 800713c:	20000660 	.word	0x20000660
 8007140:	20000008 	.word	0x20000008
 8007144:	20000671 	.word	0x20000671
 8007148:	200005ac 	.word	0x200005ac
 800714c:	2000069a 	.word	0x2000069a
 8007150:	2000069c 	.word	0x2000069c

08007154 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b094      	sub	sp, #80	@ 0x50
 8007158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800715a:	f107 0320 	add.w	r3, r7, #32
 800715e:	2230      	movs	r2, #48	@ 0x30
 8007160:	2100      	movs	r1, #0
 8007162:	4618      	mov	r0, r3
 8007164:	f009 ff89 	bl	801107a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007168:	f107 030c 	add.w	r3, r7, #12
 800716c:	2200      	movs	r2, #0
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	605a      	str	r2, [r3, #4]
 8007172:	609a      	str	r2, [r3, #8]
 8007174:	60da      	str	r2, [r3, #12]
 8007176:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007178:	2300      	movs	r3, #0
 800717a:	60bb      	str	r3, [r7, #8]
 800717c:	4b2d      	ldr	r3, [pc, #180]	@ (8007234 <_Z18SystemClock_Configv+0xe0>)
 800717e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007180:	4a2c      	ldr	r2, [pc, #176]	@ (8007234 <_Z18SystemClock_Configv+0xe0>)
 8007182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007186:	6413      	str	r3, [r2, #64]	@ 0x40
 8007188:	4b2a      	ldr	r3, [pc, #168]	@ (8007234 <_Z18SystemClock_Configv+0xe0>)
 800718a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007190:	60bb      	str	r3, [r7, #8]
 8007192:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007194:	2300      	movs	r3, #0
 8007196:	607b      	str	r3, [r7, #4]
 8007198:	4b27      	ldr	r3, [pc, #156]	@ (8007238 <_Z18SystemClock_Configv+0xe4>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a26      	ldr	r2, [pc, #152]	@ (8007238 <_Z18SystemClock_Configv+0xe4>)
 800719e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071a2:	6013      	str	r3, [r2, #0]
 80071a4:	4b24      	ldr	r3, [pc, #144]	@ (8007238 <_Z18SystemClock_Configv+0xe4>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071ac:	607b      	str	r3, [r7, #4]
 80071ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80071b0:	2302      	movs	r3, #2
 80071b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80071b4:	2301      	movs	r3, #1
 80071b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80071b8:	2310      	movs	r3, #16
 80071ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80071bc:	2302      	movs	r3, #2
 80071be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80071c0:	2300      	movs	r3, #0
 80071c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80071c4:	2308      	movs	r3, #8
 80071c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80071c8:	2348      	movs	r3, #72	@ 0x48
 80071ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80071cc:	2302      	movs	r3, #2
 80071ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80071d0:	2304      	movs	r3, #4
 80071d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80071d4:	f107 0320 	add.w	r3, r7, #32
 80071d8:	4618      	mov	r0, r3
 80071da:	f003 fc1d 	bl	800aa18 <HAL_RCC_OscConfig>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	bf14      	ite	ne
 80071e4:	2301      	movne	r3, #1
 80071e6:	2300      	moveq	r3, #0
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80071ee:	f000 fabf 	bl	8007770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80071f2:	230f      	movs	r3, #15
 80071f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80071f6:	2302      	movs	r3, #2
 80071f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80071fa:	2300      	movs	r3, #0
 80071fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80071fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007202:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007204:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007208:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800720a:	f107 030c 	add.w	r3, r7, #12
 800720e:	2102      	movs	r1, #2
 8007210:	4618      	mov	r0, r3
 8007212:	f003 fe79 	bl	800af08 <HAL_RCC_ClockConfig>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	bf14      	ite	ne
 800721c:	2301      	movne	r3, #1
 800721e:	2300      	moveq	r3, #0
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8007226:	f000 faa3 	bl	8007770 <Error_Handler>
  }
}
 800722a:	bf00      	nop
 800722c:	3750      	adds	r7, #80	@ 0x50
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	40023800 	.word	0x40023800
 8007238:	40007000 	.word	0x40007000

0800723c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007242:	463b      	mov	r3, r7
 8007244:	2200      	movs	r2, #0
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	605a      	str	r2, [r3, #4]
 800724a:	609a      	str	r2, [r3, #8]
 800724c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800724e:	4b26      	ldr	r3, [pc, #152]	@ (80072e8 <_ZL12MX_ADC1_Initv+0xac>)
 8007250:	4a26      	ldr	r2, [pc, #152]	@ (80072ec <_ZL12MX_ADC1_Initv+0xb0>)
 8007252:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8007254:	4b24      	ldr	r3, [pc, #144]	@ (80072e8 <_ZL12MX_ADC1_Initv+0xac>)
 8007256:	2200      	movs	r2, #0
 8007258:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800725a:	4b23      	ldr	r3, [pc, #140]	@ (80072e8 <_ZL12MX_ADC1_Initv+0xac>)
 800725c:	2200      	movs	r2, #0
 800725e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8007260:	4b21      	ldr	r3, [pc, #132]	@ (80072e8 <_ZL12MX_ADC1_Initv+0xac>)
 8007262:	2200      	movs	r2, #0
 8007264:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007266:	4b20      	ldr	r3, [pc, #128]	@ (80072e8 <_ZL12MX_ADC1_Initv+0xac>)
 8007268:	2200      	movs	r2, #0
 800726a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800726c:	4b1e      	ldr	r3, [pc, #120]	@ (80072e8 <_ZL12MX_ADC1_Initv+0xac>)
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007274:	4b1c      	ldr	r3, [pc, #112]	@ (80072e8 <_ZL12MX_ADC1_Initv+0xac>)
 8007276:	2200      	movs	r2, #0
 8007278:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800727a:	4b1b      	ldr	r3, [pc, #108]	@ (80072e8 <_ZL12MX_ADC1_Initv+0xac>)
 800727c:	4a1c      	ldr	r2, [pc, #112]	@ (80072f0 <_ZL12MX_ADC1_Initv+0xb4>)
 800727e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007280:	4b19      	ldr	r3, [pc, #100]	@ (80072e8 <_ZL12MX_ADC1_Initv+0xac>)
 8007282:	2200      	movs	r2, #0
 8007284:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007286:	4b18      	ldr	r3, [pc, #96]	@ (80072e8 <_ZL12MX_ADC1_Initv+0xac>)
 8007288:	2201      	movs	r2, #1
 800728a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800728c:	4b16      	ldr	r3, [pc, #88]	@ (80072e8 <_ZL12MX_ADC1_Initv+0xac>)
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007294:	4b14      	ldr	r3, [pc, #80]	@ (80072e8 <_ZL12MX_ADC1_Initv+0xac>)
 8007296:	2201      	movs	r2, #1
 8007298:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800729a:	4813      	ldr	r0, [pc, #76]	@ (80072e8 <_ZL12MX_ADC1_Initv+0xac>)
 800729c:	f000 fe44 	bl	8007f28 <HAL_ADC_Init>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	bf14      	ite	ne
 80072a6:	2301      	movne	r3, #1
 80072a8:	2300      	moveq	r3, #0
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 80072b0:	f000 fa5e 	bl	8007770 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80072b4:	230a      	movs	r3, #10
 80072b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80072b8:	2301      	movs	r3, #1
 80072ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80072bc:	2300      	movs	r3, #0
 80072be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80072c0:	463b      	mov	r3, r7
 80072c2:	4619      	mov	r1, r3
 80072c4:	4808      	ldr	r0, [pc, #32]	@ (80072e8 <_ZL12MX_ADC1_Initv+0xac>)
 80072c6:	f000 fe73 	bl	8007fb0 <HAL_ADC_ConfigChannel>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	bf14      	ite	ne
 80072d0:	2301      	movne	r3, #1
 80072d2:	2300      	moveq	r3, #0
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 80072da:	f000 fa49 	bl	8007770 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80072de:	bf00      	nop
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	20000464 	.word	0x20000464
 80072ec:	40012000 	.word	0x40012000
 80072f0:	0f000001 	.word	0x0f000001

080072f4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80072f8:	4b15      	ldr	r3, [pc, #84]	@ (8007350 <_ZL12MX_I2C1_Initv+0x5c>)
 80072fa:	4a16      	ldr	r2, [pc, #88]	@ (8007354 <_ZL12MX_I2C1_Initv+0x60>)
 80072fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80072fe:	4b14      	ldr	r3, [pc, #80]	@ (8007350 <_ZL12MX_I2C1_Initv+0x5c>)
 8007300:	4a15      	ldr	r2, [pc, #84]	@ (8007358 <_ZL12MX_I2C1_Initv+0x64>)
 8007302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007304:	4b12      	ldr	r3, [pc, #72]	@ (8007350 <_ZL12MX_I2C1_Initv+0x5c>)
 8007306:	2200      	movs	r2, #0
 8007308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800730a:	4b11      	ldr	r3, [pc, #68]	@ (8007350 <_ZL12MX_I2C1_Initv+0x5c>)
 800730c:	2200      	movs	r2, #0
 800730e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007310:	4b0f      	ldr	r3, [pc, #60]	@ (8007350 <_ZL12MX_I2C1_Initv+0x5c>)
 8007312:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007316:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007318:	4b0d      	ldr	r3, [pc, #52]	@ (8007350 <_ZL12MX_I2C1_Initv+0x5c>)
 800731a:	2200      	movs	r2, #0
 800731c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800731e:	4b0c      	ldr	r3, [pc, #48]	@ (8007350 <_ZL12MX_I2C1_Initv+0x5c>)
 8007320:	2200      	movs	r2, #0
 8007322:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007324:	4b0a      	ldr	r3, [pc, #40]	@ (8007350 <_ZL12MX_I2C1_Initv+0x5c>)
 8007326:	2200      	movs	r2, #0
 8007328:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800732a:	4b09      	ldr	r3, [pc, #36]	@ (8007350 <_ZL12MX_I2C1_Initv+0x5c>)
 800732c:	2200      	movs	r2, #0
 800732e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007330:	4807      	ldr	r0, [pc, #28]	@ (8007350 <_ZL12MX_I2C1_Initv+0x5c>)
 8007332:	f001 fd9f 	bl	8008e74 <HAL_I2C_Init>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	bf14      	ite	ne
 800733c:	2301      	movne	r3, #1
 800733e:	2300      	moveq	r3, #0
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8007346:	f000 fa13 	bl	8007770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800734a:	bf00      	nop
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	200004ac 	.word	0x200004ac
 8007354:	40005400 	.word	0x40005400
 8007358:	00061a80 	.word	0x00061a80

0800735c <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007360:	4b15      	ldr	r3, [pc, #84]	@ (80073b8 <_ZL12MX_I2C2_Initv+0x5c>)
 8007362:	4a16      	ldr	r2, [pc, #88]	@ (80073bc <_ZL12MX_I2C2_Initv+0x60>)
 8007364:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8007366:	4b14      	ldr	r3, [pc, #80]	@ (80073b8 <_ZL12MX_I2C2_Initv+0x5c>)
 8007368:	4a15      	ldr	r2, [pc, #84]	@ (80073c0 <_ZL12MX_I2C2_Initv+0x64>)
 800736a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800736c:	4b12      	ldr	r3, [pc, #72]	@ (80073b8 <_ZL12MX_I2C2_Initv+0x5c>)
 800736e:	2200      	movs	r2, #0
 8007370:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8007372:	4b11      	ldr	r3, [pc, #68]	@ (80073b8 <_ZL12MX_I2C2_Initv+0x5c>)
 8007374:	2200      	movs	r2, #0
 8007376:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007378:	4b0f      	ldr	r3, [pc, #60]	@ (80073b8 <_ZL12MX_I2C2_Initv+0x5c>)
 800737a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800737e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007380:	4b0d      	ldr	r3, [pc, #52]	@ (80073b8 <_ZL12MX_I2C2_Initv+0x5c>)
 8007382:	2200      	movs	r2, #0
 8007384:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8007386:	4b0c      	ldr	r3, [pc, #48]	@ (80073b8 <_ZL12MX_I2C2_Initv+0x5c>)
 8007388:	2200      	movs	r2, #0
 800738a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800738c:	4b0a      	ldr	r3, [pc, #40]	@ (80073b8 <_ZL12MX_I2C2_Initv+0x5c>)
 800738e:	2200      	movs	r2, #0
 8007390:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007392:	4b09      	ldr	r3, [pc, #36]	@ (80073b8 <_ZL12MX_I2C2_Initv+0x5c>)
 8007394:	2200      	movs	r2, #0
 8007396:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007398:	4807      	ldr	r0, [pc, #28]	@ (80073b8 <_ZL12MX_I2C2_Initv+0x5c>)
 800739a:	f001 fd6b 	bl	8008e74 <HAL_I2C_Init>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	bf14      	ite	ne
 80073a4:	2301      	movne	r3, #1
 80073a6:	2300      	moveq	r3, #0
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d001      	beq.n	80073b2 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 80073ae:	f000 f9df 	bl	8007770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80073b2:	bf00      	nop
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	20000500 	.word	0x20000500
 80073bc:	40005800 	.word	0x40005800
 80073c0:	00061a80 	.word	0x00061a80

080073c4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80073c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007434 <_ZL12MX_SPI1_Initv+0x70>)
 80073ca:	4a1b      	ldr	r2, [pc, #108]	@ (8007438 <_ZL12MX_SPI1_Initv+0x74>)
 80073cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80073ce:	4b19      	ldr	r3, [pc, #100]	@ (8007434 <_ZL12MX_SPI1_Initv+0x70>)
 80073d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80073d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80073d6:	4b17      	ldr	r3, [pc, #92]	@ (8007434 <_ZL12MX_SPI1_Initv+0x70>)
 80073d8:	2200      	movs	r2, #0
 80073da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80073dc:	4b15      	ldr	r3, [pc, #84]	@ (8007434 <_ZL12MX_SPI1_Initv+0x70>)
 80073de:	2200      	movs	r2, #0
 80073e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80073e2:	4b14      	ldr	r3, [pc, #80]	@ (8007434 <_ZL12MX_SPI1_Initv+0x70>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80073e8:	4b12      	ldr	r3, [pc, #72]	@ (8007434 <_ZL12MX_SPI1_Initv+0x70>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80073ee:	4b11      	ldr	r3, [pc, #68]	@ (8007434 <_ZL12MX_SPI1_Initv+0x70>)
 80073f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007434 <_ZL12MX_SPI1_Initv+0x70>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80073fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007434 <_ZL12MX_SPI1_Initv+0x70>)
 80073fe:	2200      	movs	r2, #0
 8007400:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007402:	4b0c      	ldr	r3, [pc, #48]	@ (8007434 <_ZL12MX_SPI1_Initv+0x70>)
 8007404:	2200      	movs	r2, #0
 8007406:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007408:	4b0a      	ldr	r3, [pc, #40]	@ (8007434 <_ZL12MX_SPI1_Initv+0x70>)
 800740a:	2200      	movs	r2, #0
 800740c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800740e:	4b09      	ldr	r3, [pc, #36]	@ (8007434 <_ZL12MX_SPI1_Initv+0x70>)
 8007410:	220a      	movs	r2, #10
 8007412:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007414:	4807      	ldr	r0, [pc, #28]	@ (8007434 <_ZL12MX_SPI1_Initv+0x70>)
 8007416:	f003 ff57 	bl	800b2c8 <HAL_SPI_Init>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	bf14      	ite	ne
 8007420:	2301      	movne	r3, #1
 8007422:	2300      	moveq	r3, #0
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800742a:	f000 f9a1 	bl	8007770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800742e:	bf00      	nop
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20000554 	.word	0x20000554
 8007438:	40013000 	.word	0x40013000

0800743c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b08e      	sub	sp, #56	@ 0x38
 8007440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007442:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	605a      	str	r2, [r3, #4]
 800744c:	609a      	str	r2, [r3, #8]
 800744e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007450:	f107 0320 	add.w	r3, r7, #32
 8007454:	2200      	movs	r2, #0
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800745a:	1d3b      	adds	r3, r7, #4
 800745c:	2200      	movs	r2, #0
 800745e:	601a      	str	r2, [r3, #0]
 8007460:	605a      	str	r2, [r3, #4]
 8007462:	609a      	str	r2, [r3, #8]
 8007464:	60da      	str	r2, [r3, #12]
 8007466:	611a      	str	r2, [r3, #16]
 8007468:	615a      	str	r2, [r3, #20]
 800746a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800746c:	4b51      	ldr	r3, [pc, #324]	@ (80075b4 <_ZL12MX_TIM4_Initv+0x178>)
 800746e:	4a52      	ldr	r2, [pc, #328]	@ (80075b8 <_ZL12MX_TIM4_Initv+0x17c>)
 8007470:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8007472:	4b50      	ldr	r3, [pc, #320]	@ (80075b4 <_ZL12MX_TIM4_Initv+0x178>)
 8007474:	2247      	movs	r2, #71	@ 0x47
 8007476:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007478:	4b4e      	ldr	r3, [pc, #312]	@ (80075b4 <_ZL12MX_TIM4_Initv+0x178>)
 800747a:	2200      	movs	r2, #0
 800747c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800747e:	4b4d      	ldr	r3, [pc, #308]	@ (80075b4 <_ZL12MX_TIM4_Initv+0x178>)
 8007480:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007484:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007486:	4b4b      	ldr	r3, [pc, #300]	@ (80075b4 <_ZL12MX_TIM4_Initv+0x178>)
 8007488:	2200      	movs	r2, #0
 800748a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800748c:	4b49      	ldr	r3, [pc, #292]	@ (80075b4 <_ZL12MX_TIM4_Initv+0x178>)
 800748e:	2200      	movs	r2, #0
 8007490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007492:	4848      	ldr	r0, [pc, #288]	@ (80075b4 <_ZL12MX_TIM4_Initv+0x178>)
 8007494:	f004 fcea 	bl	800be6c <HAL_TIM_Base_Init>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	bf14      	ite	ne
 800749e:	2301      	movne	r3, #1
 80074a0:	2300      	moveq	r3, #0
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 80074a8:	f000 f962 	bl	8007770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80074ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80074b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80074b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80074b6:	4619      	mov	r1, r3
 80074b8:	483e      	ldr	r0, [pc, #248]	@ (80075b4 <_ZL12MX_TIM4_Initv+0x178>)
 80074ba:	f004 ff09 	bl	800c2d0 <HAL_TIM_ConfigClockSource>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	bf14      	ite	ne
 80074c4:	2301      	movne	r3, #1
 80074c6:	2300      	moveq	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 80074ce:	f000 f94f 	bl	8007770 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80074d2:	4838      	ldr	r0, [pc, #224]	@ (80075b4 <_ZL12MX_TIM4_Initv+0x178>)
 80074d4:	f004 fd19 	bl	800bf0a <HAL_TIM_PWM_Init>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	bf14      	ite	ne
 80074de:	2301      	movne	r3, #1
 80074e0:	2300      	moveq	r3, #0
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 80074e8:	f000 f942 	bl	8007770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80074ec:	2300      	movs	r3, #0
 80074ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80074f4:	f107 0320 	add.w	r3, r7, #32
 80074f8:	4619      	mov	r1, r3
 80074fa:	482e      	ldr	r0, [pc, #184]	@ (80075b4 <_ZL12MX_TIM4_Initv+0x178>)
 80074fc:	f005 fac6 	bl	800ca8c <HAL_TIMEx_MasterConfigSynchronization>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	bf14      	ite	ne
 8007506:	2301      	movne	r3, #1
 8007508:	2300      	moveq	r3, #0
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 8007510:	f000 f92e 	bl	8007770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007514:	2360      	movs	r3, #96	@ 0x60
 8007516:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007518:	2300      	movs	r3, #0
 800751a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800751c:	2300      	movs	r3, #0
 800751e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007520:	2300      	movs	r3, #0
 8007522:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007524:	1d3b      	adds	r3, r7, #4
 8007526:	2200      	movs	r2, #0
 8007528:	4619      	mov	r1, r3
 800752a:	4822      	ldr	r0, [pc, #136]	@ (80075b4 <_ZL12MX_TIM4_Initv+0x178>)
 800752c:	f004 fe0e 	bl	800c14c <HAL_TIM_PWM_ConfigChannel>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	bf14      	ite	ne
 8007536:	2301      	movne	r3, #1
 8007538:	2300      	moveq	r3, #0
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <_ZL12MX_TIM4_Initv+0x108>
  {
    Error_Handler();
 8007540:	f000 f916 	bl	8007770 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007544:	1d3b      	adds	r3, r7, #4
 8007546:	2204      	movs	r2, #4
 8007548:	4619      	mov	r1, r3
 800754a:	481a      	ldr	r0, [pc, #104]	@ (80075b4 <_ZL12MX_TIM4_Initv+0x178>)
 800754c:	f004 fdfe 	bl	800c14c <HAL_TIM_PWM_ConfigChannel>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	bf14      	ite	ne
 8007556:	2301      	movne	r3, #1
 8007558:	2300      	moveq	r3, #0
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d001      	beq.n	8007564 <_ZL12MX_TIM4_Initv+0x128>
  {
    Error_Handler();
 8007560:	f000 f906 	bl	8007770 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007564:	1d3b      	adds	r3, r7, #4
 8007566:	2208      	movs	r2, #8
 8007568:	4619      	mov	r1, r3
 800756a:	4812      	ldr	r0, [pc, #72]	@ (80075b4 <_ZL12MX_TIM4_Initv+0x178>)
 800756c:	f004 fdee 	bl	800c14c <HAL_TIM_PWM_ConfigChannel>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	bf14      	ite	ne
 8007576:	2301      	movne	r3, #1
 8007578:	2300      	moveq	r3, #0
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <_ZL12MX_TIM4_Initv+0x148>
  {
    Error_Handler();
 8007580:	f000 f8f6 	bl	8007770 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007584:	1d3b      	adds	r3, r7, #4
 8007586:	220c      	movs	r2, #12
 8007588:	4619      	mov	r1, r3
 800758a:	480a      	ldr	r0, [pc, #40]	@ (80075b4 <_ZL12MX_TIM4_Initv+0x178>)
 800758c:	f004 fdde 	bl	800c14c <HAL_TIM_PWM_ConfigChannel>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	bf14      	ite	ne
 8007596:	2301      	movne	r3, #1
 8007598:	2300      	moveq	r3, #0
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b00      	cmp	r3, #0
 800759e:	d001      	beq.n	80075a4 <_ZL12MX_TIM4_Initv+0x168>
  {
    Error_Handler();
 80075a0:	f000 f8e6 	bl	8007770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80075a4:	4803      	ldr	r0, [pc, #12]	@ (80075b4 <_ZL12MX_TIM4_Initv+0x178>)
 80075a6:	f000 fa75 	bl	8007a94 <HAL_TIM_MspPostInit>

}
 80075aa:	bf00      	nop
 80075ac:	3738      	adds	r7, #56	@ 0x38
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	200005ac 	.word	0x200005ac
 80075b8:	40000800 	.word	0x40000800

080075bc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80075c0:	4b13      	ldr	r3, [pc, #76]	@ (8007610 <_ZL19MX_USART1_UART_Initv+0x54>)
 80075c2:	4a14      	ldr	r2, [pc, #80]	@ (8007614 <_ZL19MX_USART1_UART_Initv+0x58>)
 80075c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80075c6:	4b12      	ldr	r3, [pc, #72]	@ (8007610 <_ZL19MX_USART1_UART_Initv+0x54>)
 80075c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80075cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80075ce:	4b10      	ldr	r3, [pc, #64]	@ (8007610 <_ZL19MX_USART1_UART_Initv+0x54>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80075d4:	4b0e      	ldr	r3, [pc, #56]	@ (8007610 <_ZL19MX_USART1_UART_Initv+0x54>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80075da:	4b0d      	ldr	r3, [pc, #52]	@ (8007610 <_ZL19MX_USART1_UART_Initv+0x54>)
 80075dc:	2200      	movs	r2, #0
 80075de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80075e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007610 <_ZL19MX_USART1_UART_Initv+0x54>)
 80075e2:	220c      	movs	r2, #12
 80075e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007610 <_ZL19MX_USART1_UART_Initv+0x54>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80075ec:	4b08      	ldr	r3, [pc, #32]	@ (8007610 <_ZL19MX_USART1_UART_Initv+0x54>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80075f2:	4807      	ldr	r0, [pc, #28]	@ (8007610 <_ZL19MX_USART1_UART_Initv+0x54>)
 80075f4:	f005 fac6 	bl	800cb84 <HAL_UART_Init>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	bf14      	ite	ne
 80075fe:	2301      	movne	r3, #1
 8007600:	2300      	moveq	r3, #0
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8007608:	f000 f8b2 	bl	8007770 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800760c:	bf00      	nop
 800760e:	bd80      	pop	{r7, pc}
 8007610:	200005f4 	.word	0x200005f4
 8007614:	40011000 	.word	0x40011000

08007618 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b08a      	sub	sp, #40	@ 0x28
 800761c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800761e:	f107 0314 	add.w	r3, r7, #20
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]
 8007626:	605a      	str	r2, [r3, #4]
 8007628:	609a      	str	r2, [r3, #8]
 800762a:	60da      	str	r2, [r3, #12]
 800762c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800762e:	2300      	movs	r3, #0
 8007630:	613b      	str	r3, [r7, #16]
 8007632:	4b4a      	ldr	r3, [pc, #296]	@ (800775c <_ZL12MX_GPIO_Initv+0x144>)
 8007634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007636:	4a49      	ldr	r2, [pc, #292]	@ (800775c <_ZL12MX_GPIO_Initv+0x144>)
 8007638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800763c:	6313      	str	r3, [r2, #48]	@ 0x30
 800763e:	4b47      	ldr	r3, [pc, #284]	@ (800775c <_ZL12MX_GPIO_Initv+0x144>)
 8007640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007646:	613b      	str	r3, [r7, #16]
 8007648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800764a:	2300      	movs	r3, #0
 800764c:	60fb      	str	r3, [r7, #12]
 800764e:	4b43      	ldr	r3, [pc, #268]	@ (800775c <_ZL12MX_GPIO_Initv+0x144>)
 8007650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007652:	4a42      	ldr	r2, [pc, #264]	@ (800775c <_ZL12MX_GPIO_Initv+0x144>)
 8007654:	f043 0304 	orr.w	r3, r3, #4
 8007658:	6313      	str	r3, [r2, #48]	@ 0x30
 800765a:	4b40      	ldr	r3, [pc, #256]	@ (800775c <_ZL12MX_GPIO_Initv+0x144>)
 800765c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800765e:	f003 0304 	and.w	r3, r3, #4
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007666:	2300      	movs	r3, #0
 8007668:	60bb      	str	r3, [r7, #8]
 800766a:	4b3c      	ldr	r3, [pc, #240]	@ (800775c <_ZL12MX_GPIO_Initv+0x144>)
 800766c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766e:	4a3b      	ldr	r2, [pc, #236]	@ (800775c <_ZL12MX_GPIO_Initv+0x144>)
 8007670:	f043 0301 	orr.w	r3, r3, #1
 8007674:	6313      	str	r3, [r2, #48]	@ 0x30
 8007676:	4b39      	ldr	r3, [pc, #228]	@ (800775c <_ZL12MX_GPIO_Initv+0x144>)
 8007678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	60bb      	str	r3, [r7, #8]
 8007680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007682:	2300      	movs	r3, #0
 8007684:	607b      	str	r3, [r7, #4]
 8007686:	4b35      	ldr	r3, [pc, #212]	@ (800775c <_ZL12MX_GPIO_Initv+0x144>)
 8007688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768a:	4a34      	ldr	r2, [pc, #208]	@ (800775c <_ZL12MX_GPIO_Initv+0x144>)
 800768c:	f043 0302 	orr.w	r3, r3, #2
 8007690:	6313      	str	r3, [r2, #48]	@ 0x30
 8007692:	4b32      	ldr	r3, [pc, #200]	@ (800775c <_ZL12MX_GPIO_Initv+0x144>)
 8007694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	607b      	str	r3, [r7, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800769e:	2300      	movs	r3, #0
 80076a0:	603b      	str	r3, [r7, #0]
 80076a2:	4b2e      	ldr	r3, [pc, #184]	@ (800775c <_ZL12MX_GPIO_Initv+0x144>)
 80076a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076a6:	4a2d      	ldr	r2, [pc, #180]	@ (800775c <_ZL12MX_GPIO_Initv+0x144>)
 80076a8:	f043 0308 	orr.w	r3, r3, #8
 80076ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80076ae:	4b2b      	ldr	r3, [pc, #172]	@ (800775c <_ZL12MX_GPIO_Initv+0x144>)
 80076b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b2:	f003 0308 	and.w	r3, r3, #8
 80076b6:	603b      	str	r3, [r7, #0]
 80076b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZ_Pin|NRF_CSN_Pin|LED1_Pin, GPIO_PIN_RESET);
 80076ba:	2200      	movs	r2, #0
 80076bc:	f248 0114 	movw	r1, #32788	@ 0x8014
 80076c0:	4827      	ldr	r0, [pc, #156]	@ (8007760 <_ZL12MX_GPIO_Initv+0x148>)
 80076c2:	f001 fba3 	bl	8008e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_CE_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80076c6:	2200      	movs	r2, #0
 80076c8:	f44f 6142 	mov.w	r1, #3104	@ 0xc20
 80076cc:	4825      	ldr	r0, [pc, #148]	@ (8007764 <_ZL12MX_GPIO_Initv+0x14c>)
 80076ce:	f001 fb9d 	bl	8008e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C1_SFYNC_GPIO_Port, I2C1_SFYNC_Pin, GPIO_PIN_RESET);
 80076d2:	2200      	movs	r2, #0
 80076d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80076d8:	4823      	ldr	r0, [pc, #140]	@ (8007768 <_ZL12MX_GPIO_Initv+0x150>)
 80076da:	f001 fb97 	bl	8008e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUZZ_Pin NRF_CSN_Pin LED1_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|NRF_CSN_Pin|LED1_Pin;
 80076de:	f248 0314 	movw	r3, #32788	@ 0x8014
 80076e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076e4:	2301      	movs	r3, #1
 80076e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076e8:	2300      	movs	r3, #0
 80076ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076ec:	2300      	movs	r3, #0
 80076ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076f0:	f107 0314 	add.w	r3, r7, #20
 80076f4:	4619      	mov	r1, r3
 80076f6:	481a      	ldr	r0, [pc, #104]	@ (8007760 <_ZL12MX_GPIO_Initv+0x148>)
 80076f8:	f001 f9ec 	bl	8008ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|LED2_Pin|LED3_Pin;
 80076fc:	f44f 6342 	mov.w	r3, #3104	@ 0xc20
 8007700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007702:	2301      	movs	r3, #1
 8007704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007706:	2300      	movs	r3, #0
 8007708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800770a:	2300      	movs	r3, #0
 800770c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800770e:	f107 0314 	add.w	r3, r7, #20
 8007712:	4619      	mov	r1, r3
 8007714:	4813      	ldr	r0, [pc, #76]	@ (8007764 <_ZL12MX_GPIO_Initv+0x14c>)
 8007716:	f001 f9dd 	bl	8008ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_DRDY_Pin I2C1_INTA_Pin */
  GPIO_InitStruct.Pin = I2C1_DRDY_Pin|I2C1_INTA_Pin;
 800771a:	2303      	movs	r3, #3
 800771c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800771e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8007722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007724:	2300      	movs	r3, #0
 8007726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007728:	f107 0314 	add.w	r3, r7, #20
 800772c:	4619      	mov	r1, r3
 800772e:	480f      	ldr	r0, [pc, #60]	@ (800776c <_ZL12MX_GPIO_Initv+0x154>)
 8007730:	f001 f9d0 	bl	8008ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_SFYNC_Pin */
  GPIO_InitStruct.Pin = I2C1_SFYNC_Pin;
 8007734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800773a:	2301      	movs	r3, #1
 800773c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800773e:	2300      	movs	r3, #0
 8007740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007742:	2300      	movs	r3, #0
 8007744:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(I2C1_SFYNC_GPIO_Port, &GPIO_InitStruct);
 8007746:	f107 0314 	add.w	r3, r7, #20
 800774a:	4619      	mov	r1, r3
 800774c:	4806      	ldr	r0, [pc, #24]	@ (8007768 <_ZL12MX_GPIO_Initv+0x150>)
 800774e:	f001 f9c1 	bl	8008ad4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8007752:	bf00      	nop
 8007754:	3728      	adds	r7, #40	@ 0x28
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	40023800 	.word	0x40023800
 8007760:	40020000 	.word	0x40020000
 8007764:	40020800 	.word	0x40020800
 8007768:	40020400 	.word	0x40020400
 800776c:	40020c00 	.word	0x40020c00

08007770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007770:	b480      	push	{r7}
 8007772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007774:	b672      	cpsid	i
}
 8007776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007778:	bf00      	nop
 800777a:	e7fd      	b.n	8007778 <Error_Handler+0x8>

0800777c <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0
IMU9DOF gy86(&hi2c1,11, 0x080E0000);
 8007780:	4b0a      	ldr	r3, [pc, #40]	@ (80077ac <_Z41__static_initialization_and_destruction_0v+0x30>)
 8007782:	220b      	movs	r2, #11
 8007784:	490a      	ldr	r1, [pc, #40]	@ (80077b0 <_Z41__static_initialization_and_destruction_0v+0x34>)
 8007786:	480b      	ldr	r0, [pc, #44]	@ (80077b4 <_Z41__static_initialization_and_destruction_0v+0x38>)
 8007788:	f7fa ffae 	bl	80026e8 <_ZN7IMU9DOFC1EP17I2C_HandleTypeDefhm>
Barometer ms5611(&hi2c1);
 800778c:	4908      	ldr	r1, [pc, #32]	@ (80077b0 <_Z41__static_initialization_and_destruction_0v+0x34>)
 800778e:	480a      	ldr	r0, [pc, #40]	@ (80077b8 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8007790:	f7fd fb0c 	bl	8004dac <_ZN9BarometerC1EP17I2C_HandleTypeDef>
GPS gpsM8N(LED1_GPIO_Port, LED1_Pin);  // led kiểm tra trạng thái kết nối của GPS
 8007794:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007798:	4908      	ldr	r1, [pc, #32]	@ (80077bc <_Z41__static_initialization_and_destruction_0v+0x40>)
 800779a:	4809      	ldr	r0, [pc, #36]	@ (80077c0 <_Z41__static_initialization_and_destruction_0v+0x44>)
 800779c:	f7f9 ffd8 	bl	8001750 <_ZN3GPSC1EP12GPIO_TypeDeft>
PID_Horizontal pidForHorizontal;
 80077a0:	4808      	ldr	r0, [pc, #32]	@ (80077c4 <_Z41__static_initialization_and_destruction_0v+0x48>)
 80077a2:	f7fd f801 	bl	80047a8 <_ZN14PID_HorizontalC1Ev>
}
 80077a6:	bf00      	nop
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	080e0000 	.word	0x080e0000
 80077b0:	200004ac 	.word	0x200004ac
 80077b4:	200006a0 	.word	0x200006a0
 80077b8:	20000800 	.word	0x20000800
 80077bc:	40020000 	.word	0x40020000
 80077c0:	200009f8 	.word	0x200009f8
 80077c4:	20000c1c 	.word	0x20000c1c

080077c8 <_Z41__static_initialization_and_destruction_1v>:
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
PID_Horizontal pidForHorizontal;
 80077cc:	4802      	ldr	r0, [pc, #8]	@ (80077d8 <_Z41__static_initialization_and_destruction_1v+0x10>)
 80077ce:	f7fc fffb 	bl	80047c8 <_ZN14PID_HorizontalD1Ev>
}
 80077d2:	bf00      	nop
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	20000c1c 	.word	0x20000c1c

080077dc <_GLOBAL__sub_I_hadc1>:
 80077dc:	b580      	push	{r7, lr}
 80077de:	af00      	add	r7, sp, #0
 80077e0:	f7ff ffcc 	bl	800777c <_Z41__static_initialization_and_destruction_0v>
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <_GLOBAL__sub_D_hadc1>:
 80077e6:	b580      	push	{r7, lr}
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	f7ff ffed 	bl	80077c8 <_Z41__static_initialization_and_destruction_1v>
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077f6:	2300      	movs	r3, #0
 80077f8:	607b      	str	r3, [r7, #4]
 80077fa:	4b10      	ldr	r3, [pc, #64]	@ (800783c <HAL_MspInit+0x4c>)
 80077fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077fe:	4a0f      	ldr	r2, [pc, #60]	@ (800783c <HAL_MspInit+0x4c>)
 8007800:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007804:	6453      	str	r3, [r2, #68]	@ 0x44
 8007806:	4b0d      	ldr	r3, [pc, #52]	@ (800783c <HAL_MspInit+0x4c>)
 8007808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800780a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800780e:	607b      	str	r3, [r7, #4]
 8007810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007812:	2300      	movs	r3, #0
 8007814:	603b      	str	r3, [r7, #0]
 8007816:	4b09      	ldr	r3, [pc, #36]	@ (800783c <HAL_MspInit+0x4c>)
 8007818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781a:	4a08      	ldr	r2, [pc, #32]	@ (800783c <HAL_MspInit+0x4c>)
 800781c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007820:	6413      	str	r3, [r2, #64]	@ 0x40
 8007822:	4b06      	ldr	r3, [pc, #24]	@ (800783c <HAL_MspInit+0x4c>)
 8007824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800782e:	bf00      	nop
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	40023800 	.word	0x40023800

08007840 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08a      	sub	sp, #40	@ 0x28
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007848:	f107 0314 	add.w	r3, r7, #20
 800784c:	2200      	movs	r2, #0
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	605a      	str	r2, [r3, #4]
 8007852:	609a      	str	r2, [r3, #8]
 8007854:	60da      	str	r2, [r3, #12]
 8007856:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a17      	ldr	r2, [pc, #92]	@ (80078bc <HAL_ADC_MspInit+0x7c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d127      	bne.n	80078b2 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007862:	2300      	movs	r3, #0
 8007864:	613b      	str	r3, [r7, #16]
 8007866:	4b16      	ldr	r3, [pc, #88]	@ (80078c0 <HAL_ADC_MspInit+0x80>)
 8007868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800786a:	4a15      	ldr	r2, [pc, #84]	@ (80078c0 <HAL_ADC_MspInit+0x80>)
 800786c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007870:	6453      	str	r3, [r2, #68]	@ 0x44
 8007872:	4b13      	ldr	r3, [pc, #76]	@ (80078c0 <HAL_ADC_MspInit+0x80>)
 8007874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800787a:	613b      	str	r3, [r7, #16]
 800787c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800787e:	2300      	movs	r3, #0
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	4b0f      	ldr	r3, [pc, #60]	@ (80078c0 <HAL_ADC_MspInit+0x80>)
 8007884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007886:	4a0e      	ldr	r2, [pc, #56]	@ (80078c0 <HAL_ADC_MspInit+0x80>)
 8007888:	f043 0304 	orr.w	r3, r3, #4
 800788c:	6313      	str	r3, [r2, #48]	@ 0x30
 800788e:	4b0c      	ldr	r3, [pc, #48]	@ (80078c0 <HAL_ADC_MspInit+0x80>)
 8007890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007892:	f003 0304 	and.w	r3, r3, #4
 8007896:	60fb      	str	r3, [r7, #12]
 8007898:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800789a:	2301      	movs	r3, #1
 800789c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800789e:	2303      	movs	r3, #3
 80078a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078a6:	f107 0314 	add.w	r3, r7, #20
 80078aa:	4619      	mov	r1, r3
 80078ac:	4805      	ldr	r0, [pc, #20]	@ (80078c4 <HAL_ADC_MspInit+0x84>)
 80078ae:	f001 f911 	bl	8008ad4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80078b2:	bf00      	nop
 80078b4:	3728      	adds	r7, #40	@ 0x28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	40012000 	.word	0x40012000
 80078c0:	40023800 	.word	0x40023800
 80078c4:	40020800 	.word	0x40020800

080078c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08c      	sub	sp, #48	@ 0x30
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078d0:	f107 031c 	add.w	r3, r7, #28
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	605a      	str	r2, [r3, #4]
 80078da:	609a      	str	r2, [r3, #8]
 80078dc:	60da      	str	r2, [r3, #12]
 80078de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a32      	ldr	r2, [pc, #200]	@ (80079b0 <HAL_I2C_MspInit+0xe8>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d12c      	bne.n	8007944 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078ea:	2300      	movs	r3, #0
 80078ec:	61bb      	str	r3, [r7, #24]
 80078ee:	4b31      	ldr	r3, [pc, #196]	@ (80079b4 <HAL_I2C_MspInit+0xec>)
 80078f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f2:	4a30      	ldr	r2, [pc, #192]	@ (80079b4 <HAL_I2C_MspInit+0xec>)
 80078f4:	f043 0302 	orr.w	r3, r3, #2
 80078f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80078fa:	4b2e      	ldr	r3, [pc, #184]	@ (80079b4 <HAL_I2C_MspInit+0xec>)
 80078fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	61bb      	str	r3, [r7, #24]
 8007904:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007906:	23c0      	movs	r3, #192	@ 0xc0
 8007908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800790a:	2312      	movs	r3, #18
 800790c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800790e:	2300      	movs	r3, #0
 8007910:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007912:	2303      	movs	r3, #3
 8007914:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007916:	2304      	movs	r3, #4
 8007918:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800791a:	f107 031c 	add.w	r3, r7, #28
 800791e:	4619      	mov	r1, r3
 8007920:	4825      	ldr	r0, [pc, #148]	@ (80079b8 <HAL_I2C_MspInit+0xf0>)
 8007922:	f001 f8d7 	bl	8008ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007926:	2300      	movs	r3, #0
 8007928:	617b      	str	r3, [r7, #20]
 800792a:	4b22      	ldr	r3, [pc, #136]	@ (80079b4 <HAL_I2C_MspInit+0xec>)
 800792c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800792e:	4a21      	ldr	r2, [pc, #132]	@ (80079b4 <HAL_I2C_MspInit+0xec>)
 8007930:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007934:	6413      	str	r3, [r2, #64]	@ 0x40
 8007936:	4b1f      	ldr	r3, [pc, #124]	@ (80079b4 <HAL_I2C_MspInit+0xec>)
 8007938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800793e:	617b      	str	r3, [r7, #20]
 8007940:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007942:	e031      	b.n	80079a8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a1c      	ldr	r2, [pc, #112]	@ (80079bc <HAL_I2C_MspInit+0xf4>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d12c      	bne.n	80079a8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800794e:	2300      	movs	r3, #0
 8007950:	613b      	str	r3, [r7, #16]
 8007952:	4b18      	ldr	r3, [pc, #96]	@ (80079b4 <HAL_I2C_MspInit+0xec>)
 8007954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007956:	4a17      	ldr	r2, [pc, #92]	@ (80079b4 <HAL_I2C_MspInit+0xec>)
 8007958:	f043 0302 	orr.w	r3, r3, #2
 800795c:	6313      	str	r3, [r2, #48]	@ 0x30
 800795e:	4b15      	ldr	r3, [pc, #84]	@ (80079b4 <HAL_I2C_MspInit+0xec>)
 8007960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	613b      	str	r3, [r7, #16]
 8007968:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800796a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800796e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007970:	2312      	movs	r3, #18
 8007972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007974:	2300      	movs	r3, #0
 8007976:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007978:	2303      	movs	r3, #3
 800797a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800797c:	2304      	movs	r3, #4
 800797e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007980:	f107 031c 	add.w	r3, r7, #28
 8007984:	4619      	mov	r1, r3
 8007986:	480c      	ldr	r0, [pc, #48]	@ (80079b8 <HAL_I2C_MspInit+0xf0>)
 8007988:	f001 f8a4 	bl	8008ad4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800798c:	2300      	movs	r3, #0
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	4b08      	ldr	r3, [pc, #32]	@ (80079b4 <HAL_I2C_MspInit+0xec>)
 8007992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007994:	4a07      	ldr	r2, [pc, #28]	@ (80079b4 <HAL_I2C_MspInit+0xec>)
 8007996:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800799a:	6413      	str	r3, [r2, #64]	@ 0x40
 800799c:	4b05      	ldr	r3, [pc, #20]	@ (80079b4 <HAL_I2C_MspInit+0xec>)
 800799e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079a4:	60fb      	str	r3, [r7, #12]
 80079a6:	68fb      	ldr	r3, [r7, #12]
}
 80079a8:	bf00      	nop
 80079aa:	3730      	adds	r7, #48	@ 0x30
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	40005400 	.word	0x40005400
 80079b4:	40023800 	.word	0x40023800
 80079b8:	40020400 	.word	0x40020400
 80079bc:	40005800 	.word	0x40005800

080079c0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08a      	sub	sp, #40	@ 0x28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079c8:	f107 0314 	add.w	r3, r7, #20
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]
 80079d0:	605a      	str	r2, [r3, #4]
 80079d2:	609a      	str	r2, [r3, #8]
 80079d4:	60da      	str	r2, [r3, #12]
 80079d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a19      	ldr	r2, [pc, #100]	@ (8007a44 <HAL_SPI_MspInit+0x84>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d12b      	bne.n	8007a3a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80079e2:	2300      	movs	r3, #0
 80079e4:	613b      	str	r3, [r7, #16]
 80079e6:	4b18      	ldr	r3, [pc, #96]	@ (8007a48 <HAL_SPI_MspInit+0x88>)
 80079e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ea:	4a17      	ldr	r2, [pc, #92]	@ (8007a48 <HAL_SPI_MspInit+0x88>)
 80079ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80079f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80079f2:	4b15      	ldr	r3, [pc, #84]	@ (8007a48 <HAL_SPI_MspInit+0x88>)
 80079f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079fa:	613b      	str	r3, [r7, #16]
 80079fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
 8007a02:	4b11      	ldr	r3, [pc, #68]	@ (8007a48 <HAL_SPI_MspInit+0x88>)
 8007a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a06:	4a10      	ldr	r2, [pc, #64]	@ (8007a48 <HAL_SPI_MspInit+0x88>)
 8007a08:	f043 0301 	orr.w	r3, r3, #1
 8007a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007a48 <HAL_SPI_MspInit+0x88>)
 8007a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007a1a:	23e0      	movs	r3, #224	@ 0xe0
 8007a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a1e:	2302      	movs	r3, #2
 8007a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a22:	2300      	movs	r3, #0
 8007a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a26:	2303      	movs	r3, #3
 8007a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007a2a:	2305      	movs	r3, #5
 8007a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a2e:	f107 0314 	add.w	r3, r7, #20
 8007a32:	4619      	mov	r1, r3
 8007a34:	4805      	ldr	r0, [pc, #20]	@ (8007a4c <HAL_SPI_MspInit+0x8c>)
 8007a36:	f001 f84d 	bl	8008ad4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8007a3a:	bf00      	nop
 8007a3c:	3728      	adds	r7, #40	@ 0x28
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	40013000 	.word	0x40013000
 8007a48:	40023800 	.word	0x40023800
 8007a4c:	40020000 	.word	0x40020000

08007a50 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8007a8c <HAL_TIM_Base_MspInit+0x3c>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d10d      	bne.n	8007a7e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	4b0a      	ldr	r3, [pc, #40]	@ (8007a90 <HAL_TIM_Base_MspInit+0x40>)
 8007a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6a:	4a09      	ldr	r2, [pc, #36]	@ (8007a90 <HAL_TIM_Base_MspInit+0x40>)
 8007a6c:	f043 0304 	orr.w	r3, r3, #4
 8007a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a72:	4b07      	ldr	r3, [pc, #28]	@ (8007a90 <HAL_TIM_Base_MspInit+0x40>)
 8007a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a76:	f003 0304 	and.w	r3, r3, #4
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8007a7e:	bf00      	nop
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	40000800 	.word	0x40000800
 8007a90:	40023800 	.word	0x40023800

08007a94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b088      	sub	sp, #32
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a9c:	f107 030c 	add.w	r3, r7, #12
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	601a      	str	r2, [r3, #0]
 8007aa4:	605a      	str	r2, [r3, #4]
 8007aa6:	609a      	str	r2, [r3, #8]
 8007aa8:	60da      	str	r2, [r3, #12]
 8007aaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a12      	ldr	r2, [pc, #72]	@ (8007afc <HAL_TIM_MspPostInit+0x68>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d11e      	bne.n	8007af4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60bb      	str	r3, [r7, #8]
 8007aba:	4b11      	ldr	r3, [pc, #68]	@ (8007b00 <HAL_TIM_MspPostInit+0x6c>)
 8007abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007abe:	4a10      	ldr	r2, [pc, #64]	@ (8007b00 <HAL_TIM_MspPostInit+0x6c>)
 8007ac0:	f043 0308 	orr.w	r3, r3, #8
 8007ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8007b00 <HAL_TIM_MspPostInit+0x6c>)
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aca:	f003 0308 	and.w	r3, r3, #8
 8007ace:	60bb      	str	r3, [r7, #8]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007ad2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8007ad6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ad8:	2302      	movs	r3, #2
 8007ada:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007adc:	2300      	movs	r3, #0
 8007ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ae8:	f107 030c 	add.w	r3, r7, #12
 8007aec:	4619      	mov	r1, r3
 8007aee:	4805      	ldr	r0, [pc, #20]	@ (8007b04 <HAL_TIM_MspPostInit+0x70>)
 8007af0:	f000 fff0 	bl	8008ad4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007af4:	bf00      	nop
 8007af6:	3720      	adds	r7, #32
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	40000800 	.word	0x40000800
 8007b00:	40023800 	.word	0x40023800
 8007b04:	40020c00 	.word	0x40020c00

08007b08 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08a      	sub	sp, #40	@ 0x28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b10:	f107 0314 	add.w	r3, r7, #20
 8007b14:	2200      	movs	r2, #0
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	605a      	str	r2, [r3, #4]
 8007b1a:	609a      	str	r2, [r3, #8]
 8007b1c:	60da      	str	r2, [r3, #12]
 8007b1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a19      	ldr	r2, [pc, #100]	@ (8007b8c <HAL_UART_MspInit+0x84>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d12c      	bne.n	8007b84 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	613b      	str	r3, [r7, #16]
 8007b2e:	4b18      	ldr	r3, [pc, #96]	@ (8007b90 <HAL_UART_MspInit+0x88>)
 8007b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b32:	4a17      	ldr	r2, [pc, #92]	@ (8007b90 <HAL_UART_MspInit+0x88>)
 8007b34:	f043 0310 	orr.w	r3, r3, #16
 8007b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b3a:	4b15      	ldr	r3, [pc, #84]	@ (8007b90 <HAL_UART_MspInit+0x88>)
 8007b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b3e:	f003 0310 	and.w	r3, r3, #16
 8007b42:	613b      	str	r3, [r7, #16]
 8007b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]
 8007b4a:	4b11      	ldr	r3, [pc, #68]	@ (8007b90 <HAL_UART_MspInit+0x88>)
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4e:	4a10      	ldr	r2, [pc, #64]	@ (8007b90 <HAL_UART_MspInit+0x88>)
 8007b50:	f043 0301 	orr.w	r3, r3, #1
 8007b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b56:	4b0e      	ldr	r3, [pc, #56]	@ (8007b90 <HAL_UART_MspInit+0x88>)
 8007b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007b62:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8007b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b68:	2302      	movs	r3, #2
 8007b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b70:	2303      	movs	r3, #3
 8007b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007b74:	2307      	movs	r3, #7
 8007b76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b78:	f107 0314 	add.w	r3, r7, #20
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	4805      	ldr	r0, [pc, #20]	@ (8007b94 <HAL_UART_MspInit+0x8c>)
 8007b80:	f000 ffa8 	bl	8008ad4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8007b84:	bf00      	nop
 8007b86:	3728      	adds	r7, #40	@ 0x28
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	40011000 	.word	0x40011000
 8007b90:	40023800 	.word	0x40023800
 8007b94:	40020000 	.word	0x40020000

08007b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007b9c:	bf00      	nop
 8007b9e:	e7fd      	b.n	8007b9c <NMI_Handler+0x4>

08007ba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007ba4:	bf00      	nop
 8007ba6:	e7fd      	b.n	8007ba4 <HardFault_Handler+0x4>

08007ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007bac:	bf00      	nop
 8007bae:	e7fd      	b.n	8007bac <MemManage_Handler+0x4>

08007bb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007bb4:	bf00      	nop
 8007bb6:	e7fd      	b.n	8007bb4 <BusFault_Handler+0x4>

08007bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007bbc:	bf00      	nop
 8007bbe:	e7fd      	b.n	8007bbc <UsageFault_Handler+0x4>

08007bc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007bc4:	bf00      	nop
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007bd2:	bf00      	nop
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007be0:	bf00      	nop
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007bee:	f000 f957 	bl	8007ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007bf2:	bf00      	nop
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	af00      	add	r7, sp, #0
  return 1;
 8007bfa:	2301      	movs	r3, #1
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <_kill>:

int _kill(int pid, int sig)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007c10:	f009 fa96 	bl	8011140 <__errno>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2216      	movs	r2, #22
 8007c18:	601a      	str	r2, [r3, #0]
  return -1;
 8007c1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <_exit>:

void _exit (int status)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b082      	sub	sp, #8
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007c2e:	f04f 31ff 	mov.w	r1, #4294967295
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7ff ffe7 	bl	8007c06 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007c38:	bf00      	nop
 8007c3a:	e7fd      	b.n	8007c38 <_exit+0x12>

08007c3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c48:	2300      	movs	r3, #0
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	e00a      	b.n	8007c64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007c4e:	f3af 8000 	nop.w
 8007c52:	4601      	mov	r1, r0
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	60ba      	str	r2, [r7, #8]
 8007c5a:	b2ca      	uxtb	r2, r1
 8007c5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	3301      	adds	r3, #1
 8007c62:	617b      	str	r3, [r7, #20]
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	dbf0      	blt.n	8007c4e <_read+0x12>
  }

  return len;
 8007c6c:	687b      	ldr	r3, [r7, #4]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3718      	adds	r7, #24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b086      	sub	sp, #24
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	60f8      	str	r0, [r7, #12]
 8007c7e:	60b9      	str	r1, [r7, #8]
 8007c80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c82:	2300      	movs	r3, #0
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	e009      	b.n	8007c9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	60ba      	str	r2, [r7, #8]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	617b      	str	r3, [r7, #20]
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	dbf1      	blt.n	8007c88 <_write+0x12>
  }
  return len;
 8007ca4:	687b      	ldr	r3, [r7, #4]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3718      	adds	r7, #24
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <_close>:

int _close(int file)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b083      	sub	sp, #12
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b083      	sub	sp, #12
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007cd6:	605a      	str	r2, [r3, #4]
  return 0;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <_isatty>:

int _isatty(int file)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007cee:	2301      	movs	r3, #1
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
	...

08007d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007d20:	4a14      	ldr	r2, [pc, #80]	@ (8007d74 <_sbrk+0x5c>)
 8007d22:	4b15      	ldr	r3, [pc, #84]	@ (8007d78 <_sbrk+0x60>)
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007d2c:	4b13      	ldr	r3, [pc, #76]	@ (8007d7c <_sbrk+0x64>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d102      	bne.n	8007d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007d34:	4b11      	ldr	r3, [pc, #68]	@ (8007d7c <_sbrk+0x64>)
 8007d36:	4a12      	ldr	r2, [pc, #72]	@ (8007d80 <_sbrk+0x68>)
 8007d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007d3a:	4b10      	ldr	r3, [pc, #64]	@ (8007d7c <_sbrk+0x64>)
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4413      	add	r3, r2
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d207      	bcs.n	8007d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007d48:	f009 f9fa 	bl	8011140 <__errno>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	220c      	movs	r2, #12
 8007d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007d52:	f04f 33ff 	mov.w	r3, #4294967295
 8007d56:	e009      	b.n	8007d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007d58:	4b08      	ldr	r3, [pc, #32]	@ (8007d7c <_sbrk+0x64>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007d5e:	4b07      	ldr	r3, [pc, #28]	@ (8007d7c <_sbrk+0x64>)
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4413      	add	r3, r2
 8007d66:	4a05      	ldr	r2, [pc, #20]	@ (8007d7c <_sbrk+0x64>)
 8007d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	20020000 	.word	0x20020000
 8007d78:	00000400 	.word	0x00000400
 8007d7c:	20000cb4 	.word	0x20000cb4
 8007d80:	20000e28 	.word	0x20000e28

08007d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007d84:	b480      	push	{r7}
 8007d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007d88:	4b06      	ldr	r3, [pc, #24]	@ (8007da4 <SystemInit+0x20>)
 8007d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d8e:	4a05      	ldr	r2, [pc, #20]	@ (8007da4 <SystemInit+0x20>)
 8007d90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007d94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007d98:	bf00      	nop
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	e000ed00 	.word	0xe000ed00

08007da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007da8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007de0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007dac:	f7ff ffea 	bl	8007d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007db0:	480c      	ldr	r0, [pc, #48]	@ (8007de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007db2:	490d      	ldr	r1, [pc, #52]	@ (8007de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007db4:	4a0d      	ldr	r2, [pc, #52]	@ (8007dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007db8:	e002      	b.n	8007dc0 <LoopCopyDataInit>

08007dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007dbe:	3304      	adds	r3, #4

08007dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007dc4:	d3f9      	bcc.n	8007dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8007df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007dc8:	4c0a      	ldr	r4, [pc, #40]	@ (8007df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007dcc:	e001      	b.n	8007dd2 <LoopFillZerobss>

08007dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007dd0:	3204      	adds	r2, #4

08007dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007dd4:	d3fb      	bcc.n	8007dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007dd6:	f009 f9b9 	bl	801114c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007dda:	f7fe fe0f 	bl	80069fc <main>
  bx  lr    
 8007dde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007de8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8007dec:	08014de0 	.word	0x08014de0
  ldr r2, =_sbss
 8007df0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8007df4:	20000e28 	.word	0x20000e28

08007df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007df8:	e7fe      	b.n	8007df8 <ADC_IRQHandler>
	...

08007dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007e00:	4b0e      	ldr	r3, [pc, #56]	@ (8007e3c <HAL_Init+0x40>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a0d      	ldr	r2, [pc, #52]	@ (8007e3c <HAL_Init+0x40>)
 8007e06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e3c <HAL_Init+0x40>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a0a      	ldr	r2, [pc, #40]	@ (8007e3c <HAL_Init+0x40>)
 8007e12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007e18:	4b08      	ldr	r3, [pc, #32]	@ (8007e3c <HAL_Init+0x40>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a07      	ldr	r2, [pc, #28]	@ (8007e3c <HAL_Init+0x40>)
 8007e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007e24:	2003      	movs	r0, #3
 8007e26:	f000 fb93 	bl	8008550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007e2a:	200f      	movs	r0, #15
 8007e2c:	f000 f808 	bl	8007e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007e30:	f7ff fcde 	bl	80077f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	40023c00 	.word	0x40023c00

08007e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007e48:	4b12      	ldr	r3, [pc, #72]	@ (8007e94 <HAL_InitTick+0x54>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	4b12      	ldr	r3, [pc, #72]	@ (8007e98 <HAL_InitTick+0x58>)
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	4619      	mov	r1, r3
 8007e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 fb9d 	bl	800859e <HAL_SYSTICK_Config>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e00e      	b.n	8007e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b0f      	cmp	r3, #15
 8007e72:	d80a      	bhi.n	8007e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e74:	2200      	movs	r2, #0
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	f04f 30ff 	mov.w	r0, #4294967295
 8007e7c:	f000 fb73 	bl	8008566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007e80:	4a06      	ldr	r2, [pc, #24]	@ (8007e9c <HAL_InitTick+0x5c>)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	e000      	b.n	8007e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	2000000c 	.word	0x2000000c
 8007e98:	20000014 	.word	0x20000014
 8007e9c:	20000010 	.word	0x20000010

08007ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007ea4:	4b06      	ldr	r3, [pc, #24]	@ (8007ec0 <HAL_IncTick+0x20>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	4b06      	ldr	r3, [pc, #24]	@ (8007ec4 <HAL_IncTick+0x24>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4413      	add	r3, r2
 8007eb0:	4a04      	ldr	r2, [pc, #16]	@ (8007ec4 <HAL_IncTick+0x24>)
 8007eb2:	6013      	str	r3, [r2, #0]
}
 8007eb4:	bf00      	nop
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	20000014 	.word	0x20000014
 8007ec4:	20000cb8 	.word	0x20000cb8

08007ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	af00      	add	r7, sp, #0
  return uwTick;
 8007ecc:	4b03      	ldr	r3, [pc, #12]	@ (8007edc <HAL_GetTick+0x14>)
 8007ece:	681b      	ldr	r3, [r3, #0]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	20000cb8 	.word	0x20000cb8

08007ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007ee8:	f7ff ffee 	bl	8007ec8 <HAL_GetTick>
 8007eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef8:	d005      	beq.n	8007f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007efa:	4b0a      	ldr	r3, [pc, #40]	@ (8007f24 <HAL_Delay+0x44>)
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4413      	add	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007f06:	bf00      	nop
 8007f08:	f7ff ffde 	bl	8007ec8 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d8f7      	bhi.n	8007f08 <HAL_Delay+0x28>
  {
  }
}
 8007f18:	bf00      	nop
 8007f1a:	bf00      	nop
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20000014 	.word	0x20000014

08007f28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e033      	b.n	8007fa6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d109      	bne.n	8007f5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7ff fc7a 	bl	8007840 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f5e:	f003 0310 	and.w	r3, r3, #16
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d118      	bne.n	8007f98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f6a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007f6e:	f023 0302 	bic.w	r3, r3, #2
 8007f72:	f043 0202 	orr.w	r2, r3, #2
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f93a 	bl	80081f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8a:	f023 0303 	bic.w	r3, r3, #3
 8007f8e:	f043 0201 	orr.w	r2, r3, #1
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	641a      	str	r2, [r3, #64]	@ 0x40
 8007f96:	e001      	b.n	8007f9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
	...

08007fb0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d101      	bne.n	8007fcc <HAL_ADC_ConfigChannel+0x1c>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	e105      	b.n	80081d8 <HAL_ADC_ConfigChannel+0x228>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b09      	cmp	r3, #9
 8007fda:	d925      	bls.n	8008028 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68d9      	ldr	r1, [r3, #12]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	461a      	mov	r2, r3
 8007fea:	4613      	mov	r3, r2
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	4413      	add	r3, r2
 8007ff0:	3b1e      	subs	r3, #30
 8007ff2:	2207      	movs	r2, #7
 8007ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff8:	43da      	mvns	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	400a      	ands	r2, r1
 8008000:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68d9      	ldr	r1, [r3, #12]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	b29b      	uxth	r3, r3
 8008012:	4618      	mov	r0, r3
 8008014:	4603      	mov	r3, r0
 8008016:	005b      	lsls	r3, r3, #1
 8008018:	4403      	add	r3, r0
 800801a:	3b1e      	subs	r3, #30
 800801c:	409a      	lsls	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	60da      	str	r2, [r3, #12]
 8008026:	e022      	b.n	800806e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6919      	ldr	r1, [r3, #16]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	461a      	mov	r2, r3
 8008036:	4613      	mov	r3, r2
 8008038:	005b      	lsls	r3, r3, #1
 800803a:	4413      	add	r3, r2
 800803c:	2207      	movs	r2, #7
 800803e:	fa02 f303 	lsl.w	r3, r2, r3
 8008042:	43da      	mvns	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	400a      	ands	r2, r1
 800804a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6919      	ldr	r1, [r3, #16]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	689a      	ldr	r2, [r3, #8]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	b29b      	uxth	r3, r3
 800805c:	4618      	mov	r0, r3
 800805e:	4603      	mov	r3, r0
 8008060:	005b      	lsls	r3, r3, #1
 8008062:	4403      	add	r3, r0
 8008064:	409a      	lsls	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	430a      	orrs	r2, r1
 800806c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	2b06      	cmp	r3, #6
 8008074:	d824      	bhi.n	80080c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	4613      	mov	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	3b05      	subs	r3, #5
 8008088:	221f      	movs	r2, #31
 800808a:	fa02 f303 	lsl.w	r3, r2, r3
 800808e:	43da      	mvns	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	400a      	ands	r2, r1
 8008096:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	4618      	mov	r0, r3
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	4613      	mov	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	3b05      	subs	r3, #5
 80080b2:	fa00 f203 	lsl.w	r2, r0, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80080be:	e04c      	b.n	800815a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2b0c      	cmp	r3, #12
 80080c6:	d824      	bhi.n	8008112 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	4613      	mov	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	4413      	add	r3, r2
 80080d8:	3b23      	subs	r3, #35	@ 0x23
 80080da:	221f      	movs	r2, #31
 80080dc:	fa02 f303 	lsl.w	r3, r2, r3
 80080e0:	43da      	mvns	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	400a      	ands	r2, r1
 80080e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	4618      	mov	r0, r3
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	4613      	mov	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	3b23      	subs	r3, #35	@ 0x23
 8008104:	fa00 f203 	lsl.w	r2, r0, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008110:	e023      	b.n	800815a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	4613      	mov	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	3b41      	subs	r3, #65	@ 0x41
 8008124:	221f      	movs	r2, #31
 8008126:	fa02 f303 	lsl.w	r3, r2, r3
 800812a:	43da      	mvns	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	400a      	ands	r2, r1
 8008132:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	b29b      	uxth	r3, r3
 8008140:	4618      	mov	r0, r3
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	4613      	mov	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	3b41      	subs	r3, #65	@ 0x41
 800814e:	fa00 f203 	lsl.w	r2, r0, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	430a      	orrs	r2, r1
 8008158:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800815a:	4b22      	ldr	r3, [pc, #136]	@ (80081e4 <HAL_ADC_ConfigChannel+0x234>)
 800815c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a21      	ldr	r2, [pc, #132]	@ (80081e8 <HAL_ADC_ConfigChannel+0x238>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d109      	bne.n	800817c <HAL_ADC_ConfigChannel+0x1cc>
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2b12      	cmp	r3, #18
 800816e:	d105      	bne.n	800817c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a19      	ldr	r2, [pc, #100]	@ (80081e8 <HAL_ADC_ConfigChannel+0x238>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d123      	bne.n	80081ce <HAL_ADC_ConfigChannel+0x21e>
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b10      	cmp	r3, #16
 800818c:	d003      	beq.n	8008196 <HAL_ADC_ConfigChannel+0x1e6>
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b11      	cmp	r3, #17
 8008194:	d11b      	bne.n	80081ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b10      	cmp	r3, #16
 80081a8:	d111      	bne.n	80081ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80081aa:	4b10      	ldr	r3, [pc, #64]	@ (80081ec <HAL_ADC_ConfigChannel+0x23c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a10      	ldr	r2, [pc, #64]	@ (80081f0 <HAL_ADC_ConfigChannel+0x240>)
 80081b0:	fba2 2303 	umull	r2, r3, r2, r3
 80081b4:	0c9a      	lsrs	r2, r3, #18
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80081c0:	e002      	b.n	80081c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	3b01      	subs	r3, #1
 80081c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1f9      	bne.n	80081c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	40012300 	.word	0x40012300
 80081e8:	40012000 	.word	0x40012000
 80081ec:	2000000c 	.word	0x2000000c
 80081f0:	431bde83 	.word	0x431bde83

080081f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80081fc:	4b79      	ldr	r3, [pc, #484]	@ (80083e4 <ADC_Init+0x1f0>)
 80081fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	431a      	orrs	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008228:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	6859      	ldr	r1, [r3, #4]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	021a      	lsls	r2, r3, #8
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	685a      	ldr	r2, [r3, #4]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800824c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	6859      	ldr	r1, [r3, #4]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	689a      	ldr	r2, [r3, #8]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	430a      	orrs	r2, r1
 800825e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689a      	ldr	r2, [r3, #8]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800826e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6899      	ldr	r1, [r3, #8]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	430a      	orrs	r2, r1
 8008280:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008286:	4a58      	ldr	r2, [pc, #352]	@ (80083e8 <ADC_Init+0x1f4>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d022      	beq.n	80082d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	689a      	ldr	r2, [r3, #8]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800829a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6899      	ldr	r1, [r3, #8]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	689a      	ldr	r2, [r3, #8]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80082bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6899      	ldr	r1, [r3, #8]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	430a      	orrs	r2, r1
 80082ce:	609a      	str	r2, [r3, #8]
 80082d0:	e00f      	b.n	80082f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	689a      	ldr	r2, [r3, #8]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80082e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80082f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f022 0202 	bic.w	r2, r2, #2
 8008300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	6899      	ldr	r1, [r3, #8]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	7e1b      	ldrb	r3, [r3, #24]
 800830c:	005a      	lsls	r2, r3, #1
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 3020 	ldrb.w	r3, [r3, #32]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d01b      	beq.n	8008358 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800832e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	685a      	ldr	r2, [r3, #4]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800833e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6859      	ldr	r1, [r3, #4]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800834a:	3b01      	subs	r3, #1
 800834c:	035a      	lsls	r2, r3, #13
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	430a      	orrs	r2, r1
 8008354:	605a      	str	r2, [r3, #4]
 8008356:	e007      	b.n	8008368 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008366:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8008376:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	3b01      	subs	r3, #1
 8008384:	051a      	lsls	r2, r3, #20
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	430a      	orrs	r2, r1
 800838c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800839c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6899      	ldr	r1, [r3, #8]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80083aa:	025a      	lsls	r2, r3, #9
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	430a      	orrs	r2, r1
 80083b2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	689a      	ldr	r2, [r3, #8]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6899      	ldr	r1, [r3, #8]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	029a      	lsls	r2, r3, #10
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	430a      	orrs	r2, r1
 80083d6:	609a      	str	r2, [r3, #8]
}
 80083d8:	bf00      	nop
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	40012300 	.word	0x40012300
 80083e8:	0f000001 	.word	0x0f000001

080083ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f003 0307 	and.w	r3, r3, #7
 80083fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008430 <__NVIC_SetPriorityGrouping+0x44>)
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008408:	4013      	ands	r3, r2
 800840a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008414:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800841c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800841e:	4a04      	ldr	r2, [pc, #16]	@ (8008430 <__NVIC_SetPriorityGrouping+0x44>)
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	60d3      	str	r3, [r2, #12]
}
 8008424:	bf00      	nop
 8008426:	3714      	adds	r7, #20
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	e000ed00 	.word	0xe000ed00

08008434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008434:	b480      	push	{r7}
 8008436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008438:	4b04      	ldr	r3, [pc, #16]	@ (800844c <__NVIC_GetPriorityGrouping+0x18>)
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	0a1b      	lsrs	r3, r3, #8
 800843e:	f003 0307 	and.w	r3, r3, #7
}
 8008442:	4618      	mov	r0, r3
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	e000ed00 	.word	0xe000ed00

08008450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	4603      	mov	r3, r0
 8008458:	6039      	str	r1, [r7, #0]
 800845a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800845c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008460:	2b00      	cmp	r3, #0
 8008462:	db0a      	blt.n	800847a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	b2da      	uxtb	r2, r3
 8008468:	490c      	ldr	r1, [pc, #48]	@ (800849c <__NVIC_SetPriority+0x4c>)
 800846a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800846e:	0112      	lsls	r2, r2, #4
 8008470:	b2d2      	uxtb	r2, r2
 8008472:	440b      	add	r3, r1
 8008474:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008478:	e00a      	b.n	8008490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	b2da      	uxtb	r2, r3
 800847e:	4908      	ldr	r1, [pc, #32]	@ (80084a0 <__NVIC_SetPriority+0x50>)
 8008480:	79fb      	ldrb	r3, [r7, #7]
 8008482:	f003 030f 	and.w	r3, r3, #15
 8008486:	3b04      	subs	r3, #4
 8008488:	0112      	lsls	r2, r2, #4
 800848a:	b2d2      	uxtb	r2, r2
 800848c:	440b      	add	r3, r1
 800848e:	761a      	strb	r2, [r3, #24]
}
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	e000e100 	.word	0xe000e100
 80084a0:	e000ed00 	.word	0xe000ed00

080084a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b089      	sub	sp, #36	@ 0x24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	f1c3 0307 	rsb	r3, r3, #7
 80084be:	2b04      	cmp	r3, #4
 80084c0:	bf28      	it	cs
 80084c2:	2304      	movcs	r3, #4
 80084c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	3304      	adds	r3, #4
 80084ca:	2b06      	cmp	r3, #6
 80084cc:	d902      	bls.n	80084d4 <NVIC_EncodePriority+0x30>
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	3b03      	subs	r3, #3
 80084d2:	e000      	b.n	80084d6 <NVIC_EncodePriority+0x32>
 80084d4:	2300      	movs	r3, #0
 80084d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084d8:	f04f 32ff 	mov.w	r2, #4294967295
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	fa02 f303 	lsl.w	r3, r2, r3
 80084e2:	43da      	mvns	r2, r3
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	401a      	ands	r2, r3
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80084ec:	f04f 31ff 	mov.w	r1, #4294967295
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	fa01 f303 	lsl.w	r3, r1, r3
 80084f6:	43d9      	mvns	r1, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084fc:	4313      	orrs	r3, r2
         );
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3724      	adds	r7, #36	@ 0x24
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
	...

0800850c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	3b01      	subs	r3, #1
 8008518:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800851c:	d301      	bcc.n	8008522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800851e:	2301      	movs	r3, #1
 8008520:	e00f      	b.n	8008542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008522:	4a0a      	ldr	r2, [pc, #40]	@ (800854c <SysTick_Config+0x40>)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3b01      	subs	r3, #1
 8008528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800852a:	210f      	movs	r1, #15
 800852c:	f04f 30ff 	mov.w	r0, #4294967295
 8008530:	f7ff ff8e 	bl	8008450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008534:	4b05      	ldr	r3, [pc, #20]	@ (800854c <SysTick_Config+0x40>)
 8008536:	2200      	movs	r2, #0
 8008538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800853a:	4b04      	ldr	r3, [pc, #16]	@ (800854c <SysTick_Config+0x40>)
 800853c:	2207      	movs	r2, #7
 800853e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	e000e010 	.word	0xe000e010

08008550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7ff ff47 	bl	80083ec <__NVIC_SetPriorityGrouping>
}
 800855e:	bf00      	nop
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008566:	b580      	push	{r7, lr}
 8008568:	b086      	sub	sp, #24
 800856a:	af00      	add	r7, sp, #0
 800856c:	4603      	mov	r3, r0
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	607a      	str	r2, [r7, #4]
 8008572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008574:	2300      	movs	r3, #0
 8008576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008578:	f7ff ff5c 	bl	8008434 <__NVIC_GetPriorityGrouping>
 800857c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	68b9      	ldr	r1, [r7, #8]
 8008582:	6978      	ldr	r0, [r7, #20]
 8008584:	f7ff ff8e 	bl	80084a4 <NVIC_EncodePriority>
 8008588:	4602      	mov	r2, r0
 800858a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800858e:	4611      	mov	r1, r2
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff ff5d 	bl	8008450 <__NVIC_SetPriority>
}
 8008596:	bf00      	nop
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b082      	sub	sp, #8
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7ff ffb0 	bl	800850c <SysTick_Config>
 80085ac:	4603      	mov	r3, r0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80085c4:	f7ff fc80 	bl	8007ec8 <HAL_GetTick>
 80085c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d008      	beq.n	80085e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2280      	movs	r2, #128	@ 0x80
 80085da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e052      	b.n	800868e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f022 0216 	bic.w	r2, r2, #22
 80085f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	695a      	ldr	r2, [r3, #20]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008606:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800860c:	2b00      	cmp	r3, #0
 800860e:	d103      	bne.n	8008618 <HAL_DMA_Abort+0x62>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008614:	2b00      	cmp	r3, #0
 8008616:	d007      	beq.n	8008628 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f022 0208 	bic.w	r2, r2, #8
 8008626:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f022 0201 	bic.w	r2, r2, #1
 8008636:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008638:	e013      	b.n	8008662 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800863a:	f7ff fc45 	bl	8007ec8 <HAL_GetTick>
 800863e:	4602      	mov	r2, r0
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	2b05      	cmp	r3, #5
 8008646:	d90c      	bls.n	8008662 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2220      	movs	r2, #32
 800864c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2203      	movs	r2, #3
 8008652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e015      	b.n	800868e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e4      	bne.n	800863a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008674:	223f      	movs	r2, #63	@ 0x3f
 8008676:	409a      	lsls	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008696:	b480      	push	{r7}
 8008698:	b083      	sub	sp, #12
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d004      	beq.n	80086b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2280      	movs	r2, #128	@ 0x80
 80086ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e00c      	b.n	80086ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2205      	movs	r2, #5
 80086b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f022 0201 	bic.w	r2, r2, #1
 80086ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
	...

080086dc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80086ea:	4b23      	ldr	r3, [pc, #140]	@ (8008778 <HAL_FLASH_Program+0x9c>)
 80086ec:	7e1b      	ldrb	r3, [r3, #24]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d101      	bne.n	80086f6 <HAL_FLASH_Program+0x1a>
 80086f2:	2302      	movs	r3, #2
 80086f4:	e03b      	b.n	800876e <HAL_FLASH_Program+0x92>
 80086f6:	4b20      	ldr	r3, [pc, #128]	@ (8008778 <HAL_FLASH_Program+0x9c>)
 80086f8:	2201      	movs	r2, #1
 80086fa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80086fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008700:	f000 f870 	bl	80087e4 <FLASH_WaitForLastOperation>
 8008704:	4603      	mov	r3, r0
 8008706:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8008708:	7dfb      	ldrb	r3, [r7, #23]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d12b      	bne.n	8008766 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d105      	bne.n	8008720 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8008714:	783b      	ldrb	r3, [r7, #0]
 8008716:	4619      	mov	r1, r3
 8008718:	68b8      	ldr	r0, [r7, #8]
 800871a:	f000 f91b 	bl	8008954 <FLASH_Program_Byte>
 800871e:	e016      	b.n	800874e <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d105      	bne.n	8008732 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8008726:	883b      	ldrh	r3, [r7, #0]
 8008728:	4619      	mov	r1, r3
 800872a:	68b8      	ldr	r0, [r7, #8]
 800872c:	f000 f8ee 	bl	800890c <FLASH_Program_HalfWord>
 8008730:	e00d      	b.n	800874e <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2b02      	cmp	r3, #2
 8008736:	d105      	bne.n	8008744 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	4619      	mov	r1, r3
 800873c:	68b8      	ldr	r0, [r7, #8]
 800873e:	f000 f8c3 	bl	80088c8 <FLASH_Program_Word>
 8008742:	e004      	b.n	800874e <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8008744:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008748:	68b8      	ldr	r0, [r7, #8]
 800874a:	f000 f88b 	bl	8008864 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800874e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008752:	f000 f847 	bl	80087e4 <FLASH_WaitForLastOperation>
 8008756:	4603      	mov	r3, r0
 8008758:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800875a:	4b08      	ldr	r3, [pc, #32]	@ (800877c <HAL_FLASH_Program+0xa0>)
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	4a07      	ldr	r2, [pc, #28]	@ (800877c <HAL_FLASH_Program+0xa0>)
 8008760:	f023 0301 	bic.w	r3, r3, #1
 8008764:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008766:	4b04      	ldr	r3, [pc, #16]	@ (8008778 <HAL_FLASH_Program+0x9c>)
 8008768:	2200      	movs	r2, #0
 800876a:	761a      	strb	r2, [r3, #24]

  return status;
 800876c:	7dfb      	ldrb	r3, [r7, #23]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20000cbc 	.word	0x20000cbc
 800877c:	40023c00 	.word	0x40023c00

08008780 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800878a:	4b0b      	ldr	r3, [pc, #44]	@ (80087b8 <HAL_FLASH_Unlock+0x38>)
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	2b00      	cmp	r3, #0
 8008790:	da0b      	bge.n	80087aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008792:	4b09      	ldr	r3, [pc, #36]	@ (80087b8 <HAL_FLASH_Unlock+0x38>)
 8008794:	4a09      	ldr	r2, [pc, #36]	@ (80087bc <HAL_FLASH_Unlock+0x3c>)
 8008796:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008798:	4b07      	ldr	r3, [pc, #28]	@ (80087b8 <HAL_FLASH_Unlock+0x38>)
 800879a:	4a09      	ldr	r2, [pc, #36]	@ (80087c0 <HAL_FLASH_Unlock+0x40>)
 800879c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800879e:	4b06      	ldr	r3, [pc, #24]	@ (80087b8 <HAL_FLASH_Unlock+0x38>)
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	da01      	bge.n	80087aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80087aa:	79fb      	ldrb	r3, [r7, #7]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	40023c00 	.word	0x40023c00
 80087bc:	45670123 	.word	0x45670123
 80087c0:	cdef89ab 	.word	0xcdef89ab

080087c4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80087c4:	b480      	push	{r7}
 80087c6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80087c8:	4b05      	ldr	r3, [pc, #20]	@ (80087e0 <HAL_FLASH_Lock+0x1c>)
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	4a04      	ldr	r2, [pc, #16]	@ (80087e0 <HAL_FLASH_Lock+0x1c>)
 80087ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80087d2:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	40023c00 	.word	0x40023c00

080087e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80087f0:	4b1a      	ldr	r3, [pc, #104]	@ (800885c <FLASH_WaitForLastOperation+0x78>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80087f6:	f7ff fb67 	bl	8007ec8 <HAL_GetTick>
 80087fa:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80087fc:	e010      	b.n	8008820 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008804:	d00c      	beq.n	8008820 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d007      	beq.n	800881c <FLASH_WaitForLastOperation+0x38>
 800880c:	f7ff fb5c 	bl	8007ec8 <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	429a      	cmp	r2, r3
 800881a:	d201      	bcs.n	8008820 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e019      	b.n	8008854 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8008820:	4b0f      	ldr	r3, [pc, #60]	@ (8008860 <FLASH_WaitForLastOperation+0x7c>)
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1e8      	bne.n	80087fe <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800882c:	4b0c      	ldr	r3, [pc, #48]	@ (8008860 <FLASH_WaitForLastOperation+0x7c>)
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008838:	4b09      	ldr	r3, [pc, #36]	@ (8008860 <FLASH_WaitForLastOperation+0x7c>)
 800883a:	2201      	movs	r2, #1
 800883c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800883e:	4b08      	ldr	r3, [pc, #32]	@ (8008860 <FLASH_WaitForLastOperation+0x7c>)
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8008846:	2b00      	cmp	r3, #0
 8008848:	d003      	beq.n	8008852 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800884a:	f000 f8a5 	bl	8008998 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e000      	b.n	8008854 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8008852:	2300      	movs	r3, #0

}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	20000cbc 	.word	0x20000cbc
 8008860:	40023c00 	.word	0x40023c00

08008864 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008870:	4b14      	ldr	r3, [pc, #80]	@ (80088c4 <FLASH_Program_DoubleWord+0x60>)
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	4a13      	ldr	r2, [pc, #76]	@ (80088c4 <FLASH_Program_DoubleWord+0x60>)
 8008876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800887a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800887c:	4b11      	ldr	r3, [pc, #68]	@ (80088c4 <FLASH_Program_DoubleWord+0x60>)
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	4a10      	ldr	r2, [pc, #64]	@ (80088c4 <FLASH_Program_DoubleWord+0x60>)
 8008882:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008886:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008888:	4b0e      	ldr	r3, [pc, #56]	@ (80088c4 <FLASH_Program_DoubleWord+0x60>)
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	4a0d      	ldr	r2, [pc, #52]	@ (80088c4 <FLASH_Program_DoubleWord+0x60>)
 800888e:	f043 0301 	orr.w	r3, r3, #1
 8008892:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800889a:	f3bf 8f6f 	isb	sy
}
 800889e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80088a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088a4:	f04f 0200 	mov.w	r2, #0
 80088a8:	f04f 0300 	mov.w	r3, #0
 80088ac:	000a      	movs	r2, r1
 80088ae:	2300      	movs	r3, #0
 80088b0:	68f9      	ldr	r1, [r7, #12]
 80088b2:	3104      	adds	r1, #4
 80088b4:	4613      	mov	r3, r2
 80088b6:	600b      	str	r3, [r1, #0]
}
 80088b8:	bf00      	nop
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	40023c00 	.word	0x40023c00

080088c8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80088d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008908 <FLASH_Program_Word+0x40>)
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008908 <FLASH_Program_Word+0x40>)
 80088d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80088de:	4b0a      	ldr	r3, [pc, #40]	@ (8008908 <FLASH_Program_Word+0x40>)
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	4a09      	ldr	r2, [pc, #36]	@ (8008908 <FLASH_Program_Word+0x40>)
 80088e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80088e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80088ea:	4b07      	ldr	r3, [pc, #28]	@ (8008908 <FLASH_Program_Word+0x40>)
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	4a06      	ldr	r2, [pc, #24]	@ (8008908 <FLASH_Program_Word+0x40>)
 80088f0:	f043 0301 	orr.w	r3, r3, #1
 80088f4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	601a      	str	r2, [r3, #0]
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr
 8008908:	40023c00 	.word	0x40023c00

0800890c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	460b      	mov	r3, r1
 8008916:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008918:	4b0d      	ldr	r3, [pc, #52]	@ (8008950 <FLASH_Program_HalfWord+0x44>)
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	4a0c      	ldr	r2, [pc, #48]	@ (8008950 <FLASH_Program_HalfWord+0x44>)
 800891e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008922:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8008924:	4b0a      	ldr	r3, [pc, #40]	@ (8008950 <FLASH_Program_HalfWord+0x44>)
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	4a09      	ldr	r2, [pc, #36]	@ (8008950 <FLASH_Program_HalfWord+0x44>)
 800892a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800892e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008930:	4b07      	ldr	r3, [pc, #28]	@ (8008950 <FLASH_Program_HalfWord+0x44>)
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	4a06      	ldr	r2, [pc, #24]	@ (8008950 <FLASH_Program_HalfWord+0x44>)
 8008936:	f043 0301 	orr.w	r3, r3, #1
 800893a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	887a      	ldrh	r2, [r7, #2]
 8008940:	801a      	strh	r2, [r3, #0]
}
 8008942:	bf00      	nop
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	40023c00 	.word	0x40023c00

08008954 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008960:	4b0c      	ldr	r3, [pc, #48]	@ (8008994 <FLASH_Program_Byte+0x40>)
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	4a0b      	ldr	r2, [pc, #44]	@ (8008994 <FLASH_Program_Byte+0x40>)
 8008966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800896a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800896c:	4b09      	ldr	r3, [pc, #36]	@ (8008994 <FLASH_Program_Byte+0x40>)
 800896e:	4a09      	ldr	r2, [pc, #36]	@ (8008994 <FLASH_Program_Byte+0x40>)
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008974:	4b07      	ldr	r3, [pc, #28]	@ (8008994 <FLASH_Program_Byte+0x40>)
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	4a06      	ldr	r2, [pc, #24]	@ (8008994 <FLASH_Program_Byte+0x40>)
 800897a:	f043 0301 	orr.w	r3, r3, #1
 800897e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	78fa      	ldrb	r2, [r7, #3]
 8008984:	701a      	strb	r2, [r3, #0]
}
 8008986:	bf00      	nop
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	40023c00 	.word	0x40023c00

08008998 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8008998:	b480      	push	{r7}
 800899a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800899c:	4b27      	ldr	r3, [pc, #156]	@ (8008a3c <FLASH_SetErrorCode+0xa4>)
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	f003 0310 	and.w	r3, r3, #16
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d008      	beq.n	80089ba <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80089a8:	4b25      	ldr	r3, [pc, #148]	@ (8008a40 <FLASH_SetErrorCode+0xa8>)
 80089aa:	69db      	ldr	r3, [r3, #28]
 80089ac:	f043 0310 	orr.w	r3, r3, #16
 80089b0:	4a23      	ldr	r2, [pc, #140]	@ (8008a40 <FLASH_SetErrorCode+0xa8>)
 80089b2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80089b4:	4b21      	ldr	r3, [pc, #132]	@ (8008a3c <FLASH_SetErrorCode+0xa4>)
 80089b6:	2210      	movs	r2, #16
 80089b8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80089ba:	4b20      	ldr	r3, [pc, #128]	@ (8008a3c <FLASH_SetErrorCode+0xa4>)
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	f003 0320 	and.w	r3, r3, #32
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d008      	beq.n	80089d8 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80089c6:	4b1e      	ldr	r3, [pc, #120]	@ (8008a40 <FLASH_SetErrorCode+0xa8>)
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	f043 0308 	orr.w	r3, r3, #8
 80089ce:	4a1c      	ldr	r2, [pc, #112]	@ (8008a40 <FLASH_SetErrorCode+0xa8>)
 80089d0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80089d2:	4b1a      	ldr	r3, [pc, #104]	@ (8008a3c <FLASH_SetErrorCode+0xa4>)
 80089d4:	2220      	movs	r2, #32
 80089d6:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80089d8:	4b18      	ldr	r3, [pc, #96]	@ (8008a3c <FLASH_SetErrorCode+0xa4>)
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d008      	beq.n	80089f6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80089e4:	4b16      	ldr	r3, [pc, #88]	@ (8008a40 <FLASH_SetErrorCode+0xa8>)
 80089e6:	69db      	ldr	r3, [r3, #28]
 80089e8:	f043 0304 	orr.w	r3, r3, #4
 80089ec:	4a14      	ldr	r2, [pc, #80]	@ (8008a40 <FLASH_SetErrorCode+0xa8>)
 80089ee:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80089f0:	4b12      	ldr	r3, [pc, #72]	@ (8008a3c <FLASH_SetErrorCode+0xa4>)
 80089f2:	2240      	movs	r2, #64	@ 0x40
 80089f4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80089f6:	4b11      	ldr	r3, [pc, #68]	@ (8008a3c <FLASH_SetErrorCode+0xa4>)
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d008      	beq.n	8008a14 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8008a02:	4b0f      	ldr	r3, [pc, #60]	@ (8008a40 <FLASH_SetErrorCode+0xa8>)
 8008a04:	69db      	ldr	r3, [r3, #28]
 8008a06:	f043 0302 	orr.w	r3, r3, #2
 8008a0a:	4a0d      	ldr	r2, [pc, #52]	@ (8008a40 <FLASH_SetErrorCode+0xa8>)
 8008a0c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8008a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8008a3c <FLASH_SetErrorCode+0xa4>)
 8008a10:	2280      	movs	r2, #128	@ 0x80
 8008a12:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8008a14:	4b09      	ldr	r3, [pc, #36]	@ (8008a3c <FLASH_SetErrorCode+0xa4>)
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d008      	beq.n	8008a32 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8008a20:	4b07      	ldr	r3, [pc, #28]	@ (8008a40 <FLASH_SetErrorCode+0xa8>)
 8008a22:	69db      	ldr	r3, [r3, #28]
 8008a24:	f043 0320 	orr.w	r3, r3, #32
 8008a28:	4a05      	ldr	r2, [pc, #20]	@ (8008a40 <FLASH_SetErrorCode+0xa8>)
 8008a2a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8008a2c:	4b03      	ldr	r3, [pc, #12]	@ (8008a3c <FLASH_SetErrorCode+0xa4>)
 8008a2e:	2202      	movs	r2, #2
 8008a30:	60da      	str	r2, [r3, #12]
  }
}
 8008a32:	bf00      	nop
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	40023c00 	.word	0x40023c00
 8008a40:	20000cbc 	.word	0x20000cbc

08008a44 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8008a54:	78fb      	ldrb	r3, [r7, #3]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d102      	bne.n	8008a60 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	60fb      	str	r3, [r7, #12]
 8008a5e:	e010      	b.n	8008a82 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8008a60:	78fb      	ldrb	r3, [r7, #3]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d103      	bne.n	8008a6e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8008a66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008a6a:	60fb      	str	r3, [r7, #12]
 8008a6c:	e009      	b.n	8008a82 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8008a6e:	78fb      	ldrb	r3, [r7, #3]
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d103      	bne.n	8008a7c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8008a74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a78:	60fb      	str	r3, [r7, #12]
 8008a7a:	e002      	b.n	8008a82 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8008a7c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008a80:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008a82:	4b13      	ldr	r3, [pc, #76]	@ (8008ad0 <FLASH_Erase_Sector+0x8c>)
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	4a12      	ldr	r2, [pc, #72]	@ (8008ad0 <FLASH_Erase_Sector+0x8c>)
 8008a88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a8c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8008a8e:	4b10      	ldr	r3, [pc, #64]	@ (8008ad0 <FLASH_Erase_Sector+0x8c>)
 8008a90:	691a      	ldr	r2, [r3, #16]
 8008a92:	490f      	ldr	r1, [pc, #60]	@ (8008ad0 <FLASH_Erase_Sector+0x8c>)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8008a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad0 <FLASH_Erase_Sector+0x8c>)
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8008ad0 <FLASH_Erase_Sector+0x8c>)
 8008aa0:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8008aa4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8008aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad0 <FLASH_Erase_Sector+0x8c>)
 8008aa8:	691a      	ldr	r2, [r3, #16]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	00db      	lsls	r3, r3, #3
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	4a07      	ldr	r2, [pc, #28]	@ (8008ad0 <FLASH_Erase_Sector+0x8c>)
 8008ab2:	f043 0302 	orr.w	r3, r3, #2
 8008ab6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8008ab8:	4b05      	ldr	r3, [pc, #20]	@ (8008ad0 <FLASH_Erase_Sector+0x8c>)
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	4a04      	ldr	r2, [pc, #16]	@ (8008ad0 <FLASH_Erase_Sector+0x8c>)
 8008abe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ac2:	6113      	str	r3, [r2, #16]
}
 8008ac4:	bf00      	nop
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	40023c00 	.word	0x40023c00

08008ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b089      	sub	sp, #36	@ 0x24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008aea:	2300      	movs	r3, #0
 8008aec:	61fb      	str	r3, [r7, #28]
 8008aee:	e16b      	b.n	8008dc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008af0:	2201      	movs	r2, #1
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	fa02 f303 	lsl.w	r3, r2, r3
 8008af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	4013      	ands	r3, r2
 8008b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	f040 815a 	bne.w	8008dc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f003 0303 	and.w	r3, r3, #3
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d005      	beq.n	8008b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d130      	bne.n	8008b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	2203      	movs	r2, #3
 8008b32:	fa02 f303 	lsl.w	r3, r2, r3
 8008b36:	43db      	mvns	r3, r3
 8008b38:	69ba      	ldr	r2, [r7, #24]
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	68da      	ldr	r2, [r3, #12]
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	005b      	lsls	r3, r3, #1
 8008b46:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4a:	69ba      	ldr	r2, [r7, #24]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	fa02 f303 	lsl.w	r3, r2, r3
 8008b64:	43db      	mvns	r3, r3
 8008b66:	69ba      	ldr	r2, [r7, #24]
 8008b68:	4013      	ands	r3, r2
 8008b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	091b      	lsrs	r3, r3, #4
 8008b72:	f003 0201 	and.w	r2, r3, #1
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7c:	69ba      	ldr	r2, [r7, #24]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f003 0303 	and.w	r3, r3, #3
 8008b90:	2b03      	cmp	r3, #3
 8008b92:	d017      	beq.n	8008bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	005b      	lsls	r3, r3, #1
 8008b9e:	2203      	movs	r2, #3
 8008ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba4:	43db      	mvns	r3, r3
 8008ba6:	69ba      	ldr	r2, [r7, #24]
 8008ba8:	4013      	ands	r3, r2
 8008baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	689a      	ldr	r2, [r3, #8]
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	005b      	lsls	r3, r3, #1
 8008bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f003 0303 	and.w	r3, r3, #3
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d123      	bne.n	8008c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	08da      	lsrs	r2, r3, #3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	3208      	adds	r2, #8
 8008bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	f003 0307 	and.w	r3, r3, #7
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	220f      	movs	r2, #15
 8008be8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bec:	43db      	mvns	r3, r3
 8008bee:	69ba      	ldr	r2, [r7, #24]
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	691a      	ldr	r2, [r3, #16]
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	f003 0307 	and.w	r3, r3, #7
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	fa02 f303 	lsl.w	r3, r2, r3
 8008c04:	69ba      	ldr	r2, [r7, #24]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	08da      	lsrs	r2, r3, #3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	3208      	adds	r2, #8
 8008c12:	69b9      	ldr	r1, [r7, #24]
 8008c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	005b      	lsls	r3, r3, #1
 8008c22:	2203      	movs	r2, #3
 8008c24:	fa02 f303 	lsl.w	r3, r2, r3
 8008c28:	43db      	mvns	r3, r3
 8008c2a:	69ba      	ldr	r2, [r7, #24]
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	f003 0203 	and.w	r2, r3, #3
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	005b      	lsls	r3, r3, #1
 8008c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c40:	69ba      	ldr	r2, [r7, #24]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f000 80b4 	beq.w	8008dc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60fb      	str	r3, [r7, #12]
 8008c5e:	4b60      	ldr	r3, [pc, #384]	@ (8008de0 <HAL_GPIO_Init+0x30c>)
 8008c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c62:	4a5f      	ldr	r2, [pc, #380]	@ (8008de0 <HAL_GPIO_Init+0x30c>)
 8008c64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8008c6a:	4b5d      	ldr	r3, [pc, #372]	@ (8008de0 <HAL_GPIO_Init+0x30c>)
 8008c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008c76:	4a5b      	ldr	r2, [pc, #364]	@ (8008de4 <HAL_GPIO_Init+0x310>)
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	089b      	lsrs	r3, r3, #2
 8008c7c:	3302      	adds	r3, #2
 8008c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	f003 0303 	and.w	r3, r3, #3
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	220f      	movs	r2, #15
 8008c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c92:	43db      	mvns	r3, r3
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	4013      	ands	r3, r2
 8008c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a52      	ldr	r2, [pc, #328]	@ (8008de8 <HAL_GPIO_Init+0x314>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d02b      	beq.n	8008cfa <HAL_GPIO_Init+0x226>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a51      	ldr	r2, [pc, #324]	@ (8008dec <HAL_GPIO_Init+0x318>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d025      	beq.n	8008cf6 <HAL_GPIO_Init+0x222>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a50      	ldr	r2, [pc, #320]	@ (8008df0 <HAL_GPIO_Init+0x31c>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d01f      	beq.n	8008cf2 <HAL_GPIO_Init+0x21e>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a4f      	ldr	r2, [pc, #316]	@ (8008df4 <HAL_GPIO_Init+0x320>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d019      	beq.n	8008cee <HAL_GPIO_Init+0x21a>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a4e      	ldr	r2, [pc, #312]	@ (8008df8 <HAL_GPIO_Init+0x324>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d013      	beq.n	8008cea <HAL_GPIO_Init+0x216>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a4d      	ldr	r2, [pc, #308]	@ (8008dfc <HAL_GPIO_Init+0x328>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d00d      	beq.n	8008ce6 <HAL_GPIO_Init+0x212>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a4c      	ldr	r2, [pc, #304]	@ (8008e00 <HAL_GPIO_Init+0x32c>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d007      	beq.n	8008ce2 <HAL_GPIO_Init+0x20e>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a4b      	ldr	r2, [pc, #300]	@ (8008e04 <HAL_GPIO_Init+0x330>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d101      	bne.n	8008cde <HAL_GPIO_Init+0x20a>
 8008cda:	2307      	movs	r3, #7
 8008cdc:	e00e      	b.n	8008cfc <HAL_GPIO_Init+0x228>
 8008cde:	2308      	movs	r3, #8
 8008ce0:	e00c      	b.n	8008cfc <HAL_GPIO_Init+0x228>
 8008ce2:	2306      	movs	r3, #6
 8008ce4:	e00a      	b.n	8008cfc <HAL_GPIO_Init+0x228>
 8008ce6:	2305      	movs	r3, #5
 8008ce8:	e008      	b.n	8008cfc <HAL_GPIO_Init+0x228>
 8008cea:	2304      	movs	r3, #4
 8008cec:	e006      	b.n	8008cfc <HAL_GPIO_Init+0x228>
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e004      	b.n	8008cfc <HAL_GPIO_Init+0x228>
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	e002      	b.n	8008cfc <HAL_GPIO_Init+0x228>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e000      	b.n	8008cfc <HAL_GPIO_Init+0x228>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	69fa      	ldr	r2, [r7, #28]
 8008cfe:	f002 0203 	and.w	r2, r2, #3
 8008d02:	0092      	lsls	r2, r2, #2
 8008d04:	4093      	lsls	r3, r2
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d0c:	4935      	ldr	r1, [pc, #212]	@ (8008de4 <HAL_GPIO_Init+0x310>)
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	089b      	lsrs	r3, r3, #2
 8008d12:	3302      	adds	r3, #2
 8008d14:	69ba      	ldr	r2, [r7, #24]
 8008d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8008e08 <HAL_GPIO_Init+0x334>)
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	43db      	mvns	r3, r3
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	4013      	ands	r3, r2
 8008d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008d36:	69ba      	ldr	r2, [r7, #24]
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008d3e:	4a32      	ldr	r2, [pc, #200]	@ (8008e08 <HAL_GPIO_Init+0x334>)
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008d44:	4b30      	ldr	r3, [pc, #192]	@ (8008e08 <HAL_GPIO_Init+0x334>)
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	43db      	mvns	r3, r3
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	4013      	ands	r3, r2
 8008d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d003      	beq.n	8008d68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008d60:	69ba      	ldr	r2, [r7, #24]
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008d68:	4a27      	ldr	r2, [pc, #156]	@ (8008e08 <HAL_GPIO_Init+0x334>)
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008d6e:	4b26      	ldr	r3, [pc, #152]	@ (8008e08 <HAL_GPIO_Init+0x334>)
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	43db      	mvns	r3, r3
 8008d78:	69ba      	ldr	r2, [r7, #24]
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d003      	beq.n	8008d92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008d8a:	69ba      	ldr	r2, [r7, #24]
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008d92:	4a1d      	ldr	r2, [pc, #116]	@ (8008e08 <HAL_GPIO_Init+0x334>)
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008d98:	4b1b      	ldr	r3, [pc, #108]	@ (8008e08 <HAL_GPIO_Init+0x334>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	43db      	mvns	r3, r3
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	4013      	ands	r3, r2
 8008da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008dbc:	4a12      	ldr	r2, [pc, #72]	@ (8008e08 <HAL_GPIO_Init+0x334>)
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	61fb      	str	r3, [r7, #28]
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	2b0f      	cmp	r3, #15
 8008dcc:	f67f ae90 	bls.w	8008af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008dd0:	bf00      	nop
 8008dd2:	bf00      	nop
 8008dd4:	3724      	adds	r7, #36	@ 0x24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	40023800 	.word	0x40023800
 8008de4:	40013800 	.word	0x40013800
 8008de8:	40020000 	.word	0x40020000
 8008dec:	40020400 	.word	0x40020400
 8008df0:	40020800 	.word	0x40020800
 8008df4:	40020c00 	.word	0x40020c00
 8008df8:	40021000 	.word	0x40021000
 8008dfc:	40021400 	.word	0x40021400
 8008e00:	40021800 	.word	0x40021800
 8008e04:	40021c00 	.word	0x40021c00
 8008e08:	40013c00 	.word	0x40013c00

08008e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	460b      	mov	r3, r1
 8008e16:	807b      	strh	r3, [r7, #2]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008e1c:	787b      	ldrb	r3, [r7, #1]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d003      	beq.n	8008e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e22:	887a      	ldrh	r2, [r7, #2]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008e28:	e003      	b.n	8008e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008e2a:	887b      	ldrh	r3, [r7, #2]
 8008e2c:	041a      	lsls	r2, r3, #16
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	619a      	str	r2, [r3, #24]
}
 8008e32:	bf00      	nop
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b085      	sub	sp, #20
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	460b      	mov	r3, r1
 8008e48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	695b      	ldr	r3, [r3, #20]
 8008e4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008e50:	887a      	ldrh	r2, [r7, #2]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	4013      	ands	r3, r2
 8008e56:	041a      	lsls	r2, r3, #16
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	43d9      	mvns	r1, r3
 8008e5c:	887b      	ldrh	r3, [r7, #2]
 8008e5e:	400b      	ands	r3, r1
 8008e60:	431a      	orrs	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	619a      	str	r2, [r3, #24]
}
 8008e66:	bf00      	nop
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
	...

08008e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e12b      	b.n	80090de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d106      	bne.n	8008ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7fe fd14 	bl	80078c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2224      	movs	r2, #36	@ 0x24
 8008ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f022 0201 	bic.w	r2, r2, #1
 8008eb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ec6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008ed6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008ed8:	f002 f9ce 	bl	800b278 <HAL_RCC_GetPCLK1Freq>
 8008edc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	4a81      	ldr	r2, [pc, #516]	@ (80090e8 <HAL_I2C_Init+0x274>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d807      	bhi.n	8008ef8 <HAL_I2C_Init+0x84>
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	4a80      	ldr	r2, [pc, #512]	@ (80090ec <HAL_I2C_Init+0x278>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	bf94      	ite	ls
 8008ef0:	2301      	movls	r3, #1
 8008ef2:	2300      	movhi	r3, #0
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	e006      	b.n	8008f06 <HAL_I2C_Init+0x92>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	4a7d      	ldr	r2, [pc, #500]	@ (80090f0 <HAL_I2C_Init+0x27c>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	bf94      	ite	ls
 8008f00:	2301      	movls	r3, #1
 8008f02:	2300      	movhi	r3, #0
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e0e7      	b.n	80090de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	4a78      	ldr	r2, [pc, #480]	@ (80090f4 <HAL_I2C_Init+0x280>)
 8008f12:	fba2 2303 	umull	r2, r3, r2, r3
 8008f16:	0c9b      	lsrs	r3, r3, #18
 8008f18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	4a6a      	ldr	r2, [pc, #424]	@ (80090e8 <HAL_I2C_Init+0x274>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d802      	bhi.n	8008f48 <HAL_I2C_Init+0xd4>
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	3301      	adds	r3, #1
 8008f46:	e009      	b.n	8008f5c <HAL_I2C_Init+0xe8>
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008f4e:	fb02 f303 	mul.w	r3, r2, r3
 8008f52:	4a69      	ldr	r2, [pc, #420]	@ (80090f8 <HAL_I2C_Init+0x284>)
 8008f54:	fba2 2303 	umull	r2, r3, r2, r3
 8008f58:	099b      	lsrs	r3, r3, #6
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	6812      	ldr	r2, [r2, #0]
 8008f60:	430b      	orrs	r3, r1
 8008f62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	69db      	ldr	r3, [r3, #28]
 8008f6a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008f6e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	495c      	ldr	r1, [pc, #368]	@ (80090e8 <HAL_I2C_Init+0x274>)
 8008f78:	428b      	cmp	r3, r1
 8008f7a:	d819      	bhi.n	8008fb0 <HAL_I2C_Init+0x13c>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	1e59      	subs	r1, r3, #1
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f8a:	1c59      	adds	r1, r3, #1
 8008f8c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008f90:	400b      	ands	r3, r1
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00a      	beq.n	8008fac <HAL_I2C_Init+0x138>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	1e59      	subs	r1, r3, #1
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	005b      	lsls	r3, r3, #1
 8008fa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008faa:	e051      	b.n	8009050 <HAL_I2C_Init+0x1dc>
 8008fac:	2304      	movs	r3, #4
 8008fae:	e04f      	b.n	8009050 <HAL_I2C_Init+0x1dc>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d111      	bne.n	8008fdc <HAL_I2C_Init+0x168>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	1e58      	subs	r0, r3, #1
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6859      	ldr	r1, [r3, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	440b      	add	r3, r1
 8008fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008fca:	3301      	adds	r3, #1
 8008fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	bf0c      	ite	eq
 8008fd4:	2301      	moveq	r3, #1
 8008fd6:	2300      	movne	r3, #0
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	e012      	b.n	8009002 <HAL_I2C_Init+0x18e>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	1e58      	subs	r0, r3, #1
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6859      	ldr	r1, [r3, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	440b      	add	r3, r1
 8008fea:	0099      	lsls	r1, r3, #2
 8008fec:	440b      	add	r3, r1
 8008fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	bf0c      	ite	eq
 8008ffc:	2301      	moveq	r3, #1
 8008ffe:	2300      	movne	r3, #0
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <HAL_I2C_Init+0x196>
 8009006:	2301      	movs	r3, #1
 8009008:	e022      	b.n	8009050 <HAL_I2C_Init+0x1dc>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10e      	bne.n	8009030 <HAL_I2C_Init+0x1bc>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	1e58      	subs	r0, r3, #1
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6859      	ldr	r1, [r3, #4]
 800901a:	460b      	mov	r3, r1
 800901c:	005b      	lsls	r3, r3, #1
 800901e:	440b      	add	r3, r1
 8009020:	fbb0 f3f3 	udiv	r3, r0, r3
 8009024:	3301      	adds	r3, #1
 8009026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800902a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800902e:	e00f      	b.n	8009050 <HAL_I2C_Init+0x1dc>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	1e58      	subs	r0, r3, #1
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6859      	ldr	r1, [r3, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	440b      	add	r3, r1
 800903e:	0099      	lsls	r1, r3, #2
 8009040:	440b      	add	r3, r1
 8009042:	fbb0 f3f3 	udiv	r3, r0, r3
 8009046:	3301      	adds	r3, #1
 8009048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800904c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009050:	6879      	ldr	r1, [r7, #4]
 8009052:	6809      	ldr	r1, [r1, #0]
 8009054:	4313      	orrs	r3, r2
 8009056:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	69da      	ldr	r2, [r3, #28]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	431a      	orrs	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	430a      	orrs	r2, r1
 8009072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800907e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	6911      	ldr	r1, [r2, #16]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	68d2      	ldr	r2, [r2, #12]
 800908a:	4311      	orrs	r1, r2
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	6812      	ldr	r2, [r2, #0]
 8009090:	430b      	orrs	r3, r1
 8009092:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	695a      	ldr	r2, [r3, #20]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	699b      	ldr	r3, [r3, #24]
 80090a6:	431a      	orrs	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	430a      	orrs	r2, r1
 80090ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f042 0201 	orr.w	r2, r2, #1
 80090be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2220      	movs	r2, #32
 80090ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	000186a0 	.word	0x000186a0
 80090ec:	001e847f 	.word	0x001e847f
 80090f0:	003d08ff 	.word	0x003d08ff
 80090f4:	431bde83 	.word	0x431bde83
 80090f8:	10624dd3 	.word	0x10624dd3

080090fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b088      	sub	sp, #32
 8009100:	af02      	add	r7, sp, #8
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	607a      	str	r2, [r7, #4]
 8009106:	461a      	mov	r2, r3
 8009108:	460b      	mov	r3, r1
 800910a:	817b      	strh	r3, [r7, #10]
 800910c:	4613      	mov	r3, r2
 800910e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009110:	f7fe feda 	bl	8007ec8 <HAL_GetTick>
 8009114:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b20      	cmp	r3, #32
 8009120:	f040 80e0 	bne.w	80092e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	2319      	movs	r3, #25
 800912a:	2201      	movs	r2, #1
 800912c:	4970      	ldr	r1, [pc, #448]	@ (80092f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f001 fa3c 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800913a:	2302      	movs	r3, #2
 800913c:	e0d3      	b.n	80092e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009144:	2b01      	cmp	r3, #1
 8009146:	d101      	bne.n	800914c <HAL_I2C_Master_Transmit+0x50>
 8009148:	2302      	movs	r3, #2
 800914a:	e0cc      	b.n	80092e6 <HAL_I2C_Master_Transmit+0x1ea>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b01      	cmp	r3, #1
 8009160:	d007      	beq.n	8009172 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f042 0201 	orr.w	r2, r2, #1
 8009170:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009180:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2221      	movs	r2, #33	@ 0x21
 8009186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2210      	movs	r2, #16
 800918e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	893a      	ldrh	r2, [r7, #8]
 80091a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	4a50      	ldr	r2, [pc, #320]	@ (80092f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80091b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80091b4:	8979      	ldrh	r1, [r7, #10]
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	6a3a      	ldr	r2, [r7, #32]
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f000 ff28 	bl	800a010 <I2C_MasterRequestWrite>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d001      	beq.n	80091ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e08d      	b.n	80092e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091ca:	2300      	movs	r3, #0
 80091cc:	613b      	str	r3, [r7, #16]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	695b      	ldr	r3, [r3, #20]
 80091d4:	613b      	str	r3, [r7, #16]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	613b      	str	r3, [r7, #16]
 80091de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80091e0:	e066      	b.n	80092b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	6a39      	ldr	r1, [r7, #32]
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f001 fafa 	bl	800a7e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00d      	beq.n	800920e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f6:	2b04      	cmp	r3, #4
 80091f8:	d107      	bne.n	800920a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009208:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e06b      	b.n	80092e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009212:	781a      	ldrb	r2, [r3, #0]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800921e:	1c5a      	adds	r2, r3, #1
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009228:	b29b      	uxth	r3, r3
 800922a:	3b01      	subs	r3, #1
 800922c:	b29a      	uxth	r2, r3
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009236:	3b01      	subs	r3, #1
 8009238:	b29a      	uxth	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	695b      	ldr	r3, [r3, #20]
 8009244:	f003 0304 	and.w	r3, r3, #4
 8009248:	2b04      	cmp	r3, #4
 800924a:	d11b      	bne.n	8009284 <HAL_I2C_Master_Transmit+0x188>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009250:	2b00      	cmp	r3, #0
 8009252:	d017      	beq.n	8009284 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009258:	781a      	ldrb	r2, [r3, #0]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800926e:	b29b      	uxth	r3, r3
 8009270:	3b01      	subs	r3, #1
 8009272:	b29a      	uxth	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800927c:	3b01      	subs	r3, #1
 800927e:	b29a      	uxth	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009284:	697a      	ldr	r2, [r7, #20]
 8009286:	6a39      	ldr	r1, [r7, #32]
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f001 faf1 	bl	800a870 <I2C_WaitOnBTFFlagUntilTimeout>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00d      	beq.n	80092b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009298:	2b04      	cmp	r3, #4
 800929a:	d107      	bne.n	80092ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e01a      	b.n	80092e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d194      	bne.n	80091e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2220      	movs	r2, #32
 80092cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	e000      	b.n	80092e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80092e4:	2302      	movs	r3, #2
  }
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	00100002 	.word	0x00100002
 80092f4:	ffff0000 	.word	0xffff0000

080092f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b08c      	sub	sp, #48	@ 0x30
 80092fc:	af02      	add	r7, sp, #8
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	607a      	str	r2, [r7, #4]
 8009302:	461a      	mov	r2, r3
 8009304:	460b      	mov	r3, r1
 8009306:	817b      	strh	r3, [r7, #10]
 8009308:	4613      	mov	r3, r2
 800930a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800930c:	f7fe fddc 	bl	8007ec8 <HAL_GetTick>
 8009310:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009318:	b2db      	uxtb	r3, r3
 800931a:	2b20      	cmp	r3, #32
 800931c:	f040 8217 	bne.w	800974e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	2319      	movs	r3, #25
 8009326:	2201      	movs	r2, #1
 8009328:	497c      	ldr	r1, [pc, #496]	@ (800951c <HAL_I2C_Master_Receive+0x224>)
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f001 f93e 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d001      	beq.n	800933a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009336:	2302      	movs	r3, #2
 8009338:	e20a      	b.n	8009750 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009340:	2b01      	cmp	r3, #1
 8009342:	d101      	bne.n	8009348 <HAL_I2C_Master_Receive+0x50>
 8009344:	2302      	movs	r3, #2
 8009346:	e203      	b.n	8009750 <HAL_I2C_Master_Receive+0x458>
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	2b01      	cmp	r3, #1
 800935c:	d007      	beq.n	800936e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f042 0201 	orr.w	r2, r2, #1
 800936c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800937c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2222      	movs	r2, #34	@ 0x22
 8009382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2210      	movs	r2, #16
 800938a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	893a      	ldrh	r2, [r7, #8]
 800939e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	4a5c      	ldr	r2, [pc, #368]	@ (8009520 <HAL_I2C_Master_Receive+0x228>)
 80093ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80093b0:	8979      	ldrh	r1, [r7, #10]
 80093b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f000 feac 	bl	800a114 <I2C_MasterRequestRead>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d001      	beq.n	80093c6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e1c4      	b.n	8009750 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d113      	bne.n	80093f6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093ce:	2300      	movs	r3, #0
 80093d0:	623b      	str	r3, [r7, #32]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	623b      	str	r3, [r7, #32]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	623b      	str	r3, [r7, #32]
 80093e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	e198      	b.n	8009728 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d11b      	bne.n	8009436 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800940c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800940e:	2300      	movs	r3, #0
 8009410:	61fb      	str	r3, [r7, #28]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	61fb      	str	r3, [r7, #28]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	61fb      	str	r3, [r7, #28]
 8009422:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009432:	601a      	str	r2, [r3, #0]
 8009434:	e178      	b.n	8009728 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800943a:	2b02      	cmp	r3, #2
 800943c:	d11b      	bne.n	8009476 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800944c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800945c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800945e:	2300      	movs	r3, #0
 8009460:	61bb      	str	r3, [r7, #24]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	695b      	ldr	r3, [r3, #20]
 8009468:	61bb      	str	r3, [r7, #24]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	61bb      	str	r3, [r7, #24]
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	e158      	b.n	8009728 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009484:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009486:	2300      	movs	r3, #0
 8009488:	617b      	str	r3, [r7, #20]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	695b      	ldr	r3, [r3, #20]
 8009490:	617b      	str	r3, [r7, #20]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	617b      	str	r3, [r7, #20]
 800949a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800949c:	e144      	b.n	8009728 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094a2:	2b03      	cmp	r3, #3
 80094a4:	f200 80f1 	bhi.w	800968a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d123      	bne.n	80094f8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f001 fa23 	bl	800a900 <I2C_WaitOnRXNEFlagUntilTimeout>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d001      	beq.n	80094c4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	e145      	b.n	8009750 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	691a      	ldr	r2, [r3, #16]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ce:	b2d2      	uxtb	r2, r2
 80094d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d6:	1c5a      	adds	r2, r3, #1
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094e0:	3b01      	subs	r3, #1
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	3b01      	subs	r3, #1
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80094f6:	e117      	b.n	8009728 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d14e      	bne.n	800959e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009506:	2200      	movs	r2, #0
 8009508:	4906      	ldr	r1, [pc, #24]	@ (8009524 <HAL_I2C_Master_Receive+0x22c>)
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f001 f84e 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d008      	beq.n	8009528 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e11a      	b.n	8009750 <HAL_I2C_Master_Receive+0x458>
 800951a:	bf00      	nop
 800951c:	00100002 	.word	0x00100002
 8009520:	ffff0000 	.word	0xffff0000
 8009524:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009536:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	691a      	ldr	r2, [r3, #16]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009542:	b2d2      	uxtb	r2, r2
 8009544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800954a:	1c5a      	adds	r2, r3, #1
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009554:	3b01      	subs	r3, #1
 8009556:	b29a      	uxth	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009560:	b29b      	uxth	r3, r3
 8009562:	3b01      	subs	r3, #1
 8009564:	b29a      	uxth	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	691a      	ldr	r2, [r3, #16]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009574:	b2d2      	uxtb	r2, r2
 8009576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800957c:	1c5a      	adds	r2, r3, #1
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009586:	3b01      	subs	r3, #1
 8009588:	b29a      	uxth	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009592:	b29b      	uxth	r3, r3
 8009594:	3b01      	subs	r3, #1
 8009596:	b29a      	uxth	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800959c:	e0c4      	b.n	8009728 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800959e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a0:	9300      	str	r3, [sp, #0]
 80095a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a4:	2200      	movs	r2, #0
 80095a6:	496c      	ldr	r1, [pc, #432]	@ (8009758 <HAL_I2C_Master_Receive+0x460>)
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 ffff 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d001      	beq.n	80095b8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	e0cb      	b.n	8009750 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	691a      	ldr	r2, [r3, #16]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d2:	b2d2      	uxtb	r2, r2
 80095d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095da:	1c5a      	adds	r2, r3, #1
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095e4:	3b01      	subs	r3, #1
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	3b01      	subs	r3, #1
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80095fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009600:	2200      	movs	r2, #0
 8009602:	4955      	ldr	r1, [pc, #340]	@ (8009758 <HAL_I2C_Master_Receive+0x460>)
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f000 ffd1 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e09d      	b.n	8009750 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009622:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	691a      	ldr	r2, [r3, #16]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800962e:	b2d2      	uxtb	r2, r2
 8009630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009636:	1c5a      	adds	r2, r3, #1
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009640:	3b01      	subs	r3, #1
 8009642:	b29a      	uxth	r2, r3
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800964c:	b29b      	uxth	r3, r3
 800964e:	3b01      	subs	r3, #1
 8009650:	b29a      	uxth	r2, r3
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	691a      	ldr	r2, [r3, #16]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009660:	b2d2      	uxtb	r2, r2
 8009662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009668:	1c5a      	adds	r2, r3, #1
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009672:	3b01      	subs	r3, #1
 8009674:	b29a      	uxth	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800967e:	b29b      	uxth	r3, r3
 8009680:	3b01      	subs	r3, #1
 8009682:	b29a      	uxth	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009688:	e04e      	b.n	8009728 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800968a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800968c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f001 f936 	bl	800a900 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e058      	b.n	8009750 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	691a      	ldr	r2, [r3, #16]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a8:	b2d2      	uxtb	r2, r2
 80096aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b0:	1c5a      	adds	r2, r3, #1
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096ba:	3b01      	subs	r3, #1
 80096bc:	b29a      	uxth	r2, r3
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	3b01      	subs	r3, #1
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	f003 0304 	and.w	r3, r3, #4
 80096da:	2b04      	cmp	r3, #4
 80096dc:	d124      	bne.n	8009728 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096e2:	2b03      	cmp	r3, #3
 80096e4:	d107      	bne.n	80096f6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80096f4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	691a      	ldr	r2, [r3, #16]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009700:	b2d2      	uxtb	r2, r2
 8009702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009708:	1c5a      	adds	r2, r3, #1
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009712:	3b01      	subs	r3, #1
 8009714:	b29a      	uxth	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800971e:	b29b      	uxth	r3, r3
 8009720:	3b01      	subs	r3, #1
 8009722:	b29a      	uxth	r2, r3
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800972c:	2b00      	cmp	r3, #0
 800972e:	f47f aeb6 	bne.w	800949e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2220      	movs	r2, #32
 8009736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	e000      	b.n	8009750 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800974e:	2302      	movs	r3, #2
  }
}
 8009750:	4618      	mov	r0, r3
 8009752:	3728      	adds	r7, #40	@ 0x28
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	00010004 	.word	0x00010004

0800975c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b088      	sub	sp, #32
 8009760:	af02      	add	r7, sp, #8
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	4608      	mov	r0, r1
 8009766:	4611      	mov	r1, r2
 8009768:	461a      	mov	r2, r3
 800976a:	4603      	mov	r3, r0
 800976c:	817b      	strh	r3, [r7, #10]
 800976e:	460b      	mov	r3, r1
 8009770:	813b      	strh	r3, [r7, #8]
 8009772:	4613      	mov	r3, r2
 8009774:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009776:	f7fe fba7 	bl	8007ec8 <HAL_GetTick>
 800977a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b20      	cmp	r3, #32
 8009786:	f040 80d9 	bne.w	800993c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	2319      	movs	r3, #25
 8009790:	2201      	movs	r2, #1
 8009792:	496d      	ldr	r1, [pc, #436]	@ (8009948 <HAL_I2C_Mem_Write+0x1ec>)
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f000 ff09 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d001      	beq.n	80097a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80097a0:	2302      	movs	r3, #2
 80097a2:	e0cc      	b.n	800993e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d101      	bne.n	80097b2 <HAL_I2C_Mem_Write+0x56>
 80097ae:	2302      	movs	r3, #2
 80097b0:	e0c5      	b.n	800993e <HAL_I2C_Mem_Write+0x1e2>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d007      	beq.n	80097d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f042 0201 	orr.w	r2, r2, #1
 80097d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80097e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2221      	movs	r2, #33	@ 0x21
 80097ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2240      	movs	r2, #64	@ 0x40
 80097f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6a3a      	ldr	r2, [r7, #32]
 8009802:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009808:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800980e:	b29a      	uxth	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4a4d      	ldr	r2, [pc, #308]	@ (800994c <HAL_I2C_Mem_Write+0x1f0>)
 8009818:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800981a:	88f8      	ldrh	r0, [r7, #6]
 800981c:	893a      	ldrh	r2, [r7, #8]
 800981e:	8979      	ldrh	r1, [r7, #10]
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	9301      	str	r3, [sp, #4]
 8009824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	4603      	mov	r3, r0
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 fd40 	bl	800a2b0 <I2C_RequestMemoryWrite>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d052      	beq.n	80098dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e081      	b.n	800993e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 ffce 	bl	800a7e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00d      	beq.n	8009866 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800984e:	2b04      	cmp	r3, #4
 8009850:	d107      	bne.n	8009862 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009860:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e06b      	b.n	800993e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986a:	781a      	ldrb	r2, [r3, #0]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009876:	1c5a      	adds	r2, r3, #1
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009880:	3b01      	subs	r3, #1
 8009882:	b29a      	uxth	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800988c:	b29b      	uxth	r3, r3
 800988e:	3b01      	subs	r3, #1
 8009890:	b29a      	uxth	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	695b      	ldr	r3, [r3, #20]
 800989c:	f003 0304 	and.w	r3, r3, #4
 80098a0:	2b04      	cmp	r3, #4
 80098a2:	d11b      	bne.n	80098dc <HAL_I2C_Mem_Write+0x180>
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d017      	beq.n	80098dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b0:	781a      	ldrb	r2, [r3, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098bc:	1c5a      	adds	r2, r3, #1
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098c6:	3b01      	subs	r3, #1
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	3b01      	subs	r3, #1
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1aa      	bne.n	800983a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098e4:	697a      	ldr	r2, [r7, #20]
 80098e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f000 ffc1 	bl	800a870 <I2C_WaitOnBTFFlagUntilTimeout>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00d      	beq.n	8009910 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f8:	2b04      	cmp	r3, #4
 80098fa:	d107      	bne.n	800990c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800990a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	e016      	b.n	800993e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800991e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2220      	movs	r2, #32
 8009924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2200      	movs	r2, #0
 800992c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	e000      	b.n	800993e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800993c:	2302      	movs	r3, #2
  }
}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	00100002 	.word	0x00100002
 800994c:	ffff0000 	.word	0xffff0000

08009950 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08c      	sub	sp, #48	@ 0x30
 8009954:	af02      	add	r7, sp, #8
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	4608      	mov	r0, r1
 800995a:	4611      	mov	r1, r2
 800995c:	461a      	mov	r2, r3
 800995e:	4603      	mov	r3, r0
 8009960:	817b      	strh	r3, [r7, #10]
 8009962:	460b      	mov	r3, r1
 8009964:	813b      	strh	r3, [r7, #8]
 8009966:	4613      	mov	r3, r2
 8009968:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800996a:	f7fe faad 	bl	8007ec8 <HAL_GetTick>
 800996e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b20      	cmp	r3, #32
 800997a:	f040 8214 	bne.w	8009da6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800997e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009980:	9300      	str	r3, [sp, #0]
 8009982:	2319      	movs	r3, #25
 8009984:	2201      	movs	r2, #1
 8009986:	497b      	ldr	r1, [pc, #492]	@ (8009b74 <HAL_I2C_Mem_Read+0x224>)
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f000 fe0f 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009994:	2302      	movs	r3, #2
 8009996:	e207      	b.n	8009da8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d101      	bne.n	80099a6 <HAL_I2C_Mem_Read+0x56>
 80099a2:	2302      	movs	r3, #2
 80099a4:	e200      	b.n	8009da8 <HAL_I2C_Mem_Read+0x458>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2201      	movs	r2, #1
 80099aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d007      	beq.n	80099cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f042 0201 	orr.w	r2, r2, #1
 80099ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80099da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2222      	movs	r2, #34	@ 0x22
 80099e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2240      	movs	r2, #64	@ 0x40
 80099e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80099fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	4a5b      	ldr	r2, [pc, #364]	@ (8009b78 <HAL_I2C_Mem_Read+0x228>)
 8009a0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a0e:	88f8      	ldrh	r0, [r7, #6]
 8009a10:	893a      	ldrh	r2, [r7, #8]
 8009a12:	8979      	ldrh	r1, [r7, #10]
 8009a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a16:	9301      	str	r3, [sp, #4]
 8009a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f000 fcdc 	bl	800a3dc <I2C_RequestMemoryRead>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e1bc      	b.n	8009da8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d113      	bne.n	8009a5e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a36:	2300      	movs	r3, #0
 8009a38:	623b      	str	r3, [r7, #32]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	695b      	ldr	r3, [r3, #20]
 8009a40:	623b      	str	r3, [r7, #32]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	623b      	str	r3, [r7, #32]
 8009a4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a5a:	601a      	str	r2, [r3, #0]
 8009a5c:	e190      	b.n	8009d80 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d11b      	bne.n	8009a9e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a76:	2300      	movs	r3, #0
 8009a78:	61fb      	str	r3, [r7, #28]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	695b      	ldr	r3, [r3, #20]
 8009a80:	61fb      	str	r3, [r7, #28]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	61fb      	str	r3, [r7, #28]
 8009a8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a9a:	601a      	str	r2, [r3, #0]
 8009a9c:	e170      	b.n	8009d80 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d11b      	bne.n	8009ade <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ab4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ac4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	61bb      	str	r3, [r7, #24]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	695b      	ldr	r3, [r3, #20]
 8009ad0:	61bb      	str	r3, [r7, #24]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	61bb      	str	r3, [r7, #24]
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	e150      	b.n	8009d80 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ade:	2300      	movs	r3, #0
 8009ae0:	617b      	str	r3, [r7, #20]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	695b      	ldr	r3, [r3, #20]
 8009ae8:	617b      	str	r3, [r7, #20]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	699b      	ldr	r3, [r3, #24]
 8009af0:	617b      	str	r3, [r7, #20]
 8009af2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009af4:	e144      	b.n	8009d80 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009afa:	2b03      	cmp	r3, #3
 8009afc:	f200 80f1 	bhi.w	8009ce2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d123      	bne.n	8009b50 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f000 fef7 	bl	800a900 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e145      	b.n	8009da8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	691a      	ldr	r2, [r3, #16]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b26:	b2d2      	uxtb	r2, r2
 8009b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b2e:	1c5a      	adds	r2, r3, #1
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	3b01      	subs	r3, #1
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009b4e:	e117      	b.n	8009d80 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d14e      	bne.n	8009bf6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5e:	2200      	movs	r2, #0
 8009b60:	4906      	ldr	r1, [pc, #24]	@ (8009b7c <HAL_I2C_Mem_Read+0x22c>)
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f000 fd22 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d008      	beq.n	8009b80 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e11a      	b.n	8009da8 <HAL_I2C_Mem_Read+0x458>
 8009b72:	bf00      	nop
 8009b74:	00100002 	.word	0x00100002
 8009b78:	ffff0000 	.word	0xffff0000
 8009b7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	691a      	ldr	r2, [r3, #16]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b9a:	b2d2      	uxtb	r2, r2
 8009b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba2:	1c5a      	adds	r2, r3, #1
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bac:	3b01      	subs	r3, #1
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	691a      	ldr	r2, [r3, #16]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bcc:	b2d2      	uxtb	r2, r2
 8009bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd4:	1c5a      	adds	r2, r3, #1
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bde:	3b01      	subs	r3, #1
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	3b01      	subs	r3, #1
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009bf4:	e0c4      	b.n	8009d80 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	496c      	ldr	r1, [pc, #432]	@ (8009db0 <HAL_I2C_Mem_Read+0x460>)
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 fcd3 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d001      	beq.n	8009c10 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e0cb      	b.n	8009da8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	691a      	ldr	r2, [r3, #16]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c2a:	b2d2      	uxtb	r2, r2
 8009c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c32:	1c5a      	adds	r2, r3, #1
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c58:	2200      	movs	r2, #0
 8009c5a:	4955      	ldr	r1, [pc, #340]	@ (8009db0 <HAL_I2C_Mem_Read+0x460>)
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f000 fca5 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e09d      	b.n	8009da8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	691a      	ldr	r2, [r3, #16]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c86:	b2d2      	uxtb	r2, r2
 8009c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c8e:	1c5a      	adds	r2, r3, #1
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	691a      	ldr	r2, [r3, #16]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb8:	b2d2      	uxtb	r2, r2
 8009cba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cc0:	1c5a      	adds	r2, r3, #1
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009ce0:	e04e      	b.n	8009d80 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ce4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f000 fe0a 	bl	800a900 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d001      	beq.n	8009cf6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e058      	b.n	8009da8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	691a      	ldr	r2, [r3, #16]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d00:	b2d2      	uxtb	r2, r2
 8009d02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d08:	1c5a      	adds	r2, r3, #1
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d12:	3b01      	subs	r3, #1
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	3b01      	subs	r3, #1
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	f003 0304 	and.w	r3, r3, #4
 8009d32:	2b04      	cmp	r3, #4
 8009d34:	d124      	bne.n	8009d80 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	d107      	bne.n	8009d4e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d4c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	691a      	ldr	r2, [r3, #16]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d58:	b2d2      	uxtb	r2, r2
 8009d5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d60:	1c5a      	adds	r2, r3, #1
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f47f aeb6 	bne.w	8009af6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2220      	movs	r2, #32
 8009d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	e000      	b.n	8009da8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009da6:	2302      	movs	r3, #2
  }
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3728      	adds	r7, #40	@ 0x28
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	00010004 	.word	0x00010004

08009db4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b08a      	sub	sp, #40	@ 0x28
 8009db8:	af02      	add	r7, sp, #8
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	607a      	str	r2, [r7, #4]
 8009dbe:	603b      	str	r3, [r7, #0]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009dc4:	f7fe f880 	bl	8007ec8 <HAL_GetTick>
 8009dc8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	2b20      	cmp	r3, #32
 8009dd8:	f040 8111 	bne.w	8009ffe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	2319      	movs	r3, #25
 8009de2:	2201      	movs	r2, #1
 8009de4:	4988      	ldr	r1, [pc, #544]	@ (800a008 <HAL_I2C_IsDeviceReady+0x254>)
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	f000 fbe0 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009df2:	2302      	movs	r3, #2
 8009df4:	e104      	b.n	800a000 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d101      	bne.n	8009e04 <HAL_I2C_IsDeviceReady+0x50>
 8009e00:	2302      	movs	r3, #2
 8009e02:	e0fd      	b.n	800a000 <HAL_I2C_IsDeviceReady+0x24c>
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f003 0301 	and.w	r3, r3, #1
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d007      	beq.n	8009e2a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f042 0201 	orr.w	r2, r2, #1
 8009e28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009e38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2224      	movs	r2, #36	@ 0x24
 8009e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	4a70      	ldr	r2, [pc, #448]	@ (800a00c <HAL_I2C_IsDeviceReady+0x258>)
 8009e4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e5c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f000 fb9e 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00d      	beq.n	8009e92 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e84:	d103      	bne.n	8009e8e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e8c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	e0b6      	b.n	800a000 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e92:	897b      	ldrh	r3, [r7, #10]
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	461a      	mov	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009ea0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009ea2:	f7fe f811 	bl	8007ec8 <HAL_GetTick>
 8009ea6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	695b      	ldr	r3, [r3, #20]
 8009eae:	f003 0302 	and.w	r3, r3, #2
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	bf0c      	ite	eq
 8009eb6:	2301      	moveq	r3, #1
 8009eb8:	2300      	movne	r3, #0
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	695b      	ldr	r3, [r3, #20]
 8009ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ecc:	bf0c      	ite	eq
 8009ece:	2301      	moveq	r3, #1
 8009ed0:	2300      	movne	r3, #0
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009ed6:	e025      	b.n	8009f24 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009ed8:	f7fd fff6 	bl	8007ec8 <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d302      	bcc.n	8009eee <HAL_I2C_IsDeviceReady+0x13a>
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d103      	bne.n	8009ef6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	22a0      	movs	r2, #160	@ 0xa0
 8009ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	f003 0302 	and.w	r3, r3, #2
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	bf0c      	ite	eq
 8009f04:	2301      	moveq	r3, #1
 8009f06:	2300      	movne	r3, #0
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	695b      	ldr	r3, [r3, #20]
 8009f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f1a:	bf0c      	ite	eq
 8009f1c:	2301      	moveq	r3, #1
 8009f1e:	2300      	movne	r3, #0
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	2ba0      	cmp	r3, #160	@ 0xa0
 8009f2e:	d005      	beq.n	8009f3c <HAL_I2C_IsDeviceReady+0x188>
 8009f30:	7dfb      	ldrb	r3, [r7, #23]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d102      	bne.n	8009f3c <HAL_I2C_IsDeviceReady+0x188>
 8009f36:	7dbb      	ldrb	r3, [r7, #22]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d0cd      	beq.n	8009ed8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2220      	movs	r2, #32
 8009f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	f003 0302 	and.w	r3, r3, #2
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d129      	bne.n	8009fa6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f60:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f62:	2300      	movs	r3, #0
 8009f64:	613b      	str	r3, [r7, #16]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	613b      	str	r3, [r7, #16]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	613b      	str	r3, [r7, #16]
 8009f76:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	2319      	movs	r3, #25
 8009f7e:	2201      	movs	r2, #1
 8009f80:	4921      	ldr	r1, [pc, #132]	@ (800a008 <HAL_I2C_IsDeviceReady+0x254>)
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f000 fb12 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e036      	b.n	800a000 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2220      	movs	r2, #32
 8009f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	e02c      	b.n	800a000 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009fb4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009fbe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	2319      	movs	r3, #25
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	490f      	ldr	r1, [pc, #60]	@ (800a008 <HAL_I2C_IsDeviceReady+0x254>)
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f000 faee 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d001      	beq.n	8009fda <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e012      	b.n	800a000 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009fe0:	69ba      	ldr	r2, [r7, #24]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	f4ff af32 	bcc.w	8009e4e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2220      	movs	r2, #32
 8009fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e000      	b.n	800a000 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8009ffe:	2302      	movs	r3, #2
  }
}
 800a000:	4618      	mov	r0, r3
 800a002:	3720      	adds	r7, #32
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	00100002 	.word	0x00100002
 800a00c:	ffff0000 	.word	0xffff0000

0800a010 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b088      	sub	sp, #32
 800a014:	af02      	add	r7, sp, #8
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	607a      	str	r2, [r7, #4]
 800a01a:	603b      	str	r3, [r7, #0]
 800a01c:	460b      	mov	r3, r1
 800a01e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a024:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	2b08      	cmp	r3, #8
 800a02a:	d006      	beq.n	800a03a <I2C_MasterRequestWrite+0x2a>
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d003      	beq.n	800a03a <I2C_MasterRequestWrite+0x2a>
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a038:	d108      	bne.n	800a04c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a048:	601a      	str	r2, [r3, #0]
 800a04a:	e00b      	b.n	800a064 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a050:	2b12      	cmp	r3, #18
 800a052:	d107      	bne.n	800a064 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a062:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f000 fa9b 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00d      	beq.n	800a098 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a08a:	d103      	bne.n	800a094 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a092:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a094:	2303      	movs	r3, #3
 800a096:	e035      	b.n	800a104 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0a0:	d108      	bne.n	800a0b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0a2:	897b      	ldrh	r3, [r7, #10]
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a0b0:	611a      	str	r2, [r3, #16]
 800a0b2:	e01b      	b.n	800a0ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a0b4:	897b      	ldrh	r3, [r7, #10]
 800a0b6:	11db      	asrs	r3, r3, #7
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	f003 0306 	and.w	r3, r3, #6
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	f063 030f 	orn	r3, r3, #15
 800a0c4:	b2da      	uxtb	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	490e      	ldr	r1, [pc, #56]	@ (800a10c <I2C_MasterRequestWrite+0xfc>)
 800a0d2:	68f8      	ldr	r0, [r7, #12]
 800a0d4:	f000 fae4 	bl	800a6a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e010      	b.n	800a104 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a0e2:	897b      	ldrh	r3, [r7, #10]
 800a0e4:	b2da      	uxtb	r2, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	4907      	ldr	r1, [pc, #28]	@ (800a110 <I2C_MasterRequestWrite+0x100>)
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f000 fad4 	bl	800a6a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d001      	beq.n	800a102 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e000      	b.n	800a104 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	3718      	adds	r7, #24
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	00010008 	.word	0x00010008
 800a110:	00010002 	.word	0x00010002

0800a114 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b088      	sub	sp, #32
 800a118:	af02      	add	r7, sp, #8
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	607a      	str	r2, [r7, #4]
 800a11e:	603b      	str	r3, [r7, #0]
 800a120:	460b      	mov	r3, r1
 800a122:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a128:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a138:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	2b08      	cmp	r3, #8
 800a13e:	d006      	beq.n	800a14e <I2C_MasterRequestRead+0x3a>
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d003      	beq.n	800a14e <I2C_MasterRequestRead+0x3a>
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a14c:	d108      	bne.n	800a160 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a15c:	601a      	str	r2, [r3, #0]
 800a15e:	e00b      	b.n	800a178 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a164:	2b11      	cmp	r3, #17
 800a166:	d107      	bne.n	800a178 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a176:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f000 fa11 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00d      	beq.n	800a1ac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a19a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a19e:	d103      	bne.n	800a1a8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a1a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	e079      	b.n	800a2a0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1b4:	d108      	bne.n	800a1c8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a1b6:	897b      	ldrh	r3, [r7, #10]
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	f043 0301 	orr.w	r3, r3, #1
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	611a      	str	r2, [r3, #16]
 800a1c6:	e05f      	b.n	800a288 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a1c8:	897b      	ldrh	r3, [r7, #10]
 800a1ca:	11db      	asrs	r3, r3, #7
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	f003 0306 	and.w	r3, r3, #6
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	f063 030f 	orn	r3, r3, #15
 800a1d8:	b2da      	uxtb	r2, r3
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	4930      	ldr	r1, [pc, #192]	@ (800a2a8 <I2C_MasterRequestRead+0x194>)
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f000 fa5a 	bl	800a6a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e054      	b.n	800a2a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a1f6:	897b      	ldrh	r3, [r7, #10]
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	4929      	ldr	r1, [pc, #164]	@ (800a2ac <I2C_MasterRequestRead+0x198>)
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	f000 fa4a 	bl	800a6a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e044      	b.n	800a2a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a216:	2300      	movs	r3, #0
 800a218:	613b      	str	r3, [r7, #16]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	695b      	ldr	r3, [r3, #20]
 800a220:	613b      	str	r3, [r7, #16]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	613b      	str	r3, [r7, #16]
 800a22a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a23a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f000 f9af 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00d      	beq.n	800a270 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a25e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a262:	d103      	bne.n	800a26c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a26a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e017      	b.n	800a2a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a270:	897b      	ldrh	r3, [r7, #10]
 800a272:	11db      	asrs	r3, r3, #7
 800a274:	b2db      	uxtb	r3, r3
 800a276:	f003 0306 	and.w	r3, r3, #6
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	f063 030e 	orn	r3, r3, #14
 800a280:	b2da      	uxtb	r2, r3
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	4907      	ldr	r1, [pc, #28]	@ (800a2ac <I2C_MasterRequestRead+0x198>)
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f000 fa06 	bl	800a6a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d001      	beq.n	800a29e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e000      	b.n	800a2a0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a29e:	2300      	movs	r3, #0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3718      	adds	r7, #24
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	00010008 	.word	0x00010008
 800a2ac:	00010002 	.word	0x00010002

0800a2b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b088      	sub	sp, #32
 800a2b4:	af02      	add	r7, sp, #8
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	4608      	mov	r0, r1
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	461a      	mov	r2, r3
 800a2be:	4603      	mov	r3, r0
 800a2c0:	817b      	strh	r3, [r7, #10]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	813b      	strh	r3, [r7, #8]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a2d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	6a3b      	ldr	r3, [r7, #32]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f000 f960 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00d      	beq.n	800a30e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a300:	d103      	bne.n	800a30a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a308:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e05f      	b.n	800a3ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a30e:	897b      	ldrh	r3, [r7, #10]
 800a310:	b2db      	uxtb	r3, r3
 800a312:	461a      	mov	r2, r3
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a31c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a320:	6a3a      	ldr	r2, [r7, #32]
 800a322:	492d      	ldr	r1, [pc, #180]	@ (800a3d8 <I2C_RequestMemoryWrite+0x128>)
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 f9bb 	bl	800a6a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e04c      	b.n	800a3ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a334:	2300      	movs	r3, #0
 800a336:	617b      	str	r3, [r7, #20]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	617b      	str	r3, [r7, #20]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	617b      	str	r3, [r7, #20]
 800a348:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a34a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a34c:	6a39      	ldr	r1, [r7, #32]
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f000 fa46 	bl	800a7e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00d      	beq.n	800a376 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a35e:	2b04      	cmp	r3, #4
 800a360:	d107      	bne.n	800a372 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a370:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	e02b      	b.n	800a3ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a376:	88fb      	ldrh	r3, [r7, #6]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d105      	bne.n	800a388 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a37c:	893b      	ldrh	r3, [r7, #8]
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	611a      	str	r2, [r3, #16]
 800a386:	e021      	b.n	800a3cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a388:	893b      	ldrh	r3, [r7, #8]
 800a38a:	0a1b      	lsrs	r3, r3, #8
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	b2da      	uxtb	r2, r3
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a398:	6a39      	ldr	r1, [r7, #32]
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f000 fa20 	bl	800a7e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00d      	beq.n	800a3c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3aa:	2b04      	cmp	r3, #4
 800a3ac:	d107      	bne.n	800a3be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a3bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e005      	b.n	800a3ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a3c2:	893b      	ldrh	r3, [r7, #8]
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a3cc:	2300      	movs	r3, #0
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3718      	adds	r7, #24
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	00010002 	.word	0x00010002

0800a3dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b088      	sub	sp, #32
 800a3e0:	af02      	add	r7, sp, #8
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	4608      	mov	r0, r1
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	817b      	strh	r3, [r7, #10]
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	813b      	strh	r3, [r7, #8]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a404:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a414:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	6a3b      	ldr	r3, [r7, #32]
 800a41c:	2200      	movs	r2, #0
 800a41e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f000 f8c2 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00d      	beq.n	800a44a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a43c:	d103      	bne.n	800a446 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a444:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a446:	2303      	movs	r3, #3
 800a448:	e0aa      	b.n	800a5a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a44a:	897b      	ldrh	r3, [r7, #10]
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	461a      	mov	r2, r3
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a458:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45c:	6a3a      	ldr	r2, [r7, #32]
 800a45e:	4952      	ldr	r1, [pc, #328]	@ (800a5a8 <I2C_RequestMemoryRead+0x1cc>)
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	f000 f91d 	bl	800a6a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d001      	beq.n	800a470 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	e097      	b.n	800a5a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a470:	2300      	movs	r3, #0
 800a472:	617b      	str	r3, [r7, #20]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	617b      	str	r3, [r7, #20]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	617b      	str	r3, [r7, #20]
 800a484:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a488:	6a39      	ldr	r1, [r7, #32]
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f000 f9a8 	bl	800a7e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00d      	beq.n	800a4b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a49a:	2b04      	cmp	r3, #4
 800a49c:	d107      	bne.n	800a4ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e076      	b.n	800a5a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a4b2:	88fb      	ldrh	r3, [r7, #6]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d105      	bne.n	800a4c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a4b8:	893b      	ldrh	r3, [r7, #8]
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	611a      	str	r2, [r3, #16]
 800a4c2:	e021      	b.n	800a508 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a4c4:	893b      	ldrh	r3, [r7, #8]
 800a4c6:	0a1b      	lsrs	r3, r3, #8
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	b2da      	uxtb	r2, r3
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4d4:	6a39      	ldr	r1, [r7, #32]
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f000 f982 	bl	800a7e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00d      	beq.n	800a4fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4e6:	2b04      	cmp	r3, #4
 800a4e8:	d107      	bne.n	800a4fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e050      	b.n	800a5a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a4fe:	893b      	ldrh	r3, [r7, #8]
 800a500:	b2da      	uxtb	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a50a:	6a39      	ldr	r1, [r7, #32]
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f000 f967 	bl	800a7e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00d      	beq.n	800a534 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a51c:	2b04      	cmp	r3, #4
 800a51e:	d107      	bne.n	800a530 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a52e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	e035      	b.n	800a5a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a542:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	6a3b      	ldr	r3, [r7, #32]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f000 f82b 	bl	800a5ac <I2C_WaitOnFlagUntilTimeout>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00d      	beq.n	800a578 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a56a:	d103      	bne.n	800a574 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a572:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a574:	2303      	movs	r3, #3
 800a576:	e013      	b.n	800a5a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a578:	897b      	ldrh	r3, [r7, #10]
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	f043 0301 	orr.w	r3, r3, #1
 800a580:	b2da      	uxtb	r2, r3
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58a:	6a3a      	ldr	r2, [r7, #32]
 800a58c:	4906      	ldr	r1, [pc, #24]	@ (800a5a8 <I2C_RequestMemoryRead+0x1cc>)
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f000 f886 	bl	800a6a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d001      	beq.n	800a59e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e000      	b.n	800a5a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3718      	adds	r7, #24
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	00010002 	.word	0x00010002

0800a5ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	603b      	str	r3, [r7, #0]
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a5bc:	e048      	b.n	800a650 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c4:	d044      	beq.n	800a650 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5c6:	f7fd fc7f 	bl	8007ec8 <HAL_GetTick>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	1ad3      	subs	r3, r2, r3
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d302      	bcc.n	800a5dc <I2C_WaitOnFlagUntilTimeout+0x30>
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d139      	bne.n	800a650 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	0c1b      	lsrs	r3, r3, #16
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d10d      	bne.n	800a602 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	695b      	ldr	r3, [r3, #20]
 800a5ec:	43da      	mvns	r2, r3
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	4013      	ands	r3, r2
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	bf0c      	ite	eq
 800a5f8:	2301      	moveq	r3, #1
 800a5fa:	2300      	movne	r3, #0
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	461a      	mov	r2, r3
 800a600:	e00c      	b.n	800a61c <I2C_WaitOnFlagUntilTimeout+0x70>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	43da      	mvns	r2, r3
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	4013      	ands	r3, r2
 800a60e:	b29b      	uxth	r3, r3
 800a610:	2b00      	cmp	r3, #0
 800a612:	bf0c      	ite	eq
 800a614:	2301      	moveq	r3, #1
 800a616:	2300      	movne	r3, #0
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	461a      	mov	r2, r3
 800a61c:	79fb      	ldrb	r3, [r7, #7]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d116      	bne.n	800a650 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2220      	movs	r2, #32
 800a62c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a63c:	f043 0220 	orr.w	r2, r3, #32
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	e023      	b.n	800a698 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	0c1b      	lsrs	r3, r3, #16
 800a654:	b2db      	uxtb	r3, r3
 800a656:	2b01      	cmp	r3, #1
 800a658:	d10d      	bne.n	800a676 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	695b      	ldr	r3, [r3, #20]
 800a660:	43da      	mvns	r2, r3
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	4013      	ands	r3, r2
 800a666:	b29b      	uxth	r3, r3
 800a668:	2b00      	cmp	r3, #0
 800a66a:	bf0c      	ite	eq
 800a66c:	2301      	moveq	r3, #1
 800a66e:	2300      	movne	r3, #0
 800a670:	b2db      	uxtb	r3, r3
 800a672:	461a      	mov	r2, r3
 800a674:	e00c      	b.n	800a690 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	699b      	ldr	r3, [r3, #24]
 800a67c:	43da      	mvns	r2, r3
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	4013      	ands	r3, r2
 800a682:	b29b      	uxth	r3, r3
 800a684:	2b00      	cmp	r3, #0
 800a686:	bf0c      	ite	eq
 800a688:	2301      	moveq	r3, #1
 800a68a:	2300      	movne	r3, #0
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	461a      	mov	r2, r3
 800a690:	79fb      	ldrb	r3, [r7, #7]
 800a692:	429a      	cmp	r2, r3
 800a694:	d093      	beq.n	800a5be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
 800a6ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a6ae:	e071      	b.n	800a794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	695b      	ldr	r3, [r3, #20]
 800a6b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6be:	d123      	bne.n	800a708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a6d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2220      	movs	r2, #32
 800a6e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6f4:	f043 0204 	orr.w	r2, r3, #4
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	e067      	b.n	800a7d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70e:	d041      	beq.n	800a794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a710:	f7fd fbda 	bl	8007ec8 <HAL_GetTick>
 800a714:	4602      	mov	r2, r0
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d302      	bcc.n	800a726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d136      	bne.n	800a794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	0c1b      	lsrs	r3, r3, #16
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d10c      	bne.n	800a74a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	695b      	ldr	r3, [r3, #20]
 800a736:	43da      	mvns	r2, r3
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	4013      	ands	r3, r2
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	2b00      	cmp	r3, #0
 800a740:	bf14      	ite	ne
 800a742:	2301      	movne	r3, #1
 800a744:	2300      	moveq	r3, #0
 800a746:	b2db      	uxtb	r3, r3
 800a748:	e00b      	b.n	800a762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	43da      	mvns	r2, r3
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	4013      	ands	r3, r2
 800a756:	b29b      	uxth	r3, r3
 800a758:	2b00      	cmp	r3, #0
 800a75a:	bf14      	ite	ne
 800a75c:	2301      	movne	r3, #1
 800a75e:	2300      	moveq	r3, #0
 800a760:	b2db      	uxtb	r3, r3
 800a762:	2b00      	cmp	r3, #0
 800a764:	d016      	beq.n	800a794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2200      	movs	r2, #0
 800a76a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2220      	movs	r2, #32
 800a770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a780:	f043 0220 	orr.w	r2, r3, #32
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a790:	2301      	movs	r3, #1
 800a792:	e021      	b.n	800a7d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	0c1b      	lsrs	r3, r3, #16
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d10c      	bne.n	800a7b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	695b      	ldr	r3, [r3, #20]
 800a7a4:	43da      	mvns	r2, r3
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	bf14      	ite	ne
 800a7b0:	2301      	movne	r3, #1
 800a7b2:	2300      	moveq	r3, #0
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	e00b      	b.n	800a7d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	43da      	mvns	r2, r3
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	bf14      	ite	ne
 800a7ca:	2301      	movne	r3, #1
 800a7cc:	2300      	moveq	r3, #0
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f47f af6d 	bne.w	800a6b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a7ec:	e034      	b.n	800a858 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f000 f8e3 	bl	800a9ba <I2C_IsAcknowledgeFailed>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d001      	beq.n	800a7fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e034      	b.n	800a868 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a804:	d028      	beq.n	800a858 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a806:	f7fd fb5f 	bl	8007ec8 <HAL_GetTick>
 800a80a:	4602      	mov	r2, r0
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	1ad3      	subs	r3, r2, r3
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	429a      	cmp	r2, r3
 800a814:	d302      	bcc.n	800a81c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d11d      	bne.n	800a858 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	695b      	ldr	r3, [r3, #20]
 800a822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a826:	2b80      	cmp	r3, #128	@ 0x80
 800a828:	d016      	beq.n	800a858 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2220      	movs	r2, #32
 800a834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a844:	f043 0220 	orr.w	r2, r3, #32
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e007      	b.n	800a868 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	695b      	ldr	r3, [r3, #20]
 800a85e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a862:	2b80      	cmp	r3, #128	@ 0x80
 800a864:	d1c3      	bne.n	800a7ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3710      	adds	r7, #16
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a87c:	e034      	b.n	800a8e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f000 f89b 	bl	800a9ba <I2C_IsAcknowledgeFailed>
 800a884:	4603      	mov	r3, r0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d001      	beq.n	800a88e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e034      	b.n	800a8f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a894:	d028      	beq.n	800a8e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a896:	f7fd fb17 	bl	8007ec8 <HAL_GetTick>
 800a89a:	4602      	mov	r2, r0
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	68ba      	ldr	r2, [r7, #8]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d302      	bcc.n	800a8ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d11d      	bne.n	800a8e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	695b      	ldr	r3, [r3, #20]
 800a8b2:	f003 0304 	and.w	r3, r3, #4
 800a8b6:	2b04      	cmp	r3, #4
 800a8b8:	d016      	beq.n	800a8e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2220      	movs	r2, #32
 800a8c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8d4:	f043 0220 	orr.w	r2, r3, #32
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e007      	b.n	800a8f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	695b      	ldr	r3, [r3, #20]
 800a8ee:	f003 0304 	and.w	r3, r3, #4
 800a8f2:	2b04      	cmp	r3, #4
 800a8f4:	d1c3      	bne.n	800a87e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a90c:	e049      	b.n	800a9a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	695b      	ldr	r3, [r3, #20]
 800a914:	f003 0310 	and.w	r3, r3, #16
 800a918:	2b10      	cmp	r3, #16
 800a91a:	d119      	bne.n	800a950 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f06f 0210 	mvn.w	r2, #16
 800a924:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2220      	movs	r2, #32
 800a930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2200      	movs	r2, #0
 800a938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2200      	movs	r2, #0
 800a948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e030      	b.n	800a9b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a950:	f7fd faba 	bl	8007ec8 <HAL_GetTick>
 800a954:	4602      	mov	r2, r0
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d302      	bcc.n	800a966 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d11d      	bne.n	800a9a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	695b      	ldr	r3, [r3, #20]
 800a96c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a970:	2b40      	cmp	r3, #64	@ 0x40
 800a972:	d016      	beq.n	800a9a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2220      	movs	r2, #32
 800a97e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a98e:	f043 0220 	orr.w	r2, r3, #32
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e007      	b.n	800a9b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	695b      	ldr	r3, [r3, #20]
 800a9a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9ac:	2b40      	cmp	r3, #64	@ 0x40
 800a9ae:	d1ae      	bne.n	800a90e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a9ba:	b480      	push	{r7}
 800a9bc:	b083      	sub	sp, #12
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a9cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9d0:	d11b      	bne.n	800aa0a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a9da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2220      	movs	r2, #32
 800a9e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9f6:	f043 0204 	orr.w	r2, r3, #4
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e000      	b.n	800aa0c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b086      	sub	sp, #24
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e267      	b.n	800aefa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 0301 	and.w	r3, r3, #1
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d075      	beq.n	800ab22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800aa36:	4b88      	ldr	r3, [pc, #544]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	f003 030c 	and.w	r3, r3, #12
 800aa3e:	2b04      	cmp	r3, #4
 800aa40:	d00c      	beq.n	800aa5c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aa42:	4b85      	ldr	r3, [pc, #532]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800aa4a:	2b08      	cmp	r3, #8
 800aa4c:	d112      	bne.n	800aa74 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aa4e:	4b82      	ldr	r3, [pc, #520]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa5a:	d10b      	bne.n	800aa74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa5c:	4b7e      	ldr	r3, [pc, #504]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d05b      	beq.n	800ab20 <HAL_RCC_OscConfig+0x108>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d157      	bne.n	800ab20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	e242      	b.n	800aefa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa7c:	d106      	bne.n	800aa8c <HAL_RCC_OscConfig+0x74>
 800aa7e:	4b76      	ldr	r3, [pc, #472]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a75      	ldr	r2, [pc, #468]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800aa84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa88:	6013      	str	r3, [r2, #0]
 800aa8a:	e01d      	b.n	800aac8 <HAL_RCC_OscConfig+0xb0>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aa94:	d10c      	bne.n	800aab0 <HAL_RCC_OscConfig+0x98>
 800aa96:	4b70      	ldr	r3, [pc, #448]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a6f      	ldr	r2, [pc, #444]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800aa9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800aaa0:	6013      	str	r3, [r2, #0]
 800aaa2:	4b6d      	ldr	r3, [pc, #436]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a6c      	ldr	r2, [pc, #432]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800aaa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aaac:	6013      	str	r3, [r2, #0]
 800aaae:	e00b      	b.n	800aac8 <HAL_RCC_OscConfig+0xb0>
 800aab0:	4b69      	ldr	r3, [pc, #420]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a68      	ldr	r2, [pc, #416]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800aab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aaba:	6013      	str	r3, [r2, #0]
 800aabc:	4b66      	ldr	r3, [pc, #408]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a65      	ldr	r2, [pc, #404]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800aac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d013      	beq.n	800aaf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aad0:	f7fd f9fa 	bl	8007ec8 <HAL_GetTick>
 800aad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aad6:	e008      	b.n	800aaea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aad8:	f7fd f9f6 	bl	8007ec8 <HAL_GetTick>
 800aadc:	4602      	mov	r2, r0
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	2b64      	cmp	r3, #100	@ 0x64
 800aae4:	d901      	bls.n	800aaea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e207      	b.n	800aefa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aaea:	4b5b      	ldr	r3, [pc, #364]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d0f0      	beq.n	800aad8 <HAL_RCC_OscConfig+0xc0>
 800aaf6:	e014      	b.n	800ab22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaf8:	f7fd f9e6 	bl	8007ec8 <HAL_GetTick>
 800aafc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aafe:	e008      	b.n	800ab12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab00:	f7fd f9e2 	bl	8007ec8 <HAL_GetTick>
 800ab04:	4602      	mov	r2, r0
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	2b64      	cmp	r3, #100	@ 0x64
 800ab0c:	d901      	bls.n	800ab12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	e1f3      	b.n	800aefa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ab12:	4b51      	ldr	r3, [pc, #324]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1f0      	bne.n	800ab00 <HAL_RCC_OscConfig+0xe8>
 800ab1e:	e000      	b.n	800ab22 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 0302 	and.w	r3, r3, #2
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d063      	beq.n	800abf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ab2e:	4b4a      	ldr	r3, [pc, #296]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	f003 030c 	and.w	r3, r3, #12
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00b      	beq.n	800ab52 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ab3a:	4b47      	ldr	r3, [pc, #284]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ab42:	2b08      	cmp	r3, #8
 800ab44:	d11c      	bne.n	800ab80 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ab46:	4b44      	ldr	r3, [pc, #272]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d116      	bne.n	800ab80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab52:	4b41      	ldr	r3, [pc, #260]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 0302 	and.w	r3, r3, #2
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d005      	beq.n	800ab6a <HAL_RCC_OscConfig+0x152>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d001      	beq.n	800ab6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	e1c7      	b.n	800aefa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab6a:	4b3b      	ldr	r3, [pc, #236]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	00db      	lsls	r3, r3, #3
 800ab78:	4937      	ldr	r1, [pc, #220]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab7e:	e03a      	b.n	800abf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d020      	beq.n	800abca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ab88:	4b34      	ldr	r3, [pc, #208]	@ (800ac5c <HAL_RCC_OscConfig+0x244>)
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab8e:	f7fd f99b 	bl	8007ec8 <HAL_GetTick>
 800ab92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab94:	e008      	b.n	800aba8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab96:	f7fd f997 	bl	8007ec8 <HAL_GetTick>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d901      	bls.n	800aba8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800aba4:	2303      	movs	r3, #3
 800aba6:	e1a8      	b.n	800aefa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aba8:	4b2b      	ldr	r3, [pc, #172]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f003 0302 	and.w	r3, r3, #2
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d0f0      	beq.n	800ab96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abb4:	4b28      	ldr	r3, [pc, #160]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	00db      	lsls	r3, r3, #3
 800abc2:	4925      	ldr	r1, [pc, #148]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800abc4:	4313      	orrs	r3, r2
 800abc6:	600b      	str	r3, [r1, #0]
 800abc8:	e015      	b.n	800abf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800abca:	4b24      	ldr	r3, [pc, #144]	@ (800ac5c <HAL_RCC_OscConfig+0x244>)
 800abcc:	2200      	movs	r2, #0
 800abce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abd0:	f7fd f97a 	bl	8007ec8 <HAL_GetTick>
 800abd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800abd6:	e008      	b.n	800abea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800abd8:	f7fd f976 	bl	8007ec8 <HAL_GetTick>
 800abdc:	4602      	mov	r2, r0
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	2b02      	cmp	r3, #2
 800abe4:	d901      	bls.n	800abea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800abe6:	2303      	movs	r3, #3
 800abe8:	e187      	b.n	800aefa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800abea:	4b1b      	ldr	r3, [pc, #108]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f003 0302 	and.w	r3, r3, #2
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1f0      	bne.n	800abd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 0308 	and.w	r3, r3, #8
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d036      	beq.n	800ac70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	695b      	ldr	r3, [r3, #20]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d016      	beq.n	800ac38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac0a:	4b15      	ldr	r3, [pc, #84]	@ (800ac60 <HAL_RCC_OscConfig+0x248>)
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac10:	f7fd f95a 	bl	8007ec8 <HAL_GetTick>
 800ac14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ac16:	e008      	b.n	800ac2a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac18:	f7fd f956 	bl	8007ec8 <HAL_GetTick>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	1ad3      	subs	r3, r2, r3
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d901      	bls.n	800ac2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e167      	b.n	800aefa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ac2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ac58 <HAL_RCC_OscConfig+0x240>)
 800ac2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac2e:	f003 0302 	and.w	r3, r3, #2
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d0f0      	beq.n	800ac18 <HAL_RCC_OscConfig+0x200>
 800ac36:	e01b      	b.n	800ac70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac38:	4b09      	ldr	r3, [pc, #36]	@ (800ac60 <HAL_RCC_OscConfig+0x248>)
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac3e:	f7fd f943 	bl	8007ec8 <HAL_GetTick>
 800ac42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac44:	e00e      	b.n	800ac64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac46:	f7fd f93f 	bl	8007ec8 <HAL_GetTick>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	1ad3      	subs	r3, r2, r3
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d907      	bls.n	800ac64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ac54:	2303      	movs	r3, #3
 800ac56:	e150      	b.n	800aefa <HAL_RCC_OscConfig+0x4e2>
 800ac58:	40023800 	.word	0x40023800
 800ac5c:	42470000 	.word	0x42470000
 800ac60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac64:	4b88      	ldr	r3, [pc, #544]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ac66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac68:	f003 0302 	and.w	r3, r3, #2
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d1ea      	bne.n	800ac46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f003 0304 	and.w	r3, r3, #4
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 8097 	beq.w	800adac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac82:	4b81      	ldr	r3, [pc, #516]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ac84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d10f      	bne.n	800acae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac8e:	2300      	movs	r3, #0
 800ac90:	60bb      	str	r3, [r7, #8]
 800ac92:	4b7d      	ldr	r3, [pc, #500]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ac94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac96:	4a7c      	ldr	r2, [pc, #496]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ac98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac9c:	6413      	str	r3, [r2, #64]	@ 0x40
 800ac9e:	4b7a      	ldr	r3, [pc, #488]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800aca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aca6:	60bb      	str	r3, [r7, #8]
 800aca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800acaa:	2301      	movs	r3, #1
 800acac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800acae:	4b77      	ldr	r3, [pc, #476]	@ (800ae8c <HAL_RCC_OscConfig+0x474>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d118      	bne.n	800acec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800acba:	4b74      	ldr	r3, [pc, #464]	@ (800ae8c <HAL_RCC_OscConfig+0x474>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a73      	ldr	r2, [pc, #460]	@ (800ae8c <HAL_RCC_OscConfig+0x474>)
 800acc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800acc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800acc6:	f7fd f8ff 	bl	8007ec8 <HAL_GetTick>
 800acca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800accc:	e008      	b.n	800ace0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acce:	f7fd f8fb 	bl	8007ec8 <HAL_GetTick>
 800acd2:	4602      	mov	r2, r0
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	1ad3      	subs	r3, r2, r3
 800acd8:	2b02      	cmp	r3, #2
 800acda:	d901      	bls.n	800ace0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800acdc:	2303      	movs	r3, #3
 800acde:	e10c      	b.n	800aefa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ace0:	4b6a      	ldr	r3, [pc, #424]	@ (800ae8c <HAL_RCC_OscConfig+0x474>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d0f0      	beq.n	800acce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d106      	bne.n	800ad02 <HAL_RCC_OscConfig+0x2ea>
 800acf4:	4b64      	ldr	r3, [pc, #400]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800acf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acf8:	4a63      	ldr	r2, [pc, #396]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800acfa:	f043 0301 	orr.w	r3, r3, #1
 800acfe:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad00:	e01c      	b.n	800ad3c <HAL_RCC_OscConfig+0x324>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	2b05      	cmp	r3, #5
 800ad08:	d10c      	bne.n	800ad24 <HAL_RCC_OscConfig+0x30c>
 800ad0a:	4b5f      	ldr	r3, [pc, #380]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ad0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad0e:	4a5e      	ldr	r2, [pc, #376]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ad10:	f043 0304 	orr.w	r3, r3, #4
 800ad14:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad16:	4b5c      	ldr	r3, [pc, #368]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ad18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad1a:	4a5b      	ldr	r2, [pc, #364]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ad1c:	f043 0301 	orr.w	r3, r3, #1
 800ad20:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad22:	e00b      	b.n	800ad3c <HAL_RCC_OscConfig+0x324>
 800ad24:	4b58      	ldr	r3, [pc, #352]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ad26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad28:	4a57      	ldr	r2, [pc, #348]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ad2a:	f023 0301 	bic.w	r3, r3, #1
 800ad2e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad30:	4b55      	ldr	r3, [pc, #340]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ad32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad34:	4a54      	ldr	r2, [pc, #336]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ad36:	f023 0304 	bic.w	r3, r3, #4
 800ad3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d015      	beq.n	800ad70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad44:	f7fd f8c0 	bl	8007ec8 <HAL_GetTick>
 800ad48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad4a:	e00a      	b.n	800ad62 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad4c:	f7fd f8bc 	bl	8007ec8 <HAL_GetTick>
 800ad50:	4602      	mov	r2, r0
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	1ad3      	subs	r3, r2, r3
 800ad56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d901      	bls.n	800ad62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ad5e:	2303      	movs	r3, #3
 800ad60:	e0cb      	b.n	800aefa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad62:	4b49      	ldr	r3, [pc, #292]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ad64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad66:	f003 0302 	and.w	r3, r3, #2
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d0ee      	beq.n	800ad4c <HAL_RCC_OscConfig+0x334>
 800ad6e:	e014      	b.n	800ad9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad70:	f7fd f8aa 	bl	8007ec8 <HAL_GetTick>
 800ad74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad76:	e00a      	b.n	800ad8e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad78:	f7fd f8a6 	bl	8007ec8 <HAL_GetTick>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d901      	bls.n	800ad8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ad8a:	2303      	movs	r3, #3
 800ad8c:	e0b5      	b.n	800aefa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad8e:	4b3e      	ldr	r3, [pc, #248]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ad90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad92:	f003 0302 	and.w	r3, r3, #2
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1ee      	bne.n	800ad78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ad9a:	7dfb      	ldrb	r3, [r7, #23]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d105      	bne.n	800adac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ada0:	4b39      	ldr	r3, [pc, #228]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ada2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ada4:	4a38      	ldr	r2, [pc, #224]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ada6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800adaa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	699b      	ldr	r3, [r3, #24]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f000 80a1 	beq.w	800aef8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800adb6:	4b34      	ldr	r3, [pc, #208]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	f003 030c 	and.w	r3, r3, #12
 800adbe:	2b08      	cmp	r3, #8
 800adc0:	d05c      	beq.n	800ae7c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	699b      	ldr	r3, [r3, #24]
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	d141      	bne.n	800ae4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800adca:	4b31      	ldr	r3, [pc, #196]	@ (800ae90 <HAL_RCC_OscConfig+0x478>)
 800adcc:	2200      	movs	r2, #0
 800adce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800add0:	f7fd f87a 	bl	8007ec8 <HAL_GetTick>
 800add4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800add6:	e008      	b.n	800adea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800add8:	f7fd f876 	bl	8007ec8 <HAL_GetTick>
 800addc:	4602      	mov	r2, r0
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	1ad3      	subs	r3, r2, r3
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	d901      	bls.n	800adea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ade6:	2303      	movs	r3, #3
 800ade8:	e087      	b.n	800aefa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800adea:	4b27      	ldr	r3, [pc, #156]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1f0      	bne.n	800add8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	69da      	ldr	r2, [r3, #28]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6a1b      	ldr	r3, [r3, #32]
 800adfe:	431a      	orrs	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae04:	019b      	lsls	r3, r3, #6
 800ae06:	431a      	orrs	r2, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae0c:	085b      	lsrs	r3, r3, #1
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	041b      	lsls	r3, r3, #16
 800ae12:	431a      	orrs	r2, r3
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae18:	061b      	lsls	r3, r3, #24
 800ae1a:	491b      	ldr	r1, [pc, #108]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ae20:	4b1b      	ldr	r3, [pc, #108]	@ (800ae90 <HAL_RCC_OscConfig+0x478>)
 800ae22:	2201      	movs	r2, #1
 800ae24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae26:	f7fd f84f 	bl	8007ec8 <HAL_GetTick>
 800ae2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae2c:	e008      	b.n	800ae40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae2e:	f7fd f84b 	bl	8007ec8 <HAL_GetTick>
 800ae32:	4602      	mov	r2, r0
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d901      	bls.n	800ae40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	e05c      	b.n	800aefa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae40:	4b11      	ldr	r3, [pc, #68]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d0f0      	beq.n	800ae2e <HAL_RCC_OscConfig+0x416>
 800ae4c:	e054      	b.n	800aef8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae4e:	4b10      	ldr	r3, [pc, #64]	@ (800ae90 <HAL_RCC_OscConfig+0x478>)
 800ae50:	2200      	movs	r2, #0
 800ae52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae54:	f7fd f838 	bl	8007ec8 <HAL_GetTick>
 800ae58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae5a:	e008      	b.n	800ae6e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae5c:	f7fd f834 	bl	8007ec8 <HAL_GetTick>
 800ae60:	4602      	mov	r2, r0
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	2b02      	cmp	r3, #2
 800ae68:	d901      	bls.n	800ae6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ae6a:	2303      	movs	r3, #3
 800ae6c:	e045      	b.n	800aefa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae6e:	4b06      	ldr	r3, [pc, #24]	@ (800ae88 <HAL_RCC_OscConfig+0x470>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d1f0      	bne.n	800ae5c <HAL_RCC_OscConfig+0x444>
 800ae7a:	e03d      	b.n	800aef8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d107      	bne.n	800ae94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e038      	b.n	800aefa <HAL_RCC_OscConfig+0x4e2>
 800ae88:	40023800 	.word	0x40023800
 800ae8c:	40007000 	.word	0x40007000
 800ae90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ae94:	4b1b      	ldr	r3, [pc, #108]	@ (800af04 <HAL_RCC_OscConfig+0x4ec>)
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	699b      	ldr	r3, [r3, #24]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d028      	beq.n	800aef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d121      	bne.n	800aef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d11a      	bne.n	800aef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800aec4:	4013      	ands	r3, r2
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800aeca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aecc:	4293      	cmp	r3, r2
 800aece:	d111      	bne.n	800aef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeda:	085b      	lsrs	r3, r3, #1
 800aedc:	3b01      	subs	r3, #1
 800aede:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d107      	bne.n	800aef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d001      	beq.n	800aef8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	e000      	b.n	800aefa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3718      	adds	r7, #24
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	40023800 	.word	0x40023800

0800af08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d101      	bne.n	800af1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	e0cc      	b.n	800b0b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800af1c:	4b68      	ldr	r3, [pc, #416]	@ (800b0c0 <HAL_RCC_ClockConfig+0x1b8>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 0307 	and.w	r3, r3, #7
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	429a      	cmp	r2, r3
 800af28:	d90c      	bls.n	800af44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af2a:	4b65      	ldr	r3, [pc, #404]	@ (800b0c0 <HAL_RCC_ClockConfig+0x1b8>)
 800af2c:	683a      	ldr	r2, [r7, #0]
 800af2e:	b2d2      	uxtb	r2, r2
 800af30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af32:	4b63      	ldr	r3, [pc, #396]	@ (800b0c0 <HAL_RCC_ClockConfig+0x1b8>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 0307 	and.w	r3, r3, #7
 800af3a:	683a      	ldr	r2, [r7, #0]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d001      	beq.n	800af44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	e0b8      	b.n	800b0b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 0302 	and.w	r3, r3, #2
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d020      	beq.n	800af92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f003 0304 	and.w	r3, r3, #4
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d005      	beq.n	800af68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800af5c:	4b59      	ldr	r3, [pc, #356]	@ (800b0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	4a58      	ldr	r2, [pc, #352]	@ (800b0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800af62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800af66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f003 0308 	and.w	r3, r3, #8
 800af70:	2b00      	cmp	r3, #0
 800af72:	d005      	beq.n	800af80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800af74:	4b53      	ldr	r3, [pc, #332]	@ (800b0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	4a52      	ldr	r2, [pc, #328]	@ (800b0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800af7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800af7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af80:	4b50      	ldr	r3, [pc, #320]	@ (800b0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	494d      	ldr	r1, [pc, #308]	@ (800b0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800af8e:	4313      	orrs	r3, r2
 800af90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f003 0301 	and.w	r3, r3, #1
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d044      	beq.n	800b028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d107      	bne.n	800afb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afa6:	4b47      	ldr	r3, [pc, #284]	@ (800b0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d119      	bne.n	800afe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e07f      	b.n	800b0b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	2b02      	cmp	r3, #2
 800afbc:	d003      	beq.n	800afc6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d107      	bne.n	800afd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800afc6:	4b3f      	ldr	r3, [pc, #252]	@ (800b0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d109      	bne.n	800afe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	e06f      	b.n	800b0b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afd6:	4b3b      	ldr	r3, [pc, #236]	@ (800b0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 0302 	and.w	r3, r3, #2
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d101      	bne.n	800afe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	e067      	b.n	800b0b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800afe6:	4b37      	ldr	r3, [pc, #220]	@ (800b0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	f023 0203 	bic.w	r2, r3, #3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	4934      	ldr	r1, [pc, #208]	@ (800b0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800aff4:	4313      	orrs	r3, r2
 800aff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aff8:	f7fc ff66 	bl	8007ec8 <HAL_GetTick>
 800affc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800affe:	e00a      	b.n	800b016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b000:	f7fc ff62 	bl	8007ec8 <HAL_GetTick>
 800b004:	4602      	mov	r2, r0
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b00e:	4293      	cmp	r3, r2
 800b010:	d901      	bls.n	800b016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b012:	2303      	movs	r3, #3
 800b014:	e04f      	b.n	800b0b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b016:	4b2b      	ldr	r3, [pc, #172]	@ (800b0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	f003 020c 	and.w	r2, r3, #12
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	429a      	cmp	r2, r3
 800b026:	d1eb      	bne.n	800b000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b028:	4b25      	ldr	r3, [pc, #148]	@ (800b0c0 <HAL_RCC_ClockConfig+0x1b8>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 0307 	and.w	r3, r3, #7
 800b030:	683a      	ldr	r2, [r7, #0]
 800b032:	429a      	cmp	r2, r3
 800b034:	d20c      	bcs.n	800b050 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b036:	4b22      	ldr	r3, [pc, #136]	@ (800b0c0 <HAL_RCC_ClockConfig+0x1b8>)
 800b038:	683a      	ldr	r2, [r7, #0]
 800b03a:	b2d2      	uxtb	r2, r2
 800b03c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b03e:	4b20      	ldr	r3, [pc, #128]	@ (800b0c0 <HAL_RCC_ClockConfig+0x1b8>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f003 0307 	and.w	r3, r3, #7
 800b046:	683a      	ldr	r2, [r7, #0]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d001      	beq.n	800b050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b04c:	2301      	movs	r3, #1
 800b04e:	e032      	b.n	800b0b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 0304 	and.w	r3, r3, #4
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d008      	beq.n	800b06e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b05c:	4b19      	ldr	r3, [pc, #100]	@ (800b0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	4916      	ldr	r1, [pc, #88]	@ (800b0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b06a:	4313      	orrs	r3, r2
 800b06c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f003 0308 	and.w	r3, r3, #8
 800b076:	2b00      	cmp	r3, #0
 800b078:	d009      	beq.n	800b08e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b07a:	4b12      	ldr	r3, [pc, #72]	@ (800b0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	00db      	lsls	r3, r3, #3
 800b088:	490e      	ldr	r1, [pc, #56]	@ (800b0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b08a:	4313      	orrs	r3, r2
 800b08c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b08e:	f000 f821 	bl	800b0d4 <HAL_RCC_GetSysClockFreq>
 800b092:	4602      	mov	r2, r0
 800b094:	4b0b      	ldr	r3, [pc, #44]	@ (800b0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	091b      	lsrs	r3, r3, #4
 800b09a:	f003 030f 	and.w	r3, r3, #15
 800b09e:	490a      	ldr	r1, [pc, #40]	@ (800b0c8 <HAL_RCC_ClockConfig+0x1c0>)
 800b0a0:	5ccb      	ldrb	r3, [r1, r3]
 800b0a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b0a6:	4a09      	ldr	r2, [pc, #36]	@ (800b0cc <HAL_RCC_ClockConfig+0x1c4>)
 800b0a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800b0aa:	4b09      	ldr	r3, [pc, #36]	@ (800b0d0 <HAL_RCC_ClockConfig+0x1c8>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7fc fec6 	bl	8007e40 <HAL_InitTick>

  return HAL_OK;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	40023c00 	.word	0x40023c00
 800b0c4:	40023800 	.word	0x40023800
 800b0c8:	08014730 	.word	0x08014730
 800b0cc:	2000000c 	.word	0x2000000c
 800b0d0:	20000010 	.word	0x20000010

0800b0d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b0d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0d8:	b090      	sub	sp, #64	@ 0x40
 800b0da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b0ec:	4b59      	ldr	r3, [pc, #356]	@ (800b254 <HAL_RCC_GetSysClockFreq+0x180>)
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	f003 030c 	and.w	r3, r3, #12
 800b0f4:	2b08      	cmp	r3, #8
 800b0f6:	d00d      	beq.n	800b114 <HAL_RCC_GetSysClockFreq+0x40>
 800b0f8:	2b08      	cmp	r3, #8
 800b0fa:	f200 80a1 	bhi.w	800b240 <HAL_RCC_GetSysClockFreq+0x16c>
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d002      	beq.n	800b108 <HAL_RCC_GetSysClockFreq+0x34>
 800b102:	2b04      	cmp	r3, #4
 800b104:	d003      	beq.n	800b10e <HAL_RCC_GetSysClockFreq+0x3a>
 800b106:	e09b      	b.n	800b240 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b108:	4b53      	ldr	r3, [pc, #332]	@ (800b258 <HAL_RCC_GetSysClockFreq+0x184>)
 800b10a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b10c:	e09b      	b.n	800b246 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b10e:	4b53      	ldr	r3, [pc, #332]	@ (800b25c <HAL_RCC_GetSysClockFreq+0x188>)
 800b110:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b112:	e098      	b.n	800b246 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b114:	4b4f      	ldr	r3, [pc, #316]	@ (800b254 <HAL_RCC_GetSysClockFreq+0x180>)
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b11c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b11e:	4b4d      	ldr	r3, [pc, #308]	@ (800b254 <HAL_RCC_GetSysClockFreq+0x180>)
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b126:	2b00      	cmp	r3, #0
 800b128:	d028      	beq.n	800b17c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b12a:	4b4a      	ldr	r3, [pc, #296]	@ (800b254 <HAL_RCC_GetSysClockFreq+0x180>)
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	099b      	lsrs	r3, r3, #6
 800b130:	2200      	movs	r2, #0
 800b132:	623b      	str	r3, [r7, #32]
 800b134:	627a      	str	r2, [r7, #36]	@ 0x24
 800b136:	6a3b      	ldr	r3, [r7, #32]
 800b138:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b13c:	2100      	movs	r1, #0
 800b13e:	4b47      	ldr	r3, [pc, #284]	@ (800b25c <HAL_RCC_GetSysClockFreq+0x188>)
 800b140:	fb03 f201 	mul.w	r2, r3, r1
 800b144:	2300      	movs	r3, #0
 800b146:	fb00 f303 	mul.w	r3, r0, r3
 800b14a:	4413      	add	r3, r2
 800b14c:	4a43      	ldr	r2, [pc, #268]	@ (800b25c <HAL_RCC_GetSysClockFreq+0x188>)
 800b14e:	fba0 1202 	umull	r1, r2, r0, r2
 800b152:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b154:	460a      	mov	r2, r1
 800b156:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b158:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b15a:	4413      	add	r3, r2
 800b15c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b160:	2200      	movs	r2, #0
 800b162:	61bb      	str	r3, [r7, #24]
 800b164:	61fa      	str	r2, [r7, #28]
 800b166:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b16a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b16e:	f7f5 fd8b 	bl	8000c88 <__aeabi_uldivmod>
 800b172:	4602      	mov	r2, r0
 800b174:	460b      	mov	r3, r1
 800b176:	4613      	mov	r3, r2
 800b178:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b17a:	e053      	b.n	800b224 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b17c:	4b35      	ldr	r3, [pc, #212]	@ (800b254 <HAL_RCC_GetSysClockFreq+0x180>)
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	099b      	lsrs	r3, r3, #6
 800b182:	2200      	movs	r2, #0
 800b184:	613b      	str	r3, [r7, #16]
 800b186:	617a      	str	r2, [r7, #20]
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b18e:	f04f 0b00 	mov.w	fp, #0
 800b192:	4652      	mov	r2, sl
 800b194:	465b      	mov	r3, fp
 800b196:	f04f 0000 	mov.w	r0, #0
 800b19a:	f04f 0100 	mov.w	r1, #0
 800b19e:	0159      	lsls	r1, r3, #5
 800b1a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b1a4:	0150      	lsls	r0, r2, #5
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	ebb2 080a 	subs.w	r8, r2, sl
 800b1ae:	eb63 090b 	sbc.w	r9, r3, fp
 800b1b2:	f04f 0200 	mov.w	r2, #0
 800b1b6:	f04f 0300 	mov.w	r3, #0
 800b1ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b1be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b1c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b1c6:	ebb2 0408 	subs.w	r4, r2, r8
 800b1ca:	eb63 0509 	sbc.w	r5, r3, r9
 800b1ce:	f04f 0200 	mov.w	r2, #0
 800b1d2:	f04f 0300 	mov.w	r3, #0
 800b1d6:	00eb      	lsls	r3, r5, #3
 800b1d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b1dc:	00e2      	lsls	r2, r4, #3
 800b1de:	4614      	mov	r4, r2
 800b1e0:	461d      	mov	r5, r3
 800b1e2:	eb14 030a 	adds.w	r3, r4, sl
 800b1e6:	603b      	str	r3, [r7, #0]
 800b1e8:	eb45 030b 	adc.w	r3, r5, fp
 800b1ec:	607b      	str	r3, [r7, #4]
 800b1ee:	f04f 0200 	mov.w	r2, #0
 800b1f2:	f04f 0300 	mov.w	r3, #0
 800b1f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b1fa:	4629      	mov	r1, r5
 800b1fc:	028b      	lsls	r3, r1, #10
 800b1fe:	4621      	mov	r1, r4
 800b200:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b204:	4621      	mov	r1, r4
 800b206:	028a      	lsls	r2, r1, #10
 800b208:	4610      	mov	r0, r2
 800b20a:	4619      	mov	r1, r3
 800b20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b20e:	2200      	movs	r2, #0
 800b210:	60bb      	str	r3, [r7, #8]
 800b212:	60fa      	str	r2, [r7, #12]
 800b214:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b218:	f7f5 fd36 	bl	8000c88 <__aeabi_uldivmod>
 800b21c:	4602      	mov	r2, r0
 800b21e:	460b      	mov	r3, r1
 800b220:	4613      	mov	r3, r2
 800b222:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800b224:	4b0b      	ldr	r3, [pc, #44]	@ (800b254 <HAL_RCC_GetSysClockFreq+0x180>)
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	0c1b      	lsrs	r3, r3, #16
 800b22a:	f003 0303 	and.w	r3, r3, #3
 800b22e:	3301      	adds	r3, #1
 800b230:	005b      	lsls	r3, r3, #1
 800b232:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800b234:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b238:	fbb2 f3f3 	udiv	r3, r2, r3
 800b23c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b23e:	e002      	b.n	800b246 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b240:	4b05      	ldr	r3, [pc, #20]	@ (800b258 <HAL_RCC_GetSysClockFreq+0x184>)
 800b242:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b244:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3740      	adds	r7, #64	@ 0x40
 800b24c:	46bd      	mov	sp, r7
 800b24e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b252:	bf00      	nop
 800b254:	40023800 	.word	0x40023800
 800b258:	00f42400 	.word	0x00f42400
 800b25c:	017d7840 	.word	0x017d7840

0800b260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b260:	b480      	push	{r7}
 800b262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b264:	4b03      	ldr	r3, [pc, #12]	@ (800b274 <HAL_RCC_GetHCLKFreq+0x14>)
 800b266:	681b      	ldr	r3, [r3, #0]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	2000000c 	.word	0x2000000c

0800b278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b27c:	f7ff fff0 	bl	800b260 <HAL_RCC_GetHCLKFreq>
 800b280:	4602      	mov	r2, r0
 800b282:	4b05      	ldr	r3, [pc, #20]	@ (800b298 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	0a9b      	lsrs	r3, r3, #10
 800b288:	f003 0307 	and.w	r3, r3, #7
 800b28c:	4903      	ldr	r1, [pc, #12]	@ (800b29c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b28e:	5ccb      	ldrb	r3, [r1, r3]
 800b290:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b294:	4618      	mov	r0, r3
 800b296:	bd80      	pop	{r7, pc}
 800b298:	40023800 	.word	0x40023800
 800b29c:	08014740 	.word	0x08014740

0800b2a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b2a4:	f7ff ffdc 	bl	800b260 <HAL_RCC_GetHCLKFreq>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	4b05      	ldr	r3, [pc, #20]	@ (800b2c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	0b5b      	lsrs	r3, r3, #13
 800b2b0:	f003 0307 	and.w	r3, r3, #7
 800b2b4:	4903      	ldr	r1, [pc, #12]	@ (800b2c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b2b6:	5ccb      	ldrb	r3, [r1, r3]
 800b2b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	40023800 	.word	0x40023800
 800b2c4:	08014740 	.word	0x08014740

0800b2c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d101      	bne.n	800b2da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e07b      	b.n	800b3d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d108      	bne.n	800b2f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b2ea:	d009      	beq.n	800b300 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	61da      	str	r2, [r3, #28]
 800b2f2:	e005      	b.n	800b300 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d106      	bne.n	800b320 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f7fc fb50 	bl	80079c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2202      	movs	r2, #2
 800b324:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b336:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b348:	431a      	orrs	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b352:	431a      	orrs	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	f003 0302 	and.w	r3, r3, #2
 800b35c:	431a      	orrs	r2, r3
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	695b      	ldr	r3, [r3, #20]
 800b362:	f003 0301 	and.w	r3, r3, #1
 800b366:	431a      	orrs	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b370:	431a      	orrs	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	69db      	ldr	r3, [r3, #28]
 800b376:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b37a:	431a      	orrs	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6a1b      	ldr	r3, [r3, #32]
 800b380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b384:	ea42 0103 	orr.w	r1, r2, r3
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b38c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	430a      	orrs	r2, r1
 800b396:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	699b      	ldr	r3, [r3, #24]
 800b39c:	0c1b      	lsrs	r3, r3, #16
 800b39e:	f003 0104 	and.w	r1, r3, #4
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3a6:	f003 0210 	and.w	r2, r3, #16
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	430a      	orrs	r2, r1
 800b3b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	69da      	ldr	r2, [r3, #28]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b3c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b088      	sub	sp, #32
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	60f8      	str	r0, [r7, #12]
 800b3e2:	60b9      	str	r1, [r7, #8]
 800b3e4:	603b      	str	r3, [r7, #0]
 800b3e6:	4613      	mov	r3, r2
 800b3e8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b3ea:	f7fc fd6d 	bl	8007ec8 <HAL_GetTick>
 800b3ee:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800b3f0:	88fb      	ldrh	r3, [r7, #6]
 800b3f2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d001      	beq.n	800b404 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800b400:	2302      	movs	r3, #2
 800b402:	e12a      	b.n	800b65a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d002      	beq.n	800b410 <HAL_SPI_Transmit+0x36>
 800b40a:	88fb      	ldrh	r3, [r7, #6]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d101      	bne.n	800b414 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800b410:	2301      	movs	r3, #1
 800b412:	e122      	b.n	800b65a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d101      	bne.n	800b422 <HAL_SPI_Transmit+0x48>
 800b41e:	2302      	movs	r3, #2
 800b420:	e11b      	b.n	800b65a <HAL_SPI_Transmit+0x280>
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2201      	movs	r2, #1
 800b426:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2203      	movs	r2, #3
 800b42e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2200      	movs	r2, #0
 800b436:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	88fa      	ldrh	r2, [r7, #6]
 800b442:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	88fa      	ldrh	r2, [r7, #6]
 800b448:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2200      	movs	r2, #0
 800b44e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2200      	movs	r2, #0
 800b45a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2200      	movs	r2, #0
 800b460:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2200      	movs	r2, #0
 800b466:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b470:	d10f      	bne.n	800b492 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b480:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b490:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b49c:	2b40      	cmp	r3, #64	@ 0x40
 800b49e:	d007      	beq.n	800b4b0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b4ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4b8:	d152      	bne.n	800b560 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d002      	beq.n	800b4c8 <HAL_SPI_Transmit+0xee>
 800b4c2:	8b7b      	ldrh	r3, [r7, #26]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d145      	bne.n	800b554 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4cc:	881a      	ldrh	r2, [r3, #0]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4d8:	1c9a      	adds	r2, r3, #2
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b4ec:	e032      	b.n	800b554 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	f003 0302 	and.w	r3, r3, #2
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	d112      	bne.n	800b522 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b500:	881a      	ldrh	r2, [r3, #0]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b50c:	1c9a      	adds	r2, r3, #2
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b516:	b29b      	uxth	r3, r3
 800b518:	3b01      	subs	r3, #1
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b520:	e018      	b.n	800b554 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b522:	f7fc fcd1 	bl	8007ec8 <HAL_GetTick>
 800b526:	4602      	mov	r2, r0
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	1ad3      	subs	r3, r2, r3
 800b52c:	683a      	ldr	r2, [r7, #0]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d803      	bhi.n	800b53a <HAL_SPI_Transmit+0x160>
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b538:	d102      	bne.n	800b540 <HAL_SPI_Transmit+0x166>
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d109      	bne.n	800b554 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2201      	movs	r2, #1
 800b544:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b550:	2303      	movs	r3, #3
 800b552:	e082      	b.n	800b65a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b558:	b29b      	uxth	r3, r3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1c7      	bne.n	800b4ee <HAL_SPI_Transmit+0x114>
 800b55e:	e053      	b.n	800b608 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d002      	beq.n	800b56e <HAL_SPI_Transmit+0x194>
 800b568:	8b7b      	ldrh	r3, [r7, #26]
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d147      	bne.n	800b5fe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	330c      	adds	r3, #12
 800b578:	7812      	ldrb	r2, [r2, #0]
 800b57a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b580:	1c5a      	adds	r2, r3, #1
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	3b01      	subs	r3, #1
 800b58e:	b29a      	uxth	r2, r3
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b594:	e033      	b.n	800b5fe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	f003 0302 	and.w	r3, r3, #2
 800b5a0:	2b02      	cmp	r3, #2
 800b5a2:	d113      	bne.n	800b5cc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	330c      	adds	r3, #12
 800b5ae:	7812      	ldrb	r2, [r2, #0]
 800b5b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5b6:	1c5a      	adds	r2, r3, #1
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	b29a      	uxth	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b5ca:	e018      	b.n	800b5fe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5cc:	f7fc fc7c 	bl	8007ec8 <HAL_GetTick>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	69fb      	ldr	r3, [r7, #28]
 800b5d4:	1ad3      	subs	r3, r2, r3
 800b5d6:	683a      	ldr	r2, [r7, #0]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d803      	bhi.n	800b5e4 <HAL_SPI_Transmit+0x20a>
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5e2:	d102      	bne.n	800b5ea <HAL_SPI_Transmit+0x210>
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d109      	bne.n	800b5fe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	e02d      	b.n	800b65a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b602:	b29b      	uxth	r3, r3
 800b604:	2b00      	cmp	r3, #0
 800b606:	d1c6      	bne.n	800b596 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b608:	69fa      	ldr	r2, [r7, #28]
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 fbd9 	bl	800bdc4 <SPI_EndRxTxTransaction>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2220      	movs	r2, #32
 800b61c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10a      	bne.n	800b63c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b626:	2300      	movs	r3, #0
 800b628:	617b      	str	r3, [r7, #20]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	617b      	str	r3, [r7, #20]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	617b      	str	r3, [r7, #20]
 800b63a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2201      	movs	r2, #1
 800b640:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2200      	movs	r2, #0
 800b648:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b650:	2b00      	cmp	r3, #0
 800b652:	d001      	beq.n	800b658 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	e000      	b.n	800b65a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800b658:	2300      	movs	r3, #0
  }
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3720      	adds	r7, #32
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b088      	sub	sp, #32
 800b666:	af02      	add	r7, sp, #8
 800b668:	60f8      	str	r0, [r7, #12]
 800b66a:	60b9      	str	r1, [r7, #8]
 800b66c:	603b      	str	r3, [r7, #0]
 800b66e:	4613      	mov	r3, r2
 800b670:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d001      	beq.n	800b682 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800b67e:	2302      	movs	r3, #2
 800b680:	e104      	b.n	800b88c <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d002      	beq.n	800b68e <HAL_SPI_Receive+0x2c>
 800b688:	88fb      	ldrh	r3, [r7, #6]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d101      	bne.n	800b692 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	e0fc      	b.n	800b88c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b69a:	d112      	bne.n	800b6c2 <HAL_SPI_Receive+0x60>
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d10e      	bne.n	800b6c2 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2204      	movs	r2, #4
 800b6a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b6ac:	88fa      	ldrh	r2, [r7, #6]
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	9300      	str	r3, [sp, #0]
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	68ba      	ldr	r2, [r7, #8]
 800b6b6:	68b9      	ldr	r1, [r7, #8]
 800b6b8:	68f8      	ldr	r0, [r7, #12]
 800b6ba:	f000 f8eb 	bl	800b894 <HAL_SPI_TransmitReceive>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	e0e4      	b.n	800b88c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b6c2:	f7fc fc01 	bl	8007ec8 <HAL_GetTick>
 800b6c6:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d101      	bne.n	800b6d6 <HAL_SPI_Receive+0x74>
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	e0da      	b.n	800b88c <HAL_SPI_Receive+0x22a>
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2204      	movs	r2, #4
 800b6e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	68ba      	ldr	r2, [r7, #8]
 800b6f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	88fa      	ldrh	r2, [r7, #6]
 800b6f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	88fa      	ldrh	r2, [r7, #6]
 800b6fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2200      	movs	r2, #0
 800b702:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2200      	movs	r2, #0
 800b70e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2200      	movs	r2, #0
 800b714:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b724:	d10f      	bne.n	800b746 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b734:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b744:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b750:	2b40      	cmp	r3, #64	@ 0x40
 800b752:	d007      	beq.n	800b764 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b762:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d170      	bne.n	800b84e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b76c:	e035      	b.n	800b7da <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	f003 0301 	and.w	r3, r3, #1
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d115      	bne.n	800b7a8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f103 020c 	add.w	r2, r3, #12
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b788:	7812      	ldrb	r2, [r2, #0]
 800b78a:	b2d2      	uxtb	r2, r2
 800b78c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b792:	1c5a      	adds	r2, r3, #1
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	b29a      	uxth	r2, r3
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b7a6:	e018      	b.n	800b7da <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7a8:	f7fc fb8e 	bl	8007ec8 <HAL_GetTick>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d803      	bhi.n	800b7c0 <HAL_SPI_Receive+0x15e>
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7be:	d102      	bne.n	800b7c6 <HAL_SPI_Receive+0x164>
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d109      	bne.n	800b7da <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	e058      	b.n	800b88c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1c4      	bne.n	800b76e <HAL_SPI_Receive+0x10c>
 800b7e4:	e038      	b.n	800b858 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	f003 0301 	and.w	r3, r3, #1
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d113      	bne.n	800b81c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	68da      	ldr	r2, [r3, #12]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7fe:	b292      	uxth	r2, r2
 800b800:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b806:	1c9a      	adds	r2, r3, #2
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b810:	b29b      	uxth	r3, r3
 800b812:	3b01      	subs	r3, #1
 800b814:	b29a      	uxth	r2, r3
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b81a:	e018      	b.n	800b84e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b81c:	f7fc fb54 	bl	8007ec8 <HAL_GetTick>
 800b820:	4602      	mov	r2, r0
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	1ad3      	subs	r3, r2, r3
 800b826:	683a      	ldr	r2, [r7, #0]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d803      	bhi.n	800b834 <HAL_SPI_Receive+0x1d2>
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b832:	d102      	bne.n	800b83a <HAL_SPI_Receive+0x1d8>
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d109      	bne.n	800b84e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2200      	movs	r2, #0
 800b846:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b84a:	2303      	movs	r3, #3
 800b84c:	e01e      	b.n	800b88c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b852:	b29b      	uxth	r3, r3
 800b854:	2b00      	cmp	r3, #0
 800b856:	d1c6      	bne.n	800b7e6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b858:	697a      	ldr	r2, [r7, #20]
 800b85a:	6839      	ldr	r1, [r7, #0]
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f000 fa4b 	bl	800bcf8 <SPI_EndRxTransaction>
 800b862:	4603      	mov	r3, r0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d002      	beq.n	800b86e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2220      	movs	r2, #32
 800b86c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2201      	movs	r2, #1
 800b872:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b882:	2b00      	cmp	r3, #0
 800b884:	d001      	beq.n	800b88a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800b886:	2301      	movs	r3, #1
 800b888:	e000      	b.n	800b88c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800b88a:	2300      	movs	r3, #0
  }
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3718      	adds	r7, #24
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b08a      	sub	sp, #40	@ 0x28
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
 800b8a0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8a6:	f7fc fb0f 	bl	8007ec8 <HAL_GetTick>
 800b8aa:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b8b2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b8ba:	887b      	ldrh	r3, [r7, #2]
 800b8bc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b8be:	7ffb      	ldrb	r3, [r7, #31]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d00c      	beq.n	800b8de <HAL_SPI_TransmitReceive+0x4a>
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b8ca:	d106      	bne.n	800b8da <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d102      	bne.n	800b8da <HAL_SPI_TransmitReceive+0x46>
 800b8d4:	7ffb      	ldrb	r3, [r7, #31]
 800b8d6:	2b04      	cmp	r3, #4
 800b8d8:	d001      	beq.n	800b8de <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800b8da:	2302      	movs	r3, #2
 800b8dc:	e17f      	b.n	800bbde <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d005      	beq.n	800b8f0 <HAL_SPI_TransmitReceive+0x5c>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d002      	beq.n	800b8f0 <HAL_SPI_TransmitReceive+0x5c>
 800b8ea:	887b      	ldrh	r3, [r7, #2]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d101      	bne.n	800b8f4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e174      	b.n	800bbde <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d101      	bne.n	800b902 <HAL_SPI_TransmitReceive+0x6e>
 800b8fe:	2302      	movs	r3, #2
 800b900:	e16d      	b.n	800bbde <HAL_SPI_TransmitReceive+0x34a>
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2201      	movs	r2, #1
 800b906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b910:	b2db      	uxtb	r3, r3
 800b912:	2b04      	cmp	r3, #4
 800b914:	d003      	beq.n	800b91e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2205      	movs	r2, #5
 800b91a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2200      	movs	r2, #0
 800b922:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	887a      	ldrh	r2, [r7, #2]
 800b92e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	887a      	ldrh	r2, [r7, #2]
 800b934:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	887a      	ldrh	r2, [r7, #2]
 800b940:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	887a      	ldrh	r2, [r7, #2]
 800b946:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2200      	movs	r2, #0
 800b94c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2200      	movs	r2, #0
 800b952:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b95e:	2b40      	cmp	r3, #64	@ 0x40
 800b960:	d007      	beq.n	800b972 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b970:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b97a:	d17e      	bne.n	800ba7a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d002      	beq.n	800b98a <HAL_SPI_TransmitReceive+0xf6>
 800b984:	8afb      	ldrh	r3, [r7, #22]
 800b986:	2b01      	cmp	r3, #1
 800b988:	d16c      	bne.n	800ba64 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b98e:	881a      	ldrh	r2, [r3, #0]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b99a:	1c9a      	adds	r2, r3, #2
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	b29a      	uxth	r2, r3
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9ae:	e059      	b.n	800ba64 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	f003 0302 	and.w	r3, r3, #2
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	d11b      	bne.n	800b9f6 <HAL_SPI_TransmitReceive+0x162>
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d016      	beq.n	800b9f6 <HAL_SPI_TransmitReceive+0x162>
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d113      	bne.n	800b9f6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9d2:	881a      	ldrh	r2, [r3, #0]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9de:	1c9a      	adds	r2, r3, #2
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	3b01      	subs	r3, #1
 800b9ec:	b29a      	uxth	r2, r3
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	f003 0301 	and.w	r3, r3, #1
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d119      	bne.n	800ba38 <HAL_SPI_TransmitReceive+0x1a4>
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d014      	beq.n	800ba38 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	68da      	ldr	r2, [r3, #12]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba18:	b292      	uxth	r2, r2
 800ba1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba20:	1c9a      	adds	r2, r3, #2
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	b29a      	uxth	r2, r3
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba34:	2301      	movs	r3, #1
 800ba36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ba38:	f7fc fa46 	bl	8007ec8 <HAL_GetTick>
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	6a3b      	ldr	r3, [r7, #32]
 800ba40:	1ad3      	subs	r3, r2, r3
 800ba42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d80d      	bhi.n	800ba64 <HAL_SPI_TransmitReceive+0x1d0>
 800ba48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba4e:	d009      	beq.n	800ba64 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2201      	movs	r2, #1
 800ba54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800ba60:	2303      	movs	r3, #3
 800ba62:	e0bc      	b.n	800bbde <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1a0      	bne.n	800b9b0 <HAL_SPI_TransmitReceive+0x11c>
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d19b      	bne.n	800b9b0 <HAL_SPI_TransmitReceive+0x11c>
 800ba78:	e082      	b.n	800bb80 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d002      	beq.n	800ba88 <HAL_SPI_TransmitReceive+0x1f4>
 800ba82:	8afb      	ldrh	r3, [r7, #22]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d171      	bne.n	800bb6c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	330c      	adds	r3, #12
 800ba92:	7812      	ldrb	r2, [r2, #0]
 800ba94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba9a:	1c5a      	adds	r2, r3, #1
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	3b01      	subs	r3, #1
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800baae:	e05d      	b.n	800bb6c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	f003 0302 	and.w	r3, r3, #2
 800baba:	2b02      	cmp	r3, #2
 800babc:	d11c      	bne.n	800baf8 <HAL_SPI_TransmitReceive+0x264>
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d017      	beq.n	800baf8 <HAL_SPI_TransmitReceive+0x264>
 800bac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d114      	bne.n	800baf8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	330c      	adds	r3, #12
 800bad8:	7812      	ldrb	r2, [r2, #0]
 800bada:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bae0:	1c5a      	adds	r2, r3, #1
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800baea:	b29b      	uxth	r3, r3
 800baec:	3b01      	subs	r3, #1
 800baee:	b29a      	uxth	r2, r3
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800baf4:	2300      	movs	r3, #0
 800baf6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	f003 0301 	and.w	r3, r3, #1
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d119      	bne.n	800bb3a <HAL_SPI_TransmitReceive+0x2a6>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d014      	beq.n	800bb3a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68da      	ldr	r2, [r3, #12]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb1a:	b2d2      	uxtb	r2, r2
 800bb1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb22:	1c5a      	adds	r2, r3, #1
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bb36:	2301      	movs	r3, #1
 800bb38:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bb3a:	f7fc f9c5 	bl	8007ec8 <HAL_GetTick>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	6a3b      	ldr	r3, [r7, #32]
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d803      	bhi.n	800bb52 <HAL_SPI_TransmitReceive+0x2be>
 800bb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb50:	d102      	bne.n	800bb58 <HAL_SPI_TransmitReceive+0x2c4>
 800bb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d109      	bne.n	800bb6c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800bb68:	2303      	movs	r3, #3
 800bb6a:	e038      	b.n	800bbde <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d19c      	bne.n	800bab0 <HAL_SPI_TransmitReceive+0x21c>
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d197      	bne.n	800bab0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb80:	6a3a      	ldr	r2, [r7, #32]
 800bb82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	f000 f91d 	bl	800bdc4 <SPI_EndRxTxTransaction>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d008      	beq.n	800bba2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2220      	movs	r2, #32
 800bb94:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e01d      	b.n	800bbde <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	689b      	ldr	r3, [r3, #8]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d10a      	bne.n	800bbc0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bbaa:	2300      	movs	r3, #0
 800bbac:	613b      	str	r3, [r7, #16]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	613b      	str	r3, [r7, #16]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	613b      	str	r3, [r7, #16]
 800bbbe:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d001      	beq.n	800bbdc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e000      	b.n	800bbde <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
  }
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3728      	adds	r7, #40	@ 0x28
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
	...

0800bbe8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b088      	sub	sp, #32
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	603b      	str	r3, [r7, #0]
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bbf8:	f7fc f966 	bl	8007ec8 <HAL_GetTick>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc00:	1a9b      	subs	r3, r3, r2
 800bc02:	683a      	ldr	r2, [r7, #0]
 800bc04:	4413      	add	r3, r2
 800bc06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bc08:	f7fc f95e 	bl	8007ec8 <HAL_GetTick>
 800bc0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bc0e:	4b39      	ldr	r3, [pc, #228]	@ (800bcf4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	015b      	lsls	r3, r3, #5
 800bc14:	0d1b      	lsrs	r3, r3, #20
 800bc16:	69fa      	ldr	r2, [r7, #28]
 800bc18:	fb02 f303 	mul.w	r3, r2, r3
 800bc1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc1e:	e055      	b.n	800bccc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc26:	d051      	beq.n	800bccc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bc28:	f7fc f94e 	bl	8007ec8 <HAL_GetTick>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	1ad3      	subs	r3, r2, r3
 800bc32:	69fa      	ldr	r2, [r7, #28]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d902      	bls.n	800bc3e <SPI_WaitFlagStateUntilTimeout+0x56>
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d13d      	bne.n	800bcba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	685a      	ldr	r2, [r3, #4]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800bc4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bc56:	d111      	bne.n	800bc7c <SPI_WaitFlagStateUntilTimeout+0x94>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc60:	d004      	beq.n	800bc6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc6a:	d107      	bne.n	800bc7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bc7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc84:	d10f      	bne.n	800bca6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bc94:	601a      	str	r2, [r3, #0]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bca4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2201      	movs	r2, #1
 800bcaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	e018      	b.n	800bcec <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d102      	bne.n	800bcc6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	61fb      	str	r3, [r7, #28]
 800bcc4:	e002      	b.n	800bccc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	3b01      	subs	r3, #1
 800bcca:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	689a      	ldr	r2, [r3, #8]
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	68ba      	ldr	r2, [r7, #8]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	bf0c      	ite	eq
 800bcdc:	2301      	moveq	r3, #1
 800bcde:	2300      	movne	r3, #0
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	461a      	mov	r2, r3
 800bce4:	79fb      	ldrb	r3, [r7, #7]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d19a      	bne.n	800bc20 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3720      	adds	r7, #32
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	2000000c 	.word	0x2000000c

0800bcf8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af02      	add	r7, sp, #8
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bd0c:	d111      	bne.n	800bd32 <SPI_EndRxTransaction+0x3a>
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	689b      	ldr	r3, [r3, #8]
 800bd12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd16:	d004      	beq.n	800bd22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd20:	d107      	bne.n	800bd32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bd30:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bd3a:	d12a      	bne.n	800bd92 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd44:	d012      	beq.n	800bd6c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	2180      	movs	r1, #128	@ 0x80
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f7ff ff49 	bl	800bbe8 <SPI_WaitFlagStateUntilTimeout>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d02d      	beq.n	800bdb8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd60:	f043 0220 	orr.w	r2, r3, #32
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800bd68:	2303      	movs	r3, #3
 800bd6a:	e026      	b.n	800bdba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2200      	movs	r2, #0
 800bd74:	2101      	movs	r1, #1
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f7ff ff36 	bl	800bbe8 <SPI_WaitFlagStateUntilTimeout>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d01a      	beq.n	800bdb8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd86:	f043 0220 	orr.w	r2, r3, #32
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800bd8e:	2303      	movs	r3, #3
 800bd90:	e013      	b.n	800bdba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	9300      	str	r3, [sp, #0]
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	2101      	movs	r1, #1
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	f7ff ff23 	bl	800bbe8 <SPI_WaitFlagStateUntilTimeout>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d007      	beq.n	800bdb8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdac:	f043 0220 	orr.w	r2, r3, #32
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800bdb4:	2303      	movs	r3, #3
 800bdb6:	e000      	b.n	800bdba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
	...

0800bdc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b088      	sub	sp, #32
 800bdc8:	af02      	add	r7, sp, #8
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	9300      	str	r3, [sp, #0]
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	2102      	movs	r1, #2
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f7ff ff04 	bl	800bbe8 <SPI_WaitFlagStateUntilTimeout>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d007      	beq.n	800bdf6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdea:	f043 0220 	orr.w	r2, r3, #32
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800bdf2:	2303      	movs	r3, #3
 800bdf4:	e032      	b.n	800be5c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bdf6:	4b1b      	ldr	r3, [pc, #108]	@ (800be64 <SPI_EndRxTxTransaction+0xa0>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a1b      	ldr	r2, [pc, #108]	@ (800be68 <SPI_EndRxTxTransaction+0xa4>)
 800bdfc:	fba2 2303 	umull	r2, r3, r2, r3
 800be00:	0d5b      	lsrs	r3, r3, #21
 800be02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800be06:	fb02 f303 	mul.w	r3, r2, r3
 800be0a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800be14:	d112      	bne.n	800be3c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	9300      	str	r3, [sp, #0]
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	2200      	movs	r2, #0
 800be1e:	2180      	movs	r1, #128	@ 0x80
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f7ff fee1 	bl	800bbe8 <SPI_WaitFlagStateUntilTimeout>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d016      	beq.n	800be5a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be30:	f043 0220 	orr.w	r2, r3, #32
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800be38:	2303      	movs	r3, #3
 800be3a:	e00f      	b.n	800be5c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00a      	beq.n	800be58 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	3b01      	subs	r3, #1
 800be46:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	689b      	ldr	r3, [r3, #8]
 800be4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be52:	2b80      	cmp	r3, #128	@ 0x80
 800be54:	d0f2      	beq.n	800be3c <SPI_EndRxTxTransaction+0x78>
 800be56:	e000      	b.n	800be5a <SPI_EndRxTxTransaction+0x96>
        break;
 800be58:	bf00      	nop
  }

  return HAL_OK;
 800be5a:	2300      	movs	r3, #0
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3718      	adds	r7, #24
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	2000000c 	.word	0x2000000c
 800be68:	165e9f81 	.word	0x165e9f81

0800be6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d101      	bne.n	800be7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	e041      	b.n	800bf02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be84:	b2db      	uxtb	r3, r3
 800be86:	2b00      	cmp	r3, #0
 800be88:	d106      	bne.n	800be98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f7fb fddc 	bl	8007a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2202      	movs	r2, #2
 800be9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	3304      	adds	r3, #4
 800bea8:	4619      	mov	r1, r3
 800beaa:	4610      	mov	r0, r2
 800beac:	f000 fad8 	bl	800c460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2201      	movs	r2, #1
 800beb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2201      	movs	r2, #1
 800bebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2201      	movs	r2, #1
 800bec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2201      	movs	r2, #1
 800becc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3708      	adds	r7, #8
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}

0800bf0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bf0a:	b580      	push	{r7, lr}
 800bf0c:	b082      	sub	sp, #8
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d101      	bne.n	800bf1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e041      	b.n	800bfa0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d106      	bne.n	800bf36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 f839 	bl	800bfa8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2202      	movs	r2, #2
 800bf3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	3304      	adds	r3, #4
 800bf46:	4619      	mov	r1, r3
 800bf48:	4610      	mov	r0, r2
 800bf4a:	f000 fa89 	bl	800c460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2201      	movs	r2, #1
 800bf52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2201      	movs	r2, #1
 800bf5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2201      	movs	r2, #1
 800bf62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2201      	movs	r2, #1
 800bf72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2201      	movs	r2, #1
 800bf7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2201      	movs	r2, #1
 800bf82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2201      	movs	r2, #1
 800bf8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2201      	movs	r2, #1
 800bf92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3708      	adds	r7, #8
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b083      	sub	sp, #12
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bfb0:	bf00      	nop
 800bfb2:	370c      	adds	r7, #12
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d109      	bne.n	800bfe0 <HAL_TIM_PWM_Start+0x24>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	bf14      	ite	ne
 800bfd8:	2301      	movne	r3, #1
 800bfda:	2300      	moveq	r3, #0
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	e022      	b.n	800c026 <HAL_TIM_PWM_Start+0x6a>
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	2b04      	cmp	r3, #4
 800bfe4:	d109      	bne.n	800bffa <HAL_TIM_PWM_Start+0x3e>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	bf14      	ite	ne
 800bff2:	2301      	movne	r3, #1
 800bff4:	2300      	moveq	r3, #0
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	e015      	b.n	800c026 <HAL_TIM_PWM_Start+0x6a>
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	2b08      	cmp	r3, #8
 800bffe:	d109      	bne.n	800c014 <HAL_TIM_PWM_Start+0x58>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c006:	b2db      	uxtb	r3, r3
 800c008:	2b01      	cmp	r3, #1
 800c00a:	bf14      	ite	ne
 800c00c:	2301      	movne	r3, #1
 800c00e:	2300      	moveq	r3, #0
 800c010:	b2db      	uxtb	r3, r3
 800c012:	e008      	b.n	800c026 <HAL_TIM_PWM_Start+0x6a>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	bf14      	ite	ne
 800c020:	2301      	movne	r3, #1
 800c022:	2300      	moveq	r3, #0
 800c024:	b2db      	uxtb	r3, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c02a:	2301      	movs	r3, #1
 800c02c:	e07c      	b.n	800c128 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d104      	bne.n	800c03e <HAL_TIM_PWM_Start+0x82>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2202      	movs	r2, #2
 800c038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c03c:	e013      	b.n	800c066 <HAL_TIM_PWM_Start+0xaa>
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	2b04      	cmp	r3, #4
 800c042:	d104      	bne.n	800c04e <HAL_TIM_PWM_Start+0x92>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2202      	movs	r2, #2
 800c048:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c04c:	e00b      	b.n	800c066 <HAL_TIM_PWM_Start+0xaa>
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	2b08      	cmp	r3, #8
 800c052:	d104      	bne.n	800c05e <HAL_TIM_PWM_Start+0xa2>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2202      	movs	r2, #2
 800c058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c05c:	e003      	b.n	800c066 <HAL_TIM_PWM_Start+0xaa>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2202      	movs	r2, #2
 800c062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2201      	movs	r2, #1
 800c06c:	6839      	ldr	r1, [r7, #0]
 800c06e:	4618      	mov	r0, r3
 800c070:	f000 fce6 	bl	800ca40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a2d      	ldr	r2, [pc, #180]	@ (800c130 <HAL_TIM_PWM_Start+0x174>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d004      	beq.n	800c088 <HAL_TIM_PWM_Start+0xcc>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4a2c      	ldr	r2, [pc, #176]	@ (800c134 <HAL_TIM_PWM_Start+0x178>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d101      	bne.n	800c08c <HAL_TIM_PWM_Start+0xd0>
 800c088:	2301      	movs	r3, #1
 800c08a:	e000      	b.n	800c08e <HAL_TIM_PWM_Start+0xd2>
 800c08c:	2300      	movs	r3, #0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d007      	beq.n	800c0a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c0a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a22      	ldr	r2, [pc, #136]	@ (800c130 <HAL_TIM_PWM_Start+0x174>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d022      	beq.n	800c0f2 <HAL_TIM_PWM_Start+0x136>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0b4:	d01d      	beq.n	800c0f2 <HAL_TIM_PWM_Start+0x136>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a1f      	ldr	r2, [pc, #124]	@ (800c138 <HAL_TIM_PWM_Start+0x17c>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d018      	beq.n	800c0f2 <HAL_TIM_PWM_Start+0x136>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a1d      	ldr	r2, [pc, #116]	@ (800c13c <HAL_TIM_PWM_Start+0x180>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d013      	beq.n	800c0f2 <HAL_TIM_PWM_Start+0x136>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4a1c      	ldr	r2, [pc, #112]	@ (800c140 <HAL_TIM_PWM_Start+0x184>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d00e      	beq.n	800c0f2 <HAL_TIM_PWM_Start+0x136>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4a16      	ldr	r2, [pc, #88]	@ (800c134 <HAL_TIM_PWM_Start+0x178>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d009      	beq.n	800c0f2 <HAL_TIM_PWM_Start+0x136>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4a18      	ldr	r2, [pc, #96]	@ (800c144 <HAL_TIM_PWM_Start+0x188>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d004      	beq.n	800c0f2 <HAL_TIM_PWM_Start+0x136>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a16      	ldr	r2, [pc, #88]	@ (800c148 <HAL_TIM_PWM_Start+0x18c>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d111      	bne.n	800c116 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	f003 0307 	and.w	r3, r3, #7
 800c0fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2b06      	cmp	r3, #6
 800c102:	d010      	beq.n	800c126 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f042 0201 	orr.w	r2, r2, #1
 800c112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c114:	e007      	b.n	800c126 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f042 0201 	orr.w	r2, r2, #1
 800c124:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c126:	2300      	movs	r3, #0
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	40010000 	.word	0x40010000
 800c134:	40010400 	.word	0x40010400
 800c138:	40000400 	.word	0x40000400
 800c13c:	40000800 	.word	0x40000800
 800c140:	40000c00 	.word	0x40000c00
 800c144:	40014000 	.word	0x40014000
 800c148:	40001800 	.word	0x40001800

0800c14c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b086      	sub	sp, #24
 800c150:	af00      	add	r7, sp, #0
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c158:	2300      	movs	r3, #0
 800c15a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c162:	2b01      	cmp	r3, #1
 800c164:	d101      	bne.n	800c16a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c166:	2302      	movs	r3, #2
 800c168:	e0ae      	b.n	800c2c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2b0c      	cmp	r3, #12
 800c176:	f200 809f 	bhi.w	800c2b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c17a:	a201      	add	r2, pc, #4	@ (adr r2, 800c180 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c180:	0800c1b5 	.word	0x0800c1b5
 800c184:	0800c2b9 	.word	0x0800c2b9
 800c188:	0800c2b9 	.word	0x0800c2b9
 800c18c:	0800c2b9 	.word	0x0800c2b9
 800c190:	0800c1f5 	.word	0x0800c1f5
 800c194:	0800c2b9 	.word	0x0800c2b9
 800c198:	0800c2b9 	.word	0x0800c2b9
 800c19c:	0800c2b9 	.word	0x0800c2b9
 800c1a0:	0800c237 	.word	0x0800c237
 800c1a4:	0800c2b9 	.word	0x0800c2b9
 800c1a8:	0800c2b9 	.word	0x0800c2b9
 800c1ac:	0800c2b9 	.word	0x0800c2b9
 800c1b0:	0800c277 	.word	0x0800c277
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	68b9      	ldr	r1, [r7, #8]
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f000 f9f6 	bl	800c5ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	699a      	ldr	r2, [r3, #24]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f042 0208 	orr.w	r2, r2, #8
 800c1ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	699a      	ldr	r2, [r3, #24]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f022 0204 	bic.w	r2, r2, #4
 800c1de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	6999      	ldr	r1, [r3, #24]
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	691a      	ldr	r2, [r3, #16]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	430a      	orrs	r2, r1
 800c1f0:	619a      	str	r2, [r3, #24]
      break;
 800c1f2:	e064      	b.n	800c2be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	68b9      	ldr	r1, [r7, #8]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f000 fa46 	bl	800c68c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	699a      	ldr	r2, [r3, #24]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c20e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	699a      	ldr	r2, [r3, #24]
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c21e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	6999      	ldr	r1, [r3, #24]
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	691b      	ldr	r3, [r3, #16]
 800c22a:	021a      	lsls	r2, r3, #8
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	430a      	orrs	r2, r1
 800c232:	619a      	str	r2, [r3, #24]
      break;
 800c234:	e043      	b.n	800c2be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	68b9      	ldr	r1, [r7, #8]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f000 fa9b 	bl	800c778 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	69da      	ldr	r2, [r3, #28]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f042 0208 	orr.w	r2, r2, #8
 800c250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	69da      	ldr	r2, [r3, #28]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f022 0204 	bic.w	r2, r2, #4
 800c260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	69d9      	ldr	r1, [r3, #28]
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	691a      	ldr	r2, [r3, #16]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	430a      	orrs	r2, r1
 800c272:	61da      	str	r2, [r3, #28]
      break;
 800c274:	e023      	b.n	800c2be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	68b9      	ldr	r1, [r7, #8]
 800c27c:	4618      	mov	r0, r3
 800c27e:	f000 faef 	bl	800c860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	69da      	ldr	r2, [r3, #28]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	69da      	ldr	r2, [r3, #28]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c2a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	69d9      	ldr	r1, [r3, #28]
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	691b      	ldr	r3, [r3, #16]
 800c2ac:	021a      	lsls	r2, r3, #8
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	430a      	orrs	r2, r1
 800c2b4:	61da      	str	r2, [r3, #28]
      break;
 800c2b6:	e002      	b.n	800c2be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	75fb      	strb	r3, [r7, #23]
      break;
 800c2bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c2c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3718      	adds	r7, #24
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d101      	bne.n	800c2ec <HAL_TIM_ConfigClockSource+0x1c>
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	e0b4      	b.n	800c456 <HAL_TIM_ConfigClockSource+0x186>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2202      	movs	r2, #2
 800c2f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	689b      	ldr	r3, [r3, #8]
 800c302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c30a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c312:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c324:	d03e      	beq.n	800c3a4 <HAL_TIM_ConfigClockSource+0xd4>
 800c326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c32a:	f200 8087 	bhi.w	800c43c <HAL_TIM_ConfigClockSource+0x16c>
 800c32e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c332:	f000 8086 	beq.w	800c442 <HAL_TIM_ConfigClockSource+0x172>
 800c336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c33a:	d87f      	bhi.n	800c43c <HAL_TIM_ConfigClockSource+0x16c>
 800c33c:	2b70      	cmp	r3, #112	@ 0x70
 800c33e:	d01a      	beq.n	800c376 <HAL_TIM_ConfigClockSource+0xa6>
 800c340:	2b70      	cmp	r3, #112	@ 0x70
 800c342:	d87b      	bhi.n	800c43c <HAL_TIM_ConfigClockSource+0x16c>
 800c344:	2b60      	cmp	r3, #96	@ 0x60
 800c346:	d050      	beq.n	800c3ea <HAL_TIM_ConfigClockSource+0x11a>
 800c348:	2b60      	cmp	r3, #96	@ 0x60
 800c34a:	d877      	bhi.n	800c43c <HAL_TIM_ConfigClockSource+0x16c>
 800c34c:	2b50      	cmp	r3, #80	@ 0x50
 800c34e:	d03c      	beq.n	800c3ca <HAL_TIM_ConfigClockSource+0xfa>
 800c350:	2b50      	cmp	r3, #80	@ 0x50
 800c352:	d873      	bhi.n	800c43c <HAL_TIM_ConfigClockSource+0x16c>
 800c354:	2b40      	cmp	r3, #64	@ 0x40
 800c356:	d058      	beq.n	800c40a <HAL_TIM_ConfigClockSource+0x13a>
 800c358:	2b40      	cmp	r3, #64	@ 0x40
 800c35a:	d86f      	bhi.n	800c43c <HAL_TIM_ConfigClockSource+0x16c>
 800c35c:	2b30      	cmp	r3, #48	@ 0x30
 800c35e:	d064      	beq.n	800c42a <HAL_TIM_ConfigClockSource+0x15a>
 800c360:	2b30      	cmp	r3, #48	@ 0x30
 800c362:	d86b      	bhi.n	800c43c <HAL_TIM_ConfigClockSource+0x16c>
 800c364:	2b20      	cmp	r3, #32
 800c366:	d060      	beq.n	800c42a <HAL_TIM_ConfigClockSource+0x15a>
 800c368:	2b20      	cmp	r3, #32
 800c36a:	d867      	bhi.n	800c43c <HAL_TIM_ConfigClockSource+0x16c>
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d05c      	beq.n	800c42a <HAL_TIM_ConfigClockSource+0x15a>
 800c370:	2b10      	cmp	r3, #16
 800c372:	d05a      	beq.n	800c42a <HAL_TIM_ConfigClockSource+0x15a>
 800c374:	e062      	b.n	800c43c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c386:	f000 fb3b 	bl	800ca00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	68ba      	ldr	r2, [r7, #8]
 800c3a0:	609a      	str	r2, [r3, #8]
      break;
 800c3a2:	e04f      	b.n	800c444 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c3b4:	f000 fb24 	bl	800ca00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	689a      	ldr	r2, [r3, #8]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c3c6:	609a      	str	r2, [r3, #8]
      break;
 800c3c8:	e03c      	b.n	800c444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	f000 fa98 	bl	800c90c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2150      	movs	r1, #80	@ 0x50
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f000 faf1 	bl	800c9ca <TIM_ITRx_SetConfig>
      break;
 800c3e8:	e02c      	b.n	800c444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	f000 fab7 	bl	800c96a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2160      	movs	r1, #96	@ 0x60
 800c402:	4618      	mov	r0, r3
 800c404:	f000 fae1 	bl	800c9ca <TIM_ITRx_SetConfig>
      break;
 800c408:	e01c      	b.n	800c444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c416:	461a      	mov	r2, r3
 800c418:	f000 fa78 	bl	800c90c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2140      	movs	r1, #64	@ 0x40
 800c422:	4618      	mov	r0, r3
 800c424:	f000 fad1 	bl	800c9ca <TIM_ITRx_SetConfig>
      break;
 800c428:	e00c      	b.n	800c444 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4619      	mov	r1, r3
 800c434:	4610      	mov	r0, r2
 800c436:	f000 fac8 	bl	800c9ca <TIM_ITRx_SetConfig>
      break;
 800c43a:	e003      	b.n	800c444 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c43c:	2301      	movs	r3, #1
 800c43e:	73fb      	strb	r3, [r7, #15]
      break;
 800c440:	e000      	b.n	800c444 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2201      	movs	r2, #1
 800c448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c454:	7bfb      	ldrb	r3, [r7, #15]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
	...

0800c460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c460:	b480      	push	{r7}
 800c462:	b085      	sub	sp, #20
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	4a43      	ldr	r2, [pc, #268]	@ (800c580 <TIM_Base_SetConfig+0x120>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d013      	beq.n	800c4a0 <TIM_Base_SetConfig+0x40>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c47e:	d00f      	beq.n	800c4a0 <TIM_Base_SetConfig+0x40>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	4a40      	ldr	r2, [pc, #256]	@ (800c584 <TIM_Base_SetConfig+0x124>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d00b      	beq.n	800c4a0 <TIM_Base_SetConfig+0x40>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	4a3f      	ldr	r2, [pc, #252]	@ (800c588 <TIM_Base_SetConfig+0x128>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d007      	beq.n	800c4a0 <TIM_Base_SetConfig+0x40>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	4a3e      	ldr	r2, [pc, #248]	@ (800c58c <TIM_Base_SetConfig+0x12c>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d003      	beq.n	800c4a0 <TIM_Base_SetConfig+0x40>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	4a3d      	ldr	r2, [pc, #244]	@ (800c590 <TIM_Base_SetConfig+0x130>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d108      	bne.n	800c4b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	685b      	ldr	r3, [r3, #4]
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a32      	ldr	r2, [pc, #200]	@ (800c580 <TIM_Base_SetConfig+0x120>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d02b      	beq.n	800c512 <TIM_Base_SetConfig+0xb2>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4c0:	d027      	beq.n	800c512 <TIM_Base_SetConfig+0xb2>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4a2f      	ldr	r2, [pc, #188]	@ (800c584 <TIM_Base_SetConfig+0x124>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d023      	beq.n	800c512 <TIM_Base_SetConfig+0xb2>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	4a2e      	ldr	r2, [pc, #184]	@ (800c588 <TIM_Base_SetConfig+0x128>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d01f      	beq.n	800c512 <TIM_Base_SetConfig+0xb2>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	4a2d      	ldr	r2, [pc, #180]	@ (800c58c <TIM_Base_SetConfig+0x12c>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d01b      	beq.n	800c512 <TIM_Base_SetConfig+0xb2>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	4a2c      	ldr	r2, [pc, #176]	@ (800c590 <TIM_Base_SetConfig+0x130>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d017      	beq.n	800c512 <TIM_Base_SetConfig+0xb2>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	4a2b      	ldr	r2, [pc, #172]	@ (800c594 <TIM_Base_SetConfig+0x134>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d013      	beq.n	800c512 <TIM_Base_SetConfig+0xb2>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4a2a      	ldr	r2, [pc, #168]	@ (800c598 <TIM_Base_SetConfig+0x138>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d00f      	beq.n	800c512 <TIM_Base_SetConfig+0xb2>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4a29      	ldr	r2, [pc, #164]	@ (800c59c <TIM_Base_SetConfig+0x13c>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d00b      	beq.n	800c512 <TIM_Base_SetConfig+0xb2>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4a28      	ldr	r2, [pc, #160]	@ (800c5a0 <TIM_Base_SetConfig+0x140>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d007      	beq.n	800c512 <TIM_Base_SetConfig+0xb2>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4a27      	ldr	r2, [pc, #156]	@ (800c5a4 <TIM_Base_SetConfig+0x144>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d003      	beq.n	800c512 <TIM_Base_SetConfig+0xb2>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4a26      	ldr	r2, [pc, #152]	@ (800c5a8 <TIM_Base_SetConfig+0x148>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d108      	bne.n	800c524 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	68fa      	ldr	r2, [r7, #12]
 800c520:	4313      	orrs	r3, r2
 800c522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	695b      	ldr	r3, [r3, #20]
 800c52e:	4313      	orrs	r3, r2
 800c530:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	689a      	ldr	r2, [r3, #8]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4a0e      	ldr	r2, [pc, #56]	@ (800c580 <TIM_Base_SetConfig+0x120>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d003      	beq.n	800c552 <TIM_Base_SetConfig+0xf2>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4a10      	ldr	r2, [pc, #64]	@ (800c590 <TIM_Base_SetConfig+0x130>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d103      	bne.n	800c55a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	691a      	ldr	r2, [r3, #16]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f043 0204 	orr.w	r2, r3, #4
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2201      	movs	r2, #1
 800c56a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	68fa      	ldr	r2, [r7, #12]
 800c570:	601a      	str	r2, [r3, #0]
}
 800c572:	bf00      	nop
 800c574:	3714      	adds	r7, #20
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	40010000 	.word	0x40010000
 800c584:	40000400 	.word	0x40000400
 800c588:	40000800 	.word	0x40000800
 800c58c:	40000c00 	.word	0x40000c00
 800c590:	40010400 	.word	0x40010400
 800c594:	40014000 	.word	0x40014000
 800c598:	40014400 	.word	0x40014400
 800c59c:	40014800 	.word	0x40014800
 800c5a0:	40001800 	.word	0x40001800
 800c5a4:	40001c00 	.word	0x40001c00
 800c5a8:	40002000 	.word	0x40002000

0800c5ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b087      	sub	sp, #28
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6a1b      	ldr	r3, [r3, #32]
 800c5ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6a1b      	ldr	r3, [r3, #32]
 800c5c0:	f023 0201 	bic.w	r2, r3, #1
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	699b      	ldr	r3, [r3, #24]
 800c5d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f023 0303 	bic.w	r3, r3, #3
 800c5e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	f023 0302 	bic.w	r3, r3, #2
 800c5f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	697a      	ldr	r2, [r7, #20]
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4a20      	ldr	r2, [pc, #128]	@ (800c684 <TIM_OC1_SetConfig+0xd8>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d003      	beq.n	800c610 <TIM_OC1_SetConfig+0x64>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4a1f      	ldr	r2, [pc, #124]	@ (800c688 <TIM_OC1_SetConfig+0xdc>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d10c      	bne.n	800c62a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	f023 0308 	bic.w	r3, r3, #8
 800c616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	68db      	ldr	r3, [r3, #12]
 800c61c:	697a      	ldr	r2, [r7, #20]
 800c61e:	4313      	orrs	r3, r2
 800c620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	f023 0304 	bic.w	r3, r3, #4
 800c628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4a15      	ldr	r2, [pc, #84]	@ (800c684 <TIM_OC1_SetConfig+0xd8>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d003      	beq.n	800c63a <TIM_OC1_SetConfig+0x8e>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4a14      	ldr	r2, [pc, #80]	@ (800c688 <TIM_OC1_SetConfig+0xdc>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d111      	bne.n	800c65e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	695b      	ldr	r3, [r3, #20]
 800c64e:	693a      	ldr	r2, [r7, #16]
 800c650:	4313      	orrs	r3, r2
 800c652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	699b      	ldr	r3, [r3, #24]
 800c658:	693a      	ldr	r2, [r7, #16]
 800c65a:	4313      	orrs	r3, r2
 800c65c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	693a      	ldr	r2, [r7, #16]
 800c662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	685a      	ldr	r2, [r3, #4]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	697a      	ldr	r2, [r7, #20]
 800c676:	621a      	str	r2, [r3, #32]
}
 800c678:	bf00      	nop
 800c67a:	371c      	adds	r7, #28
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr
 800c684:	40010000 	.word	0x40010000
 800c688:	40010400 	.word	0x40010400

0800c68c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b087      	sub	sp, #28
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6a1b      	ldr	r3, [r3, #32]
 800c69a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6a1b      	ldr	r3, [r3, #32]
 800c6a0:	f023 0210 	bic.w	r2, r3, #16
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	699b      	ldr	r3, [r3, #24]
 800c6b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c6c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	021b      	lsls	r3, r3, #8
 800c6ca:	68fa      	ldr	r2, [r7, #12]
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	f023 0320 	bic.w	r3, r3, #32
 800c6d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	011b      	lsls	r3, r3, #4
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4a22      	ldr	r2, [pc, #136]	@ (800c770 <TIM_OC2_SetConfig+0xe4>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d003      	beq.n	800c6f4 <TIM_OC2_SetConfig+0x68>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a21      	ldr	r2, [pc, #132]	@ (800c774 <TIM_OC2_SetConfig+0xe8>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d10d      	bne.n	800c710 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c6fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	68db      	ldr	r3, [r3, #12]
 800c700:	011b      	lsls	r3, r3, #4
 800c702:	697a      	ldr	r2, [r7, #20]
 800c704:	4313      	orrs	r3, r2
 800c706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c70e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	4a17      	ldr	r2, [pc, #92]	@ (800c770 <TIM_OC2_SetConfig+0xe4>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d003      	beq.n	800c720 <TIM_OC2_SetConfig+0x94>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4a16      	ldr	r2, [pc, #88]	@ (800c774 <TIM_OC2_SetConfig+0xe8>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d113      	bne.n	800c748 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c72e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	695b      	ldr	r3, [r3, #20]
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	693a      	ldr	r2, [r7, #16]
 800c738:	4313      	orrs	r3, r2
 800c73a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	699b      	ldr	r3, [r3, #24]
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	693a      	ldr	r2, [r7, #16]
 800c744:	4313      	orrs	r3, r2
 800c746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	693a      	ldr	r2, [r7, #16]
 800c74c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	685a      	ldr	r2, [r3, #4]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	697a      	ldr	r2, [r7, #20]
 800c760:	621a      	str	r2, [r3, #32]
}
 800c762:	bf00      	nop
 800c764:	371c      	adds	r7, #28
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop
 800c770:	40010000 	.word	0x40010000
 800c774:	40010400 	.word	0x40010400

0800c778 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c778:	b480      	push	{r7}
 800c77a:	b087      	sub	sp, #28
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6a1b      	ldr	r3, [r3, #32]
 800c786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6a1b      	ldr	r3, [r3, #32]
 800c78c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	69db      	ldr	r3, [r3, #28]
 800c79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f023 0303 	bic.w	r3, r3, #3
 800c7ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	68fa      	ldr	r2, [r7, #12]
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c7c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	689b      	ldr	r3, [r3, #8]
 800c7c6:	021b      	lsls	r3, r3, #8
 800c7c8:	697a      	ldr	r2, [r7, #20]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4a21      	ldr	r2, [pc, #132]	@ (800c858 <TIM_OC3_SetConfig+0xe0>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d003      	beq.n	800c7de <TIM_OC3_SetConfig+0x66>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a20      	ldr	r2, [pc, #128]	@ (800c85c <TIM_OC3_SetConfig+0xe4>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d10d      	bne.n	800c7fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c7e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	021b      	lsls	r3, r3, #8
 800c7ec:	697a      	ldr	r2, [r7, #20]
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c7f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4a16      	ldr	r2, [pc, #88]	@ (800c858 <TIM_OC3_SetConfig+0xe0>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d003      	beq.n	800c80a <TIM_OC3_SetConfig+0x92>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4a15      	ldr	r2, [pc, #84]	@ (800c85c <TIM_OC3_SetConfig+0xe4>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d113      	bne.n	800c832 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	695b      	ldr	r3, [r3, #20]
 800c81e:	011b      	lsls	r3, r3, #4
 800c820:	693a      	ldr	r2, [r7, #16]
 800c822:	4313      	orrs	r3, r2
 800c824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	699b      	ldr	r3, [r3, #24]
 800c82a:	011b      	lsls	r3, r3, #4
 800c82c:	693a      	ldr	r2, [r7, #16]
 800c82e:	4313      	orrs	r3, r2
 800c830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	693a      	ldr	r2, [r7, #16]
 800c836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	68fa      	ldr	r2, [r7, #12]
 800c83c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	685a      	ldr	r2, [r3, #4]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	697a      	ldr	r2, [r7, #20]
 800c84a:	621a      	str	r2, [r3, #32]
}
 800c84c:	bf00      	nop
 800c84e:	371c      	adds	r7, #28
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr
 800c858:	40010000 	.word	0x40010000
 800c85c:	40010400 	.word	0x40010400

0800c860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c860:	b480      	push	{r7}
 800c862:	b087      	sub	sp, #28
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6a1b      	ldr	r3, [r3, #32]
 800c86e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6a1b      	ldr	r3, [r3, #32]
 800c874:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	69db      	ldr	r3, [r3, #28]
 800c886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c88e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	021b      	lsls	r3, r3, #8
 800c89e:	68fa      	ldr	r2, [r7, #12]
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c8aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	689b      	ldr	r3, [r3, #8]
 800c8b0:	031b      	lsls	r3, r3, #12
 800c8b2:	693a      	ldr	r2, [r7, #16]
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	4a12      	ldr	r2, [pc, #72]	@ (800c904 <TIM_OC4_SetConfig+0xa4>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d003      	beq.n	800c8c8 <TIM_OC4_SetConfig+0x68>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4a11      	ldr	r2, [pc, #68]	@ (800c908 <TIM_OC4_SetConfig+0xa8>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d109      	bne.n	800c8dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c8ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	695b      	ldr	r3, [r3, #20]
 800c8d4:	019b      	lsls	r3, r3, #6
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	697a      	ldr	r2, [r7, #20]
 800c8e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	685a      	ldr	r2, [r3, #4]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	693a      	ldr	r2, [r7, #16]
 800c8f4:	621a      	str	r2, [r3, #32]
}
 800c8f6:	bf00      	nop
 800c8f8:	371c      	adds	r7, #28
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	40010000 	.word	0x40010000
 800c908:	40010400 	.word	0x40010400

0800c90c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b087      	sub	sp, #28
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	6a1b      	ldr	r3, [r3, #32]
 800c91c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6a1b      	ldr	r3, [r3, #32]
 800c922:	f023 0201 	bic.w	r2, r3, #1
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	699b      	ldr	r3, [r3, #24]
 800c92e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	011b      	lsls	r3, r3, #4
 800c93c:	693a      	ldr	r2, [r7, #16]
 800c93e:	4313      	orrs	r3, r2
 800c940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	f023 030a 	bic.w	r3, r3, #10
 800c948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c94a:	697a      	ldr	r2, [r7, #20]
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	4313      	orrs	r3, r2
 800c950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	693a      	ldr	r2, [r7, #16]
 800c956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	697a      	ldr	r2, [r7, #20]
 800c95c:	621a      	str	r2, [r3, #32]
}
 800c95e:	bf00      	nop
 800c960:	371c      	adds	r7, #28
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr

0800c96a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c96a:	b480      	push	{r7}
 800c96c:	b087      	sub	sp, #28
 800c96e:	af00      	add	r7, sp, #0
 800c970:	60f8      	str	r0, [r7, #12]
 800c972:	60b9      	str	r1, [r7, #8]
 800c974:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	6a1b      	ldr	r3, [r3, #32]
 800c97a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6a1b      	ldr	r3, [r3, #32]
 800c980:	f023 0210 	bic.w	r2, r3, #16
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	699b      	ldr	r3, [r3, #24]
 800c98c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c994:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	031b      	lsls	r3, r3, #12
 800c99a:	693a      	ldr	r2, [r7, #16]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c9a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	011b      	lsls	r3, r3, #4
 800c9ac:	697a      	ldr	r2, [r7, #20]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	693a      	ldr	r2, [r7, #16]
 800c9b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	697a      	ldr	r2, [r7, #20]
 800c9bc:	621a      	str	r2, [r3, #32]
}
 800c9be:	bf00      	nop
 800c9c0:	371c      	adds	r7, #28
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr

0800c9ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c9ca:	b480      	push	{r7}
 800c9cc:	b085      	sub	sp, #20
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
 800c9d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c9e2:	683a      	ldr	r2, [r7, #0]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	f043 0307 	orr.w	r3, r3, #7
 800c9ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	609a      	str	r2, [r3, #8]
}
 800c9f4:	bf00      	nop
 800c9f6:	3714      	adds	r7, #20
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b087      	sub	sp, #28
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	60b9      	str	r1, [r7, #8]
 800ca0a:	607a      	str	r2, [r7, #4]
 800ca0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	689b      	ldr	r3, [r3, #8]
 800ca12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ca1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	021a      	lsls	r2, r3, #8
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	431a      	orrs	r2, r3
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	4313      	orrs	r3, r2
 800ca28:	697a      	ldr	r2, [r7, #20]
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	697a      	ldr	r2, [r7, #20]
 800ca32:	609a      	str	r2, [r3, #8]
}
 800ca34:	bf00      	nop
 800ca36:	371c      	adds	r7, #28
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b087      	sub	sp, #28
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	f003 031f 	and.w	r3, r3, #31
 800ca52:	2201      	movs	r2, #1
 800ca54:	fa02 f303 	lsl.w	r3, r2, r3
 800ca58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	6a1a      	ldr	r2, [r3, #32]
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	43db      	mvns	r3, r3
 800ca62:	401a      	ands	r2, r3
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6a1a      	ldr	r2, [r3, #32]
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	f003 031f 	and.w	r3, r3, #31
 800ca72:	6879      	ldr	r1, [r7, #4]
 800ca74:	fa01 f303 	lsl.w	r3, r1, r3
 800ca78:	431a      	orrs	r2, r3
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	621a      	str	r2, [r3, #32]
}
 800ca7e:	bf00      	nop
 800ca80:	371c      	adds	r7, #28
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr
	...

0800ca8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b085      	sub	sp, #20
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d101      	bne.n	800caa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800caa0:	2302      	movs	r3, #2
 800caa2:	e05a      	b.n	800cb5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2201      	movs	r2, #1
 800caa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2202      	movs	r2, #2
 800cab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	689b      	ldr	r3, [r3, #8]
 800cac2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	4313      	orrs	r3, r2
 800cad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	68fa      	ldr	r2, [r7, #12]
 800cadc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4a21      	ldr	r2, [pc, #132]	@ (800cb68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d022      	beq.n	800cb2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800caf0:	d01d      	beq.n	800cb2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a1d      	ldr	r2, [pc, #116]	@ (800cb6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d018      	beq.n	800cb2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a1b      	ldr	r2, [pc, #108]	@ (800cb70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d013      	beq.n	800cb2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a1a      	ldr	r2, [pc, #104]	@ (800cb74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d00e      	beq.n	800cb2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a18      	ldr	r2, [pc, #96]	@ (800cb78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d009      	beq.n	800cb2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	4a17      	ldr	r2, [pc, #92]	@ (800cb7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d004      	beq.n	800cb2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a15      	ldr	r2, [pc, #84]	@ (800cb80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d10c      	bne.n	800cb48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	68ba      	ldr	r2, [r7, #8]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3714      	adds	r7, #20
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop
 800cb68:	40010000 	.word	0x40010000
 800cb6c:	40000400 	.word	0x40000400
 800cb70:	40000800 	.word	0x40000800
 800cb74:	40000c00 	.word	0x40000c00
 800cb78:	40010400 	.word	0x40010400
 800cb7c:	40014000 	.word	0x40014000
 800cb80:	40001800 	.word	0x40001800

0800cb84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d101      	bne.n	800cb96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	e042      	b.n	800cc1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d106      	bne.n	800cbb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2200      	movs	r2, #0
 800cba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f7fa ffac 	bl	8007b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2224      	movs	r2, #36	@ 0x24
 800cbb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	68da      	ldr	r2, [r3, #12]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cbc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 fd7f 	bl	800d6cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	691a      	ldr	r2, [r3, #16]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cbdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	695a      	ldr	r2, [r3, #20]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cbec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	68da      	ldr	r2, [r3, #12]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cbfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2200      	movs	r2, #0
 800cc02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2220      	movs	r2, #32
 800cc08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2220      	movs	r2, #32
 800cc10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cc1a:	2300      	movs	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b08a      	sub	sp, #40	@ 0x28
 800cc28:	af02      	add	r7, sp, #8
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	603b      	str	r3, [r7, #0]
 800cc30:	4613      	mov	r3, r2
 800cc32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cc34:	2300      	movs	r3, #0
 800cc36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	2b20      	cmp	r3, #32
 800cc42:	d175      	bne.n	800cd30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d002      	beq.n	800cc50 <HAL_UART_Transmit+0x2c>
 800cc4a:	88fb      	ldrh	r3, [r7, #6]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d101      	bne.n	800cc54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cc50:	2301      	movs	r3, #1
 800cc52:	e06e      	b.n	800cd32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2200      	movs	r2, #0
 800cc58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2221      	movs	r2, #33	@ 0x21
 800cc5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc62:	f7fb f931 	bl	8007ec8 <HAL_GetTick>
 800cc66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	88fa      	ldrh	r2, [r7, #6]
 800cc6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	88fa      	ldrh	r2, [r7, #6]
 800cc72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc7c:	d108      	bne.n	800cc90 <HAL_UART_Transmit+0x6c>
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	691b      	ldr	r3, [r3, #16]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d104      	bne.n	800cc90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	61bb      	str	r3, [r7, #24]
 800cc8e:	e003      	b.n	800cc98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cc94:	2300      	movs	r3, #0
 800cc96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cc98:	e02e      	b.n	800ccf8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	9300      	str	r3, [sp, #0]
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	2200      	movs	r2, #0
 800cca2:	2180      	movs	r1, #128	@ 0x80
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f000 fb1d 	bl	800d2e4 <UART_WaitOnFlagUntilTimeout>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d005      	beq.n	800ccbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2220      	movs	r2, #32
 800ccb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800ccb8:	2303      	movs	r3, #3
 800ccba:	e03a      	b.n	800cd32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10b      	bne.n	800ccda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	881b      	ldrh	r3, [r3, #0]
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ccd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	3302      	adds	r3, #2
 800ccd6:	61bb      	str	r3, [r7, #24]
 800ccd8:	e007      	b.n	800ccea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ccda:	69fb      	ldr	r3, [r7, #28]
 800ccdc:	781a      	ldrb	r2, [r3, #0]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	3301      	adds	r3, #1
 800cce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	3b01      	subs	r3, #1
 800ccf2:	b29a      	uxth	r2, r3
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1cb      	bne.n	800cc9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	9300      	str	r3, [sp, #0]
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	2140      	movs	r1, #64	@ 0x40
 800cd0c:	68f8      	ldr	r0, [r7, #12]
 800cd0e:	f000 fae9 	bl	800d2e4 <UART_WaitOnFlagUntilTimeout>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d005      	beq.n	800cd24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2220      	movs	r2, #32
 800cd1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800cd20:	2303      	movs	r3, #3
 800cd22:	e006      	b.n	800cd32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2220      	movs	r2, #32
 800cd28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	e000      	b.n	800cd32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800cd30:	2302      	movs	r3, #2
  }
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3720      	adds	r7, #32
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
	...

0800cd3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b0ba      	sub	sp, #232	@ 0xe8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	695b      	ldr	r3, [r3, #20]
 800cd5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800cd62:	2300      	movs	r3, #0
 800cd64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cd6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd72:	f003 030f 	and.w	r3, r3, #15
 800cd76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800cd7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d10f      	bne.n	800cda2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cd82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd86:	f003 0320 	and.w	r3, r3, #32
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d009      	beq.n	800cda2 <HAL_UART_IRQHandler+0x66>
 800cd8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd92:	f003 0320 	and.w	r3, r3, #32
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d003      	beq.n	800cda2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 fbd7 	bl	800d54e <UART_Receive_IT>
      return;
 800cda0:	e273      	b.n	800d28a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cda2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f000 80de 	beq.w	800cf68 <HAL_UART_IRQHandler+0x22c>
 800cdac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cdb0:	f003 0301 	and.w	r3, r3, #1
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d106      	bne.n	800cdc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cdb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdbc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	f000 80d1 	beq.w	800cf68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cdc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdca:	f003 0301 	and.w	r3, r3, #1
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00b      	beq.n	800cdea <HAL_UART_IRQHandler+0xae>
 800cdd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d005      	beq.n	800cdea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cde2:	f043 0201 	orr.w	r2, r3, #1
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cdea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdee:	f003 0304 	and.w	r3, r3, #4
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00b      	beq.n	800ce0e <HAL_UART_IRQHandler+0xd2>
 800cdf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cdfa:	f003 0301 	and.w	r3, r3, #1
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d005      	beq.n	800ce0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce06:	f043 0202 	orr.w	r2, r3, #2
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ce0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce12:	f003 0302 	and.w	r3, r3, #2
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d00b      	beq.n	800ce32 <HAL_UART_IRQHandler+0xf6>
 800ce1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce1e:	f003 0301 	and.w	r3, r3, #1
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d005      	beq.n	800ce32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce2a:	f043 0204 	orr.w	r2, r3, #4
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ce32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce36:	f003 0308 	and.w	r3, r3, #8
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d011      	beq.n	800ce62 <HAL_UART_IRQHandler+0x126>
 800ce3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce42:	f003 0320 	and.w	r3, r3, #32
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d105      	bne.n	800ce56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ce4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce4e:	f003 0301 	and.w	r3, r3, #1
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d005      	beq.n	800ce62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce5a:	f043 0208 	orr.w	r2, r3, #8
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f000 820a 	beq.w	800d280 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ce6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce70:	f003 0320 	and.w	r3, r3, #32
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d008      	beq.n	800ce8a <HAL_UART_IRQHandler+0x14e>
 800ce78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce7c:	f003 0320 	and.w	r3, r3, #32
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d002      	beq.n	800ce8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 fb62 	bl	800d54e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	695b      	ldr	r3, [r3, #20]
 800ce90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce94:	2b40      	cmp	r3, #64	@ 0x40
 800ce96:	bf0c      	ite	eq
 800ce98:	2301      	moveq	r3, #1
 800ce9a:	2300      	movne	r3, #0
 800ce9c:	b2db      	uxtb	r3, r3
 800ce9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cea6:	f003 0308 	and.w	r3, r3, #8
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d103      	bne.n	800ceb6 <HAL_UART_IRQHandler+0x17a>
 800ceae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d04f      	beq.n	800cf56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 fa6d 	bl	800d396 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	695b      	ldr	r3, [r3, #20]
 800cec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cec6:	2b40      	cmp	r3, #64	@ 0x40
 800cec8:	d141      	bne.n	800cf4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	3314      	adds	r3, #20
 800ced0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ced4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ced8:	e853 3f00 	ldrex	r3, [r3]
 800cedc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cee8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	3314      	adds	r3, #20
 800cef2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cef6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cefa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cefe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cf02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cf06:	e841 2300 	strex	r3, r2, [r1]
 800cf0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cf0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d1d9      	bne.n	800ceca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d013      	beq.n	800cf46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf22:	4a8a      	ldr	r2, [pc, #552]	@ (800d14c <HAL_UART_IRQHandler+0x410>)
 800cf24:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fb fbb3 	bl	8008696 <HAL_DMA_Abort_IT>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d016      	beq.n	800cf64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800cf40:	4610      	mov	r0, r2
 800cf42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf44:	e00e      	b.n	800cf64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 f9b6 	bl	800d2b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf4c:	e00a      	b.n	800cf64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f000 f9b2 	bl	800d2b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf54:	e006      	b.n	800cf64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 f9ae 	bl	800d2b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800cf62:	e18d      	b.n	800d280 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf64:	bf00      	nop
    return;
 800cf66:	e18b      	b.n	800d280 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	f040 8167 	bne.w	800d240 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800cf72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf76:	f003 0310 	and.w	r3, r3, #16
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	f000 8160 	beq.w	800d240 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800cf80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf84:	f003 0310 	and.w	r3, r3, #16
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	f000 8159 	beq.w	800d240 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cf8e:	2300      	movs	r3, #0
 800cf90:	60bb      	str	r3, [r7, #8]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	60bb      	str	r3, [r7, #8]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	60bb      	str	r3, [r7, #8]
 800cfa2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	695b      	ldr	r3, [r3, #20]
 800cfaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfae:	2b40      	cmp	r3, #64	@ 0x40
 800cfb0:	f040 80ce 	bne.w	800d150 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	685b      	ldr	r3, [r3, #4]
 800cfbc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cfc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f000 80a9 	beq.w	800d11c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cfce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	f080 80a2 	bcs.w	800d11c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cfde:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfe4:	69db      	ldr	r3, [r3, #28]
 800cfe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfea:	f000 8088 	beq.w	800d0fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	330c      	adds	r3, #12
 800cff4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cffc:	e853 3f00 	ldrex	r3, [r3]
 800d000:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d004:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d00c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	330c      	adds	r3, #12
 800d016:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d01a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d01e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d022:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d026:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d02a:	e841 2300 	strex	r3, r2, [r1]
 800d02e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d032:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d036:	2b00      	cmp	r3, #0
 800d038:	d1d9      	bne.n	800cfee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	3314      	adds	r3, #20
 800d040:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d042:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d044:	e853 3f00 	ldrex	r3, [r3]
 800d048:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d04a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d04c:	f023 0301 	bic.w	r3, r3, #1
 800d050:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	3314      	adds	r3, #20
 800d05a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d05e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d062:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d064:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d066:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d06a:	e841 2300 	strex	r3, r2, [r1]
 800d06e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d070:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d072:	2b00      	cmp	r3, #0
 800d074:	d1e1      	bne.n	800d03a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	3314      	adds	r3, #20
 800d07c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d07e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d080:	e853 3f00 	ldrex	r3, [r3]
 800d084:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d088:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d08c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	3314      	adds	r3, #20
 800d096:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d09a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d09c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d09e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d0a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d0a2:	e841 2300 	strex	r3, r2, [r1]
 800d0a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d0a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d1e3      	bne.n	800d076 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2220      	movs	r2, #32
 800d0b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	330c      	adds	r3, #12
 800d0c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0c6:	e853 3f00 	ldrex	r3, [r3]
 800d0ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d0cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d0ce:	f023 0310 	bic.w	r3, r3, #16
 800d0d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	330c      	adds	r3, #12
 800d0dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d0e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d0e2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d0e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d0e8:	e841 2300 	strex	r3, r2, [r1]
 800d0ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d0ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d1e3      	bne.n	800d0bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7fb fa5c 	bl	80085b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2202      	movs	r2, #2
 800d102:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	1ad3      	subs	r3, r2, r3
 800d110:	b29b      	uxth	r3, r3
 800d112:	4619      	mov	r1, r3
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 f8d9 	bl	800d2cc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d11a:	e0b3      	b.n	800d284 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d120:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d124:	429a      	cmp	r2, r3
 800d126:	f040 80ad 	bne.w	800d284 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d12e:	69db      	ldr	r3, [r3, #28]
 800d130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d134:	f040 80a6 	bne.w	800d284 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2202      	movs	r2, #2
 800d13c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d142:	4619      	mov	r1, r3
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f8c1 	bl	800d2cc <HAL_UARTEx_RxEventCallback>
      return;
 800d14a:	e09b      	b.n	800d284 <HAL_UART_IRQHandler+0x548>
 800d14c:	0800d45d 	.word	0x0800d45d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d158:	b29b      	uxth	r3, r3
 800d15a:	1ad3      	subs	r3, r2, r3
 800d15c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d164:	b29b      	uxth	r3, r3
 800d166:	2b00      	cmp	r3, #0
 800d168:	f000 808e 	beq.w	800d288 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800d16c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d170:	2b00      	cmp	r3, #0
 800d172:	f000 8089 	beq.w	800d288 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	330c      	adds	r3, #12
 800d17c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d180:	e853 3f00 	ldrex	r3, [r3]
 800d184:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d188:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d18c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	330c      	adds	r3, #12
 800d196:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d19a:	647a      	str	r2, [r7, #68]	@ 0x44
 800d19c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d19e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d1a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d1a2:	e841 2300 	strex	r3, r2, [r1]
 800d1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d1a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d1e3      	bne.n	800d176 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	3314      	adds	r3, #20
 800d1b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b8:	e853 3f00 	ldrex	r3, [r3]
 800d1bc:	623b      	str	r3, [r7, #32]
   return(result);
 800d1be:	6a3b      	ldr	r3, [r7, #32]
 800d1c0:	f023 0301 	bic.w	r3, r3, #1
 800d1c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	3314      	adds	r3, #20
 800d1ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d1d2:	633a      	str	r2, [r7, #48]	@ 0x30
 800d1d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d1d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1da:	e841 2300 	strex	r3, r2, [r1]
 800d1de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1e3      	bne.n	800d1ae <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2220      	movs	r2, #32
 800d1ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	330c      	adds	r3, #12
 800d1fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	e853 3f00 	ldrex	r3, [r3]
 800d202:	60fb      	str	r3, [r7, #12]
   return(result);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f023 0310 	bic.w	r3, r3, #16
 800d20a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	330c      	adds	r3, #12
 800d214:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d218:	61fa      	str	r2, [r7, #28]
 800d21a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d21c:	69b9      	ldr	r1, [r7, #24]
 800d21e:	69fa      	ldr	r2, [r7, #28]
 800d220:	e841 2300 	strex	r3, r2, [r1]
 800d224:	617b      	str	r3, [r7, #20]
   return(result);
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1e3      	bne.n	800d1f4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2202      	movs	r2, #2
 800d230:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d232:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d236:	4619      	mov	r1, r3
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 f847 	bl	800d2cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d23e:	e023      	b.n	800d288 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d009      	beq.n	800d260 <HAL_UART_IRQHandler+0x524>
 800d24c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d254:	2b00      	cmp	r3, #0
 800d256:	d003      	beq.n	800d260 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f910 	bl	800d47e <UART_Transmit_IT>
    return;
 800d25e:	e014      	b.n	800d28a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00e      	beq.n	800d28a <HAL_UART_IRQHandler+0x54e>
 800d26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d274:	2b00      	cmp	r3, #0
 800d276:	d008      	beq.n	800d28a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 f950 	bl	800d51e <UART_EndTransmit_IT>
    return;
 800d27e:	e004      	b.n	800d28a <HAL_UART_IRQHandler+0x54e>
    return;
 800d280:	bf00      	nop
 800d282:	e002      	b.n	800d28a <HAL_UART_IRQHandler+0x54e>
      return;
 800d284:	bf00      	nop
 800d286:	e000      	b.n	800d28a <HAL_UART_IRQHandler+0x54e>
      return;
 800d288:	bf00      	nop
  }
}
 800d28a:	37e8      	adds	r7, #232	@ 0xe8
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d298:	bf00      	nop
 800d29a:	370c      	adds	r7, #12
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr

0800d2a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d2ac:	bf00      	nop
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d2c0:	bf00      	nop
 800d2c2:	370c      	adds	r7, #12
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr

0800d2cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d2d8:	bf00      	nop
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b086      	sub	sp, #24
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	60f8      	str	r0, [r7, #12]
 800d2ec:	60b9      	str	r1, [r7, #8]
 800d2ee:	603b      	str	r3, [r7, #0]
 800d2f0:	4613      	mov	r3, r2
 800d2f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d2f4:	e03b      	b.n	800d36e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d2f6:	6a3b      	ldr	r3, [r7, #32]
 800d2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2fc:	d037      	beq.n	800d36e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2fe:	f7fa fde3 	bl	8007ec8 <HAL_GetTick>
 800d302:	4602      	mov	r2, r0
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	1ad3      	subs	r3, r2, r3
 800d308:	6a3a      	ldr	r2, [r7, #32]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d302      	bcc.n	800d314 <UART_WaitOnFlagUntilTimeout+0x30>
 800d30e:	6a3b      	ldr	r3, [r7, #32]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d101      	bne.n	800d318 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d314:	2303      	movs	r3, #3
 800d316:	e03a      	b.n	800d38e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	f003 0304 	and.w	r3, r3, #4
 800d322:	2b00      	cmp	r3, #0
 800d324:	d023      	beq.n	800d36e <UART_WaitOnFlagUntilTimeout+0x8a>
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	2b80      	cmp	r3, #128	@ 0x80
 800d32a:	d020      	beq.n	800d36e <UART_WaitOnFlagUntilTimeout+0x8a>
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	2b40      	cmp	r3, #64	@ 0x40
 800d330:	d01d      	beq.n	800d36e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f003 0308 	and.w	r3, r3, #8
 800d33c:	2b08      	cmp	r3, #8
 800d33e:	d116      	bne.n	800d36e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800d340:	2300      	movs	r3, #0
 800d342:	617b      	str	r3, [r7, #20]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	617b      	str	r3, [r7, #20]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	617b      	str	r3, [r7, #20]
 800d354:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d356:	68f8      	ldr	r0, [r7, #12]
 800d358:	f000 f81d 	bl	800d396 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2208      	movs	r2, #8
 800d360:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2200      	movs	r2, #0
 800d366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800d36a:	2301      	movs	r3, #1
 800d36c:	e00f      	b.n	800d38e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	4013      	ands	r3, r2
 800d378:	68ba      	ldr	r2, [r7, #8]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	bf0c      	ite	eq
 800d37e:	2301      	moveq	r3, #1
 800d380:	2300      	movne	r3, #0
 800d382:	b2db      	uxtb	r3, r3
 800d384:	461a      	mov	r2, r3
 800d386:	79fb      	ldrb	r3, [r7, #7]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d0b4      	beq.n	800d2f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d38c:	2300      	movs	r3, #0
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3718      	adds	r7, #24
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}

0800d396 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d396:	b480      	push	{r7}
 800d398:	b095      	sub	sp, #84	@ 0x54
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	330c      	adds	r3, #12
 800d3a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3a8:	e853 3f00 	ldrex	r3, [r3]
 800d3ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d3b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	330c      	adds	r3, #12
 800d3bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d3be:	643a      	str	r2, [r7, #64]	@ 0x40
 800d3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d3c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d3c6:	e841 2300 	strex	r3, r2, [r1]
 800d3ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d1e5      	bne.n	800d39e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	3314      	adds	r3, #20
 800d3d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3da:	6a3b      	ldr	r3, [r7, #32]
 800d3dc:	e853 3f00 	ldrex	r3, [r3]
 800d3e0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	f023 0301 	bic.w	r3, r3, #1
 800d3e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	3314      	adds	r3, #20
 800d3f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d3f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d3f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d3f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3fa:	e841 2300 	strex	r3, r2, [r1]
 800d3fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1e5      	bne.n	800d3d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	d119      	bne.n	800d442 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	330c      	adds	r3, #12
 800d414:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	e853 3f00 	ldrex	r3, [r3]
 800d41c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	f023 0310 	bic.w	r3, r3, #16
 800d424:	647b      	str	r3, [r7, #68]	@ 0x44
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	330c      	adds	r3, #12
 800d42c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d42e:	61ba      	str	r2, [r7, #24]
 800d430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d432:	6979      	ldr	r1, [r7, #20]
 800d434:	69ba      	ldr	r2, [r7, #24]
 800d436:	e841 2300 	strex	r3, r2, [r1]
 800d43a:	613b      	str	r3, [r7, #16]
   return(result);
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1e5      	bne.n	800d40e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2220      	movs	r2, #32
 800d446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2200      	movs	r2, #0
 800d44e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d450:	bf00      	nop
 800d452:	3754      	adds	r7, #84	@ 0x54
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d468:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2200      	movs	r2, #0
 800d46e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	f7ff ff21 	bl	800d2b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d476:	bf00      	nop
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d47e:	b480      	push	{r7}
 800d480:	b085      	sub	sp, #20
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	2b21      	cmp	r3, #33	@ 0x21
 800d490:	d13e      	bne.n	800d510 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	689b      	ldr	r3, [r3, #8]
 800d496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d49a:	d114      	bne.n	800d4c6 <UART_Transmit_IT+0x48>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	691b      	ldr	r3, [r3, #16]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d110      	bne.n	800d4c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6a1b      	ldr	r3, [r3, #32]
 800d4a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	881b      	ldrh	r3, [r3, #0]
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d4b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6a1b      	ldr	r3, [r3, #32]
 800d4be:	1c9a      	adds	r2, r3, #2
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	621a      	str	r2, [r3, #32]
 800d4c4:	e008      	b.n	800d4d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6a1b      	ldr	r3, [r3, #32]
 800d4ca:	1c59      	adds	r1, r3, #1
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	6211      	str	r1, [r2, #32]
 800d4d0:	781a      	ldrb	r2, [r3, #0]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	3b01      	subs	r3, #1
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10f      	bne.n	800d50c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	68da      	ldr	r2, [r3, #12]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d4fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	68da      	ldr	r2, [r3, #12]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d50a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d50c:	2300      	movs	r3, #0
 800d50e:	e000      	b.n	800d512 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d510:	2302      	movs	r3, #2
  }
}
 800d512:	4618      	mov	r0, r3
 800d514:	3714      	adds	r7, #20
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr

0800d51e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b082      	sub	sp, #8
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	68da      	ldr	r2, [r3, #12]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d534:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2220      	movs	r2, #32
 800d53a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f7ff fea6 	bl	800d290 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d544:	2300      	movs	r3, #0
}
 800d546:	4618      	mov	r0, r3
 800d548:	3708      	adds	r7, #8
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}

0800d54e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d54e:	b580      	push	{r7, lr}
 800d550:	b08c      	sub	sp, #48	@ 0x30
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800d556:	2300      	movs	r3, #0
 800d558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800d55a:	2300      	movs	r3, #0
 800d55c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d564:	b2db      	uxtb	r3, r3
 800d566:	2b22      	cmp	r3, #34	@ 0x22
 800d568:	f040 80aa 	bne.w	800d6c0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	689b      	ldr	r3, [r3, #8]
 800d570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d574:	d115      	bne.n	800d5a2 <UART_Receive_IT+0x54>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	691b      	ldr	r3, [r3, #16]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d111      	bne.n	800d5a2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d582:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d590:	b29a      	uxth	r2, r3
 800d592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d594:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d59a:	1c9a      	adds	r2, r3, #2
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	629a      	str	r2, [r3, #40]	@ 0x28
 800d5a0:	e024      	b.n	800d5ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	689b      	ldr	r3, [r3, #8]
 800d5ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5b0:	d007      	beq.n	800d5c2 <UART_Receive_IT+0x74>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d10a      	bne.n	800d5d0 <UART_Receive_IT+0x82>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	691b      	ldr	r3, [r3, #16]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d106      	bne.n	800d5d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	b2da      	uxtb	r2, r3
 800d5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5cc:	701a      	strb	r2, [r3, #0]
 800d5ce:	e008      	b.n	800d5e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	685b      	ldr	r3, [r3, #4]
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5dc:	b2da      	uxtb	r2, r3
 800d5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5e6:	1c5a      	adds	r2, r3, #1
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d15d      	bne.n	800d6bc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	68da      	ldr	r2, [r3, #12]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f022 0220 	bic.w	r2, r2, #32
 800d60e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	68da      	ldr	r2, [r3, #12]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d61e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	695a      	ldr	r2, [r3, #20]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f022 0201 	bic.w	r2, r2, #1
 800d62e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2220      	movs	r2, #32
 800d634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2200      	movs	r2, #0
 800d63c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d642:	2b01      	cmp	r3, #1
 800d644:	d135      	bne.n	800d6b2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2200      	movs	r2, #0
 800d64a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	330c      	adds	r3, #12
 800d652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	e853 3f00 	ldrex	r3, [r3]
 800d65a:	613b      	str	r3, [r7, #16]
   return(result);
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	f023 0310 	bic.w	r3, r3, #16
 800d662:	627b      	str	r3, [r7, #36]	@ 0x24
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	330c      	adds	r3, #12
 800d66a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d66c:	623a      	str	r2, [r7, #32]
 800d66e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d670:	69f9      	ldr	r1, [r7, #28]
 800d672:	6a3a      	ldr	r2, [r7, #32]
 800d674:	e841 2300 	strex	r3, r2, [r1]
 800d678:	61bb      	str	r3, [r7, #24]
   return(result);
 800d67a:	69bb      	ldr	r3, [r7, #24]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1e5      	bne.n	800d64c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f003 0310 	and.w	r3, r3, #16
 800d68a:	2b10      	cmp	r3, #16
 800d68c:	d10a      	bne.n	800d6a4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d68e:	2300      	movs	r3, #0
 800d690:	60fb      	str	r3, [r7, #12]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	60fb      	str	r3, [r7, #12]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	60fb      	str	r3, [r7, #12]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f7ff fe0e 	bl	800d2cc <HAL_UARTEx_RxEventCallback>
 800d6b0:	e002      	b.n	800d6b8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f7ff fdf6 	bl	800d2a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	e002      	b.n	800d6c2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	e000      	b.n	800d6c2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d6c0:	2302      	movs	r3, #2
  }
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3730      	adds	r7, #48	@ 0x30
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
	...

0800d6cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d6cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d6d0:	b0c0      	sub	sp, #256	@ 0x100
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d6d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	691b      	ldr	r3, [r3, #16]
 800d6e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d6e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d6e8:	68d9      	ldr	r1, [r3, #12]
 800d6ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d6ee:	681a      	ldr	r2, [r3, #0]
 800d6f0:	ea40 0301 	orr.w	r3, r0, r1
 800d6f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d6f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d6fa:	689a      	ldr	r2, [r3, #8]
 800d6fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d700:	691b      	ldr	r3, [r3, #16]
 800d702:	431a      	orrs	r2, r3
 800d704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d708:	695b      	ldr	r3, [r3, #20]
 800d70a:	431a      	orrs	r2, r3
 800d70c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d710:	69db      	ldr	r3, [r3, #28]
 800d712:	4313      	orrs	r3, r2
 800d714:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	68db      	ldr	r3, [r3, #12]
 800d720:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d724:	f021 010c 	bic.w	r1, r1, #12
 800d728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d732:	430b      	orrs	r3, r1
 800d734:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	695b      	ldr	r3, [r3, #20]
 800d73e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d746:	6999      	ldr	r1, [r3, #24]
 800d748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	ea40 0301 	orr.w	r3, r0, r1
 800d752:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	4b8f      	ldr	r3, [pc, #572]	@ (800d998 <UART_SetConfig+0x2cc>)
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d005      	beq.n	800d76c <UART_SetConfig+0xa0>
 800d760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	4b8d      	ldr	r3, [pc, #564]	@ (800d99c <UART_SetConfig+0x2d0>)
 800d768:	429a      	cmp	r2, r3
 800d76a:	d104      	bne.n	800d776 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d76c:	f7fd fd98 	bl	800b2a0 <HAL_RCC_GetPCLK2Freq>
 800d770:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d774:	e003      	b.n	800d77e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d776:	f7fd fd7f 	bl	800b278 <HAL_RCC_GetPCLK1Freq>
 800d77a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d77e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d782:	69db      	ldr	r3, [r3, #28]
 800d784:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d788:	f040 810c 	bne.w	800d9a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d78c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d790:	2200      	movs	r2, #0
 800d792:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d796:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d79a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d79e:	4622      	mov	r2, r4
 800d7a0:	462b      	mov	r3, r5
 800d7a2:	1891      	adds	r1, r2, r2
 800d7a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d7a6:	415b      	adcs	r3, r3
 800d7a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d7aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d7ae:	4621      	mov	r1, r4
 800d7b0:	eb12 0801 	adds.w	r8, r2, r1
 800d7b4:	4629      	mov	r1, r5
 800d7b6:	eb43 0901 	adc.w	r9, r3, r1
 800d7ba:	f04f 0200 	mov.w	r2, #0
 800d7be:	f04f 0300 	mov.w	r3, #0
 800d7c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d7c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d7ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d7ce:	4690      	mov	r8, r2
 800d7d0:	4699      	mov	r9, r3
 800d7d2:	4623      	mov	r3, r4
 800d7d4:	eb18 0303 	adds.w	r3, r8, r3
 800d7d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d7dc:	462b      	mov	r3, r5
 800d7de:	eb49 0303 	adc.w	r3, r9, r3
 800d7e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d7e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d7f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d7f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	18db      	adds	r3, r3, r3
 800d7fe:	653b      	str	r3, [r7, #80]	@ 0x50
 800d800:	4613      	mov	r3, r2
 800d802:	eb42 0303 	adc.w	r3, r2, r3
 800d806:	657b      	str	r3, [r7, #84]	@ 0x54
 800d808:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d80c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d810:	f7f3 fa3a 	bl	8000c88 <__aeabi_uldivmod>
 800d814:	4602      	mov	r2, r0
 800d816:	460b      	mov	r3, r1
 800d818:	4b61      	ldr	r3, [pc, #388]	@ (800d9a0 <UART_SetConfig+0x2d4>)
 800d81a:	fba3 2302 	umull	r2, r3, r3, r2
 800d81e:	095b      	lsrs	r3, r3, #5
 800d820:	011c      	lsls	r4, r3, #4
 800d822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d826:	2200      	movs	r2, #0
 800d828:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d82c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d830:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d834:	4642      	mov	r2, r8
 800d836:	464b      	mov	r3, r9
 800d838:	1891      	adds	r1, r2, r2
 800d83a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d83c:	415b      	adcs	r3, r3
 800d83e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d840:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d844:	4641      	mov	r1, r8
 800d846:	eb12 0a01 	adds.w	sl, r2, r1
 800d84a:	4649      	mov	r1, r9
 800d84c:	eb43 0b01 	adc.w	fp, r3, r1
 800d850:	f04f 0200 	mov.w	r2, #0
 800d854:	f04f 0300 	mov.w	r3, #0
 800d858:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d85c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d860:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d864:	4692      	mov	sl, r2
 800d866:	469b      	mov	fp, r3
 800d868:	4643      	mov	r3, r8
 800d86a:	eb1a 0303 	adds.w	r3, sl, r3
 800d86e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d872:	464b      	mov	r3, r9
 800d874:	eb4b 0303 	adc.w	r3, fp, r3
 800d878:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d87c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	2200      	movs	r2, #0
 800d884:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d888:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d88c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d890:	460b      	mov	r3, r1
 800d892:	18db      	adds	r3, r3, r3
 800d894:	643b      	str	r3, [r7, #64]	@ 0x40
 800d896:	4613      	mov	r3, r2
 800d898:	eb42 0303 	adc.w	r3, r2, r3
 800d89c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d89e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d8a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d8a6:	f7f3 f9ef 	bl	8000c88 <__aeabi_uldivmod>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	4611      	mov	r1, r2
 800d8b0:	4b3b      	ldr	r3, [pc, #236]	@ (800d9a0 <UART_SetConfig+0x2d4>)
 800d8b2:	fba3 2301 	umull	r2, r3, r3, r1
 800d8b6:	095b      	lsrs	r3, r3, #5
 800d8b8:	2264      	movs	r2, #100	@ 0x64
 800d8ba:	fb02 f303 	mul.w	r3, r2, r3
 800d8be:	1acb      	subs	r3, r1, r3
 800d8c0:	00db      	lsls	r3, r3, #3
 800d8c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d8c6:	4b36      	ldr	r3, [pc, #216]	@ (800d9a0 <UART_SetConfig+0x2d4>)
 800d8c8:	fba3 2302 	umull	r2, r3, r3, r2
 800d8cc:	095b      	lsrs	r3, r3, #5
 800d8ce:	005b      	lsls	r3, r3, #1
 800d8d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d8d4:	441c      	add	r4, r3
 800d8d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d8da:	2200      	movs	r2, #0
 800d8dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d8e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d8e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d8e8:	4642      	mov	r2, r8
 800d8ea:	464b      	mov	r3, r9
 800d8ec:	1891      	adds	r1, r2, r2
 800d8ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d8f0:	415b      	adcs	r3, r3
 800d8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d8f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d8f8:	4641      	mov	r1, r8
 800d8fa:	1851      	adds	r1, r2, r1
 800d8fc:	6339      	str	r1, [r7, #48]	@ 0x30
 800d8fe:	4649      	mov	r1, r9
 800d900:	414b      	adcs	r3, r1
 800d902:	637b      	str	r3, [r7, #52]	@ 0x34
 800d904:	f04f 0200 	mov.w	r2, #0
 800d908:	f04f 0300 	mov.w	r3, #0
 800d90c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d910:	4659      	mov	r1, fp
 800d912:	00cb      	lsls	r3, r1, #3
 800d914:	4651      	mov	r1, sl
 800d916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d91a:	4651      	mov	r1, sl
 800d91c:	00ca      	lsls	r2, r1, #3
 800d91e:	4610      	mov	r0, r2
 800d920:	4619      	mov	r1, r3
 800d922:	4603      	mov	r3, r0
 800d924:	4642      	mov	r2, r8
 800d926:	189b      	adds	r3, r3, r2
 800d928:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d92c:	464b      	mov	r3, r9
 800d92e:	460a      	mov	r2, r1
 800d930:	eb42 0303 	adc.w	r3, r2, r3
 800d934:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	2200      	movs	r2, #0
 800d940:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d944:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d948:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d94c:	460b      	mov	r3, r1
 800d94e:	18db      	adds	r3, r3, r3
 800d950:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d952:	4613      	mov	r3, r2
 800d954:	eb42 0303 	adc.w	r3, r2, r3
 800d958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d95a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d95e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d962:	f7f3 f991 	bl	8000c88 <__aeabi_uldivmod>
 800d966:	4602      	mov	r2, r0
 800d968:	460b      	mov	r3, r1
 800d96a:	4b0d      	ldr	r3, [pc, #52]	@ (800d9a0 <UART_SetConfig+0x2d4>)
 800d96c:	fba3 1302 	umull	r1, r3, r3, r2
 800d970:	095b      	lsrs	r3, r3, #5
 800d972:	2164      	movs	r1, #100	@ 0x64
 800d974:	fb01 f303 	mul.w	r3, r1, r3
 800d978:	1ad3      	subs	r3, r2, r3
 800d97a:	00db      	lsls	r3, r3, #3
 800d97c:	3332      	adds	r3, #50	@ 0x32
 800d97e:	4a08      	ldr	r2, [pc, #32]	@ (800d9a0 <UART_SetConfig+0x2d4>)
 800d980:	fba2 2303 	umull	r2, r3, r2, r3
 800d984:	095b      	lsrs	r3, r3, #5
 800d986:	f003 0207 	and.w	r2, r3, #7
 800d98a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4422      	add	r2, r4
 800d992:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d994:	e106      	b.n	800dba4 <UART_SetConfig+0x4d8>
 800d996:	bf00      	nop
 800d998:	40011000 	.word	0x40011000
 800d99c:	40011400 	.word	0x40011400
 800d9a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d9a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d9ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d9b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d9b6:	4642      	mov	r2, r8
 800d9b8:	464b      	mov	r3, r9
 800d9ba:	1891      	adds	r1, r2, r2
 800d9bc:	6239      	str	r1, [r7, #32]
 800d9be:	415b      	adcs	r3, r3
 800d9c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d9c6:	4641      	mov	r1, r8
 800d9c8:	1854      	adds	r4, r2, r1
 800d9ca:	4649      	mov	r1, r9
 800d9cc:	eb43 0501 	adc.w	r5, r3, r1
 800d9d0:	f04f 0200 	mov.w	r2, #0
 800d9d4:	f04f 0300 	mov.w	r3, #0
 800d9d8:	00eb      	lsls	r3, r5, #3
 800d9da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d9de:	00e2      	lsls	r2, r4, #3
 800d9e0:	4614      	mov	r4, r2
 800d9e2:	461d      	mov	r5, r3
 800d9e4:	4643      	mov	r3, r8
 800d9e6:	18e3      	adds	r3, r4, r3
 800d9e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d9ec:	464b      	mov	r3, r9
 800d9ee:	eb45 0303 	adc.w	r3, r5, r3
 800d9f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d9f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800da02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800da06:	f04f 0200 	mov.w	r2, #0
 800da0a:	f04f 0300 	mov.w	r3, #0
 800da0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800da12:	4629      	mov	r1, r5
 800da14:	008b      	lsls	r3, r1, #2
 800da16:	4621      	mov	r1, r4
 800da18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800da1c:	4621      	mov	r1, r4
 800da1e:	008a      	lsls	r2, r1, #2
 800da20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800da24:	f7f3 f930 	bl	8000c88 <__aeabi_uldivmod>
 800da28:	4602      	mov	r2, r0
 800da2a:	460b      	mov	r3, r1
 800da2c:	4b60      	ldr	r3, [pc, #384]	@ (800dbb0 <UART_SetConfig+0x4e4>)
 800da2e:	fba3 2302 	umull	r2, r3, r3, r2
 800da32:	095b      	lsrs	r3, r3, #5
 800da34:	011c      	lsls	r4, r3, #4
 800da36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800da3a:	2200      	movs	r2, #0
 800da3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800da40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800da44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800da48:	4642      	mov	r2, r8
 800da4a:	464b      	mov	r3, r9
 800da4c:	1891      	adds	r1, r2, r2
 800da4e:	61b9      	str	r1, [r7, #24]
 800da50:	415b      	adcs	r3, r3
 800da52:	61fb      	str	r3, [r7, #28]
 800da54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800da58:	4641      	mov	r1, r8
 800da5a:	1851      	adds	r1, r2, r1
 800da5c:	6139      	str	r1, [r7, #16]
 800da5e:	4649      	mov	r1, r9
 800da60:	414b      	adcs	r3, r1
 800da62:	617b      	str	r3, [r7, #20]
 800da64:	f04f 0200 	mov.w	r2, #0
 800da68:	f04f 0300 	mov.w	r3, #0
 800da6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800da70:	4659      	mov	r1, fp
 800da72:	00cb      	lsls	r3, r1, #3
 800da74:	4651      	mov	r1, sl
 800da76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800da7a:	4651      	mov	r1, sl
 800da7c:	00ca      	lsls	r2, r1, #3
 800da7e:	4610      	mov	r0, r2
 800da80:	4619      	mov	r1, r3
 800da82:	4603      	mov	r3, r0
 800da84:	4642      	mov	r2, r8
 800da86:	189b      	adds	r3, r3, r2
 800da88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800da8c:	464b      	mov	r3, r9
 800da8e:	460a      	mov	r2, r1
 800da90:	eb42 0303 	adc.w	r3, r2, r3
 800da94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800da98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	2200      	movs	r2, #0
 800daa0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800daa2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800daa4:	f04f 0200 	mov.w	r2, #0
 800daa8:	f04f 0300 	mov.w	r3, #0
 800daac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800dab0:	4649      	mov	r1, r9
 800dab2:	008b      	lsls	r3, r1, #2
 800dab4:	4641      	mov	r1, r8
 800dab6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800daba:	4641      	mov	r1, r8
 800dabc:	008a      	lsls	r2, r1, #2
 800dabe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800dac2:	f7f3 f8e1 	bl	8000c88 <__aeabi_uldivmod>
 800dac6:	4602      	mov	r2, r0
 800dac8:	460b      	mov	r3, r1
 800daca:	4611      	mov	r1, r2
 800dacc:	4b38      	ldr	r3, [pc, #224]	@ (800dbb0 <UART_SetConfig+0x4e4>)
 800dace:	fba3 2301 	umull	r2, r3, r3, r1
 800dad2:	095b      	lsrs	r3, r3, #5
 800dad4:	2264      	movs	r2, #100	@ 0x64
 800dad6:	fb02 f303 	mul.w	r3, r2, r3
 800dada:	1acb      	subs	r3, r1, r3
 800dadc:	011b      	lsls	r3, r3, #4
 800dade:	3332      	adds	r3, #50	@ 0x32
 800dae0:	4a33      	ldr	r2, [pc, #204]	@ (800dbb0 <UART_SetConfig+0x4e4>)
 800dae2:	fba2 2303 	umull	r2, r3, r2, r3
 800dae6:	095b      	lsrs	r3, r3, #5
 800dae8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800daec:	441c      	add	r4, r3
 800daee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800daf2:	2200      	movs	r2, #0
 800daf4:	673b      	str	r3, [r7, #112]	@ 0x70
 800daf6:	677a      	str	r2, [r7, #116]	@ 0x74
 800daf8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800dafc:	4642      	mov	r2, r8
 800dafe:	464b      	mov	r3, r9
 800db00:	1891      	adds	r1, r2, r2
 800db02:	60b9      	str	r1, [r7, #8]
 800db04:	415b      	adcs	r3, r3
 800db06:	60fb      	str	r3, [r7, #12]
 800db08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800db0c:	4641      	mov	r1, r8
 800db0e:	1851      	adds	r1, r2, r1
 800db10:	6039      	str	r1, [r7, #0]
 800db12:	4649      	mov	r1, r9
 800db14:	414b      	adcs	r3, r1
 800db16:	607b      	str	r3, [r7, #4]
 800db18:	f04f 0200 	mov.w	r2, #0
 800db1c:	f04f 0300 	mov.w	r3, #0
 800db20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800db24:	4659      	mov	r1, fp
 800db26:	00cb      	lsls	r3, r1, #3
 800db28:	4651      	mov	r1, sl
 800db2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800db2e:	4651      	mov	r1, sl
 800db30:	00ca      	lsls	r2, r1, #3
 800db32:	4610      	mov	r0, r2
 800db34:	4619      	mov	r1, r3
 800db36:	4603      	mov	r3, r0
 800db38:	4642      	mov	r2, r8
 800db3a:	189b      	adds	r3, r3, r2
 800db3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800db3e:	464b      	mov	r3, r9
 800db40:	460a      	mov	r2, r1
 800db42:	eb42 0303 	adc.w	r3, r2, r3
 800db46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800db48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	2200      	movs	r2, #0
 800db50:	663b      	str	r3, [r7, #96]	@ 0x60
 800db52:	667a      	str	r2, [r7, #100]	@ 0x64
 800db54:	f04f 0200 	mov.w	r2, #0
 800db58:	f04f 0300 	mov.w	r3, #0
 800db5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800db60:	4649      	mov	r1, r9
 800db62:	008b      	lsls	r3, r1, #2
 800db64:	4641      	mov	r1, r8
 800db66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800db6a:	4641      	mov	r1, r8
 800db6c:	008a      	lsls	r2, r1, #2
 800db6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800db72:	f7f3 f889 	bl	8000c88 <__aeabi_uldivmod>
 800db76:	4602      	mov	r2, r0
 800db78:	460b      	mov	r3, r1
 800db7a:	4b0d      	ldr	r3, [pc, #52]	@ (800dbb0 <UART_SetConfig+0x4e4>)
 800db7c:	fba3 1302 	umull	r1, r3, r3, r2
 800db80:	095b      	lsrs	r3, r3, #5
 800db82:	2164      	movs	r1, #100	@ 0x64
 800db84:	fb01 f303 	mul.w	r3, r1, r3
 800db88:	1ad3      	subs	r3, r2, r3
 800db8a:	011b      	lsls	r3, r3, #4
 800db8c:	3332      	adds	r3, #50	@ 0x32
 800db8e:	4a08      	ldr	r2, [pc, #32]	@ (800dbb0 <UART_SetConfig+0x4e4>)
 800db90:	fba2 2303 	umull	r2, r3, r2, r3
 800db94:	095b      	lsrs	r3, r3, #5
 800db96:	f003 020f 	and.w	r2, r3, #15
 800db9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4422      	add	r2, r4
 800dba2:	609a      	str	r2, [r3, #8]
}
 800dba4:	bf00      	nop
 800dba6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbb0:	51eb851f 	.word	0x51eb851f

0800dbb4 <_ZdlPvj>:
 800dbb4:	f000 b800 	b.w	800dbb8 <_ZdlPv>

0800dbb8 <_ZdlPv>:
 800dbb8:	f002 ba1e 	b.w	800fff8 <free>

0800dbbc <pow>:
 800dbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbbe:	ed2d 8b02 	vpush	{d8}
 800dbc2:	eeb0 8a40 	vmov.f32	s16, s0
 800dbc6:	eef0 8a60 	vmov.f32	s17, s1
 800dbca:	ec55 4b11 	vmov	r4, r5, d1
 800dbce:	f000 fbdb 	bl	800e388 <__ieee754_pow>
 800dbd2:	4622      	mov	r2, r4
 800dbd4:	462b      	mov	r3, r5
 800dbd6:	4620      	mov	r0, r4
 800dbd8:	4629      	mov	r1, r5
 800dbda:	ec57 6b10 	vmov	r6, r7, d0
 800dbde:	f7f2 ffa5 	bl	8000b2c <__aeabi_dcmpun>
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	d13b      	bne.n	800dc5e <pow+0xa2>
 800dbe6:	ec51 0b18 	vmov	r0, r1, d8
 800dbea:	2200      	movs	r2, #0
 800dbec:	2300      	movs	r3, #0
 800dbee:	f7f2 ff6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800dbf2:	b1b8      	cbz	r0, 800dc24 <pow+0x68>
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	4629      	mov	r1, r5
 800dbfc:	f7f2 ff64 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc00:	2800      	cmp	r0, #0
 800dc02:	d146      	bne.n	800dc92 <pow+0xd6>
 800dc04:	ec45 4b10 	vmov	d0, r4, r5
 800dc08:	f000 f953 	bl	800deb2 <finite>
 800dc0c:	b338      	cbz	r0, 800dc5e <pow+0xa2>
 800dc0e:	2200      	movs	r2, #0
 800dc10:	2300      	movs	r3, #0
 800dc12:	4620      	mov	r0, r4
 800dc14:	4629      	mov	r1, r5
 800dc16:	f7f2 ff61 	bl	8000adc <__aeabi_dcmplt>
 800dc1a:	b300      	cbz	r0, 800dc5e <pow+0xa2>
 800dc1c:	f003 fa90 	bl	8011140 <__errno>
 800dc20:	2322      	movs	r3, #34	@ 0x22
 800dc22:	e01b      	b.n	800dc5c <pow+0xa0>
 800dc24:	ec47 6b10 	vmov	d0, r6, r7
 800dc28:	f000 f943 	bl	800deb2 <finite>
 800dc2c:	b9e0      	cbnz	r0, 800dc68 <pow+0xac>
 800dc2e:	eeb0 0a48 	vmov.f32	s0, s16
 800dc32:	eef0 0a68 	vmov.f32	s1, s17
 800dc36:	f000 f93c 	bl	800deb2 <finite>
 800dc3a:	b1a8      	cbz	r0, 800dc68 <pow+0xac>
 800dc3c:	ec45 4b10 	vmov	d0, r4, r5
 800dc40:	f000 f937 	bl	800deb2 <finite>
 800dc44:	b180      	cbz	r0, 800dc68 <pow+0xac>
 800dc46:	4632      	mov	r2, r6
 800dc48:	463b      	mov	r3, r7
 800dc4a:	4630      	mov	r0, r6
 800dc4c:	4639      	mov	r1, r7
 800dc4e:	f7f2 ff6d 	bl	8000b2c <__aeabi_dcmpun>
 800dc52:	2800      	cmp	r0, #0
 800dc54:	d0e2      	beq.n	800dc1c <pow+0x60>
 800dc56:	f003 fa73 	bl	8011140 <__errno>
 800dc5a:	2321      	movs	r3, #33	@ 0x21
 800dc5c:	6003      	str	r3, [r0, #0]
 800dc5e:	ecbd 8b02 	vpop	{d8}
 800dc62:	ec47 6b10 	vmov	d0, r6, r7
 800dc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc68:	2200      	movs	r2, #0
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	4630      	mov	r0, r6
 800dc6e:	4639      	mov	r1, r7
 800dc70:	f7f2 ff2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc74:	2800      	cmp	r0, #0
 800dc76:	d0f2      	beq.n	800dc5e <pow+0xa2>
 800dc78:	eeb0 0a48 	vmov.f32	s0, s16
 800dc7c:	eef0 0a68 	vmov.f32	s1, s17
 800dc80:	f000 f917 	bl	800deb2 <finite>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	d0ea      	beq.n	800dc5e <pow+0xa2>
 800dc88:	ec45 4b10 	vmov	d0, r4, r5
 800dc8c:	f000 f911 	bl	800deb2 <finite>
 800dc90:	e7c3      	b.n	800dc1a <pow+0x5e>
 800dc92:	4f01      	ldr	r7, [pc, #4]	@ (800dc98 <pow+0xdc>)
 800dc94:	2600      	movs	r6, #0
 800dc96:	e7e2      	b.n	800dc5e <pow+0xa2>
 800dc98:	3ff00000 	.word	0x3ff00000

0800dc9c <sqrt>:
 800dc9c:	b538      	push	{r3, r4, r5, lr}
 800dc9e:	ed2d 8b02 	vpush	{d8}
 800dca2:	ec55 4b10 	vmov	r4, r5, d0
 800dca6:	f000 f915 	bl	800ded4 <__ieee754_sqrt>
 800dcaa:	4622      	mov	r2, r4
 800dcac:	462b      	mov	r3, r5
 800dcae:	4620      	mov	r0, r4
 800dcb0:	4629      	mov	r1, r5
 800dcb2:	eeb0 8a40 	vmov.f32	s16, s0
 800dcb6:	eef0 8a60 	vmov.f32	s17, s1
 800dcba:	f7f2 ff37 	bl	8000b2c <__aeabi_dcmpun>
 800dcbe:	b990      	cbnz	r0, 800dce6 <sqrt+0x4a>
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	4629      	mov	r1, r5
 800dcc8:	f7f2 ff08 	bl	8000adc <__aeabi_dcmplt>
 800dccc:	b158      	cbz	r0, 800dce6 <sqrt+0x4a>
 800dcce:	f003 fa37 	bl	8011140 <__errno>
 800dcd2:	2321      	movs	r3, #33	@ 0x21
 800dcd4:	6003      	str	r3, [r0, #0]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	2300      	movs	r3, #0
 800dcda:	4610      	mov	r0, r2
 800dcdc:	4619      	mov	r1, r3
 800dcde:	f7f2 fdb5 	bl	800084c <__aeabi_ddiv>
 800dce2:	ec41 0b18 	vmov	d8, r0, r1
 800dce6:	eeb0 0a48 	vmov.f32	s0, s16
 800dcea:	eef0 0a68 	vmov.f32	s1, s17
 800dcee:	ecbd 8b02 	vpop	{d8}
 800dcf2:	bd38      	pop	{r3, r4, r5, pc}
 800dcf4:	0000      	movs	r0, r0
	...

0800dcf8 <cos>:
 800dcf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcfa:	ec53 2b10 	vmov	r2, r3, d0
 800dcfe:	4826      	ldr	r0, [pc, #152]	@ (800dd98 <cos+0xa0>)
 800dd00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dd04:	4281      	cmp	r1, r0
 800dd06:	d806      	bhi.n	800dd16 <cos+0x1e>
 800dd08:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800dd90 <cos+0x98>
 800dd0c:	b005      	add	sp, #20
 800dd0e:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd12:	f000 b9b5 	b.w	800e080 <__kernel_cos>
 800dd16:	4821      	ldr	r0, [pc, #132]	@ (800dd9c <cos+0xa4>)
 800dd18:	4281      	cmp	r1, r0
 800dd1a:	d908      	bls.n	800dd2e <cos+0x36>
 800dd1c:	4610      	mov	r0, r2
 800dd1e:	4619      	mov	r1, r3
 800dd20:	f7f2 fab2 	bl	8000288 <__aeabi_dsub>
 800dd24:	ec41 0b10 	vmov	d0, r0, r1
 800dd28:	b005      	add	sp, #20
 800dd2a:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd2e:	4668      	mov	r0, sp
 800dd30:	f001 f876 	bl	800ee20 <__ieee754_rem_pio2>
 800dd34:	f000 0003 	and.w	r0, r0, #3
 800dd38:	2801      	cmp	r0, #1
 800dd3a:	d00b      	beq.n	800dd54 <cos+0x5c>
 800dd3c:	2802      	cmp	r0, #2
 800dd3e:	d015      	beq.n	800dd6c <cos+0x74>
 800dd40:	b9d8      	cbnz	r0, 800dd7a <cos+0x82>
 800dd42:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd46:	ed9d 0b00 	vldr	d0, [sp]
 800dd4a:	f000 f999 	bl	800e080 <__kernel_cos>
 800dd4e:	ec51 0b10 	vmov	r0, r1, d0
 800dd52:	e7e7      	b.n	800dd24 <cos+0x2c>
 800dd54:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd58:	ed9d 0b00 	vldr	d0, [sp]
 800dd5c:	f000 fa58 	bl	800e210 <__kernel_sin>
 800dd60:	ec53 2b10 	vmov	r2, r3, d0
 800dd64:	4610      	mov	r0, r2
 800dd66:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800dd6a:	e7db      	b.n	800dd24 <cos+0x2c>
 800dd6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd70:	ed9d 0b00 	vldr	d0, [sp]
 800dd74:	f000 f984 	bl	800e080 <__kernel_cos>
 800dd78:	e7f2      	b.n	800dd60 <cos+0x68>
 800dd7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd7e:	ed9d 0b00 	vldr	d0, [sp]
 800dd82:	2001      	movs	r0, #1
 800dd84:	f000 fa44 	bl	800e210 <__kernel_sin>
 800dd88:	e7e1      	b.n	800dd4e <cos+0x56>
 800dd8a:	bf00      	nop
 800dd8c:	f3af 8000 	nop.w
	...
 800dd98:	3fe921fb 	.word	0x3fe921fb
 800dd9c:	7fefffff 	.word	0x7fefffff

0800dda0 <sin>:
 800dda0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dda2:	ec53 2b10 	vmov	r2, r3, d0
 800dda6:	4826      	ldr	r0, [pc, #152]	@ (800de40 <sin+0xa0>)
 800dda8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ddac:	4281      	cmp	r1, r0
 800ddae:	d807      	bhi.n	800ddc0 <sin+0x20>
 800ddb0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800de38 <sin+0x98>
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	b005      	add	sp, #20
 800ddb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddbc:	f000 ba28 	b.w	800e210 <__kernel_sin>
 800ddc0:	4820      	ldr	r0, [pc, #128]	@ (800de44 <sin+0xa4>)
 800ddc2:	4281      	cmp	r1, r0
 800ddc4:	d908      	bls.n	800ddd8 <sin+0x38>
 800ddc6:	4610      	mov	r0, r2
 800ddc8:	4619      	mov	r1, r3
 800ddca:	f7f2 fa5d 	bl	8000288 <__aeabi_dsub>
 800ddce:	ec41 0b10 	vmov	d0, r0, r1
 800ddd2:	b005      	add	sp, #20
 800ddd4:	f85d fb04 	ldr.w	pc, [sp], #4
 800ddd8:	4668      	mov	r0, sp
 800ddda:	f001 f821 	bl	800ee20 <__ieee754_rem_pio2>
 800ddde:	f000 0003 	and.w	r0, r0, #3
 800dde2:	2801      	cmp	r0, #1
 800dde4:	d00c      	beq.n	800de00 <sin+0x60>
 800dde6:	2802      	cmp	r0, #2
 800dde8:	d011      	beq.n	800de0e <sin+0x6e>
 800ddea:	b9e8      	cbnz	r0, 800de28 <sin+0x88>
 800ddec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ddf0:	ed9d 0b00 	vldr	d0, [sp]
 800ddf4:	2001      	movs	r0, #1
 800ddf6:	f000 fa0b 	bl	800e210 <__kernel_sin>
 800ddfa:	ec51 0b10 	vmov	r0, r1, d0
 800ddfe:	e7e6      	b.n	800ddce <sin+0x2e>
 800de00:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de04:	ed9d 0b00 	vldr	d0, [sp]
 800de08:	f000 f93a 	bl	800e080 <__kernel_cos>
 800de0c:	e7f5      	b.n	800ddfa <sin+0x5a>
 800de0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de12:	ed9d 0b00 	vldr	d0, [sp]
 800de16:	2001      	movs	r0, #1
 800de18:	f000 f9fa 	bl	800e210 <__kernel_sin>
 800de1c:	ec53 2b10 	vmov	r2, r3, d0
 800de20:	4610      	mov	r0, r2
 800de22:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800de26:	e7d2      	b.n	800ddce <sin+0x2e>
 800de28:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de2c:	ed9d 0b00 	vldr	d0, [sp]
 800de30:	f000 f926 	bl	800e080 <__kernel_cos>
 800de34:	e7f2      	b.n	800de1c <sin+0x7c>
 800de36:	bf00      	nop
	...
 800de40:	3fe921fb 	.word	0x3fe921fb
 800de44:	7fefffff 	.word	0x7fefffff

0800de48 <asinf>:
 800de48:	b508      	push	{r3, lr}
 800de4a:	ed2d 8b02 	vpush	{d8}
 800de4e:	eeb0 8a40 	vmov.f32	s16, s0
 800de52:	f001 f9e9 	bl	800f228 <__ieee754_asinf>
 800de56:	eeb4 8a48 	vcmp.f32	s16, s16
 800de5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de5e:	eef0 8a40 	vmov.f32	s17, s0
 800de62:	d615      	bvs.n	800de90 <asinf+0x48>
 800de64:	eeb0 0a48 	vmov.f32	s0, s16
 800de68:	f000 f81c 	bl	800dea4 <fabsf>
 800de6c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800de70:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800de74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de78:	dd0a      	ble.n	800de90 <asinf+0x48>
 800de7a:	f003 f961 	bl	8011140 <__errno>
 800de7e:	ecbd 8b02 	vpop	{d8}
 800de82:	2321      	movs	r3, #33	@ 0x21
 800de84:	6003      	str	r3, [r0, #0]
 800de86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800de8a:	4804      	ldr	r0, [pc, #16]	@ (800de9c <asinf+0x54>)
 800de8c:	f000 b81c 	b.w	800dec8 <nanf>
 800de90:	eeb0 0a68 	vmov.f32	s0, s17
 800de94:	ecbd 8b02 	vpop	{d8}
 800de98:	bd08      	pop	{r3, pc}
 800de9a:	bf00      	nop
 800de9c:	080148bd 	.word	0x080148bd

0800dea0 <atan2f>:
 800dea0:	f001 baa6 	b.w	800f3f0 <__ieee754_atan2f>

0800dea4 <fabsf>:
 800dea4:	ee10 3a10 	vmov	r3, s0
 800dea8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800deac:	ee00 3a10 	vmov	s0, r3
 800deb0:	4770      	bx	lr

0800deb2 <finite>:
 800deb2:	b082      	sub	sp, #8
 800deb4:	ed8d 0b00 	vstr	d0, [sp]
 800deb8:	9801      	ldr	r0, [sp, #4]
 800deba:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800debe:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800dec2:	0fc0      	lsrs	r0, r0, #31
 800dec4:	b002      	add	sp, #8
 800dec6:	4770      	bx	lr

0800dec8 <nanf>:
 800dec8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ded0 <nanf+0x8>
 800decc:	4770      	bx	lr
 800dece:	bf00      	nop
 800ded0:	7fc00000 	.word	0x7fc00000

0800ded4 <__ieee754_sqrt>:
 800ded4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded8:	4a66      	ldr	r2, [pc, #408]	@ (800e074 <__ieee754_sqrt+0x1a0>)
 800deda:	ec55 4b10 	vmov	r4, r5, d0
 800dede:	43aa      	bics	r2, r5
 800dee0:	462b      	mov	r3, r5
 800dee2:	4621      	mov	r1, r4
 800dee4:	d110      	bne.n	800df08 <__ieee754_sqrt+0x34>
 800dee6:	4622      	mov	r2, r4
 800dee8:	4620      	mov	r0, r4
 800deea:	4629      	mov	r1, r5
 800deec:	f7f2 fb84 	bl	80005f8 <__aeabi_dmul>
 800def0:	4602      	mov	r2, r0
 800def2:	460b      	mov	r3, r1
 800def4:	4620      	mov	r0, r4
 800def6:	4629      	mov	r1, r5
 800def8:	f7f2 f9c8 	bl	800028c <__adddf3>
 800defc:	4604      	mov	r4, r0
 800defe:	460d      	mov	r5, r1
 800df00:	ec45 4b10 	vmov	d0, r4, r5
 800df04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df08:	2d00      	cmp	r5, #0
 800df0a:	dc0e      	bgt.n	800df2a <__ieee754_sqrt+0x56>
 800df0c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800df10:	4322      	orrs	r2, r4
 800df12:	d0f5      	beq.n	800df00 <__ieee754_sqrt+0x2c>
 800df14:	b19d      	cbz	r5, 800df3e <__ieee754_sqrt+0x6a>
 800df16:	4622      	mov	r2, r4
 800df18:	4620      	mov	r0, r4
 800df1a:	4629      	mov	r1, r5
 800df1c:	f7f2 f9b4 	bl	8000288 <__aeabi_dsub>
 800df20:	4602      	mov	r2, r0
 800df22:	460b      	mov	r3, r1
 800df24:	f7f2 fc92 	bl	800084c <__aeabi_ddiv>
 800df28:	e7e8      	b.n	800defc <__ieee754_sqrt+0x28>
 800df2a:	152a      	asrs	r2, r5, #20
 800df2c:	d115      	bne.n	800df5a <__ieee754_sqrt+0x86>
 800df2e:	2000      	movs	r0, #0
 800df30:	e009      	b.n	800df46 <__ieee754_sqrt+0x72>
 800df32:	0acb      	lsrs	r3, r1, #11
 800df34:	3a15      	subs	r2, #21
 800df36:	0549      	lsls	r1, r1, #21
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d0fa      	beq.n	800df32 <__ieee754_sqrt+0x5e>
 800df3c:	e7f7      	b.n	800df2e <__ieee754_sqrt+0x5a>
 800df3e:	462a      	mov	r2, r5
 800df40:	e7fa      	b.n	800df38 <__ieee754_sqrt+0x64>
 800df42:	005b      	lsls	r3, r3, #1
 800df44:	3001      	adds	r0, #1
 800df46:	02dc      	lsls	r4, r3, #11
 800df48:	d5fb      	bpl.n	800df42 <__ieee754_sqrt+0x6e>
 800df4a:	1e44      	subs	r4, r0, #1
 800df4c:	1b12      	subs	r2, r2, r4
 800df4e:	f1c0 0420 	rsb	r4, r0, #32
 800df52:	fa21 f404 	lsr.w	r4, r1, r4
 800df56:	4323      	orrs	r3, r4
 800df58:	4081      	lsls	r1, r0
 800df5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df5e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800df62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800df66:	07d2      	lsls	r2, r2, #31
 800df68:	bf5c      	itt	pl
 800df6a:	005b      	lslpl	r3, r3, #1
 800df6c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800df70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800df74:	bf58      	it	pl
 800df76:	0049      	lslpl	r1, r1, #1
 800df78:	2600      	movs	r6, #0
 800df7a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800df7e:	107f      	asrs	r7, r7, #1
 800df80:	0049      	lsls	r1, r1, #1
 800df82:	2016      	movs	r0, #22
 800df84:	4632      	mov	r2, r6
 800df86:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800df8a:	1915      	adds	r5, r2, r4
 800df8c:	429d      	cmp	r5, r3
 800df8e:	bfde      	ittt	le
 800df90:	192a      	addle	r2, r5, r4
 800df92:	1b5b      	suble	r3, r3, r5
 800df94:	1936      	addle	r6, r6, r4
 800df96:	0fcd      	lsrs	r5, r1, #31
 800df98:	3801      	subs	r0, #1
 800df9a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800df9e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dfa2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800dfa6:	d1f0      	bne.n	800df8a <__ieee754_sqrt+0xb6>
 800dfa8:	4605      	mov	r5, r0
 800dfaa:	2420      	movs	r4, #32
 800dfac:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	eb0c 0e00 	add.w	lr, ip, r0
 800dfb6:	dc02      	bgt.n	800dfbe <__ieee754_sqrt+0xea>
 800dfb8:	d113      	bne.n	800dfe2 <__ieee754_sqrt+0x10e>
 800dfba:	458e      	cmp	lr, r1
 800dfbc:	d811      	bhi.n	800dfe2 <__ieee754_sqrt+0x10e>
 800dfbe:	f1be 0f00 	cmp.w	lr, #0
 800dfc2:	eb0e 000c 	add.w	r0, lr, ip
 800dfc6:	da3f      	bge.n	800e048 <__ieee754_sqrt+0x174>
 800dfc8:	2800      	cmp	r0, #0
 800dfca:	db3d      	blt.n	800e048 <__ieee754_sqrt+0x174>
 800dfcc:	f102 0801 	add.w	r8, r2, #1
 800dfd0:	1a9b      	subs	r3, r3, r2
 800dfd2:	458e      	cmp	lr, r1
 800dfd4:	bf88      	it	hi
 800dfd6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dfda:	eba1 010e 	sub.w	r1, r1, lr
 800dfde:	4465      	add	r5, ip
 800dfe0:	4642      	mov	r2, r8
 800dfe2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800dfe6:	3c01      	subs	r4, #1
 800dfe8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800dfec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dff0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800dff4:	d1dc      	bne.n	800dfb0 <__ieee754_sqrt+0xdc>
 800dff6:	4319      	orrs	r1, r3
 800dff8:	d01b      	beq.n	800e032 <__ieee754_sqrt+0x15e>
 800dffa:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800e078 <__ieee754_sqrt+0x1a4>
 800dffe:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800e07c <__ieee754_sqrt+0x1a8>
 800e002:	e9da 0100 	ldrd	r0, r1, [sl]
 800e006:	e9db 2300 	ldrd	r2, r3, [fp]
 800e00a:	f7f2 f93d 	bl	8000288 <__aeabi_dsub>
 800e00e:	e9da 8900 	ldrd	r8, r9, [sl]
 800e012:	4602      	mov	r2, r0
 800e014:	460b      	mov	r3, r1
 800e016:	4640      	mov	r0, r8
 800e018:	4649      	mov	r1, r9
 800e01a:	f7f2 fd69 	bl	8000af0 <__aeabi_dcmple>
 800e01e:	b140      	cbz	r0, 800e032 <__ieee754_sqrt+0x15e>
 800e020:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e024:	e9da 0100 	ldrd	r0, r1, [sl]
 800e028:	e9db 2300 	ldrd	r2, r3, [fp]
 800e02c:	d10e      	bne.n	800e04c <__ieee754_sqrt+0x178>
 800e02e:	3601      	adds	r6, #1
 800e030:	4625      	mov	r5, r4
 800e032:	1073      	asrs	r3, r6, #1
 800e034:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800e038:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800e03c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800e040:	086b      	lsrs	r3, r5, #1
 800e042:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800e046:	e759      	b.n	800defc <__ieee754_sqrt+0x28>
 800e048:	4690      	mov	r8, r2
 800e04a:	e7c1      	b.n	800dfd0 <__ieee754_sqrt+0xfc>
 800e04c:	f7f2 f91e 	bl	800028c <__adddf3>
 800e050:	e9da 8900 	ldrd	r8, r9, [sl]
 800e054:	4602      	mov	r2, r0
 800e056:	460b      	mov	r3, r1
 800e058:	4640      	mov	r0, r8
 800e05a:	4649      	mov	r1, r9
 800e05c:	f7f2 fd3e 	bl	8000adc <__aeabi_dcmplt>
 800e060:	b120      	cbz	r0, 800e06c <__ieee754_sqrt+0x198>
 800e062:	1cab      	adds	r3, r5, #2
 800e064:	bf08      	it	eq
 800e066:	3601      	addeq	r6, #1
 800e068:	3502      	adds	r5, #2
 800e06a:	e7e2      	b.n	800e032 <__ieee754_sqrt+0x15e>
 800e06c:	1c6b      	adds	r3, r5, #1
 800e06e:	f023 0501 	bic.w	r5, r3, #1
 800e072:	e7de      	b.n	800e032 <__ieee754_sqrt+0x15e>
 800e074:	7ff00000 	.word	0x7ff00000
 800e078:	08014928 	.word	0x08014928
 800e07c:	08014920 	.word	0x08014920

0800e080 <__kernel_cos>:
 800e080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e084:	ec57 6b10 	vmov	r6, r7, d0
 800e088:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e08c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800e090:	ed8d 1b00 	vstr	d1, [sp]
 800e094:	d206      	bcs.n	800e0a4 <__kernel_cos+0x24>
 800e096:	4630      	mov	r0, r6
 800e098:	4639      	mov	r1, r7
 800e09a:	f7f2 fd5d 	bl	8000b58 <__aeabi_d2iz>
 800e09e:	2800      	cmp	r0, #0
 800e0a0:	f000 8088 	beq.w	800e1b4 <__kernel_cos+0x134>
 800e0a4:	4632      	mov	r2, r6
 800e0a6:	463b      	mov	r3, r7
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	4639      	mov	r1, r7
 800e0ac:	f7f2 faa4 	bl	80005f8 <__aeabi_dmul>
 800e0b0:	4b51      	ldr	r3, [pc, #324]	@ (800e1f8 <__kernel_cos+0x178>)
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	4604      	mov	r4, r0
 800e0b6:	460d      	mov	r5, r1
 800e0b8:	f7f2 fa9e 	bl	80005f8 <__aeabi_dmul>
 800e0bc:	a340      	add	r3, pc, #256	@ (adr r3, 800e1c0 <__kernel_cos+0x140>)
 800e0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c2:	4682      	mov	sl, r0
 800e0c4:	468b      	mov	fp, r1
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	4629      	mov	r1, r5
 800e0ca:	f7f2 fa95 	bl	80005f8 <__aeabi_dmul>
 800e0ce:	a33e      	add	r3, pc, #248	@ (adr r3, 800e1c8 <__kernel_cos+0x148>)
 800e0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d4:	f7f2 f8da 	bl	800028c <__adddf3>
 800e0d8:	4622      	mov	r2, r4
 800e0da:	462b      	mov	r3, r5
 800e0dc:	f7f2 fa8c 	bl	80005f8 <__aeabi_dmul>
 800e0e0:	a33b      	add	r3, pc, #236	@ (adr r3, 800e1d0 <__kernel_cos+0x150>)
 800e0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e6:	f7f2 f8cf 	bl	8000288 <__aeabi_dsub>
 800e0ea:	4622      	mov	r2, r4
 800e0ec:	462b      	mov	r3, r5
 800e0ee:	f7f2 fa83 	bl	80005f8 <__aeabi_dmul>
 800e0f2:	a339      	add	r3, pc, #228	@ (adr r3, 800e1d8 <__kernel_cos+0x158>)
 800e0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f8:	f7f2 f8c8 	bl	800028c <__adddf3>
 800e0fc:	4622      	mov	r2, r4
 800e0fe:	462b      	mov	r3, r5
 800e100:	f7f2 fa7a 	bl	80005f8 <__aeabi_dmul>
 800e104:	a336      	add	r3, pc, #216	@ (adr r3, 800e1e0 <__kernel_cos+0x160>)
 800e106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10a:	f7f2 f8bd 	bl	8000288 <__aeabi_dsub>
 800e10e:	4622      	mov	r2, r4
 800e110:	462b      	mov	r3, r5
 800e112:	f7f2 fa71 	bl	80005f8 <__aeabi_dmul>
 800e116:	a334      	add	r3, pc, #208	@ (adr r3, 800e1e8 <__kernel_cos+0x168>)
 800e118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11c:	f7f2 f8b6 	bl	800028c <__adddf3>
 800e120:	4622      	mov	r2, r4
 800e122:	462b      	mov	r3, r5
 800e124:	f7f2 fa68 	bl	80005f8 <__aeabi_dmul>
 800e128:	4622      	mov	r2, r4
 800e12a:	462b      	mov	r3, r5
 800e12c:	f7f2 fa64 	bl	80005f8 <__aeabi_dmul>
 800e130:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e134:	4604      	mov	r4, r0
 800e136:	460d      	mov	r5, r1
 800e138:	4630      	mov	r0, r6
 800e13a:	4639      	mov	r1, r7
 800e13c:	f7f2 fa5c 	bl	80005f8 <__aeabi_dmul>
 800e140:	460b      	mov	r3, r1
 800e142:	4602      	mov	r2, r0
 800e144:	4629      	mov	r1, r5
 800e146:	4620      	mov	r0, r4
 800e148:	f7f2 f89e 	bl	8000288 <__aeabi_dsub>
 800e14c:	4b2b      	ldr	r3, [pc, #172]	@ (800e1fc <__kernel_cos+0x17c>)
 800e14e:	4598      	cmp	r8, r3
 800e150:	4606      	mov	r6, r0
 800e152:	460f      	mov	r7, r1
 800e154:	d810      	bhi.n	800e178 <__kernel_cos+0xf8>
 800e156:	4602      	mov	r2, r0
 800e158:	460b      	mov	r3, r1
 800e15a:	4650      	mov	r0, sl
 800e15c:	4659      	mov	r1, fp
 800e15e:	f7f2 f893 	bl	8000288 <__aeabi_dsub>
 800e162:	460b      	mov	r3, r1
 800e164:	4926      	ldr	r1, [pc, #152]	@ (800e200 <__kernel_cos+0x180>)
 800e166:	4602      	mov	r2, r0
 800e168:	2000      	movs	r0, #0
 800e16a:	f7f2 f88d 	bl	8000288 <__aeabi_dsub>
 800e16e:	ec41 0b10 	vmov	d0, r0, r1
 800e172:	b003      	add	sp, #12
 800e174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e178:	4b22      	ldr	r3, [pc, #136]	@ (800e204 <__kernel_cos+0x184>)
 800e17a:	4921      	ldr	r1, [pc, #132]	@ (800e200 <__kernel_cos+0x180>)
 800e17c:	4598      	cmp	r8, r3
 800e17e:	bf8c      	ite	hi
 800e180:	4d21      	ldrhi	r5, [pc, #132]	@ (800e208 <__kernel_cos+0x188>)
 800e182:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800e186:	2400      	movs	r4, #0
 800e188:	4622      	mov	r2, r4
 800e18a:	462b      	mov	r3, r5
 800e18c:	2000      	movs	r0, #0
 800e18e:	f7f2 f87b 	bl	8000288 <__aeabi_dsub>
 800e192:	4622      	mov	r2, r4
 800e194:	4680      	mov	r8, r0
 800e196:	4689      	mov	r9, r1
 800e198:	462b      	mov	r3, r5
 800e19a:	4650      	mov	r0, sl
 800e19c:	4659      	mov	r1, fp
 800e19e:	f7f2 f873 	bl	8000288 <__aeabi_dsub>
 800e1a2:	4632      	mov	r2, r6
 800e1a4:	463b      	mov	r3, r7
 800e1a6:	f7f2 f86f 	bl	8000288 <__aeabi_dsub>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	4640      	mov	r0, r8
 800e1b0:	4649      	mov	r1, r9
 800e1b2:	e7da      	b.n	800e16a <__kernel_cos+0xea>
 800e1b4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800e1f0 <__kernel_cos+0x170>
 800e1b8:	e7db      	b.n	800e172 <__kernel_cos+0xf2>
 800e1ba:	bf00      	nop
 800e1bc:	f3af 8000 	nop.w
 800e1c0:	be8838d4 	.word	0xbe8838d4
 800e1c4:	bda8fae9 	.word	0xbda8fae9
 800e1c8:	bdb4b1c4 	.word	0xbdb4b1c4
 800e1cc:	3e21ee9e 	.word	0x3e21ee9e
 800e1d0:	809c52ad 	.word	0x809c52ad
 800e1d4:	3e927e4f 	.word	0x3e927e4f
 800e1d8:	19cb1590 	.word	0x19cb1590
 800e1dc:	3efa01a0 	.word	0x3efa01a0
 800e1e0:	16c15177 	.word	0x16c15177
 800e1e4:	3f56c16c 	.word	0x3f56c16c
 800e1e8:	5555554c 	.word	0x5555554c
 800e1ec:	3fa55555 	.word	0x3fa55555
 800e1f0:	00000000 	.word	0x00000000
 800e1f4:	3ff00000 	.word	0x3ff00000
 800e1f8:	3fe00000 	.word	0x3fe00000
 800e1fc:	3fd33332 	.word	0x3fd33332
 800e200:	3ff00000 	.word	0x3ff00000
 800e204:	3fe90000 	.word	0x3fe90000
 800e208:	3fd20000 	.word	0x3fd20000
 800e20c:	00000000 	.word	0x00000000

0800e210 <__kernel_sin>:
 800e210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e214:	ec55 4b10 	vmov	r4, r5, d0
 800e218:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e21c:	b085      	sub	sp, #20
 800e21e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800e222:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e226:	4680      	mov	r8, r0
 800e228:	d205      	bcs.n	800e236 <__kernel_sin+0x26>
 800e22a:	4620      	mov	r0, r4
 800e22c:	4629      	mov	r1, r5
 800e22e:	f7f2 fc93 	bl	8000b58 <__aeabi_d2iz>
 800e232:	2800      	cmp	r0, #0
 800e234:	d052      	beq.n	800e2dc <__kernel_sin+0xcc>
 800e236:	4622      	mov	r2, r4
 800e238:	462b      	mov	r3, r5
 800e23a:	4620      	mov	r0, r4
 800e23c:	4629      	mov	r1, r5
 800e23e:	f7f2 f9db 	bl	80005f8 <__aeabi_dmul>
 800e242:	4682      	mov	sl, r0
 800e244:	468b      	mov	fp, r1
 800e246:	4602      	mov	r2, r0
 800e248:	460b      	mov	r3, r1
 800e24a:	4620      	mov	r0, r4
 800e24c:	4629      	mov	r1, r5
 800e24e:	f7f2 f9d3 	bl	80005f8 <__aeabi_dmul>
 800e252:	a342      	add	r3, pc, #264	@ (adr r3, 800e35c <__kernel_sin+0x14c>)
 800e254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e258:	e9cd 0100 	strd	r0, r1, [sp]
 800e25c:	4650      	mov	r0, sl
 800e25e:	4659      	mov	r1, fp
 800e260:	f7f2 f9ca 	bl	80005f8 <__aeabi_dmul>
 800e264:	a33f      	add	r3, pc, #252	@ (adr r3, 800e364 <__kernel_sin+0x154>)
 800e266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26a:	f7f2 f80d 	bl	8000288 <__aeabi_dsub>
 800e26e:	4652      	mov	r2, sl
 800e270:	465b      	mov	r3, fp
 800e272:	f7f2 f9c1 	bl	80005f8 <__aeabi_dmul>
 800e276:	a33d      	add	r3, pc, #244	@ (adr r3, 800e36c <__kernel_sin+0x15c>)
 800e278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27c:	f7f2 f806 	bl	800028c <__adddf3>
 800e280:	4652      	mov	r2, sl
 800e282:	465b      	mov	r3, fp
 800e284:	f7f2 f9b8 	bl	80005f8 <__aeabi_dmul>
 800e288:	a33a      	add	r3, pc, #232	@ (adr r3, 800e374 <__kernel_sin+0x164>)
 800e28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28e:	f7f1 fffb 	bl	8000288 <__aeabi_dsub>
 800e292:	4652      	mov	r2, sl
 800e294:	465b      	mov	r3, fp
 800e296:	f7f2 f9af 	bl	80005f8 <__aeabi_dmul>
 800e29a:	a338      	add	r3, pc, #224	@ (adr r3, 800e37c <__kernel_sin+0x16c>)
 800e29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a0:	f7f1 fff4 	bl	800028c <__adddf3>
 800e2a4:	4606      	mov	r6, r0
 800e2a6:	460f      	mov	r7, r1
 800e2a8:	f1b8 0f00 	cmp.w	r8, #0
 800e2ac:	d11b      	bne.n	800e2e6 <__kernel_sin+0xd6>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	4650      	mov	r0, sl
 800e2b4:	4659      	mov	r1, fp
 800e2b6:	f7f2 f99f 	bl	80005f8 <__aeabi_dmul>
 800e2ba:	a325      	add	r3, pc, #148	@ (adr r3, 800e350 <__kernel_sin+0x140>)
 800e2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c0:	f7f1 ffe2 	bl	8000288 <__aeabi_dsub>
 800e2c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2c8:	f7f2 f996 	bl	80005f8 <__aeabi_dmul>
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	4620      	mov	r0, r4
 800e2d2:	4629      	mov	r1, r5
 800e2d4:	f7f1 ffda 	bl	800028c <__adddf3>
 800e2d8:	4604      	mov	r4, r0
 800e2da:	460d      	mov	r5, r1
 800e2dc:	ec45 4b10 	vmov	d0, r4, r5
 800e2e0:	b005      	add	sp, #20
 800e2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2ea:	4b1b      	ldr	r3, [pc, #108]	@ (800e358 <__kernel_sin+0x148>)
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f7f2 f983 	bl	80005f8 <__aeabi_dmul>
 800e2f2:	4632      	mov	r2, r6
 800e2f4:	4680      	mov	r8, r0
 800e2f6:	4689      	mov	r9, r1
 800e2f8:	463b      	mov	r3, r7
 800e2fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2fe:	f7f2 f97b 	bl	80005f8 <__aeabi_dmul>
 800e302:	4602      	mov	r2, r0
 800e304:	460b      	mov	r3, r1
 800e306:	4640      	mov	r0, r8
 800e308:	4649      	mov	r1, r9
 800e30a:	f7f1 ffbd 	bl	8000288 <__aeabi_dsub>
 800e30e:	4652      	mov	r2, sl
 800e310:	465b      	mov	r3, fp
 800e312:	f7f2 f971 	bl	80005f8 <__aeabi_dmul>
 800e316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e31a:	f7f1 ffb5 	bl	8000288 <__aeabi_dsub>
 800e31e:	a30c      	add	r3, pc, #48	@ (adr r3, 800e350 <__kernel_sin+0x140>)
 800e320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e324:	4606      	mov	r6, r0
 800e326:	460f      	mov	r7, r1
 800e328:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e32c:	f7f2 f964 	bl	80005f8 <__aeabi_dmul>
 800e330:	4602      	mov	r2, r0
 800e332:	460b      	mov	r3, r1
 800e334:	4630      	mov	r0, r6
 800e336:	4639      	mov	r1, r7
 800e338:	f7f1 ffa8 	bl	800028c <__adddf3>
 800e33c:	4602      	mov	r2, r0
 800e33e:	460b      	mov	r3, r1
 800e340:	4620      	mov	r0, r4
 800e342:	4629      	mov	r1, r5
 800e344:	f7f1 ffa0 	bl	8000288 <__aeabi_dsub>
 800e348:	e7c6      	b.n	800e2d8 <__kernel_sin+0xc8>
 800e34a:	bf00      	nop
 800e34c:	f3af 8000 	nop.w
 800e350:	55555549 	.word	0x55555549
 800e354:	3fc55555 	.word	0x3fc55555
 800e358:	3fe00000 	.word	0x3fe00000
 800e35c:	5acfd57c 	.word	0x5acfd57c
 800e360:	3de5d93a 	.word	0x3de5d93a
 800e364:	8a2b9ceb 	.word	0x8a2b9ceb
 800e368:	3e5ae5e6 	.word	0x3e5ae5e6
 800e36c:	57b1fe7d 	.word	0x57b1fe7d
 800e370:	3ec71de3 	.word	0x3ec71de3
 800e374:	19c161d5 	.word	0x19c161d5
 800e378:	3f2a01a0 	.word	0x3f2a01a0
 800e37c:	1110f8a6 	.word	0x1110f8a6
 800e380:	3f811111 	.word	0x3f811111
 800e384:	00000000 	.word	0x00000000

0800e388 <__ieee754_pow>:
 800e388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e38c:	b091      	sub	sp, #68	@ 0x44
 800e38e:	ed8d 1b00 	vstr	d1, [sp]
 800e392:	e9dd 1900 	ldrd	r1, r9, [sp]
 800e396:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800e39a:	ea5a 0001 	orrs.w	r0, sl, r1
 800e39e:	ec57 6b10 	vmov	r6, r7, d0
 800e3a2:	d113      	bne.n	800e3cc <__ieee754_pow+0x44>
 800e3a4:	19b3      	adds	r3, r6, r6
 800e3a6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800e3aa:	4152      	adcs	r2, r2
 800e3ac:	4298      	cmp	r0, r3
 800e3ae:	4b9a      	ldr	r3, [pc, #616]	@ (800e618 <__ieee754_pow+0x290>)
 800e3b0:	4193      	sbcs	r3, r2
 800e3b2:	f080 84ee 	bcs.w	800ed92 <__ieee754_pow+0xa0a>
 800e3b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3ba:	4630      	mov	r0, r6
 800e3bc:	4639      	mov	r1, r7
 800e3be:	f7f1 ff65 	bl	800028c <__adddf3>
 800e3c2:	ec41 0b10 	vmov	d0, r0, r1
 800e3c6:	b011      	add	sp, #68	@ 0x44
 800e3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3cc:	4a93      	ldr	r2, [pc, #588]	@ (800e61c <__ieee754_pow+0x294>)
 800e3ce:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800e3d2:	4295      	cmp	r5, r2
 800e3d4:	46b8      	mov	r8, r7
 800e3d6:	4633      	mov	r3, r6
 800e3d8:	d80a      	bhi.n	800e3f0 <__ieee754_pow+0x68>
 800e3da:	d104      	bne.n	800e3e6 <__ieee754_pow+0x5e>
 800e3dc:	2e00      	cmp	r6, #0
 800e3de:	d1ea      	bne.n	800e3b6 <__ieee754_pow+0x2e>
 800e3e0:	45aa      	cmp	sl, r5
 800e3e2:	d8e8      	bhi.n	800e3b6 <__ieee754_pow+0x2e>
 800e3e4:	e001      	b.n	800e3ea <__ieee754_pow+0x62>
 800e3e6:	4592      	cmp	sl, r2
 800e3e8:	d802      	bhi.n	800e3f0 <__ieee754_pow+0x68>
 800e3ea:	4592      	cmp	sl, r2
 800e3ec:	d10f      	bne.n	800e40e <__ieee754_pow+0x86>
 800e3ee:	b171      	cbz	r1, 800e40e <__ieee754_pow+0x86>
 800e3f0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800e3f4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800e3f8:	ea58 0803 	orrs.w	r8, r8, r3
 800e3fc:	d1db      	bne.n	800e3b6 <__ieee754_pow+0x2e>
 800e3fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e402:	18db      	adds	r3, r3, r3
 800e404:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800e408:	4152      	adcs	r2, r2
 800e40a:	4598      	cmp	r8, r3
 800e40c:	e7cf      	b.n	800e3ae <__ieee754_pow+0x26>
 800e40e:	f1b8 0f00 	cmp.w	r8, #0
 800e412:	46ab      	mov	fp, r5
 800e414:	da43      	bge.n	800e49e <__ieee754_pow+0x116>
 800e416:	4a82      	ldr	r2, [pc, #520]	@ (800e620 <__ieee754_pow+0x298>)
 800e418:	4592      	cmp	sl, r2
 800e41a:	d856      	bhi.n	800e4ca <__ieee754_pow+0x142>
 800e41c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800e420:	4592      	cmp	sl, r2
 800e422:	f240 84c5 	bls.w	800edb0 <__ieee754_pow+0xa28>
 800e426:	ea4f 522a 	mov.w	r2, sl, asr #20
 800e42a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e42e:	2a14      	cmp	r2, #20
 800e430:	dd18      	ble.n	800e464 <__ieee754_pow+0xdc>
 800e432:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800e436:	fa21 f402 	lsr.w	r4, r1, r2
 800e43a:	fa04 f202 	lsl.w	r2, r4, r2
 800e43e:	428a      	cmp	r2, r1
 800e440:	f040 84b6 	bne.w	800edb0 <__ieee754_pow+0xa28>
 800e444:	f004 0401 	and.w	r4, r4, #1
 800e448:	f1c4 0402 	rsb	r4, r4, #2
 800e44c:	2900      	cmp	r1, #0
 800e44e:	d159      	bne.n	800e504 <__ieee754_pow+0x17c>
 800e450:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800e454:	d148      	bne.n	800e4e8 <__ieee754_pow+0x160>
 800e456:	4632      	mov	r2, r6
 800e458:	463b      	mov	r3, r7
 800e45a:	4630      	mov	r0, r6
 800e45c:	4639      	mov	r1, r7
 800e45e:	f7f2 f8cb 	bl	80005f8 <__aeabi_dmul>
 800e462:	e7ae      	b.n	800e3c2 <__ieee754_pow+0x3a>
 800e464:	2900      	cmp	r1, #0
 800e466:	d14c      	bne.n	800e502 <__ieee754_pow+0x17a>
 800e468:	f1c2 0214 	rsb	r2, r2, #20
 800e46c:	fa4a f402 	asr.w	r4, sl, r2
 800e470:	fa04 f202 	lsl.w	r2, r4, r2
 800e474:	4552      	cmp	r2, sl
 800e476:	f040 8498 	bne.w	800edaa <__ieee754_pow+0xa22>
 800e47a:	f004 0401 	and.w	r4, r4, #1
 800e47e:	f1c4 0402 	rsb	r4, r4, #2
 800e482:	4a68      	ldr	r2, [pc, #416]	@ (800e624 <__ieee754_pow+0x29c>)
 800e484:	4592      	cmp	sl, r2
 800e486:	d1e3      	bne.n	800e450 <__ieee754_pow+0xc8>
 800e488:	f1b9 0f00 	cmp.w	r9, #0
 800e48c:	f280 8489 	bge.w	800eda2 <__ieee754_pow+0xa1a>
 800e490:	4964      	ldr	r1, [pc, #400]	@ (800e624 <__ieee754_pow+0x29c>)
 800e492:	4632      	mov	r2, r6
 800e494:	463b      	mov	r3, r7
 800e496:	2000      	movs	r0, #0
 800e498:	f7f2 f9d8 	bl	800084c <__aeabi_ddiv>
 800e49c:	e791      	b.n	800e3c2 <__ieee754_pow+0x3a>
 800e49e:	2400      	movs	r4, #0
 800e4a0:	bb81      	cbnz	r1, 800e504 <__ieee754_pow+0x17c>
 800e4a2:	4a5e      	ldr	r2, [pc, #376]	@ (800e61c <__ieee754_pow+0x294>)
 800e4a4:	4592      	cmp	sl, r2
 800e4a6:	d1ec      	bne.n	800e482 <__ieee754_pow+0xfa>
 800e4a8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800e4ac:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800e4b0:	431a      	orrs	r2, r3
 800e4b2:	f000 846e 	beq.w	800ed92 <__ieee754_pow+0xa0a>
 800e4b6:	4b5c      	ldr	r3, [pc, #368]	@ (800e628 <__ieee754_pow+0x2a0>)
 800e4b8:	429d      	cmp	r5, r3
 800e4ba:	d908      	bls.n	800e4ce <__ieee754_pow+0x146>
 800e4bc:	f1b9 0f00 	cmp.w	r9, #0
 800e4c0:	f280 846b 	bge.w	800ed9a <__ieee754_pow+0xa12>
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	e77b      	b.n	800e3c2 <__ieee754_pow+0x3a>
 800e4ca:	2402      	movs	r4, #2
 800e4cc:	e7e8      	b.n	800e4a0 <__ieee754_pow+0x118>
 800e4ce:	f1b9 0f00 	cmp.w	r9, #0
 800e4d2:	f04f 0000 	mov.w	r0, #0
 800e4d6:	f04f 0100 	mov.w	r1, #0
 800e4da:	f6bf af72 	bge.w	800e3c2 <__ieee754_pow+0x3a>
 800e4de:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e4e2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e4e6:	e76c      	b.n	800e3c2 <__ieee754_pow+0x3a>
 800e4e8:	4a50      	ldr	r2, [pc, #320]	@ (800e62c <__ieee754_pow+0x2a4>)
 800e4ea:	4591      	cmp	r9, r2
 800e4ec:	d10a      	bne.n	800e504 <__ieee754_pow+0x17c>
 800e4ee:	f1b8 0f00 	cmp.w	r8, #0
 800e4f2:	db07      	blt.n	800e504 <__ieee754_pow+0x17c>
 800e4f4:	ec47 6b10 	vmov	d0, r6, r7
 800e4f8:	b011      	add	sp, #68	@ 0x44
 800e4fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4fe:	f7ff bce9 	b.w	800ded4 <__ieee754_sqrt>
 800e502:	2400      	movs	r4, #0
 800e504:	ec47 6b10 	vmov	d0, r6, r7
 800e508:	9302      	str	r3, [sp, #8]
 800e50a:	f000 fe85 	bl	800f218 <fabs>
 800e50e:	9b02      	ldr	r3, [sp, #8]
 800e510:	ec51 0b10 	vmov	r0, r1, d0
 800e514:	bb43      	cbnz	r3, 800e568 <__ieee754_pow+0x1e0>
 800e516:	4b43      	ldr	r3, [pc, #268]	@ (800e624 <__ieee754_pow+0x29c>)
 800e518:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d000      	beq.n	800e522 <__ieee754_pow+0x19a>
 800e520:	bb15      	cbnz	r5, 800e568 <__ieee754_pow+0x1e0>
 800e522:	f1b9 0f00 	cmp.w	r9, #0
 800e526:	da05      	bge.n	800e534 <__ieee754_pow+0x1ac>
 800e528:	4602      	mov	r2, r0
 800e52a:	460b      	mov	r3, r1
 800e52c:	2000      	movs	r0, #0
 800e52e:	493d      	ldr	r1, [pc, #244]	@ (800e624 <__ieee754_pow+0x29c>)
 800e530:	f7f2 f98c 	bl	800084c <__aeabi_ddiv>
 800e534:	f1b8 0f00 	cmp.w	r8, #0
 800e538:	f6bf af43 	bge.w	800e3c2 <__ieee754_pow+0x3a>
 800e53c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800e540:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800e544:	4325      	orrs	r5, r4
 800e546:	d108      	bne.n	800e55a <__ieee754_pow+0x1d2>
 800e548:	4602      	mov	r2, r0
 800e54a:	460b      	mov	r3, r1
 800e54c:	4610      	mov	r0, r2
 800e54e:	4619      	mov	r1, r3
 800e550:	f7f1 fe9a 	bl	8000288 <__aeabi_dsub>
 800e554:	4602      	mov	r2, r0
 800e556:	460b      	mov	r3, r1
 800e558:	e79e      	b.n	800e498 <__ieee754_pow+0x110>
 800e55a:	2c01      	cmp	r4, #1
 800e55c:	f47f af31 	bne.w	800e3c2 <__ieee754_pow+0x3a>
 800e560:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e564:	4619      	mov	r1, r3
 800e566:	e72c      	b.n	800e3c2 <__ieee754_pow+0x3a>
 800e568:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800e56c:	3b01      	subs	r3, #1
 800e56e:	ea53 0204 	orrs.w	r2, r3, r4
 800e572:	d102      	bne.n	800e57a <__ieee754_pow+0x1f2>
 800e574:	4632      	mov	r2, r6
 800e576:	463b      	mov	r3, r7
 800e578:	e7e8      	b.n	800e54c <__ieee754_pow+0x1c4>
 800e57a:	3c01      	subs	r4, #1
 800e57c:	431c      	orrs	r4, r3
 800e57e:	d016      	beq.n	800e5ae <__ieee754_pow+0x226>
 800e580:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e608 <__ieee754_pow+0x280>
 800e584:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800e588:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e58c:	f240 8110 	bls.w	800e7b0 <__ieee754_pow+0x428>
 800e590:	4b27      	ldr	r3, [pc, #156]	@ (800e630 <__ieee754_pow+0x2a8>)
 800e592:	459a      	cmp	sl, r3
 800e594:	4b24      	ldr	r3, [pc, #144]	@ (800e628 <__ieee754_pow+0x2a0>)
 800e596:	d916      	bls.n	800e5c6 <__ieee754_pow+0x23e>
 800e598:	429d      	cmp	r5, r3
 800e59a:	d80b      	bhi.n	800e5b4 <__ieee754_pow+0x22c>
 800e59c:	f1b9 0f00 	cmp.w	r9, #0
 800e5a0:	da0b      	bge.n	800e5ba <__ieee754_pow+0x232>
 800e5a2:	2000      	movs	r0, #0
 800e5a4:	b011      	add	sp, #68	@ 0x44
 800e5a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5aa:	f001 b945 	b.w	800f838 <__math_oflow>
 800e5ae:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800e610 <__ieee754_pow+0x288>
 800e5b2:	e7e7      	b.n	800e584 <__ieee754_pow+0x1fc>
 800e5b4:	f1b9 0f00 	cmp.w	r9, #0
 800e5b8:	dcf3      	bgt.n	800e5a2 <__ieee754_pow+0x21a>
 800e5ba:	2000      	movs	r0, #0
 800e5bc:	b011      	add	sp, #68	@ 0x44
 800e5be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5c2:	f001 b931 	b.w	800f828 <__math_uflow>
 800e5c6:	429d      	cmp	r5, r3
 800e5c8:	d20c      	bcs.n	800e5e4 <__ieee754_pow+0x25c>
 800e5ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	f7f2 fa83 	bl	8000adc <__aeabi_dcmplt>
 800e5d6:	3800      	subs	r0, #0
 800e5d8:	bf18      	it	ne
 800e5da:	2001      	movne	r0, #1
 800e5dc:	f1b9 0f00 	cmp.w	r9, #0
 800e5e0:	daec      	bge.n	800e5bc <__ieee754_pow+0x234>
 800e5e2:	e7df      	b.n	800e5a4 <__ieee754_pow+0x21c>
 800e5e4:	4b0f      	ldr	r3, [pc, #60]	@ (800e624 <__ieee754_pow+0x29c>)
 800e5e6:	429d      	cmp	r5, r3
 800e5e8:	f04f 0200 	mov.w	r2, #0
 800e5ec:	d922      	bls.n	800e634 <__ieee754_pow+0x2ac>
 800e5ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	f7f2 fa72 	bl	8000adc <__aeabi_dcmplt>
 800e5f8:	3800      	subs	r0, #0
 800e5fa:	bf18      	it	ne
 800e5fc:	2001      	movne	r0, #1
 800e5fe:	f1b9 0f00 	cmp.w	r9, #0
 800e602:	dccf      	bgt.n	800e5a4 <__ieee754_pow+0x21c>
 800e604:	e7da      	b.n	800e5bc <__ieee754_pow+0x234>
 800e606:	bf00      	nop
 800e608:	00000000 	.word	0x00000000
 800e60c:	3ff00000 	.word	0x3ff00000
 800e610:	00000000 	.word	0x00000000
 800e614:	bff00000 	.word	0xbff00000
 800e618:	fff00000 	.word	0xfff00000
 800e61c:	7ff00000 	.word	0x7ff00000
 800e620:	433fffff 	.word	0x433fffff
 800e624:	3ff00000 	.word	0x3ff00000
 800e628:	3fefffff 	.word	0x3fefffff
 800e62c:	3fe00000 	.word	0x3fe00000
 800e630:	43f00000 	.word	0x43f00000
 800e634:	4b5a      	ldr	r3, [pc, #360]	@ (800e7a0 <__ieee754_pow+0x418>)
 800e636:	f7f1 fe27 	bl	8000288 <__aeabi_dsub>
 800e63a:	a351      	add	r3, pc, #324	@ (adr r3, 800e780 <__ieee754_pow+0x3f8>)
 800e63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e640:	4604      	mov	r4, r0
 800e642:	460d      	mov	r5, r1
 800e644:	f7f1 ffd8 	bl	80005f8 <__aeabi_dmul>
 800e648:	a34f      	add	r3, pc, #316	@ (adr r3, 800e788 <__ieee754_pow+0x400>)
 800e64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64e:	4606      	mov	r6, r0
 800e650:	460f      	mov	r7, r1
 800e652:	4620      	mov	r0, r4
 800e654:	4629      	mov	r1, r5
 800e656:	f7f1 ffcf 	bl	80005f8 <__aeabi_dmul>
 800e65a:	4b52      	ldr	r3, [pc, #328]	@ (800e7a4 <__ieee754_pow+0x41c>)
 800e65c:	4682      	mov	sl, r0
 800e65e:	468b      	mov	fp, r1
 800e660:	2200      	movs	r2, #0
 800e662:	4620      	mov	r0, r4
 800e664:	4629      	mov	r1, r5
 800e666:	f7f1 ffc7 	bl	80005f8 <__aeabi_dmul>
 800e66a:	4602      	mov	r2, r0
 800e66c:	460b      	mov	r3, r1
 800e66e:	a148      	add	r1, pc, #288	@ (adr r1, 800e790 <__ieee754_pow+0x408>)
 800e670:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e674:	f7f1 fe08 	bl	8000288 <__aeabi_dsub>
 800e678:	4622      	mov	r2, r4
 800e67a:	462b      	mov	r3, r5
 800e67c:	f7f1 ffbc 	bl	80005f8 <__aeabi_dmul>
 800e680:	4602      	mov	r2, r0
 800e682:	460b      	mov	r3, r1
 800e684:	2000      	movs	r0, #0
 800e686:	4948      	ldr	r1, [pc, #288]	@ (800e7a8 <__ieee754_pow+0x420>)
 800e688:	f7f1 fdfe 	bl	8000288 <__aeabi_dsub>
 800e68c:	4622      	mov	r2, r4
 800e68e:	4680      	mov	r8, r0
 800e690:	4689      	mov	r9, r1
 800e692:	462b      	mov	r3, r5
 800e694:	4620      	mov	r0, r4
 800e696:	4629      	mov	r1, r5
 800e698:	f7f1 ffae 	bl	80005f8 <__aeabi_dmul>
 800e69c:	4602      	mov	r2, r0
 800e69e:	460b      	mov	r3, r1
 800e6a0:	4640      	mov	r0, r8
 800e6a2:	4649      	mov	r1, r9
 800e6a4:	f7f1 ffa8 	bl	80005f8 <__aeabi_dmul>
 800e6a8:	a33b      	add	r3, pc, #236	@ (adr r3, 800e798 <__ieee754_pow+0x410>)
 800e6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ae:	f7f1 ffa3 	bl	80005f8 <__aeabi_dmul>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	460b      	mov	r3, r1
 800e6b6:	4650      	mov	r0, sl
 800e6b8:	4659      	mov	r1, fp
 800e6ba:	f7f1 fde5 	bl	8000288 <__aeabi_dsub>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	460b      	mov	r3, r1
 800e6c2:	4680      	mov	r8, r0
 800e6c4:	4689      	mov	r9, r1
 800e6c6:	4630      	mov	r0, r6
 800e6c8:	4639      	mov	r1, r7
 800e6ca:	f7f1 fddf 	bl	800028c <__adddf3>
 800e6ce:	2400      	movs	r4, #0
 800e6d0:	4632      	mov	r2, r6
 800e6d2:	463b      	mov	r3, r7
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	460d      	mov	r5, r1
 800e6d8:	f7f1 fdd6 	bl	8000288 <__aeabi_dsub>
 800e6dc:	4602      	mov	r2, r0
 800e6de:	460b      	mov	r3, r1
 800e6e0:	4640      	mov	r0, r8
 800e6e2:	4649      	mov	r1, r9
 800e6e4:	f7f1 fdd0 	bl	8000288 <__aeabi_dsub>
 800e6e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	9304      	str	r3, [sp, #16]
 800e6f4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e6f8:	4606      	mov	r6, r0
 800e6fa:	460f      	mov	r7, r1
 800e6fc:	465b      	mov	r3, fp
 800e6fe:	4652      	mov	r2, sl
 800e700:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e704:	f7f1 fdc0 	bl	8000288 <__aeabi_dsub>
 800e708:	4622      	mov	r2, r4
 800e70a:	462b      	mov	r3, r5
 800e70c:	f7f1 ff74 	bl	80005f8 <__aeabi_dmul>
 800e710:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e714:	4680      	mov	r8, r0
 800e716:	4689      	mov	r9, r1
 800e718:	4630      	mov	r0, r6
 800e71a:	4639      	mov	r1, r7
 800e71c:	f7f1 ff6c 	bl	80005f8 <__aeabi_dmul>
 800e720:	4602      	mov	r2, r0
 800e722:	460b      	mov	r3, r1
 800e724:	4640      	mov	r0, r8
 800e726:	4649      	mov	r1, r9
 800e728:	f7f1 fdb0 	bl	800028c <__adddf3>
 800e72c:	465b      	mov	r3, fp
 800e72e:	4606      	mov	r6, r0
 800e730:	460f      	mov	r7, r1
 800e732:	4652      	mov	r2, sl
 800e734:	4620      	mov	r0, r4
 800e736:	4629      	mov	r1, r5
 800e738:	f7f1 ff5e 	bl	80005f8 <__aeabi_dmul>
 800e73c:	460b      	mov	r3, r1
 800e73e:	4602      	mov	r2, r0
 800e740:	4680      	mov	r8, r0
 800e742:	4689      	mov	r9, r1
 800e744:	4630      	mov	r0, r6
 800e746:	4639      	mov	r1, r7
 800e748:	f7f1 fda0 	bl	800028c <__adddf3>
 800e74c:	4b17      	ldr	r3, [pc, #92]	@ (800e7ac <__ieee754_pow+0x424>)
 800e74e:	4299      	cmp	r1, r3
 800e750:	4604      	mov	r4, r0
 800e752:	460d      	mov	r5, r1
 800e754:	468b      	mov	fp, r1
 800e756:	f340 820b 	ble.w	800eb70 <__ieee754_pow+0x7e8>
 800e75a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800e75e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800e762:	4303      	orrs	r3, r0
 800e764:	f000 81ea 	beq.w	800eb3c <__ieee754_pow+0x7b4>
 800e768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e76c:	2200      	movs	r2, #0
 800e76e:	2300      	movs	r3, #0
 800e770:	f7f2 f9b4 	bl	8000adc <__aeabi_dcmplt>
 800e774:	3800      	subs	r0, #0
 800e776:	bf18      	it	ne
 800e778:	2001      	movne	r0, #1
 800e77a:	e713      	b.n	800e5a4 <__ieee754_pow+0x21c>
 800e77c:	f3af 8000 	nop.w
 800e780:	60000000 	.word	0x60000000
 800e784:	3ff71547 	.word	0x3ff71547
 800e788:	f85ddf44 	.word	0xf85ddf44
 800e78c:	3e54ae0b 	.word	0x3e54ae0b
 800e790:	55555555 	.word	0x55555555
 800e794:	3fd55555 	.word	0x3fd55555
 800e798:	652b82fe 	.word	0x652b82fe
 800e79c:	3ff71547 	.word	0x3ff71547
 800e7a0:	3ff00000 	.word	0x3ff00000
 800e7a4:	3fd00000 	.word	0x3fd00000
 800e7a8:	3fe00000 	.word	0x3fe00000
 800e7ac:	408fffff 	.word	0x408fffff
 800e7b0:	4bd5      	ldr	r3, [pc, #852]	@ (800eb08 <__ieee754_pow+0x780>)
 800e7b2:	ea08 0303 	and.w	r3, r8, r3
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	b92b      	cbnz	r3, 800e7c6 <__ieee754_pow+0x43e>
 800e7ba:	4bd4      	ldr	r3, [pc, #848]	@ (800eb0c <__ieee754_pow+0x784>)
 800e7bc:	f7f1 ff1c 	bl	80005f8 <__aeabi_dmul>
 800e7c0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800e7c4:	468b      	mov	fp, r1
 800e7c6:	ea4f 532b 	mov.w	r3, fp, asr #20
 800e7ca:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800e7ce:	4413      	add	r3, r2
 800e7d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7d2:	4bcf      	ldr	r3, [pc, #828]	@ (800eb10 <__ieee754_pow+0x788>)
 800e7d4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800e7d8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800e7dc:	459b      	cmp	fp, r3
 800e7de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e7e2:	dd08      	ble.n	800e7f6 <__ieee754_pow+0x46e>
 800e7e4:	4bcb      	ldr	r3, [pc, #812]	@ (800eb14 <__ieee754_pow+0x78c>)
 800e7e6:	459b      	cmp	fp, r3
 800e7e8:	f340 81a5 	ble.w	800eb36 <__ieee754_pow+0x7ae>
 800e7ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7f2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800e7f6:	f04f 0a00 	mov.w	sl, #0
 800e7fa:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e7fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e800:	4bc5      	ldr	r3, [pc, #788]	@ (800eb18 <__ieee754_pow+0x790>)
 800e802:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e806:	ed93 7b00 	vldr	d7, [r3]
 800e80a:	4629      	mov	r1, r5
 800e80c:	ec53 2b17 	vmov	r2, r3, d7
 800e810:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e814:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e818:	f7f1 fd36 	bl	8000288 <__aeabi_dsub>
 800e81c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e820:	4606      	mov	r6, r0
 800e822:	460f      	mov	r7, r1
 800e824:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e828:	f7f1 fd30 	bl	800028c <__adddf3>
 800e82c:	4602      	mov	r2, r0
 800e82e:	460b      	mov	r3, r1
 800e830:	2000      	movs	r0, #0
 800e832:	49ba      	ldr	r1, [pc, #744]	@ (800eb1c <__ieee754_pow+0x794>)
 800e834:	f7f2 f80a 	bl	800084c <__aeabi_ddiv>
 800e838:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800e83c:	4602      	mov	r2, r0
 800e83e:	460b      	mov	r3, r1
 800e840:	4630      	mov	r0, r6
 800e842:	4639      	mov	r1, r7
 800e844:	f7f1 fed8 	bl	80005f8 <__aeabi_dmul>
 800e848:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e84c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800e850:	106d      	asrs	r5, r5, #1
 800e852:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800e856:	f04f 0b00 	mov.w	fp, #0
 800e85a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800e85e:	4661      	mov	r1, ip
 800e860:	2200      	movs	r2, #0
 800e862:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e866:	4658      	mov	r0, fp
 800e868:	46e1      	mov	r9, ip
 800e86a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800e86e:	4614      	mov	r4, r2
 800e870:	461d      	mov	r5, r3
 800e872:	f7f1 fec1 	bl	80005f8 <__aeabi_dmul>
 800e876:	4602      	mov	r2, r0
 800e878:	460b      	mov	r3, r1
 800e87a:	4630      	mov	r0, r6
 800e87c:	4639      	mov	r1, r7
 800e87e:	f7f1 fd03 	bl	8000288 <__aeabi_dsub>
 800e882:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e886:	4606      	mov	r6, r0
 800e888:	460f      	mov	r7, r1
 800e88a:	4620      	mov	r0, r4
 800e88c:	4629      	mov	r1, r5
 800e88e:	f7f1 fcfb 	bl	8000288 <__aeabi_dsub>
 800e892:	4602      	mov	r2, r0
 800e894:	460b      	mov	r3, r1
 800e896:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e89a:	f7f1 fcf5 	bl	8000288 <__aeabi_dsub>
 800e89e:	465a      	mov	r2, fp
 800e8a0:	464b      	mov	r3, r9
 800e8a2:	f7f1 fea9 	bl	80005f8 <__aeabi_dmul>
 800e8a6:	4602      	mov	r2, r0
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	4630      	mov	r0, r6
 800e8ac:	4639      	mov	r1, r7
 800e8ae:	f7f1 fceb 	bl	8000288 <__aeabi_dsub>
 800e8b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e8b6:	f7f1 fe9f 	bl	80005f8 <__aeabi_dmul>
 800e8ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e8c2:	4610      	mov	r0, r2
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	f7f1 fe97 	bl	80005f8 <__aeabi_dmul>
 800e8ca:	a37d      	add	r3, pc, #500	@ (adr r3, 800eac0 <__ieee754_pow+0x738>)
 800e8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	460d      	mov	r5, r1
 800e8d4:	f7f1 fe90 	bl	80005f8 <__aeabi_dmul>
 800e8d8:	a37b      	add	r3, pc, #492	@ (adr r3, 800eac8 <__ieee754_pow+0x740>)
 800e8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8de:	f7f1 fcd5 	bl	800028c <__adddf3>
 800e8e2:	4622      	mov	r2, r4
 800e8e4:	462b      	mov	r3, r5
 800e8e6:	f7f1 fe87 	bl	80005f8 <__aeabi_dmul>
 800e8ea:	a379      	add	r3, pc, #484	@ (adr r3, 800ead0 <__ieee754_pow+0x748>)
 800e8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f0:	f7f1 fccc 	bl	800028c <__adddf3>
 800e8f4:	4622      	mov	r2, r4
 800e8f6:	462b      	mov	r3, r5
 800e8f8:	f7f1 fe7e 	bl	80005f8 <__aeabi_dmul>
 800e8fc:	a376      	add	r3, pc, #472	@ (adr r3, 800ead8 <__ieee754_pow+0x750>)
 800e8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e902:	f7f1 fcc3 	bl	800028c <__adddf3>
 800e906:	4622      	mov	r2, r4
 800e908:	462b      	mov	r3, r5
 800e90a:	f7f1 fe75 	bl	80005f8 <__aeabi_dmul>
 800e90e:	a374      	add	r3, pc, #464	@ (adr r3, 800eae0 <__ieee754_pow+0x758>)
 800e910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e914:	f7f1 fcba 	bl	800028c <__adddf3>
 800e918:	4622      	mov	r2, r4
 800e91a:	462b      	mov	r3, r5
 800e91c:	f7f1 fe6c 	bl	80005f8 <__aeabi_dmul>
 800e920:	a371      	add	r3, pc, #452	@ (adr r3, 800eae8 <__ieee754_pow+0x760>)
 800e922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e926:	f7f1 fcb1 	bl	800028c <__adddf3>
 800e92a:	4622      	mov	r2, r4
 800e92c:	4606      	mov	r6, r0
 800e92e:	460f      	mov	r7, r1
 800e930:	462b      	mov	r3, r5
 800e932:	4620      	mov	r0, r4
 800e934:	4629      	mov	r1, r5
 800e936:	f7f1 fe5f 	bl	80005f8 <__aeabi_dmul>
 800e93a:	4602      	mov	r2, r0
 800e93c:	460b      	mov	r3, r1
 800e93e:	4630      	mov	r0, r6
 800e940:	4639      	mov	r1, r7
 800e942:	f7f1 fe59 	bl	80005f8 <__aeabi_dmul>
 800e946:	465a      	mov	r2, fp
 800e948:	4604      	mov	r4, r0
 800e94a:	460d      	mov	r5, r1
 800e94c:	464b      	mov	r3, r9
 800e94e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e952:	f7f1 fc9b 	bl	800028c <__adddf3>
 800e956:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e95a:	f7f1 fe4d 	bl	80005f8 <__aeabi_dmul>
 800e95e:	4622      	mov	r2, r4
 800e960:	462b      	mov	r3, r5
 800e962:	f7f1 fc93 	bl	800028c <__adddf3>
 800e966:	465a      	mov	r2, fp
 800e968:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e96c:	464b      	mov	r3, r9
 800e96e:	4658      	mov	r0, fp
 800e970:	4649      	mov	r1, r9
 800e972:	f7f1 fe41 	bl	80005f8 <__aeabi_dmul>
 800e976:	4b6a      	ldr	r3, [pc, #424]	@ (800eb20 <__ieee754_pow+0x798>)
 800e978:	2200      	movs	r2, #0
 800e97a:	4606      	mov	r6, r0
 800e97c:	460f      	mov	r7, r1
 800e97e:	f7f1 fc85 	bl	800028c <__adddf3>
 800e982:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e986:	f7f1 fc81 	bl	800028c <__adddf3>
 800e98a:	46d8      	mov	r8, fp
 800e98c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800e990:	460d      	mov	r5, r1
 800e992:	465a      	mov	r2, fp
 800e994:	460b      	mov	r3, r1
 800e996:	4640      	mov	r0, r8
 800e998:	4649      	mov	r1, r9
 800e99a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800e99e:	f7f1 fe2b 	bl	80005f8 <__aeabi_dmul>
 800e9a2:	465c      	mov	r4, fp
 800e9a4:	4680      	mov	r8, r0
 800e9a6:	4689      	mov	r9, r1
 800e9a8:	4b5d      	ldr	r3, [pc, #372]	@ (800eb20 <__ieee754_pow+0x798>)
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	4629      	mov	r1, r5
 800e9b0:	f7f1 fc6a 	bl	8000288 <__aeabi_dsub>
 800e9b4:	4632      	mov	r2, r6
 800e9b6:	463b      	mov	r3, r7
 800e9b8:	f7f1 fc66 	bl	8000288 <__aeabi_dsub>
 800e9bc:	4602      	mov	r2, r0
 800e9be:	460b      	mov	r3, r1
 800e9c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e9c4:	f7f1 fc60 	bl	8000288 <__aeabi_dsub>
 800e9c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9cc:	f7f1 fe14 	bl	80005f8 <__aeabi_dmul>
 800e9d0:	4622      	mov	r2, r4
 800e9d2:	4606      	mov	r6, r0
 800e9d4:	460f      	mov	r7, r1
 800e9d6:	462b      	mov	r3, r5
 800e9d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9dc:	f7f1 fe0c 	bl	80005f8 <__aeabi_dmul>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	4630      	mov	r0, r6
 800e9e6:	4639      	mov	r1, r7
 800e9e8:	f7f1 fc50 	bl	800028c <__adddf3>
 800e9ec:	4606      	mov	r6, r0
 800e9ee:	460f      	mov	r7, r1
 800e9f0:	4602      	mov	r2, r0
 800e9f2:	460b      	mov	r3, r1
 800e9f4:	4640      	mov	r0, r8
 800e9f6:	4649      	mov	r1, r9
 800e9f8:	f7f1 fc48 	bl	800028c <__adddf3>
 800e9fc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800ea00:	a33b      	add	r3, pc, #236	@ (adr r3, 800eaf0 <__ieee754_pow+0x768>)
 800ea02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea06:	4658      	mov	r0, fp
 800ea08:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800ea0c:	460d      	mov	r5, r1
 800ea0e:	f7f1 fdf3 	bl	80005f8 <__aeabi_dmul>
 800ea12:	465c      	mov	r4, fp
 800ea14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea18:	4642      	mov	r2, r8
 800ea1a:	464b      	mov	r3, r9
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	4629      	mov	r1, r5
 800ea20:	f7f1 fc32 	bl	8000288 <__aeabi_dsub>
 800ea24:	4602      	mov	r2, r0
 800ea26:	460b      	mov	r3, r1
 800ea28:	4630      	mov	r0, r6
 800ea2a:	4639      	mov	r1, r7
 800ea2c:	f7f1 fc2c 	bl	8000288 <__aeabi_dsub>
 800ea30:	a331      	add	r3, pc, #196	@ (adr r3, 800eaf8 <__ieee754_pow+0x770>)
 800ea32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea36:	f7f1 fddf 	bl	80005f8 <__aeabi_dmul>
 800ea3a:	a331      	add	r3, pc, #196	@ (adr r3, 800eb00 <__ieee754_pow+0x778>)
 800ea3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea40:	4606      	mov	r6, r0
 800ea42:	460f      	mov	r7, r1
 800ea44:	4620      	mov	r0, r4
 800ea46:	4629      	mov	r1, r5
 800ea48:	f7f1 fdd6 	bl	80005f8 <__aeabi_dmul>
 800ea4c:	4602      	mov	r2, r0
 800ea4e:	460b      	mov	r3, r1
 800ea50:	4630      	mov	r0, r6
 800ea52:	4639      	mov	r1, r7
 800ea54:	f7f1 fc1a 	bl	800028c <__adddf3>
 800ea58:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ea5a:	4b32      	ldr	r3, [pc, #200]	@ (800eb24 <__ieee754_pow+0x79c>)
 800ea5c:	4413      	add	r3, r2
 800ea5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea62:	f7f1 fc13 	bl	800028c <__adddf3>
 800ea66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ea6a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ea6c:	f7f1 fd5a 	bl	8000524 <__aeabi_i2d>
 800ea70:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ea72:	4b2d      	ldr	r3, [pc, #180]	@ (800eb28 <__ieee754_pow+0x7a0>)
 800ea74:	4413      	add	r3, r2
 800ea76:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea7a:	4606      	mov	r6, r0
 800ea7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea80:	460f      	mov	r7, r1
 800ea82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea86:	f7f1 fc01 	bl	800028c <__adddf3>
 800ea8a:	4642      	mov	r2, r8
 800ea8c:	464b      	mov	r3, r9
 800ea8e:	f7f1 fbfd 	bl	800028c <__adddf3>
 800ea92:	4632      	mov	r2, r6
 800ea94:	463b      	mov	r3, r7
 800ea96:	f7f1 fbf9 	bl	800028c <__adddf3>
 800ea9a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800ea9e:	4632      	mov	r2, r6
 800eaa0:	463b      	mov	r3, r7
 800eaa2:	4658      	mov	r0, fp
 800eaa4:	460d      	mov	r5, r1
 800eaa6:	f7f1 fbef 	bl	8000288 <__aeabi_dsub>
 800eaaa:	4642      	mov	r2, r8
 800eaac:	464b      	mov	r3, r9
 800eaae:	f7f1 fbeb 	bl	8000288 <__aeabi_dsub>
 800eab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eab6:	f7f1 fbe7 	bl	8000288 <__aeabi_dsub>
 800eaba:	465c      	mov	r4, fp
 800eabc:	e036      	b.n	800eb2c <__ieee754_pow+0x7a4>
 800eabe:	bf00      	nop
 800eac0:	4a454eef 	.word	0x4a454eef
 800eac4:	3fca7e28 	.word	0x3fca7e28
 800eac8:	93c9db65 	.word	0x93c9db65
 800eacc:	3fcd864a 	.word	0x3fcd864a
 800ead0:	a91d4101 	.word	0xa91d4101
 800ead4:	3fd17460 	.word	0x3fd17460
 800ead8:	518f264d 	.word	0x518f264d
 800eadc:	3fd55555 	.word	0x3fd55555
 800eae0:	db6fabff 	.word	0xdb6fabff
 800eae4:	3fdb6db6 	.word	0x3fdb6db6
 800eae8:	33333303 	.word	0x33333303
 800eaec:	3fe33333 	.word	0x3fe33333
 800eaf0:	e0000000 	.word	0xe0000000
 800eaf4:	3feec709 	.word	0x3feec709
 800eaf8:	dc3a03fd 	.word	0xdc3a03fd
 800eafc:	3feec709 	.word	0x3feec709
 800eb00:	145b01f5 	.word	0x145b01f5
 800eb04:	be3e2fe0 	.word	0xbe3e2fe0
 800eb08:	7ff00000 	.word	0x7ff00000
 800eb0c:	43400000 	.word	0x43400000
 800eb10:	0003988e 	.word	0x0003988e
 800eb14:	000bb679 	.word	0x000bb679
 800eb18:	08014950 	.word	0x08014950
 800eb1c:	3ff00000 	.word	0x3ff00000
 800eb20:	40080000 	.word	0x40080000
 800eb24:	08014930 	.word	0x08014930
 800eb28:	08014940 	.word	0x08014940
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	460b      	mov	r3, r1
 800eb30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb34:	e5d6      	b.n	800e6e4 <__ieee754_pow+0x35c>
 800eb36:	f04f 0a01 	mov.w	sl, #1
 800eb3a:	e65e      	b.n	800e7fa <__ieee754_pow+0x472>
 800eb3c:	a3b5      	add	r3, pc, #724	@ (adr r3, 800ee14 <__ieee754_pow+0xa8c>)
 800eb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb42:	4630      	mov	r0, r6
 800eb44:	4639      	mov	r1, r7
 800eb46:	f7f1 fba1 	bl	800028c <__adddf3>
 800eb4a:	4642      	mov	r2, r8
 800eb4c:	e9cd 0100 	strd	r0, r1, [sp]
 800eb50:	464b      	mov	r3, r9
 800eb52:	4620      	mov	r0, r4
 800eb54:	4629      	mov	r1, r5
 800eb56:	f7f1 fb97 	bl	8000288 <__aeabi_dsub>
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb62:	f7f1 ffd9 	bl	8000b18 <__aeabi_dcmpgt>
 800eb66:	2800      	cmp	r0, #0
 800eb68:	f47f adfe 	bne.w	800e768 <__ieee754_pow+0x3e0>
 800eb6c:	4ba2      	ldr	r3, [pc, #648]	@ (800edf8 <__ieee754_pow+0xa70>)
 800eb6e:	e022      	b.n	800ebb6 <__ieee754_pow+0x82e>
 800eb70:	4ca2      	ldr	r4, [pc, #648]	@ (800edfc <__ieee754_pow+0xa74>)
 800eb72:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800eb76:	42a3      	cmp	r3, r4
 800eb78:	d919      	bls.n	800ebae <__ieee754_pow+0x826>
 800eb7a:	4ba1      	ldr	r3, [pc, #644]	@ (800ee00 <__ieee754_pow+0xa78>)
 800eb7c:	440b      	add	r3, r1
 800eb7e:	4303      	orrs	r3, r0
 800eb80:	d009      	beq.n	800eb96 <__ieee754_pow+0x80e>
 800eb82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb86:	2200      	movs	r2, #0
 800eb88:	2300      	movs	r3, #0
 800eb8a:	f7f1 ffa7 	bl	8000adc <__aeabi_dcmplt>
 800eb8e:	3800      	subs	r0, #0
 800eb90:	bf18      	it	ne
 800eb92:	2001      	movne	r0, #1
 800eb94:	e512      	b.n	800e5bc <__ieee754_pow+0x234>
 800eb96:	4642      	mov	r2, r8
 800eb98:	464b      	mov	r3, r9
 800eb9a:	f7f1 fb75 	bl	8000288 <__aeabi_dsub>
 800eb9e:	4632      	mov	r2, r6
 800eba0:	463b      	mov	r3, r7
 800eba2:	f7f1 ffaf 	bl	8000b04 <__aeabi_dcmpge>
 800eba6:	2800      	cmp	r0, #0
 800eba8:	d1eb      	bne.n	800eb82 <__ieee754_pow+0x7fa>
 800ebaa:	4b96      	ldr	r3, [pc, #600]	@ (800ee04 <__ieee754_pow+0xa7c>)
 800ebac:	e003      	b.n	800ebb6 <__ieee754_pow+0x82e>
 800ebae:	4a96      	ldr	r2, [pc, #600]	@ (800ee08 <__ieee754_pow+0xa80>)
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	f240 80e7 	bls.w	800ed84 <__ieee754_pow+0x9fc>
 800ebb6:	151b      	asrs	r3, r3, #20
 800ebb8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800ebbc:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800ebc0:	fa4a fa03 	asr.w	sl, sl, r3
 800ebc4:	44da      	add	sl, fp
 800ebc6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ebca:	4890      	ldr	r0, [pc, #576]	@ (800ee0c <__ieee754_pow+0xa84>)
 800ebcc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800ebd0:	4108      	asrs	r0, r1
 800ebd2:	ea00 030a 	and.w	r3, r0, sl
 800ebd6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ebda:	f1c1 0114 	rsb	r1, r1, #20
 800ebde:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800ebe2:	fa4a fa01 	asr.w	sl, sl, r1
 800ebe6:	f1bb 0f00 	cmp.w	fp, #0
 800ebea:	4640      	mov	r0, r8
 800ebec:	4649      	mov	r1, r9
 800ebee:	f04f 0200 	mov.w	r2, #0
 800ebf2:	bfb8      	it	lt
 800ebf4:	f1ca 0a00 	rsblt	sl, sl, #0
 800ebf8:	f7f1 fb46 	bl	8000288 <__aeabi_dsub>
 800ebfc:	4680      	mov	r8, r0
 800ebfe:	4689      	mov	r9, r1
 800ec00:	4632      	mov	r2, r6
 800ec02:	463b      	mov	r3, r7
 800ec04:	4640      	mov	r0, r8
 800ec06:	4649      	mov	r1, r9
 800ec08:	f7f1 fb40 	bl	800028c <__adddf3>
 800ec0c:	2400      	movs	r4, #0
 800ec0e:	a36a      	add	r3, pc, #424	@ (adr r3, 800edb8 <__ieee754_pow+0xa30>)
 800ec10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec14:	4620      	mov	r0, r4
 800ec16:	460d      	mov	r5, r1
 800ec18:	f7f1 fcee 	bl	80005f8 <__aeabi_dmul>
 800ec1c:	4642      	mov	r2, r8
 800ec1e:	e9cd 0100 	strd	r0, r1, [sp]
 800ec22:	464b      	mov	r3, r9
 800ec24:	4620      	mov	r0, r4
 800ec26:	4629      	mov	r1, r5
 800ec28:	f7f1 fb2e 	bl	8000288 <__aeabi_dsub>
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	460b      	mov	r3, r1
 800ec30:	4630      	mov	r0, r6
 800ec32:	4639      	mov	r1, r7
 800ec34:	f7f1 fb28 	bl	8000288 <__aeabi_dsub>
 800ec38:	a361      	add	r3, pc, #388	@ (adr r3, 800edc0 <__ieee754_pow+0xa38>)
 800ec3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3e:	f7f1 fcdb 	bl	80005f8 <__aeabi_dmul>
 800ec42:	a361      	add	r3, pc, #388	@ (adr r3, 800edc8 <__ieee754_pow+0xa40>)
 800ec44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec48:	4680      	mov	r8, r0
 800ec4a:	4689      	mov	r9, r1
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	4629      	mov	r1, r5
 800ec50:	f7f1 fcd2 	bl	80005f8 <__aeabi_dmul>
 800ec54:	4602      	mov	r2, r0
 800ec56:	460b      	mov	r3, r1
 800ec58:	4640      	mov	r0, r8
 800ec5a:	4649      	mov	r1, r9
 800ec5c:	f7f1 fb16 	bl	800028c <__adddf3>
 800ec60:	4604      	mov	r4, r0
 800ec62:	460d      	mov	r5, r1
 800ec64:	4602      	mov	r2, r0
 800ec66:	460b      	mov	r3, r1
 800ec68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec6c:	f7f1 fb0e 	bl	800028c <__adddf3>
 800ec70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec74:	4680      	mov	r8, r0
 800ec76:	4689      	mov	r9, r1
 800ec78:	f7f1 fb06 	bl	8000288 <__aeabi_dsub>
 800ec7c:	4602      	mov	r2, r0
 800ec7e:	460b      	mov	r3, r1
 800ec80:	4620      	mov	r0, r4
 800ec82:	4629      	mov	r1, r5
 800ec84:	f7f1 fb00 	bl	8000288 <__aeabi_dsub>
 800ec88:	4642      	mov	r2, r8
 800ec8a:	4606      	mov	r6, r0
 800ec8c:	460f      	mov	r7, r1
 800ec8e:	464b      	mov	r3, r9
 800ec90:	4640      	mov	r0, r8
 800ec92:	4649      	mov	r1, r9
 800ec94:	f7f1 fcb0 	bl	80005f8 <__aeabi_dmul>
 800ec98:	a34d      	add	r3, pc, #308	@ (adr r3, 800edd0 <__ieee754_pow+0xa48>)
 800ec9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec9e:	4604      	mov	r4, r0
 800eca0:	460d      	mov	r5, r1
 800eca2:	f7f1 fca9 	bl	80005f8 <__aeabi_dmul>
 800eca6:	a34c      	add	r3, pc, #304	@ (adr r3, 800edd8 <__ieee754_pow+0xa50>)
 800eca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecac:	f7f1 faec 	bl	8000288 <__aeabi_dsub>
 800ecb0:	4622      	mov	r2, r4
 800ecb2:	462b      	mov	r3, r5
 800ecb4:	f7f1 fca0 	bl	80005f8 <__aeabi_dmul>
 800ecb8:	a349      	add	r3, pc, #292	@ (adr r3, 800ede0 <__ieee754_pow+0xa58>)
 800ecba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecbe:	f7f1 fae5 	bl	800028c <__adddf3>
 800ecc2:	4622      	mov	r2, r4
 800ecc4:	462b      	mov	r3, r5
 800ecc6:	f7f1 fc97 	bl	80005f8 <__aeabi_dmul>
 800ecca:	a347      	add	r3, pc, #284	@ (adr r3, 800ede8 <__ieee754_pow+0xa60>)
 800eccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd0:	f7f1 fada 	bl	8000288 <__aeabi_dsub>
 800ecd4:	4622      	mov	r2, r4
 800ecd6:	462b      	mov	r3, r5
 800ecd8:	f7f1 fc8e 	bl	80005f8 <__aeabi_dmul>
 800ecdc:	a344      	add	r3, pc, #272	@ (adr r3, 800edf0 <__ieee754_pow+0xa68>)
 800ecde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece2:	f7f1 fad3 	bl	800028c <__adddf3>
 800ece6:	4622      	mov	r2, r4
 800ece8:	462b      	mov	r3, r5
 800ecea:	f7f1 fc85 	bl	80005f8 <__aeabi_dmul>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	4640      	mov	r0, r8
 800ecf4:	4649      	mov	r1, r9
 800ecf6:	f7f1 fac7 	bl	8000288 <__aeabi_dsub>
 800ecfa:	4604      	mov	r4, r0
 800ecfc:	460d      	mov	r5, r1
 800ecfe:	4602      	mov	r2, r0
 800ed00:	460b      	mov	r3, r1
 800ed02:	4640      	mov	r0, r8
 800ed04:	4649      	mov	r1, r9
 800ed06:	f7f1 fc77 	bl	80005f8 <__aeabi_dmul>
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	e9cd 0100 	strd	r0, r1, [sp]
 800ed10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ed14:	4620      	mov	r0, r4
 800ed16:	4629      	mov	r1, r5
 800ed18:	f7f1 fab6 	bl	8000288 <__aeabi_dsub>
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	460b      	mov	r3, r1
 800ed20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed24:	f7f1 fd92 	bl	800084c <__aeabi_ddiv>
 800ed28:	4632      	mov	r2, r6
 800ed2a:	4604      	mov	r4, r0
 800ed2c:	460d      	mov	r5, r1
 800ed2e:	463b      	mov	r3, r7
 800ed30:	4640      	mov	r0, r8
 800ed32:	4649      	mov	r1, r9
 800ed34:	f7f1 fc60 	bl	80005f8 <__aeabi_dmul>
 800ed38:	4632      	mov	r2, r6
 800ed3a:	463b      	mov	r3, r7
 800ed3c:	f7f1 faa6 	bl	800028c <__adddf3>
 800ed40:	4602      	mov	r2, r0
 800ed42:	460b      	mov	r3, r1
 800ed44:	4620      	mov	r0, r4
 800ed46:	4629      	mov	r1, r5
 800ed48:	f7f1 fa9e 	bl	8000288 <__aeabi_dsub>
 800ed4c:	4642      	mov	r2, r8
 800ed4e:	464b      	mov	r3, r9
 800ed50:	f7f1 fa9a 	bl	8000288 <__aeabi_dsub>
 800ed54:	460b      	mov	r3, r1
 800ed56:	4602      	mov	r2, r0
 800ed58:	492d      	ldr	r1, [pc, #180]	@ (800ee10 <__ieee754_pow+0xa88>)
 800ed5a:	2000      	movs	r0, #0
 800ed5c:	f7f1 fa94 	bl	8000288 <__aeabi_dsub>
 800ed60:	ec41 0b10 	vmov	d0, r0, r1
 800ed64:	ee10 3a90 	vmov	r3, s1
 800ed68:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ed6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ed70:	da0b      	bge.n	800ed8a <__ieee754_pow+0xa02>
 800ed72:	4650      	mov	r0, sl
 800ed74:	f000 fcb0 	bl	800f6d8 <scalbn>
 800ed78:	ec51 0b10 	vmov	r0, r1, d0
 800ed7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed80:	f7ff bb6d 	b.w	800e45e <__ieee754_pow+0xd6>
 800ed84:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ed88:	e73a      	b.n	800ec00 <__ieee754_pow+0x878>
 800ed8a:	ec51 0b10 	vmov	r0, r1, d0
 800ed8e:	4619      	mov	r1, r3
 800ed90:	e7f4      	b.n	800ed7c <__ieee754_pow+0x9f4>
 800ed92:	491f      	ldr	r1, [pc, #124]	@ (800ee10 <__ieee754_pow+0xa88>)
 800ed94:	2000      	movs	r0, #0
 800ed96:	f7ff bb14 	b.w	800e3c2 <__ieee754_pow+0x3a>
 800ed9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed9e:	f7ff bb10 	b.w	800e3c2 <__ieee754_pow+0x3a>
 800eda2:	4630      	mov	r0, r6
 800eda4:	4639      	mov	r1, r7
 800eda6:	f7ff bb0c 	b.w	800e3c2 <__ieee754_pow+0x3a>
 800edaa:	460c      	mov	r4, r1
 800edac:	f7ff bb69 	b.w	800e482 <__ieee754_pow+0xfa>
 800edb0:	2400      	movs	r4, #0
 800edb2:	f7ff bb4b 	b.w	800e44c <__ieee754_pow+0xc4>
 800edb6:	bf00      	nop
 800edb8:	00000000 	.word	0x00000000
 800edbc:	3fe62e43 	.word	0x3fe62e43
 800edc0:	fefa39ef 	.word	0xfefa39ef
 800edc4:	3fe62e42 	.word	0x3fe62e42
 800edc8:	0ca86c39 	.word	0x0ca86c39
 800edcc:	be205c61 	.word	0xbe205c61
 800edd0:	72bea4d0 	.word	0x72bea4d0
 800edd4:	3e663769 	.word	0x3e663769
 800edd8:	c5d26bf1 	.word	0xc5d26bf1
 800eddc:	3ebbbd41 	.word	0x3ebbbd41
 800ede0:	af25de2c 	.word	0xaf25de2c
 800ede4:	3f11566a 	.word	0x3f11566a
 800ede8:	16bebd93 	.word	0x16bebd93
 800edec:	3f66c16c 	.word	0x3f66c16c
 800edf0:	5555553e 	.word	0x5555553e
 800edf4:	3fc55555 	.word	0x3fc55555
 800edf8:	40900000 	.word	0x40900000
 800edfc:	4090cbff 	.word	0x4090cbff
 800ee00:	3f6f3400 	.word	0x3f6f3400
 800ee04:	4090cc00 	.word	0x4090cc00
 800ee08:	3fe00000 	.word	0x3fe00000
 800ee0c:	fff00000 	.word	0xfff00000
 800ee10:	3ff00000 	.word	0x3ff00000
 800ee14:	652b82fe 	.word	0x652b82fe
 800ee18:	3c971547 	.word	0x3c971547
 800ee1c:	00000000 	.word	0x00000000

0800ee20 <__ieee754_rem_pio2>:
 800ee20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee24:	ec57 6b10 	vmov	r6, r7, d0
 800ee28:	4bc5      	ldr	r3, [pc, #788]	@ (800f140 <__ieee754_rem_pio2+0x320>)
 800ee2a:	b08d      	sub	sp, #52	@ 0x34
 800ee2c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ee30:	4598      	cmp	r8, r3
 800ee32:	4604      	mov	r4, r0
 800ee34:	9704      	str	r7, [sp, #16]
 800ee36:	d807      	bhi.n	800ee48 <__ieee754_rem_pio2+0x28>
 800ee38:	2200      	movs	r2, #0
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	ed80 0b00 	vstr	d0, [r0]
 800ee40:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ee44:	2500      	movs	r5, #0
 800ee46:	e028      	b.n	800ee9a <__ieee754_rem_pio2+0x7a>
 800ee48:	4bbe      	ldr	r3, [pc, #760]	@ (800f144 <__ieee754_rem_pio2+0x324>)
 800ee4a:	4598      	cmp	r8, r3
 800ee4c:	d878      	bhi.n	800ef40 <__ieee754_rem_pio2+0x120>
 800ee4e:	9b04      	ldr	r3, [sp, #16]
 800ee50:	4dbd      	ldr	r5, [pc, #756]	@ (800f148 <__ieee754_rem_pio2+0x328>)
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	4630      	mov	r0, r6
 800ee56:	a3ac      	add	r3, pc, #688	@ (adr r3, 800f108 <__ieee754_rem_pio2+0x2e8>)
 800ee58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5c:	4639      	mov	r1, r7
 800ee5e:	dd38      	ble.n	800eed2 <__ieee754_rem_pio2+0xb2>
 800ee60:	f7f1 fa12 	bl	8000288 <__aeabi_dsub>
 800ee64:	45a8      	cmp	r8, r5
 800ee66:	4606      	mov	r6, r0
 800ee68:	460f      	mov	r7, r1
 800ee6a:	d01a      	beq.n	800eea2 <__ieee754_rem_pio2+0x82>
 800ee6c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800f110 <__ieee754_rem_pio2+0x2f0>)
 800ee6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee72:	f7f1 fa09 	bl	8000288 <__aeabi_dsub>
 800ee76:	4602      	mov	r2, r0
 800ee78:	460b      	mov	r3, r1
 800ee7a:	4680      	mov	r8, r0
 800ee7c:	4689      	mov	r9, r1
 800ee7e:	4630      	mov	r0, r6
 800ee80:	4639      	mov	r1, r7
 800ee82:	f7f1 fa01 	bl	8000288 <__aeabi_dsub>
 800ee86:	a3a2      	add	r3, pc, #648	@ (adr r3, 800f110 <__ieee754_rem_pio2+0x2f0>)
 800ee88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8c:	f7f1 f9fc 	bl	8000288 <__aeabi_dsub>
 800ee90:	e9c4 8900 	strd	r8, r9, [r4]
 800ee94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ee98:	2501      	movs	r5, #1
 800ee9a:	4628      	mov	r0, r5
 800ee9c:	b00d      	add	sp, #52	@ 0x34
 800ee9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eea2:	a39d      	add	r3, pc, #628	@ (adr r3, 800f118 <__ieee754_rem_pio2+0x2f8>)
 800eea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea8:	f7f1 f9ee 	bl	8000288 <__aeabi_dsub>
 800eeac:	a39c      	add	r3, pc, #624	@ (adr r3, 800f120 <__ieee754_rem_pio2+0x300>)
 800eeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb2:	4606      	mov	r6, r0
 800eeb4:	460f      	mov	r7, r1
 800eeb6:	f7f1 f9e7 	bl	8000288 <__aeabi_dsub>
 800eeba:	4602      	mov	r2, r0
 800eebc:	460b      	mov	r3, r1
 800eebe:	4680      	mov	r8, r0
 800eec0:	4689      	mov	r9, r1
 800eec2:	4630      	mov	r0, r6
 800eec4:	4639      	mov	r1, r7
 800eec6:	f7f1 f9df 	bl	8000288 <__aeabi_dsub>
 800eeca:	a395      	add	r3, pc, #596	@ (adr r3, 800f120 <__ieee754_rem_pio2+0x300>)
 800eecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed0:	e7dc      	b.n	800ee8c <__ieee754_rem_pio2+0x6c>
 800eed2:	f7f1 f9db 	bl	800028c <__adddf3>
 800eed6:	45a8      	cmp	r8, r5
 800eed8:	4606      	mov	r6, r0
 800eeda:	460f      	mov	r7, r1
 800eedc:	d018      	beq.n	800ef10 <__ieee754_rem_pio2+0xf0>
 800eede:	a38c      	add	r3, pc, #560	@ (adr r3, 800f110 <__ieee754_rem_pio2+0x2f0>)
 800eee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee4:	f7f1 f9d2 	bl	800028c <__adddf3>
 800eee8:	4602      	mov	r2, r0
 800eeea:	460b      	mov	r3, r1
 800eeec:	4680      	mov	r8, r0
 800eeee:	4689      	mov	r9, r1
 800eef0:	4630      	mov	r0, r6
 800eef2:	4639      	mov	r1, r7
 800eef4:	f7f1 f9c8 	bl	8000288 <__aeabi_dsub>
 800eef8:	a385      	add	r3, pc, #532	@ (adr r3, 800f110 <__ieee754_rem_pio2+0x2f0>)
 800eefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eefe:	f7f1 f9c5 	bl	800028c <__adddf3>
 800ef02:	f04f 35ff 	mov.w	r5, #4294967295
 800ef06:	e9c4 8900 	strd	r8, r9, [r4]
 800ef0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ef0e:	e7c4      	b.n	800ee9a <__ieee754_rem_pio2+0x7a>
 800ef10:	a381      	add	r3, pc, #516	@ (adr r3, 800f118 <__ieee754_rem_pio2+0x2f8>)
 800ef12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef16:	f7f1 f9b9 	bl	800028c <__adddf3>
 800ef1a:	a381      	add	r3, pc, #516	@ (adr r3, 800f120 <__ieee754_rem_pio2+0x300>)
 800ef1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef20:	4606      	mov	r6, r0
 800ef22:	460f      	mov	r7, r1
 800ef24:	f7f1 f9b2 	bl	800028c <__adddf3>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	4680      	mov	r8, r0
 800ef2e:	4689      	mov	r9, r1
 800ef30:	4630      	mov	r0, r6
 800ef32:	4639      	mov	r1, r7
 800ef34:	f7f1 f9a8 	bl	8000288 <__aeabi_dsub>
 800ef38:	a379      	add	r3, pc, #484	@ (adr r3, 800f120 <__ieee754_rem_pio2+0x300>)
 800ef3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3e:	e7de      	b.n	800eefe <__ieee754_rem_pio2+0xde>
 800ef40:	4b82      	ldr	r3, [pc, #520]	@ (800f14c <__ieee754_rem_pio2+0x32c>)
 800ef42:	4598      	cmp	r8, r3
 800ef44:	f200 80d1 	bhi.w	800f0ea <__ieee754_rem_pio2+0x2ca>
 800ef48:	f000 f966 	bl	800f218 <fabs>
 800ef4c:	ec57 6b10 	vmov	r6, r7, d0
 800ef50:	a375      	add	r3, pc, #468	@ (adr r3, 800f128 <__ieee754_rem_pio2+0x308>)
 800ef52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef56:	4630      	mov	r0, r6
 800ef58:	4639      	mov	r1, r7
 800ef5a:	f7f1 fb4d 	bl	80005f8 <__aeabi_dmul>
 800ef5e:	4b7c      	ldr	r3, [pc, #496]	@ (800f150 <__ieee754_rem_pio2+0x330>)
 800ef60:	2200      	movs	r2, #0
 800ef62:	f7f1 f993 	bl	800028c <__adddf3>
 800ef66:	f7f1 fdf7 	bl	8000b58 <__aeabi_d2iz>
 800ef6a:	4605      	mov	r5, r0
 800ef6c:	f7f1 fada 	bl	8000524 <__aeabi_i2d>
 800ef70:	4602      	mov	r2, r0
 800ef72:	460b      	mov	r3, r1
 800ef74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ef78:	a363      	add	r3, pc, #396	@ (adr r3, 800f108 <__ieee754_rem_pio2+0x2e8>)
 800ef7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef7e:	f7f1 fb3b 	bl	80005f8 <__aeabi_dmul>
 800ef82:	4602      	mov	r2, r0
 800ef84:	460b      	mov	r3, r1
 800ef86:	4630      	mov	r0, r6
 800ef88:	4639      	mov	r1, r7
 800ef8a:	f7f1 f97d 	bl	8000288 <__aeabi_dsub>
 800ef8e:	a360      	add	r3, pc, #384	@ (adr r3, 800f110 <__ieee754_rem_pio2+0x2f0>)
 800ef90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef94:	4682      	mov	sl, r0
 800ef96:	468b      	mov	fp, r1
 800ef98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef9c:	f7f1 fb2c 	bl	80005f8 <__aeabi_dmul>
 800efa0:	2d1f      	cmp	r5, #31
 800efa2:	4606      	mov	r6, r0
 800efa4:	460f      	mov	r7, r1
 800efa6:	dc0c      	bgt.n	800efc2 <__ieee754_rem_pio2+0x1a2>
 800efa8:	4b6a      	ldr	r3, [pc, #424]	@ (800f154 <__ieee754_rem_pio2+0x334>)
 800efaa:	1e6a      	subs	r2, r5, #1
 800efac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efb0:	4543      	cmp	r3, r8
 800efb2:	d006      	beq.n	800efc2 <__ieee754_rem_pio2+0x1a2>
 800efb4:	4632      	mov	r2, r6
 800efb6:	463b      	mov	r3, r7
 800efb8:	4650      	mov	r0, sl
 800efba:	4659      	mov	r1, fp
 800efbc:	f7f1 f964 	bl	8000288 <__aeabi_dsub>
 800efc0:	e00e      	b.n	800efe0 <__ieee754_rem_pio2+0x1c0>
 800efc2:	463b      	mov	r3, r7
 800efc4:	4632      	mov	r2, r6
 800efc6:	4650      	mov	r0, sl
 800efc8:	4659      	mov	r1, fp
 800efca:	f7f1 f95d 	bl	8000288 <__aeabi_dsub>
 800efce:	ea4f 5328 	mov.w	r3, r8, asr #20
 800efd2:	9305      	str	r3, [sp, #20]
 800efd4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800efd8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800efdc:	2b10      	cmp	r3, #16
 800efde:	dc02      	bgt.n	800efe6 <__ieee754_rem_pio2+0x1c6>
 800efe0:	e9c4 0100 	strd	r0, r1, [r4]
 800efe4:	e039      	b.n	800f05a <__ieee754_rem_pio2+0x23a>
 800efe6:	a34c      	add	r3, pc, #304	@ (adr r3, 800f118 <__ieee754_rem_pio2+0x2f8>)
 800efe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eff0:	f7f1 fb02 	bl	80005f8 <__aeabi_dmul>
 800eff4:	4606      	mov	r6, r0
 800eff6:	460f      	mov	r7, r1
 800eff8:	4602      	mov	r2, r0
 800effa:	460b      	mov	r3, r1
 800effc:	4650      	mov	r0, sl
 800effe:	4659      	mov	r1, fp
 800f000:	f7f1 f942 	bl	8000288 <__aeabi_dsub>
 800f004:	4602      	mov	r2, r0
 800f006:	460b      	mov	r3, r1
 800f008:	4680      	mov	r8, r0
 800f00a:	4689      	mov	r9, r1
 800f00c:	4650      	mov	r0, sl
 800f00e:	4659      	mov	r1, fp
 800f010:	f7f1 f93a 	bl	8000288 <__aeabi_dsub>
 800f014:	4632      	mov	r2, r6
 800f016:	463b      	mov	r3, r7
 800f018:	f7f1 f936 	bl	8000288 <__aeabi_dsub>
 800f01c:	a340      	add	r3, pc, #256	@ (adr r3, 800f120 <__ieee754_rem_pio2+0x300>)
 800f01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f022:	4606      	mov	r6, r0
 800f024:	460f      	mov	r7, r1
 800f026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f02a:	f7f1 fae5 	bl	80005f8 <__aeabi_dmul>
 800f02e:	4632      	mov	r2, r6
 800f030:	463b      	mov	r3, r7
 800f032:	f7f1 f929 	bl	8000288 <__aeabi_dsub>
 800f036:	4602      	mov	r2, r0
 800f038:	460b      	mov	r3, r1
 800f03a:	4606      	mov	r6, r0
 800f03c:	460f      	mov	r7, r1
 800f03e:	4640      	mov	r0, r8
 800f040:	4649      	mov	r1, r9
 800f042:	f7f1 f921 	bl	8000288 <__aeabi_dsub>
 800f046:	9a05      	ldr	r2, [sp, #20]
 800f048:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f04c:	1ad3      	subs	r3, r2, r3
 800f04e:	2b31      	cmp	r3, #49	@ 0x31
 800f050:	dc20      	bgt.n	800f094 <__ieee754_rem_pio2+0x274>
 800f052:	e9c4 0100 	strd	r0, r1, [r4]
 800f056:	46c2      	mov	sl, r8
 800f058:	46cb      	mov	fp, r9
 800f05a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f05e:	4650      	mov	r0, sl
 800f060:	4642      	mov	r2, r8
 800f062:	464b      	mov	r3, r9
 800f064:	4659      	mov	r1, fp
 800f066:	f7f1 f90f 	bl	8000288 <__aeabi_dsub>
 800f06a:	463b      	mov	r3, r7
 800f06c:	4632      	mov	r2, r6
 800f06e:	f7f1 f90b 	bl	8000288 <__aeabi_dsub>
 800f072:	9b04      	ldr	r3, [sp, #16]
 800f074:	2b00      	cmp	r3, #0
 800f076:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f07a:	f6bf af0e 	bge.w	800ee9a <__ieee754_rem_pio2+0x7a>
 800f07e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800f082:	6063      	str	r3, [r4, #4]
 800f084:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f088:	f8c4 8000 	str.w	r8, [r4]
 800f08c:	60a0      	str	r0, [r4, #8]
 800f08e:	60e3      	str	r3, [r4, #12]
 800f090:	426d      	negs	r5, r5
 800f092:	e702      	b.n	800ee9a <__ieee754_rem_pio2+0x7a>
 800f094:	a326      	add	r3, pc, #152	@ (adr r3, 800f130 <__ieee754_rem_pio2+0x310>)
 800f096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f09e:	f7f1 faab 	bl	80005f8 <__aeabi_dmul>
 800f0a2:	4606      	mov	r6, r0
 800f0a4:	460f      	mov	r7, r1
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	4640      	mov	r0, r8
 800f0ac:	4649      	mov	r1, r9
 800f0ae:	f7f1 f8eb 	bl	8000288 <__aeabi_dsub>
 800f0b2:	4602      	mov	r2, r0
 800f0b4:	460b      	mov	r3, r1
 800f0b6:	4682      	mov	sl, r0
 800f0b8:	468b      	mov	fp, r1
 800f0ba:	4640      	mov	r0, r8
 800f0bc:	4649      	mov	r1, r9
 800f0be:	f7f1 f8e3 	bl	8000288 <__aeabi_dsub>
 800f0c2:	4632      	mov	r2, r6
 800f0c4:	463b      	mov	r3, r7
 800f0c6:	f7f1 f8df 	bl	8000288 <__aeabi_dsub>
 800f0ca:	a31b      	add	r3, pc, #108	@ (adr r3, 800f138 <__ieee754_rem_pio2+0x318>)
 800f0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d0:	4606      	mov	r6, r0
 800f0d2:	460f      	mov	r7, r1
 800f0d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0d8:	f7f1 fa8e 	bl	80005f8 <__aeabi_dmul>
 800f0dc:	4632      	mov	r2, r6
 800f0de:	463b      	mov	r3, r7
 800f0e0:	f7f1 f8d2 	bl	8000288 <__aeabi_dsub>
 800f0e4:	4606      	mov	r6, r0
 800f0e6:	460f      	mov	r7, r1
 800f0e8:	e764      	b.n	800efb4 <__ieee754_rem_pio2+0x194>
 800f0ea:	4b1b      	ldr	r3, [pc, #108]	@ (800f158 <__ieee754_rem_pio2+0x338>)
 800f0ec:	4598      	cmp	r8, r3
 800f0ee:	d935      	bls.n	800f15c <__ieee754_rem_pio2+0x33c>
 800f0f0:	4632      	mov	r2, r6
 800f0f2:	463b      	mov	r3, r7
 800f0f4:	4630      	mov	r0, r6
 800f0f6:	4639      	mov	r1, r7
 800f0f8:	f7f1 f8c6 	bl	8000288 <__aeabi_dsub>
 800f0fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f100:	e9c4 0100 	strd	r0, r1, [r4]
 800f104:	e69e      	b.n	800ee44 <__ieee754_rem_pio2+0x24>
 800f106:	bf00      	nop
 800f108:	54400000 	.word	0x54400000
 800f10c:	3ff921fb 	.word	0x3ff921fb
 800f110:	1a626331 	.word	0x1a626331
 800f114:	3dd0b461 	.word	0x3dd0b461
 800f118:	1a600000 	.word	0x1a600000
 800f11c:	3dd0b461 	.word	0x3dd0b461
 800f120:	2e037073 	.word	0x2e037073
 800f124:	3ba3198a 	.word	0x3ba3198a
 800f128:	6dc9c883 	.word	0x6dc9c883
 800f12c:	3fe45f30 	.word	0x3fe45f30
 800f130:	2e000000 	.word	0x2e000000
 800f134:	3ba3198a 	.word	0x3ba3198a
 800f138:	252049c1 	.word	0x252049c1
 800f13c:	397b839a 	.word	0x397b839a
 800f140:	3fe921fb 	.word	0x3fe921fb
 800f144:	4002d97b 	.word	0x4002d97b
 800f148:	3ff921fb 	.word	0x3ff921fb
 800f14c:	413921fb 	.word	0x413921fb
 800f150:	3fe00000 	.word	0x3fe00000
 800f154:	08014960 	.word	0x08014960
 800f158:	7fefffff 	.word	0x7fefffff
 800f15c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800f160:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800f164:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800f168:	4630      	mov	r0, r6
 800f16a:	460f      	mov	r7, r1
 800f16c:	f7f1 fcf4 	bl	8000b58 <__aeabi_d2iz>
 800f170:	f7f1 f9d8 	bl	8000524 <__aeabi_i2d>
 800f174:	4602      	mov	r2, r0
 800f176:	460b      	mov	r3, r1
 800f178:	4630      	mov	r0, r6
 800f17a:	4639      	mov	r1, r7
 800f17c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f180:	f7f1 f882 	bl	8000288 <__aeabi_dsub>
 800f184:	4b22      	ldr	r3, [pc, #136]	@ (800f210 <__ieee754_rem_pio2+0x3f0>)
 800f186:	2200      	movs	r2, #0
 800f188:	f7f1 fa36 	bl	80005f8 <__aeabi_dmul>
 800f18c:	460f      	mov	r7, r1
 800f18e:	4606      	mov	r6, r0
 800f190:	f7f1 fce2 	bl	8000b58 <__aeabi_d2iz>
 800f194:	f7f1 f9c6 	bl	8000524 <__aeabi_i2d>
 800f198:	4602      	mov	r2, r0
 800f19a:	460b      	mov	r3, r1
 800f19c:	4630      	mov	r0, r6
 800f19e:	4639      	mov	r1, r7
 800f1a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f1a4:	f7f1 f870 	bl	8000288 <__aeabi_dsub>
 800f1a8:	4b19      	ldr	r3, [pc, #100]	@ (800f210 <__ieee754_rem_pio2+0x3f0>)
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	f7f1 fa24 	bl	80005f8 <__aeabi_dmul>
 800f1b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800f1b4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800f1b8:	f04f 0803 	mov.w	r8, #3
 800f1bc:	2600      	movs	r6, #0
 800f1be:	2700      	movs	r7, #0
 800f1c0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800f1c4:	4632      	mov	r2, r6
 800f1c6:	463b      	mov	r3, r7
 800f1c8:	46c2      	mov	sl, r8
 800f1ca:	f108 38ff 	add.w	r8, r8, #4294967295
 800f1ce:	f7f1 fc7b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1d2:	2800      	cmp	r0, #0
 800f1d4:	d1f4      	bne.n	800f1c0 <__ieee754_rem_pio2+0x3a0>
 800f1d6:	4b0f      	ldr	r3, [pc, #60]	@ (800f214 <__ieee754_rem_pio2+0x3f4>)
 800f1d8:	9301      	str	r3, [sp, #4]
 800f1da:	2302      	movs	r3, #2
 800f1dc:	9300      	str	r3, [sp, #0]
 800f1de:	462a      	mov	r2, r5
 800f1e0:	4653      	mov	r3, sl
 800f1e2:	4621      	mov	r1, r4
 800f1e4:	a806      	add	r0, sp, #24
 800f1e6:	f000 fb33 	bl	800f850 <__kernel_rem_pio2>
 800f1ea:	9b04      	ldr	r3, [sp, #16]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	4605      	mov	r5, r0
 800f1f0:	f6bf ae53 	bge.w	800ee9a <__ieee754_rem_pio2+0x7a>
 800f1f4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800f1f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f1fc:	e9c4 2300 	strd	r2, r3, [r4]
 800f200:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800f204:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f208:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f20c:	e740      	b.n	800f090 <__ieee754_rem_pio2+0x270>
 800f20e:	bf00      	nop
 800f210:	41700000 	.word	0x41700000
 800f214:	080149e0 	.word	0x080149e0

0800f218 <fabs>:
 800f218:	ec51 0b10 	vmov	r0, r1, d0
 800f21c:	4602      	mov	r2, r0
 800f21e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f222:	ec43 2b10 	vmov	d0, r2, r3
 800f226:	4770      	bx	lr

0800f228 <__ieee754_asinf>:
 800f228:	b538      	push	{r3, r4, r5, lr}
 800f22a:	ee10 5a10 	vmov	r5, s0
 800f22e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800f232:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800f236:	ed2d 8b04 	vpush	{d8-d9}
 800f23a:	d10c      	bne.n	800f256 <__ieee754_asinf+0x2e>
 800f23c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f3b0 <__ieee754_asinf+0x188>
 800f240:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800f3b4 <__ieee754_asinf+0x18c>
 800f244:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f248:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f24c:	eeb0 0a67 	vmov.f32	s0, s15
 800f250:	ecbd 8b04 	vpop	{d8-d9}
 800f254:	bd38      	pop	{r3, r4, r5, pc}
 800f256:	d904      	bls.n	800f262 <__ieee754_asinf+0x3a>
 800f258:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f25c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f260:	e7f6      	b.n	800f250 <__ieee754_asinf+0x28>
 800f262:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800f266:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800f26a:	d20b      	bcs.n	800f284 <__ieee754_asinf+0x5c>
 800f26c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800f270:	d252      	bcs.n	800f318 <__ieee754_asinf+0xf0>
 800f272:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800f3b8 <__ieee754_asinf+0x190>
 800f276:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f27a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800f27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f282:	dce5      	bgt.n	800f250 <__ieee754_asinf+0x28>
 800f284:	f7fe fe0e 	bl	800dea4 <fabsf>
 800f288:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800f28c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f290:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f294:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800f3bc <__ieee754_asinf+0x194>
 800f298:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800f3c0 <__ieee754_asinf+0x198>
 800f29c:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 800f3c4 <__ieee754_asinf+0x19c>
 800f2a0:	eea8 7a27 	vfma.f32	s14, s16, s15
 800f2a4:	eddf 7a48 	vldr	s15, [pc, #288]	@ 800f3c8 <__ieee754_asinf+0x1a0>
 800f2a8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f2ac:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800f3cc <__ieee754_asinf+0x1a4>
 800f2b0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f2b4:	eddf 7a46 	vldr	s15, [pc, #280]	@ 800f3d0 <__ieee754_asinf+0x1a8>
 800f2b8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f2bc:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800f3d4 <__ieee754_asinf+0x1ac>
 800f2c0:	eea7 9a88 	vfma.f32	s18, s15, s16
 800f2c4:	eddf 7a44 	vldr	s15, [pc, #272]	@ 800f3d8 <__ieee754_asinf+0x1b0>
 800f2c8:	eee8 7a07 	vfma.f32	s15, s16, s14
 800f2cc:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800f3dc <__ieee754_asinf+0x1b4>
 800f2d0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f2d4:	eddf 7a42 	vldr	s15, [pc, #264]	@ 800f3e0 <__ieee754_asinf+0x1b8>
 800f2d8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f2dc:	eeb0 0a48 	vmov.f32	s0, s16
 800f2e0:	eee7 8a88 	vfma.f32	s17, s15, s16
 800f2e4:	f000 fab0 	bl	800f848 <__ieee754_sqrtf>
 800f2e8:	4b3e      	ldr	r3, [pc, #248]	@ (800f3e4 <__ieee754_asinf+0x1bc>)
 800f2ea:	ee29 9a08 	vmul.f32	s18, s18, s16
 800f2ee:	429c      	cmp	r4, r3
 800f2f0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800f2f4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800f2f8:	d93d      	bls.n	800f376 <__ieee754_asinf+0x14e>
 800f2fa:	eea0 0a06 	vfma.f32	s0, s0, s12
 800f2fe:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 800f3e8 <__ieee754_asinf+0x1c0>
 800f302:	eee0 7a26 	vfma.f32	s15, s0, s13
 800f306:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800f3b4 <__ieee754_asinf+0x18c>
 800f30a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f30e:	2d00      	cmp	r5, #0
 800f310:	bfd8      	it	le
 800f312:	eeb1 0a40 	vnegle.f32	s0, s0
 800f316:	e79b      	b.n	800f250 <__ieee754_asinf+0x28>
 800f318:	ee60 7a00 	vmul.f32	s15, s0, s0
 800f31c:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800f3c0 <__ieee754_asinf+0x198>
 800f320:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800f3bc <__ieee754_asinf+0x194>
 800f324:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 800f3d4 <__ieee754_asinf+0x1ac>
 800f328:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f32c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800f3c8 <__ieee754_asinf+0x1a0>
 800f330:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f334:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800f3cc <__ieee754_asinf+0x1a4>
 800f338:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f33c:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800f3d0 <__ieee754_asinf+0x1a8>
 800f340:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f344:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800f3c4 <__ieee754_asinf+0x19c>
 800f348:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f34c:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800f3d8 <__ieee754_asinf+0x1b0>
 800f350:	eee7 6a86 	vfma.f32	s13, s15, s12
 800f354:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 800f3dc <__ieee754_asinf+0x1b4>
 800f358:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800f35c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800f3e0 <__ieee754_asinf+0x1b8>
 800f360:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f364:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f368:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800f36c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800f370:	eea0 0a27 	vfma.f32	s0, s0, s15
 800f374:	e76c      	b.n	800f250 <__ieee754_asinf+0x28>
 800f376:	ee10 3a10 	vmov	r3, s0
 800f37a:	f36f 030b 	bfc	r3, #0, #12
 800f37e:	ee07 3a10 	vmov	s14, r3
 800f382:	eea7 8a47 	vfms.f32	s16, s14, s14
 800f386:	ee70 5a00 	vadd.f32	s11, s0, s0
 800f38a:	ee30 0a07 	vadd.f32	s0, s0, s14
 800f38e:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800f3b0 <__ieee754_asinf+0x188>
 800f392:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800f396:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800f3ec <__ieee754_asinf+0x1c4>
 800f39a:	eee5 7a66 	vfms.f32	s15, s10, s13
 800f39e:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800f3a2:	eeb0 6a40 	vmov.f32	s12, s0
 800f3a6:	eea7 6a66 	vfms.f32	s12, s14, s13
 800f3aa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f3ae:	e7ac      	b.n	800f30a <__ieee754_asinf+0xe2>
 800f3b0:	b33bbd2e 	.word	0xb33bbd2e
 800f3b4:	3fc90fdb 	.word	0x3fc90fdb
 800f3b8:	7149f2ca 	.word	0x7149f2ca
 800f3bc:	3a4f7f04 	.word	0x3a4f7f04
 800f3c0:	3811ef08 	.word	0x3811ef08
 800f3c4:	3e2aaaab 	.word	0x3e2aaaab
 800f3c8:	bd241146 	.word	0xbd241146
 800f3cc:	3e4e0aa8 	.word	0x3e4e0aa8
 800f3d0:	bea6b090 	.word	0xbea6b090
 800f3d4:	3d9dc62e 	.word	0x3d9dc62e
 800f3d8:	bf303361 	.word	0xbf303361
 800f3dc:	4001572d 	.word	0x4001572d
 800f3e0:	c019d139 	.word	0xc019d139
 800f3e4:	3f799999 	.word	0x3f799999
 800f3e8:	333bbd2e 	.word	0x333bbd2e
 800f3ec:	3f490fdb 	.word	0x3f490fdb

0800f3f0 <__ieee754_atan2f>:
 800f3f0:	ee10 2a90 	vmov	r2, s1
 800f3f4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800f3f8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f3fc:	b510      	push	{r4, lr}
 800f3fe:	eef0 7a40 	vmov.f32	s15, s0
 800f402:	d806      	bhi.n	800f412 <__ieee754_atan2f+0x22>
 800f404:	ee10 0a10 	vmov	r0, s0
 800f408:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800f40c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f410:	d904      	bls.n	800f41c <__ieee754_atan2f+0x2c>
 800f412:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f416:	eeb0 0a67 	vmov.f32	s0, s15
 800f41a:	bd10      	pop	{r4, pc}
 800f41c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800f420:	d103      	bne.n	800f42a <__ieee754_atan2f+0x3a>
 800f422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f426:	f000 b883 	b.w	800f530 <atanf>
 800f42a:	1794      	asrs	r4, r2, #30
 800f42c:	f004 0402 	and.w	r4, r4, #2
 800f430:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f434:	b943      	cbnz	r3, 800f448 <__ieee754_atan2f+0x58>
 800f436:	2c02      	cmp	r4, #2
 800f438:	d05e      	beq.n	800f4f8 <__ieee754_atan2f+0x108>
 800f43a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800f50c <__ieee754_atan2f+0x11c>
 800f43e:	2c03      	cmp	r4, #3
 800f440:	bf08      	it	eq
 800f442:	eef0 7a47 	vmoveq.f32	s15, s14
 800f446:	e7e6      	b.n	800f416 <__ieee754_atan2f+0x26>
 800f448:	b941      	cbnz	r1, 800f45c <__ieee754_atan2f+0x6c>
 800f44a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800f510 <__ieee754_atan2f+0x120>
 800f44e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800f514 <__ieee754_atan2f+0x124>
 800f452:	2800      	cmp	r0, #0
 800f454:	bfa8      	it	ge
 800f456:	eef0 7a47 	vmovge.f32	s15, s14
 800f45a:	e7dc      	b.n	800f416 <__ieee754_atan2f+0x26>
 800f45c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f460:	d110      	bne.n	800f484 <__ieee754_atan2f+0x94>
 800f462:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f466:	f104 34ff 	add.w	r4, r4, #4294967295
 800f46a:	d107      	bne.n	800f47c <__ieee754_atan2f+0x8c>
 800f46c:	2c02      	cmp	r4, #2
 800f46e:	d846      	bhi.n	800f4fe <__ieee754_atan2f+0x10e>
 800f470:	4b29      	ldr	r3, [pc, #164]	@ (800f518 <__ieee754_atan2f+0x128>)
 800f472:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f476:	edd3 7a00 	vldr	s15, [r3]
 800f47a:	e7cc      	b.n	800f416 <__ieee754_atan2f+0x26>
 800f47c:	2c02      	cmp	r4, #2
 800f47e:	d841      	bhi.n	800f504 <__ieee754_atan2f+0x114>
 800f480:	4b26      	ldr	r3, [pc, #152]	@ (800f51c <__ieee754_atan2f+0x12c>)
 800f482:	e7f6      	b.n	800f472 <__ieee754_atan2f+0x82>
 800f484:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f488:	d0df      	beq.n	800f44a <__ieee754_atan2f+0x5a>
 800f48a:	1a5b      	subs	r3, r3, r1
 800f48c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800f490:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800f494:	da1a      	bge.n	800f4cc <__ieee754_atan2f+0xdc>
 800f496:	2a00      	cmp	r2, #0
 800f498:	da01      	bge.n	800f49e <__ieee754_atan2f+0xae>
 800f49a:	313c      	adds	r1, #60	@ 0x3c
 800f49c:	db19      	blt.n	800f4d2 <__ieee754_atan2f+0xe2>
 800f49e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f4a2:	f7fe fcff 	bl	800dea4 <fabsf>
 800f4a6:	f000 f843 	bl	800f530 <atanf>
 800f4aa:	eef0 7a40 	vmov.f32	s15, s0
 800f4ae:	2c01      	cmp	r4, #1
 800f4b0:	d012      	beq.n	800f4d8 <__ieee754_atan2f+0xe8>
 800f4b2:	2c02      	cmp	r4, #2
 800f4b4:	d017      	beq.n	800f4e6 <__ieee754_atan2f+0xf6>
 800f4b6:	2c00      	cmp	r4, #0
 800f4b8:	d0ad      	beq.n	800f416 <__ieee754_atan2f+0x26>
 800f4ba:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800f520 <__ieee754_atan2f+0x130>
 800f4be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f4c2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800f524 <__ieee754_atan2f+0x134>
 800f4c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4ca:	e7a4      	b.n	800f416 <__ieee754_atan2f+0x26>
 800f4cc:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800f514 <__ieee754_atan2f+0x124>
 800f4d0:	e7ed      	b.n	800f4ae <__ieee754_atan2f+0xbe>
 800f4d2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800f528 <__ieee754_atan2f+0x138>
 800f4d6:	e7ea      	b.n	800f4ae <__ieee754_atan2f+0xbe>
 800f4d8:	ee17 3a90 	vmov	r3, s15
 800f4dc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f4e0:	ee07 3a90 	vmov	s15, r3
 800f4e4:	e797      	b.n	800f416 <__ieee754_atan2f+0x26>
 800f4e6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800f520 <__ieee754_atan2f+0x130>
 800f4ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f4ee:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800f524 <__ieee754_atan2f+0x134>
 800f4f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4f6:	e78e      	b.n	800f416 <__ieee754_atan2f+0x26>
 800f4f8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800f524 <__ieee754_atan2f+0x134>
 800f4fc:	e78b      	b.n	800f416 <__ieee754_atan2f+0x26>
 800f4fe:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800f52c <__ieee754_atan2f+0x13c>
 800f502:	e788      	b.n	800f416 <__ieee754_atan2f+0x26>
 800f504:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800f528 <__ieee754_atan2f+0x138>
 800f508:	e785      	b.n	800f416 <__ieee754_atan2f+0x26>
 800f50a:	bf00      	nop
 800f50c:	c0490fdb 	.word	0xc0490fdb
 800f510:	bfc90fdb 	.word	0xbfc90fdb
 800f514:	3fc90fdb 	.word	0x3fc90fdb
 800f518:	08014af4 	.word	0x08014af4
 800f51c:	08014ae8 	.word	0x08014ae8
 800f520:	33bbbd2e 	.word	0x33bbbd2e
 800f524:	40490fdb 	.word	0x40490fdb
 800f528:	00000000 	.word	0x00000000
 800f52c:	3f490fdb 	.word	0x3f490fdb

0800f530 <atanf>:
 800f530:	b538      	push	{r3, r4, r5, lr}
 800f532:	ee10 5a10 	vmov	r5, s0
 800f536:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800f53a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800f53e:	eef0 7a40 	vmov.f32	s15, s0
 800f542:	d310      	bcc.n	800f566 <atanf+0x36>
 800f544:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800f548:	d904      	bls.n	800f554 <atanf+0x24>
 800f54a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800f54e:	eeb0 0a67 	vmov.f32	s0, s15
 800f552:	bd38      	pop	{r3, r4, r5, pc}
 800f554:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800f68c <atanf+0x15c>
 800f558:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800f690 <atanf+0x160>
 800f55c:	2d00      	cmp	r5, #0
 800f55e:	bfc8      	it	gt
 800f560:	eef0 7a47 	vmovgt.f32	s15, s14
 800f564:	e7f3      	b.n	800f54e <atanf+0x1e>
 800f566:	4b4b      	ldr	r3, [pc, #300]	@ (800f694 <atanf+0x164>)
 800f568:	429c      	cmp	r4, r3
 800f56a:	d810      	bhi.n	800f58e <atanf+0x5e>
 800f56c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800f570:	d20a      	bcs.n	800f588 <atanf+0x58>
 800f572:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800f698 <atanf+0x168>
 800f576:	ee30 7a07 	vadd.f32	s14, s0, s14
 800f57a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f57e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f586:	dce2      	bgt.n	800f54e <atanf+0x1e>
 800f588:	f04f 33ff 	mov.w	r3, #4294967295
 800f58c:	e013      	b.n	800f5b6 <atanf+0x86>
 800f58e:	f7fe fc89 	bl	800dea4 <fabsf>
 800f592:	4b42      	ldr	r3, [pc, #264]	@ (800f69c <atanf+0x16c>)
 800f594:	429c      	cmp	r4, r3
 800f596:	d84f      	bhi.n	800f638 <atanf+0x108>
 800f598:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800f59c:	429c      	cmp	r4, r3
 800f59e:	d841      	bhi.n	800f624 <atanf+0xf4>
 800f5a0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800f5a4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800f5a8:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f5b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f5b6:	1c5a      	adds	r2, r3, #1
 800f5b8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f5bc:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800f6a0 <atanf+0x170>
 800f5c0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800f6a4 <atanf+0x174>
 800f5c4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800f6a8 <atanf+0x178>
 800f5c8:	ee66 6a06 	vmul.f32	s13, s12, s12
 800f5cc:	eee6 5a87 	vfma.f32	s11, s13, s14
 800f5d0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800f6ac <atanf+0x17c>
 800f5d4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f5d8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800f6b0 <atanf+0x180>
 800f5dc:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f5e0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800f6b4 <atanf+0x184>
 800f5e4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f5e8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800f6b8 <atanf+0x188>
 800f5ec:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f5f0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800f6bc <atanf+0x18c>
 800f5f4:	eea6 5a87 	vfma.f32	s10, s13, s14
 800f5f8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800f6c0 <atanf+0x190>
 800f5fc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f600:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800f6c4 <atanf+0x194>
 800f604:	eea7 5a26 	vfma.f32	s10, s14, s13
 800f608:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800f6c8 <atanf+0x198>
 800f60c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f610:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f614:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f618:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f61c:	d121      	bne.n	800f662 <atanf+0x132>
 800f61e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f622:	e794      	b.n	800f54e <atanf+0x1e>
 800f624:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f628:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f62c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f630:	2301      	movs	r3, #1
 800f632:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f636:	e7be      	b.n	800f5b6 <atanf+0x86>
 800f638:	4b24      	ldr	r3, [pc, #144]	@ (800f6cc <atanf+0x19c>)
 800f63a:	429c      	cmp	r4, r3
 800f63c:	d80b      	bhi.n	800f656 <atanf+0x126>
 800f63e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800f642:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f646:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f64a:	2302      	movs	r3, #2
 800f64c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f654:	e7af      	b.n	800f5b6 <atanf+0x86>
 800f656:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800f65a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f65e:	2303      	movs	r3, #3
 800f660:	e7a9      	b.n	800f5b6 <atanf+0x86>
 800f662:	4a1b      	ldr	r2, [pc, #108]	@ (800f6d0 <atanf+0x1a0>)
 800f664:	491b      	ldr	r1, [pc, #108]	@ (800f6d4 <atanf+0x1a4>)
 800f666:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f66a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f66e:	edd3 6a00 	vldr	s13, [r3]
 800f672:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f676:	2d00      	cmp	r5, #0
 800f678:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f67c:	edd2 7a00 	vldr	s15, [r2]
 800f680:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f684:	bfb8      	it	lt
 800f686:	eef1 7a67 	vneglt.f32	s15, s15
 800f68a:	e760      	b.n	800f54e <atanf+0x1e>
 800f68c:	bfc90fdb 	.word	0xbfc90fdb
 800f690:	3fc90fdb 	.word	0x3fc90fdb
 800f694:	3edfffff 	.word	0x3edfffff
 800f698:	7149f2ca 	.word	0x7149f2ca
 800f69c:	3f97ffff 	.word	0x3f97ffff
 800f6a0:	3c8569d7 	.word	0x3c8569d7
 800f6a4:	3d4bda59 	.word	0x3d4bda59
 800f6a8:	bd6ef16b 	.word	0xbd6ef16b
 800f6ac:	3d886b35 	.word	0x3d886b35
 800f6b0:	3dba2e6e 	.word	0x3dba2e6e
 800f6b4:	3e124925 	.word	0x3e124925
 800f6b8:	3eaaaaab 	.word	0x3eaaaaab
 800f6bc:	bd15a221 	.word	0xbd15a221
 800f6c0:	bd9d8795 	.word	0xbd9d8795
 800f6c4:	bde38e38 	.word	0xbde38e38
 800f6c8:	be4ccccd 	.word	0xbe4ccccd
 800f6cc:	401bffff 	.word	0x401bffff
 800f6d0:	08014b10 	.word	0x08014b10
 800f6d4:	08014b00 	.word	0x08014b00

0800f6d8 <scalbn>:
 800f6d8:	b570      	push	{r4, r5, r6, lr}
 800f6da:	ec55 4b10 	vmov	r4, r5, d0
 800f6de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f6e2:	4606      	mov	r6, r0
 800f6e4:	462b      	mov	r3, r5
 800f6e6:	b991      	cbnz	r1, 800f70e <scalbn+0x36>
 800f6e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f6ec:	4323      	orrs	r3, r4
 800f6ee:	d03b      	beq.n	800f768 <scalbn+0x90>
 800f6f0:	4b33      	ldr	r3, [pc, #204]	@ (800f7c0 <scalbn+0xe8>)
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	4629      	mov	r1, r5
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	f7f0 ff7e 	bl	80005f8 <__aeabi_dmul>
 800f6fc:	4b31      	ldr	r3, [pc, #196]	@ (800f7c4 <scalbn+0xec>)
 800f6fe:	429e      	cmp	r6, r3
 800f700:	4604      	mov	r4, r0
 800f702:	460d      	mov	r5, r1
 800f704:	da0f      	bge.n	800f726 <scalbn+0x4e>
 800f706:	a326      	add	r3, pc, #152	@ (adr r3, 800f7a0 <scalbn+0xc8>)
 800f708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70c:	e01e      	b.n	800f74c <scalbn+0x74>
 800f70e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f712:	4291      	cmp	r1, r2
 800f714:	d10b      	bne.n	800f72e <scalbn+0x56>
 800f716:	4622      	mov	r2, r4
 800f718:	4620      	mov	r0, r4
 800f71a:	4629      	mov	r1, r5
 800f71c:	f7f0 fdb6 	bl	800028c <__adddf3>
 800f720:	4604      	mov	r4, r0
 800f722:	460d      	mov	r5, r1
 800f724:	e020      	b.n	800f768 <scalbn+0x90>
 800f726:	460b      	mov	r3, r1
 800f728:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f72c:	3936      	subs	r1, #54	@ 0x36
 800f72e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f732:	4296      	cmp	r6, r2
 800f734:	dd0d      	ble.n	800f752 <scalbn+0x7a>
 800f736:	2d00      	cmp	r5, #0
 800f738:	a11b      	add	r1, pc, #108	@ (adr r1, 800f7a8 <scalbn+0xd0>)
 800f73a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f73e:	da02      	bge.n	800f746 <scalbn+0x6e>
 800f740:	a11b      	add	r1, pc, #108	@ (adr r1, 800f7b0 <scalbn+0xd8>)
 800f742:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f746:	a318      	add	r3, pc, #96	@ (adr r3, 800f7a8 <scalbn+0xd0>)
 800f748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74c:	f7f0 ff54 	bl	80005f8 <__aeabi_dmul>
 800f750:	e7e6      	b.n	800f720 <scalbn+0x48>
 800f752:	1872      	adds	r2, r6, r1
 800f754:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f758:	428a      	cmp	r2, r1
 800f75a:	dcec      	bgt.n	800f736 <scalbn+0x5e>
 800f75c:	2a00      	cmp	r2, #0
 800f75e:	dd06      	ble.n	800f76e <scalbn+0x96>
 800f760:	f36f 531e 	bfc	r3, #20, #11
 800f764:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f768:	ec45 4b10 	vmov	d0, r4, r5
 800f76c:	bd70      	pop	{r4, r5, r6, pc}
 800f76e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f772:	da08      	bge.n	800f786 <scalbn+0xae>
 800f774:	2d00      	cmp	r5, #0
 800f776:	a10a      	add	r1, pc, #40	@ (adr r1, 800f7a0 <scalbn+0xc8>)
 800f778:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f77c:	dac3      	bge.n	800f706 <scalbn+0x2e>
 800f77e:	a10e      	add	r1, pc, #56	@ (adr r1, 800f7b8 <scalbn+0xe0>)
 800f780:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f784:	e7bf      	b.n	800f706 <scalbn+0x2e>
 800f786:	3236      	adds	r2, #54	@ 0x36
 800f788:	f36f 531e 	bfc	r3, #20, #11
 800f78c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f790:	4620      	mov	r0, r4
 800f792:	4b0d      	ldr	r3, [pc, #52]	@ (800f7c8 <scalbn+0xf0>)
 800f794:	4629      	mov	r1, r5
 800f796:	2200      	movs	r2, #0
 800f798:	e7d8      	b.n	800f74c <scalbn+0x74>
 800f79a:	bf00      	nop
 800f79c:	f3af 8000 	nop.w
 800f7a0:	c2f8f359 	.word	0xc2f8f359
 800f7a4:	01a56e1f 	.word	0x01a56e1f
 800f7a8:	8800759c 	.word	0x8800759c
 800f7ac:	7e37e43c 	.word	0x7e37e43c
 800f7b0:	8800759c 	.word	0x8800759c
 800f7b4:	fe37e43c 	.word	0xfe37e43c
 800f7b8:	c2f8f359 	.word	0xc2f8f359
 800f7bc:	81a56e1f 	.word	0x81a56e1f
 800f7c0:	43500000 	.word	0x43500000
 800f7c4:	ffff3cb0 	.word	0xffff3cb0
 800f7c8:	3c900000 	.word	0x3c900000

0800f7cc <with_errno>:
 800f7cc:	b510      	push	{r4, lr}
 800f7ce:	ed2d 8b02 	vpush	{d8}
 800f7d2:	eeb0 8a40 	vmov.f32	s16, s0
 800f7d6:	eef0 8a60 	vmov.f32	s17, s1
 800f7da:	4604      	mov	r4, r0
 800f7dc:	f001 fcb0 	bl	8011140 <__errno>
 800f7e0:	eeb0 0a48 	vmov.f32	s0, s16
 800f7e4:	eef0 0a68 	vmov.f32	s1, s17
 800f7e8:	ecbd 8b02 	vpop	{d8}
 800f7ec:	6004      	str	r4, [r0, #0]
 800f7ee:	bd10      	pop	{r4, pc}

0800f7f0 <xflow>:
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	b507      	push	{r0, r1, r2, lr}
 800f7f4:	ec51 0b10 	vmov	r0, r1, d0
 800f7f8:	b183      	cbz	r3, 800f81c <xflow+0x2c>
 800f7fa:	4602      	mov	r2, r0
 800f7fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f800:	e9cd 2300 	strd	r2, r3, [sp]
 800f804:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f808:	f7f0 fef6 	bl	80005f8 <__aeabi_dmul>
 800f80c:	ec41 0b10 	vmov	d0, r0, r1
 800f810:	2022      	movs	r0, #34	@ 0x22
 800f812:	b003      	add	sp, #12
 800f814:	f85d eb04 	ldr.w	lr, [sp], #4
 800f818:	f7ff bfd8 	b.w	800f7cc <with_errno>
 800f81c:	4602      	mov	r2, r0
 800f81e:	460b      	mov	r3, r1
 800f820:	e7ee      	b.n	800f800 <xflow+0x10>
 800f822:	0000      	movs	r0, r0
 800f824:	0000      	movs	r0, r0
	...

0800f828 <__math_uflow>:
 800f828:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f830 <__math_uflow+0x8>
 800f82c:	f7ff bfe0 	b.w	800f7f0 <xflow>
 800f830:	00000000 	.word	0x00000000
 800f834:	10000000 	.word	0x10000000

0800f838 <__math_oflow>:
 800f838:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f840 <__math_oflow+0x8>
 800f83c:	f7ff bfd8 	b.w	800f7f0 <xflow>
 800f840:	00000000 	.word	0x00000000
 800f844:	70000000 	.word	0x70000000

0800f848 <__ieee754_sqrtf>:
 800f848:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f84c:	4770      	bx	lr
	...

0800f850 <__kernel_rem_pio2>:
 800f850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f854:	ed2d 8b02 	vpush	{d8}
 800f858:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800f85c:	f112 0f14 	cmn.w	r2, #20
 800f860:	9306      	str	r3, [sp, #24]
 800f862:	9104      	str	r1, [sp, #16]
 800f864:	4bc2      	ldr	r3, [pc, #776]	@ (800fb70 <__kernel_rem_pio2+0x320>)
 800f866:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800f868:	9008      	str	r0, [sp, #32]
 800f86a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f86e:	9300      	str	r3, [sp, #0]
 800f870:	9b06      	ldr	r3, [sp, #24]
 800f872:	f103 33ff 	add.w	r3, r3, #4294967295
 800f876:	bfa8      	it	ge
 800f878:	1ed4      	subge	r4, r2, #3
 800f87a:	9305      	str	r3, [sp, #20]
 800f87c:	bfb2      	itee	lt
 800f87e:	2400      	movlt	r4, #0
 800f880:	2318      	movge	r3, #24
 800f882:	fb94 f4f3 	sdivge	r4, r4, r3
 800f886:	f06f 0317 	mvn.w	r3, #23
 800f88a:	fb04 3303 	mla	r3, r4, r3, r3
 800f88e:	eb03 0b02 	add.w	fp, r3, r2
 800f892:	9b00      	ldr	r3, [sp, #0]
 800f894:	9a05      	ldr	r2, [sp, #20]
 800f896:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800fb60 <__kernel_rem_pio2+0x310>
 800f89a:	eb03 0802 	add.w	r8, r3, r2
 800f89e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f8a0:	1aa7      	subs	r7, r4, r2
 800f8a2:	ae20      	add	r6, sp, #128	@ 0x80
 800f8a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f8a8:	2500      	movs	r5, #0
 800f8aa:	4545      	cmp	r5, r8
 800f8ac:	dd12      	ble.n	800f8d4 <__kernel_rem_pio2+0x84>
 800f8ae:	9b06      	ldr	r3, [sp, #24]
 800f8b0:	aa20      	add	r2, sp, #128	@ 0x80
 800f8b2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f8b6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800f8ba:	2700      	movs	r7, #0
 800f8bc:	9b00      	ldr	r3, [sp, #0]
 800f8be:	429f      	cmp	r7, r3
 800f8c0:	dc2e      	bgt.n	800f920 <__kernel_rem_pio2+0xd0>
 800f8c2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800fb60 <__kernel_rem_pio2+0x310>
 800f8c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f8ca:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f8ce:	46a8      	mov	r8, r5
 800f8d0:	2600      	movs	r6, #0
 800f8d2:	e01b      	b.n	800f90c <__kernel_rem_pio2+0xbc>
 800f8d4:	42ef      	cmn	r7, r5
 800f8d6:	d407      	bmi.n	800f8e8 <__kernel_rem_pio2+0x98>
 800f8d8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f8dc:	f7f0 fe22 	bl	8000524 <__aeabi_i2d>
 800f8e0:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f8e4:	3501      	adds	r5, #1
 800f8e6:	e7e0      	b.n	800f8aa <__kernel_rem_pio2+0x5a>
 800f8e8:	ec51 0b18 	vmov	r0, r1, d8
 800f8ec:	e7f8      	b.n	800f8e0 <__kernel_rem_pio2+0x90>
 800f8ee:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800f8f2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f8f6:	f7f0 fe7f 	bl	80005f8 <__aeabi_dmul>
 800f8fa:	4602      	mov	r2, r0
 800f8fc:	460b      	mov	r3, r1
 800f8fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f902:	f7f0 fcc3 	bl	800028c <__adddf3>
 800f906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f90a:	3601      	adds	r6, #1
 800f90c:	9b05      	ldr	r3, [sp, #20]
 800f90e:	429e      	cmp	r6, r3
 800f910:	dded      	ble.n	800f8ee <__kernel_rem_pio2+0x9e>
 800f912:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f916:	3701      	adds	r7, #1
 800f918:	ecaa 7b02 	vstmia	sl!, {d7}
 800f91c:	3508      	adds	r5, #8
 800f91e:	e7cd      	b.n	800f8bc <__kernel_rem_pio2+0x6c>
 800f920:	9b00      	ldr	r3, [sp, #0]
 800f922:	f8dd 8000 	ldr.w	r8, [sp]
 800f926:	aa0c      	add	r2, sp, #48	@ 0x30
 800f928:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f92c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f92e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f930:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f934:	9309      	str	r3, [sp, #36]	@ 0x24
 800f936:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800f93a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f93c:	ab98      	add	r3, sp, #608	@ 0x260
 800f93e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f942:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800f946:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f94a:	ac0c      	add	r4, sp, #48	@ 0x30
 800f94c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f94e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800f952:	46a1      	mov	r9, r4
 800f954:	46c2      	mov	sl, r8
 800f956:	f1ba 0f00 	cmp.w	sl, #0
 800f95a:	dc77      	bgt.n	800fa4c <__kernel_rem_pio2+0x1fc>
 800f95c:	4658      	mov	r0, fp
 800f95e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f962:	f7ff feb9 	bl	800f6d8 <scalbn>
 800f966:	ec57 6b10 	vmov	r6, r7, d0
 800f96a:	2200      	movs	r2, #0
 800f96c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800f970:	4630      	mov	r0, r6
 800f972:	4639      	mov	r1, r7
 800f974:	f7f0 fe40 	bl	80005f8 <__aeabi_dmul>
 800f978:	ec41 0b10 	vmov	d0, r0, r1
 800f97c:	f000 fab8 	bl	800fef0 <floor>
 800f980:	4b7c      	ldr	r3, [pc, #496]	@ (800fb74 <__kernel_rem_pio2+0x324>)
 800f982:	ec51 0b10 	vmov	r0, r1, d0
 800f986:	2200      	movs	r2, #0
 800f988:	f7f0 fe36 	bl	80005f8 <__aeabi_dmul>
 800f98c:	4602      	mov	r2, r0
 800f98e:	460b      	mov	r3, r1
 800f990:	4630      	mov	r0, r6
 800f992:	4639      	mov	r1, r7
 800f994:	f7f0 fc78 	bl	8000288 <__aeabi_dsub>
 800f998:	460f      	mov	r7, r1
 800f99a:	4606      	mov	r6, r0
 800f99c:	f7f1 f8dc 	bl	8000b58 <__aeabi_d2iz>
 800f9a0:	9002      	str	r0, [sp, #8]
 800f9a2:	f7f0 fdbf 	bl	8000524 <__aeabi_i2d>
 800f9a6:	4602      	mov	r2, r0
 800f9a8:	460b      	mov	r3, r1
 800f9aa:	4630      	mov	r0, r6
 800f9ac:	4639      	mov	r1, r7
 800f9ae:	f7f0 fc6b 	bl	8000288 <__aeabi_dsub>
 800f9b2:	f1bb 0f00 	cmp.w	fp, #0
 800f9b6:	4606      	mov	r6, r0
 800f9b8:	460f      	mov	r7, r1
 800f9ba:	dd6c      	ble.n	800fa96 <__kernel_rem_pio2+0x246>
 800f9bc:	f108 31ff 	add.w	r1, r8, #4294967295
 800f9c0:	ab0c      	add	r3, sp, #48	@ 0x30
 800f9c2:	9d02      	ldr	r5, [sp, #8]
 800f9c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f9c8:	f1cb 0018 	rsb	r0, fp, #24
 800f9cc:	fa43 f200 	asr.w	r2, r3, r0
 800f9d0:	4415      	add	r5, r2
 800f9d2:	4082      	lsls	r2, r0
 800f9d4:	1a9b      	subs	r3, r3, r2
 800f9d6:	aa0c      	add	r2, sp, #48	@ 0x30
 800f9d8:	9502      	str	r5, [sp, #8]
 800f9da:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f9de:	f1cb 0217 	rsb	r2, fp, #23
 800f9e2:	fa43 f902 	asr.w	r9, r3, r2
 800f9e6:	f1b9 0f00 	cmp.w	r9, #0
 800f9ea:	dd64      	ble.n	800fab6 <__kernel_rem_pio2+0x266>
 800f9ec:	9b02      	ldr	r3, [sp, #8]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	3301      	adds	r3, #1
 800f9f2:	9302      	str	r3, [sp, #8]
 800f9f4:	4615      	mov	r5, r2
 800f9f6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800f9fa:	4590      	cmp	r8, r2
 800f9fc:	f300 80a1 	bgt.w	800fb42 <__kernel_rem_pio2+0x2f2>
 800fa00:	f1bb 0f00 	cmp.w	fp, #0
 800fa04:	dd07      	ble.n	800fa16 <__kernel_rem_pio2+0x1c6>
 800fa06:	f1bb 0f01 	cmp.w	fp, #1
 800fa0a:	f000 80c1 	beq.w	800fb90 <__kernel_rem_pio2+0x340>
 800fa0e:	f1bb 0f02 	cmp.w	fp, #2
 800fa12:	f000 80c8 	beq.w	800fba6 <__kernel_rem_pio2+0x356>
 800fa16:	f1b9 0f02 	cmp.w	r9, #2
 800fa1a:	d14c      	bne.n	800fab6 <__kernel_rem_pio2+0x266>
 800fa1c:	4632      	mov	r2, r6
 800fa1e:	463b      	mov	r3, r7
 800fa20:	4955      	ldr	r1, [pc, #340]	@ (800fb78 <__kernel_rem_pio2+0x328>)
 800fa22:	2000      	movs	r0, #0
 800fa24:	f7f0 fc30 	bl	8000288 <__aeabi_dsub>
 800fa28:	4606      	mov	r6, r0
 800fa2a:	460f      	mov	r7, r1
 800fa2c:	2d00      	cmp	r5, #0
 800fa2e:	d042      	beq.n	800fab6 <__kernel_rem_pio2+0x266>
 800fa30:	4658      	mov	r0, fp
 800fa32:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800fb68 <__kernel_rem_pio2+0x318>
 800fa36:	f7ff fe4f 	bl	800f6d8 <scalbn>
 800fa3a:	4630      	mov	r0, r6
 800fa3c:	4639      	mov	r1, r7
 800fa3e:	ec53 2b10 	vmov	r2, r3, d0
 800fa42:	f7f0 fc21 	bl	8000288 <__aeabi_dsub>
 800fa46:	4606      	mov	r6, r0
 800fa48:	460f      	mov	r7, r1
 800fa4a:	e034      	b.n	800fab6 <__kernel_rem_pio2+0x266>
 800fa4c:	4b4b      	ldr	r3, [pc, #300]	@ (800fb7c <__kernel_rem_pio2+0x32c>)
 800fa4e:	2200      	movs	r2, #0
 800fa50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa54:	f7f0 fdd0 	bl	80005f8 <__aeabi_dmul>
 800fa58:	f7f1 f87e 	bl	8000b58 <__aeabi_d2iz>
 800fa5c:	f7f0 fd62 	bl	8000524 <__aeabi_i2d>
 800fa60:	4b47      	ldr	r3, [pc, #284]	@ (800fb80 <__kernel_rem_pio2+0x330>)
 800fa62:	2200      	movs	r2, #0
 800fa64:	4606      	mov	r6, r0
 800fa66:	460f      	mov	r7, r1
 800fa68:	f7f0 fdc6 	bl	80005f8 <__aeabi_dmul>
 800fa6c:	4602      	mov	r2, r0
 800fa6e:	460b      	mov	r3, r1
 800fa70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa74:	f7f0 fc08 	bl	8000288 <__aeabi_dsub>
 800fa78:	f7f1 f86e 	bl	8000b58 <__aeabi_d2iz>
 800fa7c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800fa80:	f849 0b04 	str.w	r0, [r9], #4
 800fa84:	4639      	mov	r1, r7
 800fa86:	4630      	mov	r0, r6
 800fa88:	f7f0 fc00 	bl	800028c <__adddf3>
 800fa8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fa90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa94:	e75f      	b.n	800f956 <__kernel_rem_pio2+0x106>
 800fa96:	d107      	bne.n	800faa8 <__kernel_rem_pio2+0x258>
 800fa98:	f108 33ff 	add.w	r3, r8, #4294967295
 800fa9c:	aa0c      	add	r2, sp, #48	@ 0x30
 800fa9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800faa2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800faa6:	e79e      	b.n	800f9e6 <__kernel_rem_pio2+0x196>
 800faa8:	4b36      	ldr	r3, [pc, #216]	@ (800fb84 <__kernel_rem_pio2+0x334>)
 800faaa:	2200      	movs	r2, #0
 800faac:	f7f1 f82a 	bl	8000b04 <__aeabi_dcmpge>
 800fab0:	2800      	cmp	r0, #0
 800fab2:	d143      	bne.n	800fb3c <__kernel_rem_pio2+0x2ec>
 800fab4:	4681      	mov	r9, r0
 800fab6:	2200      	movs	r2, #0
 800fab8:	2300      	movs	r3, #0
 800faba:	4630      	mov	r0, r6
 800fabc:	4639      	mov	r1, r7
 800fabe:	f7f1 f803 	bl	8000ac8 <__aeabi_dcmpeq>
 800fac2:	2800      	cmp	r0, #0
 800fac4:	f000 80c1 	beq.w	800fc4a <__kernel_rem_pio2+0x3fa>
 800fac8:	f108 33ff 	add.w	r3, r8, #4294967295
 800facc:	2200      	movs	r2, #0
 800face:	9900      	ldr	r1, [sp, #0]
 800fad0:	428b      	cmp	r3, r1
 800fad2:	da70      	bge.n	800fbb6 <__kernel_rem_pio2+0x366>
 800fad4:	2a00      	cmp	r2, #0
 800fad6:	f000 808b 	beq.w	800fbf0 <__kernel_rem_pio2+0x3a0>
 800fada:	f108 38ff 	add.w	r8, r8, #4294967295
 800fade:	ab0c      	add	r3, sp, #48	@ 0x30
 800fae0:	f1ab 0b18 	sub.w	fp, fp, #24
 800fae4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d0f6      	beq.n	800fada <__kernel_rem_pio2+0x28a>
 800faec:	4658      	mov	r0, fp
 800faee:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800fb68 <__kernel_rem_pio2+0x318>
 800faf2:	f7ff fdf1 	bl	800f6d8 <scalbn>
 800faf6:	f108 0301 	add.w	r3, r8, #1
 800fafa:	00da      	lsls	r2, r3, #3
 800fafc:	9205      	str	r2, [sp, #20]
 800fafe:	ec55 4b10 	vmov	r4, r5, d0
 800fb02:	aa70      	add	r2, sp, #448	@ 0x1c0
 800fb04:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800fb7c <__kernel_rem_pio2+0x32c>
 800fb08:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800fb0c:	4646      	mov	r6, r8
 800fb0e:	f04f 0a00 	mov.w	sl, #0
 800fb12:	2e00      	cmp	r6, #0
 800fb14:	f280 80d1 	bge.w	800fcba <__kernel_rem_pio2+0x46a>
 800fb18:	4644      	mov	r4, r8
 800fb1a:	2c00      	cmp	r4, #0
 800fb1c:	f2c0 80ff 	blt.w	800fd1e <__kernel_rem_pio2+0x4ce>
 800fb20:	4b19      	ldr	r3, [pc, #100]	@ (800fb88 <__kernel_rem_pio2+0x338>)
 800fb22:	461f      	mov	r7, r3
 800fb24:	ab70      	add	r3, sp, #448	@ 0x1c0
 800fb26:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fb2a:	9306      	str	r3, [sp, #24]
 800fb2c:	f04f 0a00 	mov.w	sl, #0
 800fb30:	f04f 0b00 	mov.w	fp, #0
 800fb34:	2600      	movs	r6, #0
 800fb36:	eba8 0504 	sub.w	r5, r8, r4
 800fb3a:	e0e4      	b.n	800fd06 <__kernel_rem_pio2+0x4b6>
 800fb3c:	f04f 0902 	mov.w	r9, #2
 800fb40:	e754      	b.n	800f9ec <__kernel_rem_pio2+0x19c>
 800fb42:	f854 3b04 	ldr.w	r3, [r4], #4
 800fb46:	bb0d      	cbnz	r5, 800fb8c <__kernel_rem_pio2+0x33c>
 800fb48:	b123      	cbz	r3, 800fb54 <__kernel_rem_pio2+0x304>
 800fb4a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800fb4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800fb52:	2301      	movs	r3, #1
 800fb54:	3201      	adds	r2, #1
 800fb56:	461d      	mov	r5, r3
 800fb58:	e74f      	b.n	800f9fa <__kernel_rem_pio2+0x1aa>
 800fb5a:	bf00      	nop
 800fb5c:	f3af 8000 	nop.w
	...
 800fb6c:	3ff00000 	.word	0x3ff00000
 800fb70:	08014b60 	.word	0x08014b60
 800fb74:	40200000 	.word	0x40200000
 800fb78:	3ff00000 	.word	0x3ff00000
 800fb7c:	3e700000 	.word	0x3e700000
 800fb80:	41700000 	.word	0x41700000
 800fb84:	3fe00000 	.word	0x3fe00000
 800fb88:	08014b20 	.word	0x08014b20
 800fb8c:	1acb      	subs	r3, r1, r3
 800fb8e:	e7de      	b.n	800fb4e <__kernel_rem_pio2+0x2fe>
 800fb90:	f108 32ff 	add.w	r2, r8, #4294967295
 800fb94:	ab0c      	add	r3, sp, #48	@ 0x30
 800fb96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb9a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fb9e:	a90c      	add	r1, sp, #48	@ 0x30
 800fba0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fba4:	e737      	b.n	800fa16 <__kernel_rem_pio2+0x1c6>
 800fba6:	f108 32ff 	add.w	r2, r8, #4294967295
 800fbaa:	ab0c      	add	r3, sp, #48	@ 0x30
 800fbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbb0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fbb4:	e7f3      	b.n	800fb9e <__kernel_rem_pio2+0x34e>
 800fbb6:	a90c      	add	r1, sp, #48	@ 0x30
 800fbb8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fbbc:	3b01      	subs	r3, #1
 800fbbe:	430a      	orrs	r2, r1
 800fbc0:	e785      	b.n	800face <__kernel_rem_pio2+0x27e>
 800fbc2:	3401      	adds	r4, #1
 800fbc4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fbc8:	2a00      	cmp	r2, #0
 800fbca:	d0fa      	beq.n	800fbc2 <__kernel_rem_pio2+0x372>
 800fbcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fbce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800fbd2:	eb0d 0503 	add.w	r5, sp, r3
 800fbd6:	9b06      	ldr	r3, [sp, #24]
 800fbd8:	aa20      	add	r2, sp, #128	@ 0x80
 800fbda:	4443      	add	r3, r8
 800fbdc:	f108 0701 	add.w	r7, r8, #1
 800fbe0:	3d98      	subs	r5, #152	@ 0x98
 800fbe2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800fbe6:	4444      	add	r4, r8
 800fbe8:	42bc      	cmp	r4, r7
 800fbea:	da04      	bge.n	800fbf6 <__kernel_rem_pio2+0x3a6>
 800fbec:	46a0      	mov	r8, r4
 800fbee:	e6a2      	b.n	800f936 <__kernel_rem_pio2+0xe6>
 800fbf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbf2:	2401      	movs	r4, #1
 800fbf4:	e7e6      	b.n	800fbc4 <__kernel_rem_pio2+0x374>
 800fbf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbf8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800fbfc:	f7f0 fc92 	bl	8000524 <__aeabi_i2d>
 800fc00:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800fec0 <__kernel_rem_pio2+0x670>
 800fc04:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fc08:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fc0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fc10:	46b2      	mov	sl, r6
 800fc12:	f04f 0800 	mov.w	r8, #0
 800fc16:	9b05      	ldr	r3, [sp, #20]
 800fc18:	4598      	cmp	r8, r3
 800fc1a:	dd05      	ble.n	800fc28 <__kernel_rem_pio2+0x3d8>
 800fc1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fc20:	3701      	adds	r7, #1
 800fc22:	eca5 7b02 	vstmia	r5!, {d7}
 800fc26:	e7df      	b.n	800fbe8 <__kernel_rem_pio2+0x398>
 800fc28:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800fc2c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fc30:	f7f0 fce2 	bl	80005f8 <__aeabi_dmul>
 800fc34:	4602      	mov	r2, r0
 800fc36:	460b      	mov	r3, r1
 800fc38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc3c:	f7f0 fb26 	bl	800028c <__adddf3>
 800fc40:	f108 0801 	add.w	r8, r8, #1
 800fc44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc48:	e7e5      	b.n	800fc16 <__kernel_rem_pio2+0x3c6>
 800fc4a:	f1cb 0000 	rsb	r0, fp, #0
 800fc4e:	ec47 6b10 	vmov	d0, r6, r7
 800fc52:	f7ff fd41 	bl	800f6d8 <scalbn>
 800fc56:	ec55 4b10 	vmov	r4, r5, d0
 800fc5a:	4b9b      	ldr	r3, [pc, #620]	@ (800fec8 <__kernel_rem_pio2+0x678>)
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	4620      	mov	r0, r4
 800fc60:	4629      	mov	r1, r5
 800fc62:	f7f0 ff4f 	bl	8000b04 <__aeabi_dcmpge>
 800fc66:	b300      	cbz	r0, 800fcaa <__kernel_rem_pio2+0x45a>
 800fc68:	4b98      	ldr	r3, [pc, #608]	@ (800fecc <__kernel_rem_pio2+0x67c>)
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	4620      	mov	r0, r4
 800fc6e:	4629      	mov	r1, r5
 800fc70:	f7f0 fcc2 	bl	80005f8 <__aeabi_dmul>
 800fc74:	f7f0 ff70 	bl	8000b58 <__aeabi_d2iz>
 800fc78:	4606      	mov	r6, r0
 800fc7a:	f7f0 fc53 	bl	8000524 <__aeabi_i2d>
 800fc7e:	4b92      	ldr	r3, [pc, #584]	@ (800fec8 <__kernel_rem_pio2+0x678>)
 800fc80:	2200      	movs	r2, #0
 800fc82:	f7f0 fcb9 	bl	80005f8 <__aeabi_dmul>
 800fc86:	460b      	mov	r3, r1
 800fc88:	4602      	mov	r2, r0
 800fc8a:	4629      	mov	r1, r5
 800fc8c:	4620      	mov	r0, r4
 800fc8e:	f7f0 fafb 	bl	8000288 <__aeabi_dsub>
 800fc92:	f7f0 ff61 	bl	8000b58 <__aeabi_d2iz>
 800fc96:	ab0c      	add	r3, sp, #48	@ 0x30
 800fc98:	f10b 0b18 	add.w	fp, fp, #24
 800fc9c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800fca0:	f108 0801 	add.w	r8, r8, #1
 800fca4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800fca8:	e720      	b.n	800faec <__kernel_rem_pio2+0x29c>
 800fcaa:	4620      	mov	r0, r4
 800fcac:	4629      	mov	r1, r5
 800fcae:	f7f0 ff53 	bl	8000b58 <__aeabi_d2iz>
 800fcb2:	ab0c      	add	r3, sp, #48	@ 0x30
 800fcb4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800fcb8:	e718      	b.n	800faec <__kernel_rem_pio2+0x29c>
 800fcba:	ab0c      	add	r3, sp, #48	@ 0x30
 800fcbc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fcc0:	f7f0 fc30 	bl	8000524 <__aeabi_i2d>
 800fcc4:	4622      	mov	r2, r4
 800fcc6:	462b      	mov	r3, r5
 800fcc8:	f7f0 fc96 	bl	80005f8 <__aeabi_dmul>
 800fccc:	4652      	mov	r2, sl
 800fcce:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800fcd2:	465b      	mov	r3, fp
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	4629      	mov	r1, r5
 800fcd8:	f7f0 fc8e 	bl	80005f8 <__aeabi_dmul>
 800fcdc:	3e01      	subs	r6, #1
 800fcde:	4604      	mov	r4, r0
 800fce0:	460d      	mov	r5, r1
 800fce2:	e716      	b.n	800fb12 <__kernel_rem_pio2+0x2c2>
 800fce4:	9906      	ldr	r1, [sp, #24]
 800fce6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800fcea:	9106      	str	r1, [sp, #24]
 800fcec:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800fcf0:	f7f0 fc82 	bl	80005f8 <__aeabi_dmul>
 800fcf4:	4602      	mov	r2, r0
 800fcf6:	460b      	mov	r3, r1
 800fcf8:	4650      	mov	r0, sl
 800fcfa:	4659      	mov	r1, fp
 800fcfc:	f7f0 fac6 	bl	800028c <__adddf3>
 800fd00:	3601      	adds	r6, #1
 800fd02:	4682      	mov	sl, r0
 800fd04:	468b      	mov	fp, r1
 800fd06:	9b00      	ldr	r3, [sp, #0]
 800fd08:	429e      	cmp	r6, r3
 800fd0a:	dc01      	bgt.n	800fd10 <__kernel_rem_pio2+0x4c0>
 800fd0c:	42ae      	cmp	r6, r5
 800fd0e:	dde9      	ble.n	800fce4 <__kernel_rem_pio2+0x494>
 800fd10:	ab48      	add	r3, sp, #288	@ 0x120
 800fd12:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800fd16:	e9c5 ab00 	strd	sl, fp, [r5]
 800fd1a:	3c01      	subs	r4, #1
 800fd1c:	e6fd      	b.n	800fb1a <__kernel_rem_pio2+0x2ca>
 800fd1e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800fd20:	2b02      	cmp	r3, #2
 800fd22:	dc0b      	bgt.n	800fd3c <__kernel_rem_pio2+0x4ec>
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	dc35      	bgt.n	800fd94 <__kernel_rem_pio2+0x544>
 800fd28:	d059      	beq.n	800fdde <__kernel_rem_pio2+0x58e>
 800fd2a:	9b02      	ldr	r3, [sp, #8]
 800fd2c:	f003 0007 	and.w	r0, r3, #7
 800fd30:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800fd34:	ecbd 8b02 	vpop	{d8}
 800fd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd3c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800fd3e:	2b03      	cmp	r3, #3
 800fd40:	d1f3      	bne.n	800fd2a <__kernel_rem_pio2+0x4da>
 800fd42:	9b05      	ldr	r3, [sp, #20]
 800fd44:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800fd48:	eb0d 0403 	add.w	r4, sp, r3
 800fd4c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800fd50:	4625      	mov	r5, r4
 800fd52:	46c2      	mov	sl, r8
 800fd54:	f1ba 0f00 	cmp.w	sl, #0
 800fd58:	dc69      	bgt.n	800fe2e <__kernel_rem_pio2+0x5de>
 800fd5a:	4645      	mov	r5, r8
 800fd5c:	2d01      	cmp	r5, #1
 800fd5e:	f300 8087 	bgt.w	800fe70 <__kernel_rem_pio2+0x620>
 800fd62:	9c05      	ldr	r4, [sp, #20]
 800fd64:	ab48      	add	r3, sp, #288	@ 0x120
 800fd66:	441c      	add	r4, r3
 800fd68:	2000      	movs	r0, #0
 800fd6a:	2100      	movs	r1, #0
 800fd6c:	f1b8 0f01 	cmp.w	r8, #1
 800fd70:	f300 809c 	bgt.w	800feac <__kernel_rem_pio2+0x65c>
 800fd74:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800fd78:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800fd7c:	f1b9 0f00 	cmp.w	r9, #0
 800fd80:	f040 80a6 	bne.w	800fed0 <__kernel_rem_pio2+0x680>
 800fd84:	9b04      	ldr	r3, [sp, #16]
 800fd86:	e9c3 5600 	strd	r5, r6, [r3]
 800fd8a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800fd8e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fd92:	e7ca      	b.n	800fd2a <__kernel_rem_pio2+0x4da>
 800fd94:	9d05      	ldr	r5, [sp, #20]
 800fd96:	ab48      	add	r3, sp, #288	@ 0x120
 800fd98:	441d      	add	r5, r3
 800fd9a:	4644      	mov	r4, r8
 800fd9c:	2000      	movs	r0, #0
 800fd9e:	2100      	movs	r1, #0
 800fda0:	2c00      	cmp	r4, #0
 800fda2:	da35      	bge.n	800fe10 <__kernel_rem_pio2+0x5c0>
 800fda4:	f1b9 0f00 	cmp.w	r9, #0
 800fda8:	d038      	beq.n	800fe1c <__kernel_rem_pio2+0x5cc>
 800fdaa:	4602      	mov	r2, r0
 800fdac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fdb0:	9c04      	ldr	r4, [sp, #16]
 800fdb2:	e9c4 2300 	strd	r2, r3, [r4]
 800fdb6:	4602      	mov	r2, r0
 800fdb8:	460b      	mov	r3, r1
 800fdba:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800fdbe:	f7f0 fa63 	bl	8000288 <__aeabi_dsub>
 800fdc2:	ad4a      	add	r5, sp, #296	@ 0x128
 800fdc4:	2401      	movs	r4, #1
 800fdc6:	45a0      	cmp	r8, r4
 800fdc8:	da2b      	bge.n	800fe22 <__kernel_rem_pio2+0x5d2>
 800fdca:	f1b9 0f00 	cmp.w	r9, #0
 800fdce:	d002      	beq.n	800fdd6 <__kernel_rem_pio2+0x586>
 800fdd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fdd4:	4619      	mov	r1, r3
 800fdd6:	9b04      	ldr	r3, [sp, #16]
 800fdd8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fddc:	e7a5      	b.n	800fd2a <__kernel_rem_pio2+0x4da>
 800fdde:	9c05      	ldr	r4, [sp, #20]
 800fde0:	ab48      	add	r3, sp, #288	@ 0x120
 800fde2:	441c      	add	r4, r3
 800fde4:	2000      	movs	r0, #0
 800fde6:	2100      	movs	r1, #0
 800fde8:	f1b8 0f00 	cmp.w	r8, #0
 800fdec:	da09      	bge.n	800fe02 <__kernel_rem_pio2+0x5b2>
 800fdee:	f1b9 0f00 	cmp.w	r9, #0
 800fdf2:	d002      	beq.n	800fdfa <__kernel_rem_pio2+0x5aa>
 800fdf4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	9b04      	ldr	r3, [sp, #16]
 800fdfc:	e9c3 0100 	strd	r0, r1, [r3]
 800fe00:	e793      	b.n	800fd2a <__kernel_rem_pio2+0x4da>
 800fe02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fe06:	f7f0 fa41 	bl	800028c <__adddf3>
 800fe0a:	f108 38ff 	add.w	r8, r8, #4294967295
 800fe0e:	e7eb      	b.n	800fde8 <__kernel_rem_pio2+0x598>
 800fe10:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800fe14:	f7f0 fa3a 	bl	800028c <__adddf3>
 800fe18:	3c01      	subs	r4, #1
 800fe1a:	e7c1      	b.n	800fda0 <__kernel_rem_pio2+0x550>
 800fe1c:	4602      	mov	r2, r0
 800fe1e:	460b      	mov	r3, r1
 800fe20:	e7c6      	b.n	800fdb0 <__kernel_rem_pio2+0x560>
 800fe22:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800fe26:	f7f0 fa31 	bl	800028c <__adddf3>
 800fe2a:	3401      	adds	r4, #1
 800fe2c:	e7cb      	b.n	800fdc6 <__kernel_rem_pio2+0x576>
 800fe2e:	ed35 7b02 	vldmdb	r5!, {d7}
 800fe32:	ed8d 7b00 	vstr	d7, [sp]
 800fe36:	ed95 7b02 	vldr	d7, [r5, #8]
 800fe3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe3e:	ec53 2b17 	vmov	r2, r3, d7
 800fe42:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fe46:	f7f0 fa21 	bl	800028c <__adddf3>
 800fe4a:	4602      	mov	r2, r0
 800fe4c:	460b      	mov	r3, r1
 800fe4e:	4606      	mov	r6, r0
 800fe50:	460f      	mov	r7, r1
 800fe52:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe56:	f7f0 fa17 	bl	8000288 <__aeabi_dsub>
 800fe5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fe5e:	f7f0 fa15 	bl	800028c <__adddf3>
 800fe62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe66:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800fe6a:	e9c5 6700 	strd	r6, r7, [r5]
 800fe6e:	e771      	b.n	800fd54 <__kernel_rem_pio2+0x504>
 800fe70:	ed34 7b02 	vldmdb	r4!, {d7}
 800fe74:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800fe78:	ec51 0b17 	vmov	r0, r1, d7
 800fe7c:	4652      	mov	r2, sl
 800fe7e:	465b      	mov	r3, fp
 800fe80:	ed8d 7b00 	vstr	d7, [sp]
 800fe84:	f7f0 fa02 	bl	800028c <__adddf3>
 800fe88:	4602      	mov	r2, r0
 800fe8a:	460b      	mov	r3, r1
 800fe8c:	4606      	mov	r6, r0
 800fe8e:	460f      	mov	r7, r1
 800fe90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe94:	f7f0 f9f8 	bl	8000288 <__aeabi_dsub>
 800fe98:	4652      	mov	r2, sl
 800fe9a:	465b      	mov	r3, fp
 800fe9c:	f7f0 f9f6 	bl	800028c <__adddf3>
 800fea0:	3d01      	subs	r5, #1
 800fea2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fea6:	e9c4 6700 	strd	r6, r7, [r4]
 800feaa:	e757      	b.n	800fd5c <__kernel_rem_pio2+0x50c>
 800feac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800feb0:	f7f0 f9ec 	bl	800028c <__adddf3>
 800feb4:	f108 38ff 	add.w	r8, r8, #4294967295
 800feb8:	e758      	b.n	800fd6c <__kernel_rem_pio2+0x51c>
 800feba:	bf00      	nop
 800febc:	f3af 8000 	nop.w
	...
 800fec8:	41700000 	.word	0x41700000
 800fecc:	3e700000 	.word	0x3e700000
 800fed0:	9b04      	ldr	r3, [sp, #16]
 800fed2:	9a04      	ldr	r2, [sp, #16]
 800fed4:	601d      	str	r5, [r3, #0]
 800fed6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800feda:	605c      	str	r4, [r3, #4]
 800fedc:	609f      	str	r7, [r3, #8]
 800fede:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800fee2:	60d3      	str	r3, [r2, #12]
 800fee4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fee8:	6110      	str	r0, [r2, #16]
 800feea:	6153      	str	r3, [r2, #20]
 800feec:	e71d      	b.n	800fd2a <__kernel_rem_pio2+0x4da>
 800feee:	bf00      	nop

0800fef0 <floor>:
 800fef0:	ec51 0b10 	vmov	r0, r1, d0
 800fef4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fefc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800ff00:	2e13      	cmp	r6, #19
 800ff02:	460c      	mov	r4, r1
 800ff04:	4605      	mov	r5, r0
 800ff06:	4680      	mov	r8, r0
 800ff08:	dc34      	bgt.n	800ff74 <floor+0x84>
 800ff0a:	2e00      	cmp	r6, #0
 800ff0c:	da17      	bge.n	800ff3e <floor+0x4e>
 800ff0e:	a332      	add	r3, pc, #200	@ (adr r3, 800ffd8 <floor+0xe8>)
 800ff10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff14:	f7f0 f9ba 	bl	800028c <__adddf3>
 800ff18:	2200      	movs	r2, #0
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	f7f0 fdfc 	bl	8000b18 <__aeabi_dcmpgt>
 800ff20:	b150      	cbz	r0, 800ff38 <floor+0x48>
 800ff22:	2c00      	cmp	r4, #0
 800ff24:	da55      	bge.n	800ffd2 <floor+0xe2>
 800ff26:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ff2a:	432c      	orrs	r4, r5
 800ff2c:	2500      	movs	r5, #0
 800ff2e:	42ac      	cmp	r4, r5
 800ff30:	4c2b      	ldr	r4, [pc, #172]	@ (800ffe0 <floor+0xf0>)
 800ff32:	bf08      	it	eq
 800ff34:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800ff38:	4621      	mov	r1, r4
 800ff3a:	4628      	mov	r0, r5
 800ff3c:	e023      	b.n	800ff86 <floor+0x96>
 800ff3e:	4f29      	ldr	r7, [pc, #164]	@ (800ffe4 <floor+0xf4>)
 800ff40:	4137      	asrs	r7, r6
 800ff42:	ea01 0307 	and.w	r3, r1, r7
 800ff46:	4303      	orrs	r3, r0
 800ff48:	d01d      	beq.n	800ff86 <floor+0x96>
 800ff4a:	a323      	add	r3, pc, #140	@ (adr r3, 800ffd8 <floor+0xe8>)
 800ff4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff50:	f7f0 f99c 	bl	800028c <__adddf3>
 800ff54:	2200      	movs	r2, #0
 800ff56:	2300      	movs	r3, #0
 800ff58:	f7f0 fdde 	bl	8000b18 <__aeabi_dcmpgt>
 800ff5c:	2800      	cmp	r0, #0
 800ff5e:	d0eb      	beq.n	800ff38 <floor+0x48>
 800ff60:	2c00      	cmp	r4, #0
 800ff62:	bfbe      	ittt	lt
 800ff64:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800ff68:	4133      	asrlt	r3, r6
 800ff6a:	18e4      	addlt	r4, r4, r3
 800ff6c:	ea24 0407 	bic.w	r4, r4, r7
 800ff70:	2500      	movs	r5, #0
 800ff72:	e7e1      	b.n	800ff38 <floor+0x48>
 800ff74:	2e33      	cmp	r6, #51	@ 0x33
 800ff76:	dd0a      	ble.n	800ff8e <floor+0x9e>
 800ff78:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800ff7c:	d103      	bne.n	800ff86 <floor+0x96>
 800ff7e:	4602      	mov	r2, r0
 800ff80:	460b      	mov	r3, r1
 800ff82:	f7f0 f983 	bl	800028c <__adddf3>
 800ff86:	ec41 0b10 	vmov	d0, r0, r1
 800ff8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff8e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800ff92:	f04f 37ff 	mov.w	r7, #4294967295
 800ff96:	40df      	lsrs	r7, r3
 800ff98:	4207      	tst	r7, r0
 800ff9a:	d0f4      	beq.n	800ff86 <floor+0x96>
 800ff9c:	a30e      	add	r3, pc, #56	@ (adr r3, 800ffd8 <floor+0xe8>)
 800ff9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa2:	f7f0 f973 	bl	800028c <__adddf3>
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	f7f0 fdb5 	bl	8000b18 <__aeabi_dcmpgt>
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	d0c2      	beq.n	800ff38 <floor+0x48>
 800ffb2:	2c00      	cmp	r4, #0
 800ffb4:	da0a      	bge.n	800ffcc <floor+0xdc>
 800ffb6:	2e14      	cmp	r6, #20
 800ffb8:	d101      	bne.n	800ffbe <floor+0xce>
 800ffba:	3401      	adds	r4, #1
 800ffbc:	e006      	b.n	800ffcc <floor+0xdc>
 800ffbe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	40b3      	lsls	r3, r6
 800ffc6:	441d      	add	r5, r3
 800ffc8:	4545      	cmp	r5, r8
 800ffca:	d3f6      	bcc.n	800ffba <floor+0xca>
 800ffcc:	ea25 0507 	bic.w	r5, r5, r7
 800ffd0:	e7b2      	b.n	800ff38 <floor+0x48>
 800ffd2:	2500      	movs	r5, #0
 800ffd4:	462c      	mov	r4, r5
 800ffd6:	e7af      	b.n	800ff38 <floor+0x48>
 800ffd8:	8800759c 	.word	0x8800759c
 800ffdc:	7e37e43c 	.word	0x7e37e43c
 800ffe0:	bff00000 	.word	0xbff00000
 800ffe4:	000fffff 	.word	0x000fffff

0800ffe8 <malloc>:
 800ffe8:	4b02      	ldr	r3, [pc, #8]	@ (800fff4 <malloc+0xc>)
 800ffea:	4601      	mov	r1, r0
 800ffec:	6818      	ldr	r0, [r3, #0]
 800ffee:	f000 b82d 	b.w	801004c <_malloc_r>
 800fff2:	bf00      	nop
 800fff4:	20000024 	.word	0x20000024

0800fff8 <free>:
 800fff8:	4b02      	ldr	r3, [pc, #8]	@ (8010004 <free+0xc>)
 800fffa:	4601      	mov	r1, r0
 800fffc:	6818      	ldr	r0, [r3, #0]
 800fffe:	f001 bf27 	b.w	8011e50 <_free_r>
 8010002:	bf00      	nop
 8010004:	20000024 	.word	0x20000024

08010008 <sbrk_aligned>:
 8010008:	b570      	push	{r4, r5, r6, lr}
 801000a:	4e0f      	ldr	r6, [pc, #60]	@ (8010048 <sbrk_aligned+0x40>)
 801000c:	460c      	mov	r4, r1
 801000e:	6831      	ldr	r1, [r6, #0]
 8010010:	4605      	mov	r5, r0
 8010012:	b911      	cbnz	r1, 801001a <sbrk_aligned+0x12>
 8010014:	f001 f872 	bl	80110fc <_sbrk_r>
 8010018:	6030      	str	r0, [r6, #0]
 801001a:	4621      	mov	r1, r4
 801001c:	4628      	mov	r0, r5
 801001e:	f001 f86d 	bl	80110fc <_sbrk_r>
 8010022:	1c43      	adds	r3, r0, #1
 8010024:	d103      	bne.n	801002e <sbrk_aligned+0x26>
 8010026:	f04f 34ff 	mov.w	r4, #4294967295
 801002a:	4620      	mov	r0, r4
 801002c:	bd70      	pop	{r4, r5, r6, pc}
 801002e:	1cc4      	adds	r4, r0, #3
 8010030:	f024 0403 	bic.w	r4, r4, #3
 8010034:	42a0      	cmp	r0, r4
 8010036:	d0f8      	beq.n	801002a <sbrk_aligned+0x22>
 8010038:	1a21      	subs	r1, r4, r0
 801003a:	4628      	mov	r0, r5
 801003c:	f001 f85e 	bl	80110fc <_sbrk_r>
 8010040:	3001      	adds	r0, #1
 8010042:	d1f2      	bne.n	801002a <sbrk_aligned+0x22>
 8010044:	e7ef      	b.n	8010026 <sbrk_aligned+0x1e>
 8010046:	bf00      	nop
 8010048:	20000cdc 	.word	0x20000cdc

0801004c <_malloc_r>:
 801004c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010050:	1ccd      	adds	r5, r1, #3
 8010052:	f025 0503 	bic.w	r5, r5, #3
 8010056:	3508      	adds	r5, #8
 8010058:	2d0c      	cmp	r5, #12
 801005a:	bf38      	it	cc
 801005c:	250c      	movcc	r5, #12
 801005e:	2d00      	cmp	r5, #0
 8010060:	4606      	mov	r6, r0
 8010062:	db01      	blt.n	8010068 <_malloc_r+0x1c>
 8010064:	42a9      	cmp	r1, r5
 8010066:	d904      	bls.n	8010072 <_malloc_r+0x26>
 8010068:	230c      	movs	r3, #12
 801006a:	6033      	str	r3, [r6, #0]
 801006c:	2000      	movs	r0, #0
 801006e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010072:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010148 <_malloc_r+0xfc>
 8010076:	f000 f869 	bl	801014c <__malloc_lock>
 801007a:	f8d8 3000 	ldr.w	r3, [r8]
 801007e:	461c      	mov	r4, r3
 8010080:	bb44      	cbnz	r4, 80100d4 <_malloc_r+0x88>
 8010082:	4629      	mov	r1, r5
 8010084:	4630      	mov	r0, r6
 8010086:	f7ff ffbf 	bl	8010008 <sbrk_aligned>
 801008a:	1c43      	adds	r3, r0, #1
 801008c:	4604      	mov	r4, r0
 801008e:	d158      	bne.n	8010142 <_malloc_r+0xf6>
 8010090:	f8d8 4000 	ldr.w	r4, [r8]
 8010094:	4627      	mov	r7, r4
 8010096:	2f00      	cmp	r7, #0
 8010098:	d143      	bne.n	8010122 <_malloc_r+0xd6>
 801009a:	2c00      	cmp	r4, #0
 801009c:	d04b      	beq.n	8010136 <_malloc_r+0xea>
 801009e:	6823      	ldr	r3, [r4, #0]
 80100a0:	4639      	mov	r1, r7
 80100a2:	4630      	mov	r0, r6
 80100a4:	eb04 0903 	add.w	r9, r4, r3
 80100a8:	f001 f828 	bl	80110fc <_sbrk_r>
 80100ac:	4581      	cmp	r9, r0
 80100ae:	d142      	bne.n	8010136 <_malloc_r+0xea>
 80100b0:	6821      	ldr	r1, [r4, #0]
 80100b2:	1a6d      	subs	r5, r5, r1
 80100b4:	4629      	mov	r1, r5
 80100b6:	4630      	mov	r0, r6
 80100b8:	f7ff ffa6 	bl	8010008 <sbrk_aligned>
 80100bc:	3001      	adds	r0, #1
 80100be:	d03a      	beq.n	8010136 <_malloc_r+0xea>
 80100c0:	6823      	ldr	r3, [r4, #0]
 80100c2:	442b      	add	r3, r5
 80100c4:	6023      	str	r3, [r4, #0]
 80100c6:	f8d8 3000 	ldr.w	r3, [r8]
 80100ca:	685a      	ldr	r2, [r3, #4]
 80100cc:	bb62      	cbnz	r2, 8010128 <_malloc_r+0xdc>
 80100ce:	f8c8 7000 	str.w	r7, [r8]
 80100d2:	e00f      	b.n	80100f4 <_malloc_r+0xa8>
 80100d4:	6822      	ldr	r2, [r4, #0]
 80100d6:	1b52      	subs	r2, r2, r5
 80100d8:	d420      	bmi.n	801011c <_malloc_r+0xd0>
 80100da:	2a0b      	cmp	r2, #11
 80100dc:	d917      	bls.n	801010e <_malloc_r+0xc2>
 80100de:	1961      	adds	r1, r4, r5
 80100e0:	42a3      	cmp	r3, r4
 80100e2:	6025      	str	r5, [r4, #0]
 80100e4:	bf18      	it	ne
 80100e6:	6059      	strne	r1, [r3, #4]
 80100e8:	6863      	ldr	r3, [r4, #4]
 80100ea:	bf08      	it	eq
 80100ec:	f8c8 1000 	streq.w	r1, [r8]
 80100f0:	5162      	str	r2, [r4, r5]
 80100f2:	604b      	str	r3, [r1, #4]
 80100f4:	4630      	mov	r0, r6
 80100f6:	f000 f82f 	bl	8010158 <__malloc_unlock>
 80100fa:	f104 000b 	add.w	r0, r4, #11
 80100fe:	1d23      	adds	r3, r4, #4
 8010100:	f020 0007 	bic.w	r0, r0, #7
 8010104:	1ac2      	subs	r2, r0, r3
 8010106:	bf1c      	itt	ne
 8010108:	1a1b      	subne	r3, r3, r0
 801010a:	50a3      	strne	r3, [r4, r2]
 801010c:	e7af      	b.n	801006e <_malloc_r+0x22>
 801010e:	6862      	ldr	r2, [r4, #4]
 8010110:	42a3      	cmp	r3, r4
 8010112:	bf0c      	ite	eq
 8010114:	f8c8 2000 	streq.w	r2, [r8]
 8010118:	605a      	strne	r2, [r3, #4]
 801011a:	e7eb      	b.n	80100f4 <_malloc_r+0xa8>
 801011c:	4623      	mov	r3, r4
 801011e:	6864      	ldr	r4, [r4, #4]
 8010120:	e7ae      	b.n	8010080 <_malloc_r+0x34>
 8010122:	463c      	mov	r4, r7
 8010124:	687f      	ldr	r7, [r7, #4]
 8010126:	e7b6      	b.n	8010096 <_malloc_r+0x4a>
 8010128:	461a      	mov	r2, r3
 801012a:	685b      	ldr	r3, [r3, #4]
 801012c:	42a3      	cmp	r3, r4
 801012e:	d1fb      	bne.n	8010128 <_malloc_r+0xdc>
 8010130:	2300      	movs	r3, #0
 8010132:	6053      	str	r3, [r2, #4]
 8010134:	e7de      	b.n	80100f4 <_malloc_r+0xa8>
 8010136:	230c      	movs	r3, #12
 8010138:	6033      	str	r3, [r6, #0]
 801013a:	4630      	mov	r0, r6
 801013c:	f000 f80c 	bl	8010158 <__malloc_unlock>
 8010140:	e794      	b.n	801006c <_malloc_r+0x20>
 8010142:	6005      	str	r5, [r0, #0]
 8010144:	e7d6      	b.n	80100f4 <_malloc_r+0xa8>
 8010146:	bf00      	nop
 8010148:	20000ce0 	.word	0x20000ce0

0801014c <__malloc_lock>:
 801014c:	4801      	ldr	r0, [pc, #4]	@ (8010154 <__malloc_lock+0x8>)
 801014e:	f001 b822 	b.w	8011196 <__retarget_lock_acquire_recursive>
 8010152:	bf00      	nop
 8010154:	20000e24 	.word	0x20000e24

08010158 <__malloc_unlock>:
 8010158:	4801      	ldr	r0, [pc, #4]	@ (8010160 <__malloc_unlock+0x8>)
 801015a:	f001 b81d 	b.w	8011198 <__retarget_lock_release_recursive>
 801015e:	bf00      	nop
 8010160:	20000e24 	.word	0x20000e24

08010164 <__cvt>:
 8010164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010168:	ec57 6b10 	vmov	r6, r7, d0
 801016c:	2f00      	cmp	r7, #0
 801016e:	460c      	mov	r4, r1
 8010170:	4619      	mov	r1, r3
 8010172:	463b      	mov	r3, r7
 8010174:	bfbb      	ittet	lt
 8010176:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801017a:	461f      	movlt	r7, r3
 801017c:	2300      	movge	r3, #0
 801017e:	232d      	movlt	r3, #45	@ 0x2d
 8010180:	700b      	strb	r3, [r1, #0]
 8010182:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010184:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010188:	4691      	mov	r9, r2
 801018a:	f023 0820 	bic.w	r8, r3, #32
 801018e:	bfbc      	itt	lt
 8010190:	4632      	movlt	r2, r6
 8010192:	4616      	movlt	r6, r2
 8010194:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010198:	d005      	beq.n	80101a6 <__cvt+0x42>
 801019a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801019e:	d100      	bne.n	80101a2 <__cvt+0x3e>
 80101a0:	3401      	adds	r4, #1
 80101a2:	2102      	movs	r1, #2
 80101a4:	e000      	b.n	80101a8 <__cvt+0x44>
 80101a6:	2103      	movs	r1, #3
 80101a8:	ab03      	add	r3, sp, #12
 80101aa:	9301      	str	r3, [sp, #4]
 80101ac:	ab02      	add	r3, sp, #8
 80101ae:	9300      	str	r3, [sp, #0]
 80101b0:	ec47 6b10 	vmov	d0, r6, r7
 80101b4:	4653      	mov	r3, sl
 80101b6:	4622      	mov	r2, r4
 80101b8:	f001 f87a 	bl	80112b0 <_dtoa_r>
 80101bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80101c0:	4605      	mov	r5, r0
 80101c2:	d119      	bne.n	80101f8 <__cvt+0x94>
 80101c4:	f019 0f01 	tst.w	r9, #1
 80101c8:	d00e      	beq.n	80101e8 <__cvt+0x84>
 80101ca:	eb00 0904 	add.w	r9, r0, r4
 80101ce:	2200      	movs	r2, #0
 80101d0:	2300      	movs	r3, #0
 80101d2:	4630      	mov	r0, r6
 80101d4:	4639      	mov	r1, r7
 80101d6:	f7f0 fc77 	bl	8000ac8 <__aeabi_dcmpeq>
 80101da:	b108      	cbz	r0, 80101e0 <__cvt+0x7c>
 80101dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80101e0:	2230      	movs	r2, #48	@ 0x30
 80101e2:	9b03      	ldr	r3, [sp, #12]
 80101e4:	454b      	cmp	r3, r9
 80101e6:	d31e      	bcc.n	8010226 <__cvt+0xc2>
 80101e8:	9b03      	ldr	r3, [sp, #12]
 80101ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80101ec:	1b5b      	subs	r3, r3, r5
 80101ee:	4628      	mov	r0, r5
 80101f0:	6013      	str	r3, [r2, #0]
 80101f2:	b004      	add	sp, #16
 80101f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80101fc:	eb00 0904 	add.w	r9, r0, r4
 8010200:	d1e5      	bne.n	80101ce <__cvt+0x6a>
 8010202:	7803      	ldrb	r3, [r0, #0]
 8010204:	2b30      	cmp	r3, #48	@ 0x30
 8010206:	d10a      	bne.n	801021e <__cvt+0xba>
 8010208:	2200      	movs	r2, #0
 801020a:	2300      	movs	r3, #0
 801020c:	4630      	mov	r0, r6
 801020e:	4639      	mov	r1, r7
 8010210:	f7f0 fc5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010214:	b918      	cbnz	r0, 801021e <__cvt+0xba>
 8010216:	f1c4 0401 	rsb	r4, r4, #1
 801021a:	f8ca 4000 	str.w	r4, [sl]
 801021e:	f8da 3000 	ldr.w	r3, [sl]
 8010222:	4499      	add	r9, r3
 8010224:	e7d3      	b.n	80101ce <__cvt+0x6a>
 8010226:	1c59      	adds	r1, r3, #1
 8010228:	9103      	str	r1, [sp, #12]
 801022a:	701a      	strb	r2, [r3, #0]
 801022c:	e7d9      	b.n	80101e2 <__cvt+0x7e>

0801022e <__exponent>:
 801022e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010230:	2900      	cmp	r1, #0
 8010232:	bfba      	itte	lt
 8010234:	4249      	neglt	r1, r1
 8010236:	232d      	movlt	r3, #45	@ 0x2d
 8010238:	232b      	movge	r3, #43	@ 0x2b
 801023a:	2909      	cmp	r1, #9
 801023c:	7002      	strb	r2, [r0, #0]
 801023e:	7043      	strb	r3, [r0, #1]
 8010240:	dd29      	ble.n	8010296 <__exponent+0x68>
 8010242:	f10d 0307 	add.w	r3, sp, #7
 8010246:	461d      	mov	r5, r3
 8010248:	270a      	movs	r7, #10
 801024a:	461a      	mov	r2, r3
 801024c:	fbb1 f6f7 	udiv	r6, r1, r7
 8010250:	fb07 1416 	mls	r4, r7, r6, r1
 8010254:	3430      	adds	r4, #48	@ 0x30
 8010256:	f802 4c01 	strb.w	r4, [r2, #-1]
 801025a:	460c      	mov	r4, r1
 801025c:	2c63      	cmp	r4, #99	@ 0x63
 801025e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010262:	4631      	mov	r1, r6
 8010264:	dcf1      	bgt.n	801024a <__exponent+0x1c>
 8010266:	3130      	adds	r1, #48	@ 0x30
 8010268:	1e94      	subs	r4, r2, #2
 801026a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801026e:	1c41      	adds	r1, r0, #1
 8010270:	4623      	mov	r3, r4
 8010272:	42ab      	cmp	r3, r5
 8010274:	d30a      	bcc.n	801028c <__exponent+0x5e>
 8010276:	f10d 0309 	add.w	r3, sp, #9
 801027a:	1a9b      	subs	r3, r3, r2
 801027c:	42ac      	cmp	r4, r5
 801027e:	bf88      	it	hi
 8010280:	2300      	movhi	r3, #0
 8010282:	3302      	adds	r3, #2
 8010284:	4403      	add	r3, r0
 8010286:	1a18      	subs	r0, r3, r0
 8010288:	b003      	add	sp, #12
 801028a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801028c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010290:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010294:	e7ed      	b.n	8010272 <__exponent+0x44>
 8010296:	2330      	movs	r3, #48	@ 0x30
 8010298:	3130      	adds	r1, #48	@ 0x30
 801029a:	7083      	strb	r3, [r0, #2]
 801029c:	70c1      	strb	r1, [r0, #3]
 801029e:	1d03      	adds	r3, r0, #4
 80102a0:	e7f1      	b.n	8010286 <__exponent+0x58>
	...

080102a4 <_printf_float>:
 80102a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102a8:	b08d      	sub	sp, #52	@ 0x34
 80102aa:	460c      	mov	r4, r1
 80102ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80102b0:	4616      	mov	r6, r2
 80102b2:	461f      	mov	r7, r3
 80102b4:	4605      	mov	r5, r0
 80102b6:	f000 fee9 	bl	801108c <_localeconv_r>
 80102ba:	6803      	ldr	r3, [r0, #0]
 80102bc:	9304      	str	r3, [sp, #16]
 80102be:	4618      	mov	r0, r3
 80102c0:	f7ef ffd6 	bl	8000270 <strlen>
 80102c4:	2300      	movs	r3, #0
 80102c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80102c8:	f8d8 3000 	ldr.w	r3, [r8]
 80102cc:	9005      	str	r0, [sp, #20]
 80102ce:	3307      	adds	r3, #7
 80102d0:	f023 0307 	bic.w	r3, r3, #7
 80102d4:	f103 0208 	add.w	r2, r3, #8
 80102d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80102dc:	f8d4 b000 	ldr.w	fp, [r4]
 80102e0:	f8c8 2000 	str.w	r2, [r8]
 80102e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80102e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80102ec:	9307      	str	r3, [sp, #28]
 80102ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80102f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80102f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80102fa:	4b9c      	ldr	r3, [pc, #624]	@ (801056c <_printf_float+0x2c8>)
 80102fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010300:	f7f0 fc14 	bl	8000b2c <__aeabi_dcmpun>
 8010304:	bb70      	cbnz	r0, 8010364 <_printf_float+0xc0>
 8010306:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801030a:	4b98      	ldr	r3, [pc, #608]	@ (801056c <_printf_float+0x2c8>)
 801030c:	f04f 32ff 	mov.w	r2, #4294967295
 8010310:	f7f0 fbee 	bl	8000af0 <__aeabi_dcmple>
 8010314:	bb30      	cbnz	r0, 8010364 <_printf_float+0xc0>
 8010316:	2200      	movs	r2, #0
 8010318:	2300      	movs	r3, #0
 801031a:	4640      	mov	r0, r8
 801031c:	4649      	mov	r1, r9
 801031e:	f7f0 fbdd 	bl	8000adc <__aeabi_dcmplt>
 8010322:	b110      	cbz	r0, 801032a <_printf_float+0x86>
 8010324:	232d      	movs	r3, #45	@ 0x2d
 8010326:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801032a:	4a91      	ldr	r2, [pc, #580]	@ (8010570 <_printf_float+0x2cc>)
 801032c:	4b91      	ldr	r3, [pc, #580]	@ (8010574 <_printf_float+0x2d0>)
 801032e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010332:	bf8c      	ite	hi
 8010334:	4690      	movhi	r8, r2
 8010336:	4698      	movls	r8, r3
 8010338:	2303      	movs	r3, #3
 801033a:	6123      	str	r3, [r4, #16]
 801033c:	f02b 0304 	bic.w	r3, fp, #4
 8010340:	6023      	str	r3, [r4, #0]
 8010342:	f04f 0900 	mov.w	r9, #0
 8010346:	9700      	str	r7, [sp, #0]
 8010348:	4633      	mov	r3, r6
 801034a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801034c:	4621      	mov	r1, r4
 801034e:	4628      	mov	r0, r5
 8010350:	f000 f9d2 	bl	80106f8 <_printf_common>
 8010354:	3001      	adds	r0, #1
 8010356:	f040 808d 	bne.w	8010474 <_printf_float+0x1d0>
 801035a:	f04f 30ff 	mov.w	r0, #4294967295
 801035e:	b00d      	add	sp, #52	@ 0x34
 8010360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010364:	4642      	mov	r2, r8
 8010366:	464b      	mov	r3, r9
 8010368:	4640      	mov	r0, r8
 801036a:	4649      	mov	r1, r9
 801036c:	f7f0 fbde 	bl	8000b2c <__aeabi_dcmpun>
 8010370:	b140      	cbz	r0, 8010384 <_printf_float+0xe0>
 8010372:	464b      	mov	r3, r9
 8010374:	2b00      	cmp	r3, #0
 8010376:	bfbc      	itt	lt
 8010378:	232d      	movlt	r3, #45	@ 0x2d
 801037a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801037e:	4a7e      	ldr	r2, [pc, #504]	@ (8010578 <_printf_float+0x2d4>)
 8010380:	4b7e      	ldr	r3, [pc, #504]	@ (801057c <_printf_float+0x2d8>)
 8010382:	e7d4      	b.n	801032e <_printf_float+0x8a>
 8010384:	6863      	ldr	r3, [r4, #4]
 8010386:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801038a:	9206      	str	r2, [sp, #24]
 801038c:	1c5a      	adds	r2, r3, #1
 801038e:	d13b      	bne.n	8010408 <_printf_float+0x164>
 8010390:	2306      	movs	r3, #6
 8010392:	6063      	str	r3, [r4, #4]
 8010394:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010398:	2300      	movs	r3, #0
 801039a:	6022      	str	r2, [r4, #0]
 801039c:	9303      	str	r3, [sp, #12]
 801039e:	ab0a      	add	r3, sp, #40	@ 0x28
 80103a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80103a4:	ab09      	add	r3, sp, #36	@ 0x24
 80103a6:	9300      	str	r3, [sp, #0]
 80103a8:	6861      	ldr	r1, [r4, #4]
 80103aa:	ec49 8b10 	vmov	d0, r8, r9
 80103ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80103b2:	4628      	mov	r0, r5
 80103b4:	f7ff fed6 	bl	8010164 <__cvt>
 80103b8:	9b06      	ldr	r3, [sp, #24]
 80103ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80103bc:	2b47      	cmp	r3, #71	@ 0x47
 80103be:	4680      	mov	r8, r0
 80103c0:	d129      	bne.n	8010416 <_printf_float+0x172>
 80103c2:	1cc8      	adds	r0, r1, #3
 80103c4:	db02      	blt.n	80103cc <_printf_float+0x128>
 80103c6:	6863      	ldr	r3, [r4, #4]
 80103c8:	4299      	cmp	r1, r3
 80103ca:	dd41      	ble.n	8010450 <_printf_float+0x1ac>
 80103cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80103d0:	fa5f fa8a 	uxtb.w	sl, sl
 80103d4:	3901      	subs	r1, #1
 80103d6:	4652      	mov	r2, sl
 80103d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80103dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80103de:	f7ff ff26 	bl	801022e <__exponent>
 80103e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80103e4:	1813      	adds	r3, r2, r0
 80103e6:	2a01      	cmp	r2, #1
 80103e8:	4681      	mov	r9, r0
 80103ea:	6123      	str	r3, [r4, #16]
 80103ec:	dc02      	bgt.n	80103f4 <_printf_float+0x150>
 80103ee:	6822      	ldr	r2, [r4, #0]
 80103f0:	07d2      	lsls	r2, r2, #31
 80103f2:	d501      	bpl.n	80103f8 <_printf_float+0x154>
 80103f4:	3301      	adds	r3, #1
 80103f6:	6123      	str	r3, [r4, #16]
 80103f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d0a2      	beq.n	8010346 <_printf_float+0xa2>
 8010400:	232d      	movs	r3, #45	@ 0x2d
 8010402:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010406:	e79e      	b.n	8010346 <_printf_float+0xa2>
 8010408:	9a06      	ldr	r2, [sp, #24]
 801040a:	2a47      	cmp	r2, #71	@ 0x47
 801040c:	d1c2      	bne.n	8010394 <_printf_float+0xf0>
 801040e:	2b00      	cmp	r3, #0
 8010410:	d1c0      	bne.n	8010394 <_printf_float+0xf0>
 8010412:	2301      	movs	r3, #1
 8010414:	e7bd      	b.n	8010392 <_printf_float+0xee>
 8010416:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801041a:	d9db      	bls.n	80103d4 <_printf_float+0x130>
 801041c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010420:	d118      	bne.n	8010454 <_printf_float+0x1b0>
 8010422:	2900      	cmp	r1, #0
 8010424:	6863      	ldr	r3, [r4, #4]
 8010426:	dd0b      	ble.n	8010440 <_printf_float+0x19c>
 8010428:	6121      	str	r1, [r4, #16]
 801042a:	b913      	cbnz	r3, 8010432 <_printf_float+0x18e>
 801042c:	6822      	ldr	r2, [r4, #0]
 801042e:	07d0      	lsls	r0, r2, #31
 8010430:	d502      	bpl.n	8010438 <_printf_float+0x194>
 8010432:	3301      	adds	r3, #1
 8010434:	440b      	add	r3, r1
 8010436:	6123      	str	r3, [r4, #16]
 8010438:	65a1      	str	r1, [r4, #88]	@ 0x58
 801043a:	f04f 0900 	mov.w	r9, #0
 801043e:	e7db      	b.n	80103f8 <_printf_float+0x154>
 8010440:	b913      	cbnz	r3, 8010448 <_printf_float+0x1a4>
 8010442:	6822      	ldr	r2, [r4, #0]
 8010444:	07d2      	lsls	r2, r2, #31
 8010446:	d501      	bpl.n	801044c <_printf_float+0x1a8>
 8010448:	3302      	adds	r3, #2
 801044a:	e7f4      	b.n	8010436 <_printf_float+0x192>
 801044c:	2301      	movs	r3, #1
 801044e:	e7f2      	b.n	8010436 <_printf_float+0x192>
 8010450:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010456:	4299      	cmp	r1, r3
 8010458:	db05      	blt.n	8010466 <_printf_float+0x1c2>
 801045a:	6823      	ldr	r3, [r4, #0]
 801045c:	6121      	str	r1, [r4, #16]
 801045e:	07d8      	lsls	r0, r3, #31
 8010460:	d5ea      	bpl.n	8010438 <_printf_float+0x194>
 8010462:	1c4b      	adds	r3, r1, #1
 8010464:	e7e7      	b.n	8010436 <_printf_float+0x192>
 8010466:	2900      	cmp	r1, #0
 8010468:	bfd4      	ite	le
 801046a:	f1c1 0202 	rsble	r2, r1, #2
 801046e:	2201      	movgt	r2, #1
 8010470:	4413      	add	r3, r2
 8010472:	e7e0      	b.n	8010436 <_printf_float+0x192>
 8010474:	6823      	ldr	r3, [r4, #0]
 8010476:	055a      	lsls	r2, r3, #21
 8010478:	d407      	bmi.n	801048a <_printf_float+0x1e6>
 801047a:	6923      	ldr	r3, [r4, #16]
 801047c:	4642      	mov	r2, r8
 801047e:	4631      	mov	r1, r6
 8010480:	4628      	mov	r0, r5
 8010482:	47b8      	blx	r7
 8010484:	3001      	adds	r0, #1
 8010486:	d12b      	bne.n	80104e0 <_printf_float+0x23c>
 8010488:	e767      	b.n	801035a <_printf_float+0xb6>
 801048a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801048e:	f240 80dd 	bls.w	801064c <_printf_float+0x3a8>
 8010492:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010496:	2200      	movs	r2, #0
 8010498:	2300      	movs	r3, #0
 801049a:	f7f0 fb15 	bl	8000ac8 <__aeabi_dcmpeq>
 801049e:	2800      	cmp	r0, #0
 80104a0:	d033      	beq.n	801050a <_printf_float+0x266>
 80104a2:	4a37      	ldr	r2, [pc, #220]	@ (8010580 <_printf_float+0x2dc>)
 80104a4:	2301      	movs	r3, #1
 80104a6:	4631      	mov	r1, r6
 80104a8:	4628      	mov	r0, r5
 80104aa:	47b8      	blx	r7
 80104ac:	3001      	adds	r0, #1
 80104ae:	f43f af54 	beq.w	801035a <_printf_float+0xb6>
 80104b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80104b6:	4543      	cmp	r3, r8
 80104b8:	db02      	blt.n	80104c0 <_printf_float+0x21c>
 80104ba:	6823      	ldr	r3, [r4, #0]
 80104bc:	07d8      	lsls	r0, r3, #31
 80104be:	d50f      	bpl.n	80104e0 <_printf_float+0x23c>
 80104c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104c4:	4631      	mov	r1, r6
 80104c6:	4628      	mov	r0, r5
 80104c8:	47b8      	blx	r7
 80104ca:	3001      	adds	r0, #1
 80104cc:	f43f af45 	beq.w	801035a <_printf_float+0xb6>
 80104d0:	f04f 0900 	mov.w	r9, #0
 80104d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80104d8:	f104 0a1a 	add.w	sl, r4, #26
 80104dc:	45c8      	cmp	r8, r9
 80104de:	dc09      	bgt.n	80104f4 <_printf_float+0x250>
 80104e0:	6823      	ldr	r3, [r4, #0]
 80104e2:	079b      	lsls	r3, r3, #30
 80104e4:	f100 8103 	bmi.w	80106ee <_printf_float+0x44a>
 80104e8:	68e0      	ldr	r0, [r4, #12]
 80104ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80104ec:	4298      	cmp	r0, r3
 80104ee:	bfb8      	it	lt
 80104f0:	4618      	movlt	r0, r3
 80104f2:	e734      	b.n	801035e <_printf_float+0xba>
 80104f4:	2301      	movs	r3, #1
 80104f6:	4652      	mov	r2, sl
 80104f8:	4631      	mov	r1, r6
 80104fa:	4628      	mov	r0, r5
 80104fc:	47b8      	blx	r7
 80104fe:	3001      	adds	r0, #1
 8010500:	f43f af2b 	beq.w	801035a <_printf_float+0xb6>
 8010504:	f109 0901 	add.w	r9, r9, #1
 8010508:	e7e8      	b.n	80104dc <_printf_float+0x238>
 801050a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801050c:	2b00      	cmp	r3, #0
 801050e:	dc39      	bgt.n	8010584 <_printf_float+0x2e0>
 8010510:	4a1b      	ldr	r2, [pc, #108]	@ (8010580 <_printf_float+0x2dc>)
 8010512:	2301      	movs	r3, #1
 8010514:	4631      	mov	r1, r6
 8010516:	4628      	mov	r0, r5
 8010518:	47b8      	blx	r7
 801051a:	3001      	adds	r0, #1
 801051c:	f43f af1d 	beq.w	801035a <_printf_float+0xb6>
 8010520:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010524:	ea59 0303 	orrs.w	r3, r9, r3
 8010528:	d102      	bne.n	8010530 <_printf_float+0x28c>
 801052a:	6823      	ldr	r3, [r4, #0]
 801052c:	07d9      	lsls	r1, r3, #31
 801052e:	d5d7      	bpl.n	80104e0 <_printf_float+0x23c>
 8010530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010534:	4631      	mov	r1, r6
 8010536:	4628      	mov	r0, r5
 8010538:	47b8      	blx	r7
 801053a:	3001      	adds	r0, #1
 801053c:	f43f af0d 	beq.w	801035a <_printf_float+0xb6>
 8010540:	f04f 0a00 	mov.w	sl, #0
 8010544:	f104 0b1a 	add.w	fp, r4, #26
 8010548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801054a:	425b      	negs	r3, r3
 801054c:	4553      	cmp	r3, sl
 801054e:	dc01      	bgt.n	8010554 <_printf_float+0x2b0>
 8010550:	464b      	mov	r3, r9
 8010552:	e793      	b.n	801047c <_printf_float+0x1d8>
 8010554:	2301      	movs	r3, #1
 8010556:	465a      	mov	r2, fp
 8010558:	4631      	mov	r1, r6
 801055a:	4628      	mov	r0, r5
 801055c:	47b8      	blx	r7
 801055e:	3001      	adds	r0, #1
 8010560:	f43f aefb 	beq.w	801035a <_printf_float+0xb6>
 8010564:	f10a 0a01 	add.w	sl, sl, #1
 8010568:	e7ee      	b.n	8010548 <_printf_float+0x2a4>
 801056a:	bf00      	nop
 801056c:	7fefffff 	.word	0x7fefffff
 8010570:	0801474c 	.word	0x0801474c
 8010574:	08014748 	.word	0x08014748
 8010578:	08014754 	.word	0x08014754
 801057c:	08014750 	.word	0x08014750
 8010580:	08014758 	.word	0x08014758
 8010584:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010586:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801058a:	4553      	cmp	r3, sl
 801058c:	bfa8      	it	ge
 801058e:	4653      	movge	r3, sl
 8010590:	2b00      	cmp	r3, #0
 8010592:	4699      	mov	r9, r3
 8010594:	dc36      	bgt.n	8010604 <_printf_float+0x360>
 8010596:	f04f 0b00 	mov.w	fp, #0
 801059a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801059e:	f104 021a 	add.w	r2, r4, #26
 80105a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80105a4:	9306      	str	r3, [sp, #24]
 80105a6:	eba3 0309 	sub.w	r3, r3, r9
 80105aa:	455b      	cmp	r3, fp
 80105ac:	dc31      	bgt.n	8010612 <_printf_float+0x36e>
 80105ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105b0:	459a      	cmp	sl, r3
 80105b2:	dc3a      	bgt.n	801062a <_printf_float+0x386>
 80105b4:	6823      	ldr	r3, [r4, #0]
 80105b6:	07da      	lsls	r2, r3, #31
 80105b8:	d437      	bmi.n	801062a <_printf_float+0x386>
 80105ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105bc:	ebaa 0903 	sub.w	r9, sl, r3
 80105c0:	9b06      	ldr	r3, [sp, #24]
 80105c2:	ebaa 0303 	sub.w	r3, sl, r3
 80105c6:	4599      	cmp	r9, r3
 80105c8:	bfa8      	it	ge
 80105ca:	4699      	movge	r9, r3
 80105cc:	f1b9 0f00 	cmp.w	r9, #0
 80105d0:	dc33      	bgt.n	801063a <_printf_float+0x396>
 80105d2:	f04f 0800 	mov.w	r8, #0
 80105d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80105da:	f104 0b1a 	add.w	fp, r4, #26
 80105de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105e0:	ebaa 0303 	sub.w	r3, sl, r3
 80105e4:	eba3 0309 	sub.w	r3, r3, r9
 80105e8:	4543      	cmp	r3, r8
 80105ea:	f77f af79 	ble.w	80104e0 <_printf_float+0x23c>
 80105ee:	2301      	movs	r3, #1
 80105f0:	465a      	mov	r2, fp
 80105f2:	4631      	mov	r1, r6
 80105f4:	4628      	mov	r0, r5
 80105f6:	47b8      	blx	r7
 80105f8:	3001      	adds	r0, #1
 80105fa:	f43f aeae 	beq.w	801035a <_printf_float+0xb6>
 80105fe:	f108 0801 	add.w	r8, r8, #1
 8010602:	e7ec      	b.n	80105de <_printf_float+0x33a>
 8010604:	4642      	mov	r2, r8
 8010606:	4631      	mov	r1, r6
 8010608:	4628      	mov	r0, r5
 801060a:	47b8      	blx	r7
 801060c:	3001      	adds	r0, #1
 801060e:	d1c2      	bne.n	8010596 <_printf_float+0x2f2>
 8010610:	e6a3      	b.n	801035a <_printf_float+0xb6>
 8010612:	2301      	movs	r3, #1
 8010614:	4631      	mov	r1, r6
 8010616:	4628      	mov	r0, r5
 8010618:	9206      	str	r2, [sp, #24]
 801061a:	47b8      	blx	r7
 801061c:	3001      	adds	r0, #1
 801061e:	f43f ae9c 	beq.w	801035a <_printf_float+0xb6>
 8010622:	9a06      	ldr	r2, [sp, #24]
 8010624:	f10b 0b01 	add.w	fp, fp, #1
 8010628:	e7bb      	b.n	80105a2 <_printf_float+0x2fe>
 801062a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801062e:	4631      	mov	r1, r6
 8010630:	4628      	mov	r0, r5
 8010632:	47b8      	blx	r7
 8010634:	3001      	adds	r0, #1
 8010636:	d1c0      	bne.n	80105ba <_printf_float+0x316>
 8010638:	e68f      	b.n	801035a <_printf_float+0xb6>
 801063a:	9a06      	ldr	r2, [sp, #24]
 801063c:	464b      	mov	r3, r9
 801063e:	4442      	add	r2, r8
 8010640:	4631      	mov	r1, r6
 8010642:	4628      	mov	r0, r5
 8010644:	47b8      	blx	r7
 8010646:	3001      	adds	r0, #1
 8010648:	d1c3      	bne.n	80105d2 <_printf_float+0x32e>
 801064a:	e686      	b.n	801035a <_printf_float+0xb6>
 801064c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010650:	f1ba 0f01 	cmp.w	sl, #1
 8010654:	dc01      	bgt.n	801065a <_printf_float+0x3b6>
 8010656:	07db      	lsls	r3, r3, #31
 8010658:	d536      	bpl.n	80106c8 <_printf_float+0x424>
 801065a:	2301      	movs	r3, #1
 801065c:	4642      	mov	r2, r8
 801065e:	4631      	mov	r1, r6
 8010660:	4628      	mov	r0, r5
 8010662:	47b8      	blx	r7
 8010664:	3001      	adds	r0, #1
 8010666:	f43f ae78 	beq.w	801035a <_printf_float+0xb6>
 801066a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801066e:	4631      	mov	r1, r6
 8010670:	4628      	mov	r0, r5
 8010672:	47b8      	blx	r7
 8010674:	3001      	adds	r0, #1
 8010676:	f43f ae70 	beq.w	801035a <_printf_float+0xb6>
 801067a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801067e:	2200      	movs	r2, #0
 8010680:	2300      	movs	r3, #0
 8010682:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010686:	f7f0 fa1f 	bl	8000ac8 <__aeabi_dcmpeq>
 801068a:	b9c0      	cbnz	r0, 80106be <_printf_float+0x41a>
 801068c:	4653      	mov	r3, sl
 801068e:	f108 0201 	add.w	r2, r8, #1
 8010692:	4631      	mov	r1, r6
 8010694:	4628      	mov	r0, r5
 8010696:	47b8      	blx	r7
 8010698:	3001      	adds	r0, #1
 801069a:	d10c      	bne.n	80106b6 <_printf_float+0x412>
 801069c:	e65d      	b.n	801035a <_printf_float+0xb6>
 801069e:	2301      	movs	r3, #1
 80106a0:	465a      	mov	r2, fp
 80106a2:	4631      	mov	r1, r6
 80106a4:	4628      	mov	r0, r5
 80106a6:	47b8      	blx	r7
 80106a8:	3001      	adds	r0, #1
 80106aa:	f43f ae56 	beq.w	801035a <_printf_float+0xb6>
 80106ae:	f108 0801 	add.w	r8, r8, #1
 80106b2:	45d0      	cmp	r8, sl
 80106b4:	dbf3      	blt.n	801069e <_printf_float+0x3fa>
 80106b6:	464b      	mov	r3, r9
 80106b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80106bc:	e6df      	b.n	801047e <_printf_float+0x1da>
 80106be:	f04f 0800 	mov.w	r8, #0
 80106c2:	f104 0b1a 	add.w	fp, r4, #26
 80106c6:	e7f4      	b.n	80106b2 <_printf_float+0x40e>
 80106c8:	2301      	movs	r3, #1
 80106ca:	4642      	mov	r2, r8
 80106cc:	e7e1      	b.n	8010692 <_printf_float+0x3ee>
 80106ce:	2301      	movs	r3, #1
 80106d0:	464a      	mov	r2, r9
 80106d2:	4631      	mov	r1, r6
 80106d4:	4628      	mov	r0, r5
 80106d6:	47b8      	blx	r7
 80106d8:	3001      	adds	r0, #1
 80106da:	f43f ae3e 	beq.w	801035a <_printf_float+0xb6>
 80106de:	f108 0801 	add.w	r8, r8, #1
 80106e2:	68e3      	ldr	r3, [r4, #12]
 80106e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80106e6:	1a5b      	subs	r3, r3, r1
 80106e8:	4543      	cmp	r3, r8
 80106ea:	dcf0      	bgt.n	80106ce <_printf_float+0x42a>
 80106ec:	e6fc      	b.n	80104e8 <_printf_float+0x244>
 80106ee:	f04f 0800 	mov.w	r8, #0
 80106f2:	f104 0919 	add.w	r9, r4, #25
 80106f6:	e7f4      	b.n	80106e2 <_printf_float+0x43e>

080106f8 <_printf_common>:
 80106f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106fc:	4616      	mov	r6, r2
 80106fe:	4698      	mov	r8, r3
 8010700:	688a      	ldr	r2, [r1, #8]
 8010702:	690b      	ldr	r3, [r1, #16]
 8010704:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010708:	4293      	cmp	r3, r2
 801070a:	bfb8      	it	lt
 801070c:	4613      	movlt	r3, r2
 801070e:	6033      	str	r3, [r6, #0]
 8010710:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010714:	4607      	mov	r7, r0
 8010716:	460c      	mov	r4, r1
 8010718:	b10a      	cbz	r2, 801071e <_printf_common+0x26>
 801071a:	3301      	adds	r3, #1
 801071c:	6033      	str	r3, [r6, #0]
 801071e:	6823      	ldr	r3, [r4, #0]
 8010720:	0699      	lsls	r1, r3, #26
 8010722:	bf42      	ittt	mi
 8010724:	6833      	ldrmi	r3, [r6, #0]
 8010726:	3302      	addmi	r3, #2
 8010728:	6033      	strmi	r3, [r6, #0]
 801072a:	6825      	ldr	r5, [r4, #0]
 801072c:	f015 0506 	ands.w	r5, r5, #6
 8010730:	d106      	bne.n	8010740 <_printf_common+0x48>
 8010732:	f104 0a19 	add.w	sl, r4, #25
 8010736:	68e3      	ldr	r3, [r4, #12]
 8010738:	6832      	ldr	r2, [r6, #0]
 801073a:	1a9b      	subs	r3, r3, r2
 801073c:	42ab      	cmp	r3, r5
 801073e:	dc26      	bgt.n	801078e <_printf_common+0x96>
 8010740:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010744:	6822      	ldr	r2, [r4, #0]
 8010746:	3b00      	subs	r3, #0
 8010748:	bf18      	it	ne
 801074a:	2301      	movne	r3, #1
 801074c:	0692      	lsls	r2, r2, #26
 801074e:	d42b      	bmi.n	80107a8 <_printf_common+0xb0>
 8010750:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010754:	4641      	mov	r1, r8
 8010756:	4638      	mov	r0, r7
 8010758:	47c8      	blx	r9
 801075a:	3001      	adds	r0, #1
 801075c:	d01e      	beq.n	801079c <_printf_common+0xa4>
 801075e:	6823      	ldr	r3, [r4, #0]
 8010760:	6922      	ldr	r2, [r4, #16]
 8010762:	f003 0306 	and.w	r3, r3, #6
 8010766:	2b04      	cmp	r3, #4
 8010768:	bf02      	ittt	eq
 801076a:	68e5      	ldreq	r5, [r4, #12]
 801076c:	6833      	ldreq	r3, [r6, #0]
 801076e:	1aed      	subeq	r5, r5, r3
 8010770:	68a3      	ldr	r3, [r4, #8]
 8010772:	bf0c      	ite	eq
 8010774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010778:	2500      	movne	r5, #0
 801077a:	4293      	cmp	r3, r2
 801077c:	bfc4      	itt	gt
 801077e:	1a9b      	subgt	r3, r3, r2
 8010780:	18ed      	addgt	r5, r5, r3
 8010782:	2600      	movs	r6, #0
 8010784:	341a      	adds	r4, #26
 8010786:	42b5      	cmp	r5, r6
 8010788:	d11a      	bne.n	80107c0 <_printf_common+0xc8>
 801078a:	2000      	movs	r0, #0
 801078c:	e008      	b.n	80107a0 <_printf_common+0xa8>
 801078e:	2301      	movs	r3, #1
 8010790:	4652      	mov	r2, sl
 8010792:	4641      	mov	r1, r8
 8010794:	4638      	mov	r0, r7
 8010796:	47c8      	blx	r9
 8010798:	3001      	adds	r0, #1
 801079a:	d103      	bne.n	80107a4 <_printf_common+0xac>
 801079c:	f04f 30ff 	mov.w	r0, #4294967295
 80107a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107a4:	3501      	adds	r5, #1
 80107a6:	e7c6      	b.n	8010736 <_printf_common+0x3e>
 80107a8:	18e1      	adds	r1, r4, r3
 80107aa:	1c5a      	adds	r2, r3, #1
 80107ac:	2030      	movs	r0, #48	@ 0x30
 80107ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80107b2:	4422      	add	r2, r4
 80107b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80107b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80107bc:	3302      	adds	r3, #2
 80107be:	e7c7      	b.n	8010750 <_printf_common+0x58>
 80107c0:	2301      	movs	r3, #1
 80107c2:	4622      	mov	r2, r4
 80107c4:	4641      	mov	r1, r8
 80107c6:	4638      	mov	r0, r7
 80107c8:	47c8      	blx	r9
 80107ca:	3001      	adds	r0, #1
 80107cc:	d0e6      	beq.n	801079c <_printf_common+0xa4>
 80107ce:	3601      	adds	r6, #1
 80107d0:	e7d9      	b.n	8010786 <_printf_common+0x8e>
	...

080107d4 <_printf_i>:
 80107d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107d8:	7e0f      	ldrb	r7, [r1, #24]
 80107da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80107dc:	2f78      	cmp	r7, #120	@ 0x78
 80107de:	4691      	mov	r9, r2
 80107e0:	4680      	mov	r8, r0
 80107e2:	460c      	mov	r4, r1
 80107e4:	469a      	mov	sl, r3
 80107e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80107ea:	d807      	bhi.n	80107fc <_printf_i+0x28>
 80107ec:	2f62      	cmp	r7, #98	@ 0x62
 80107ee:	d80a      	bhi.n	8010806 <_printf_i+0x32>
 80107f0:	2f00      	cmp	r7, #0
 80107f2:	f000 80d1 	beq.w	8010998 <_printf_i+0x1c4>
 80107f6:	2f58      	cmp	r7, #88	@ 0x58
 80107f8:	f000 80b8 	beq.w	801096c <_printf_i+0x198>
 80107fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010800:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010804:	e03a      	b.n	801087c <_printf_i+0xa8>
 8010806:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801080a:	2b15      	cmp	r3, #21
 801080c:	d8f6      	bhi.n	80107fc <_printf_i+0x28>
 801080e:	a101      	add	r1, pc, #4	@ (adr r1, 8010814 <_printf_i+0x40>)
 8010810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010814:	0801086d 	.word	0x0801086d
 8010818:	08010881 	.word	0x08010881
 801081c:	080107fd 	.word	0x080107fd
 8010820:	080107fd 	.word	0x080107fd
 8010824:	080107fd 	.word	0x080107fd
 8010828:	080107fd 	.word	0x080107fd
 801082c:	08010881 	.word	0x08010881
 8010830:	080107fd 	.word	0x080107fd
 8010834:	080107fd 	.word	0x080107fd
 8010838:	080107fd 	.word	0x080107fd
 801083c:	080107fd 	.word	0x080107fd
 8010840:	0801097f 	.word	0x0801097f
 8010844:	080108ab 	.word	0x080108ab
 8010848:	08010939 	.word	0x08010939
 801084c:	080107fd 	.word	0x080107fd
 8010850:	080107fd 	.word	0x080107fd
 8010854:	080109a1 	.word	0x080109a1
 8010858:	080107fd 	.word	0x080107fd
 801085c:	080108ab 	.word	0x080108ab
 8010860:	080107fd 	.word	0x080107fd
 8010864:	080107fd 	.word	0x080107fd
 8010868:	08010941 	.word	0x08010941
 801086c:	6833      	ldr	r3, [r6, #0]
 801086e:	1d1a      	adds	r2, r3, #4
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	6032      	str	r2, [r6, #0]
 8010874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010878:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801087c:	2301      	movs	r3, #1
 801087e:	e09c      	b.n	80109ba <_printf_i+0x1e6>
 8010880:	6833      	ldr	r3, [r6, #0]
 8010882:	6820      	ldr	r0, [r4, #0]
 8010884:	1d19      	adds	r1, r3, #4
 8010886:	6031      	str	r1, [r6, #0]
 8010888:	0606      	lsls	r6, r0, #24
 801088a:	d501      	bpl.n	8010890 <_printf_i+0xbc>
 801088c:	681d      	ldr	r5, [r3, #0]
 801088e:	e003      	b.n	8010898 <_printf_i+0xc4>
 8010890:	0645      	lsls	r5, r0, #25
 8010892:	d5fb      	bpl.n	801088c <_printf_i+0xb8>
 8010894:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010898:	2d00      	cmp	r5, #0
 801089a:	da03      	bge.n	80108a4 <_printf_i+0xd0>
 801089c:	232d      	movs	r3, #45	@ 0x2d
 801089e:	426d      	negs	r5, r5
 80108a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80108a4:	4858      	ldr	r0, [pc, #352]	@ (8010a08 <_printf_i+0x234>)
 80108a6:	230a      	movs	r3, #10
 80108a8:	e011      	b.n	80108ce <_printf_i+0xfa>
 80108aa:	6821      	ldr	r1, [r4, #0]
 80108ac:	6833      	ldr	r3, [r6, #0]
 80108ae:	0608      	lsls	r0, r1, #24
 80108b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80108b4:	d402      	bmi.n	80108bc <_printf_i+0xe8>
 80108b6:	0649      	lsls	r1, r1, #25
 80108b8:	bf48      	it	mi
 80108ba:	b2ad      	uxthmi	r5, r5
 80108bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80108be:	4852      	ldr	r0, [pc, #328]	@ (8010a08 <_printf_i+0x234>)
 80108c0:	6033      	str	r3, [r6, #0]
 80108c2:	bf14      	ite	ne
 80108c4:	230a      	movne	r3, #10
 80108c6:	2308      	moveq	r3, #8
 80108c8:	2100      	movs	r1, #0
 80108ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80108ce:	6866      	ldr	r6, [r4, #4]
 80108d0:	60a6      	str	r6, [r4, #8]
 80108d2:	2e00      	cmp	r6, #0
 80108d4:	db05      	blt.n	80108e2 <_printf_i+0x10e>
 80108d6:	6821      	ldr	r1, [r4, #0]
 80108d8:	432e      	orrs	r6, r5
 80108da:	f021 0104 	bic.w	r1, r1, #4
 80108de:	6021      	str	r1, [r4, #0]
 80108e0:	d04b      	beq.n	801097a <_printf_i+0x1a6>
 80108e2:	4616      	mov	r6, r2
 80108e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80108e8:	fb03 5711 	mls	r7, r3, r1, r5
 80108ec:	5dc7      	ldrb	r7, [r0, r7]
 80108ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80108f2:	462f      	mov	r7, r5
 80108f4:	42bb      	cmp	r3, r7
 80108f6:	460d      	mov	r5, r1
 80108f8:	d9f4      	bls.n	80108e4 <_printf_i+0x110>
 80108fa:	2b08      	cmp	r3, #8
 80108fc:	d10b      	bne.n	8010916 <_printf_i+0x142>
 80108fe:	6823      	ldr	r3, [r4, #0]
 8010900:	07df      	lsls	r7, r3, #31
 8010902:	d508      	bpl.n	8010916 <_printf_i+0x142>
 8010904:	6923      	ldr	r3, [r4, #16]
 8010906:	6861      	ldr	r1, [r4, #4]
 8010908:	4299      	cmp	r1, r3
 801090a:	bfde      	ittt	le
 801090c:	2330      	movle	r3, #48	@ 0x30
 801090e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010912:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010916:	1b92      	subs	r2, r2, r6
 8010918:	6122      	str	r2, [r4, #16]
 801091a:	f8cd a000 	str.w	sl, [sp]
 801091e:	464b      	mov	r3, r9
 8010920:	aa03      	add	r2, sp, #12
 8010922:	4621      	mov	r1, r4
 8010924:	4640      	mov	r0, r8
 8010926:	f7ff fee7 	bl	80106f8 <_printf_common>
 801092a:	3001      	adds	r0, #1
 801092c:	d14a      	bne.n	80109c4 <_printf_i+0x1f0>
 801092e:	f04f 30ff 	mov.w	r0, #4294967295
 8010932:	b004      	add	sp, #16
 8010934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010938:	6823      	ldr	r3, [r4, #0]
 801093a:	f043 0320 	orr.w	r3, r3, #32
 801093e:	6023      	str	r3, [r4, #0]
 8010940:	4832      	ldr	r0, [pc, #200]	@ (8010a0c <_printf_i+0x238>)
 8010942:	2778      	movs	r7, #120	@ 0x78
 8010944:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010948:	6823      	ldr	r3, [r4, #0]
 801094a:	6831      	ldr	r1, [r6, #0]
 801094c:	061f      	lsls	r7, r3, #24
 801094e:	f851 5b04 	ldr.w	r5, [r1], #4
 8010952:	d402      	bmi.n	801095a <_printf_i+0x186>
 8010954:	065f      	lsls	r7, r3, #25
 8010956:	bf48      	it	mi
 8010958:	b2ad      	uxthmi	r5, r5
 801095a:	6031      	str	r1, [r6, #0]
 801095c:	07d9      	lsls	r1, r3, #31
 801095e:	bf44      	itt	mi
 8010960:	f043 0320 	orrmi.w	r3, r3, #32
 8010964:	6023      	strmi	r3, [r4, #0]
 8010966:	b11d      	cbz	r5, 8010970 <_printf_i+0x19c>
 8010968:	2310      	movs	r3, #16
 801096a:	e7ad      	b.n	80108c8 <_printf_i+0xf4>
 801096c:	4826      	ldr	r0, [pc, #152]	@ (8010a08 <_printf_i+0x234>)
 801096e:	e7e9      	b.n	8010944 <_printf_i+0x170>
 8010970:	6823      	ldr	r3, [r4, #0]
 8010972:	f023 0320 	bic.w	r3, r3, #32
 8010976:	6023      	str	r3, [r4, #0]
 8010978:	e7f6      	b.n	8010968 <_printf_i+0x194>
 801097a:	4616      	mov	r6, r2
 801097c:	e7bd      	b.n	80108fa <_printf_i+0x126>
 801097e:	6833      	ldr	r3, [r6, #0]
 8010980:	6825      	ldr	r5, [r4, #0]
 8010982:	6961      	ldr	r1, [r4, #20]
 8010984:	1d18      	adds	r0, r3, #4
 8010986:	6030      	str	r0, [r6, #0]
 8010988:	062e      	lsls	r6, r5, #24
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	d501      	bpl.n	8010992 <_printf_i+0x1be>
 801098e:	6019      	str	r1, [r3, #0]
 8010990:	e002      	b.n	8010998 <_printf_i+0x1c4>
 8010992:	0668      	lsls	r0, r5, #25
 8010994:	d5fb      	bpl.n	801098e <_printf_i+0x1ba>
 8010996:	8019      	strh	r1, [r3, #0]
 8010998:	2300      	movs	r3, #0
 801099a:	6123      	str	r3, [r4, #16]
 801099c:	4616      	mov	r6, r2
 801099e:	e7bc      	b.n	801091a <_printf_i+0x146>
 80109a0:	6833      	ldr	r3, [r6, #0]
 80109a2:	1d1a      	adds	r2, r3, #4
 80109a4:	6032      	str	r2, [r6, #0]
 80109a6:	681e      	ldr	r6, [r3, #0]
 80109a8:	6862      	ldr	r2, [r4, #4]
 80109aa:	2100      	movs	r1, #0
 80109ac:	4630      	mov	r0, r6
 80109ae:	f7ef fc0f 	bl	80001d0 <memchr>
 80109b2:	b108      	cbz	r0, 80109b8 <_printf_i+0x1e4>
 80109b4:	1b80      	subs	r0, r0, r6
 80109b6:	6060      	str	r0, [r4, #4]
 80109b8:	6863      	ldr	r3, [r4, #4]
 80109ba:	6123      	str	r3, [r4, #16]
 80109bc:	2300      	movs	r3, #0
 80109be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80109c2:	e7aa      	b.n	801091a <_printf_i+0x146>
 80109c4:	6923      	ldr	r3, [r4, #16]
 80109c6:	4632      	mov	r2, r6
 80109c8:	4649      	mov	r1, r9
 80109ca:	4640      	mov	r0, r8
 80109cc:	47d0      	blx	sl
 80109ce:	3001      	adds	r0, #1
 80109d0:	d0ad      	beq.n	801092e <_printf_i+0x15a>
 80109d2:	6823      	ldr	r3, [r4, #0]
 80109d4:	079b      	lsls	r3, r3, #30
 80109d6:	d413      	bmi.n	8010a00 <_printf_i+0x22c>
 80109d8:	68e0      	ldr	r0, [r4, #12]
 80109da:	9b03      	ldr	r3, [sp, #12]
 80109dc:	4298      	cmp	r0, r3
 80109de:	bfb8      	it	lt
 80109e0:	4618      	movlt	r0, r3
 80109e2:	e7a6      	b.n	8010932 <_printf_i+0x15e>
 80109e4:	2301      	movs	r3, #1
 80109e6:	4632      	mov	r2, r6
 80109e8:	4649      	mov	r1, r9
 80109ea:	4640      	mov	r0, r8
 80109ec:	47d0      	blx	sl
 80109ee:	3001      	adds	r0, #1
 80109f0:	d09d      	beq.n	801092e <_printf_i+0x15a>
 80109f2:	3501      	adds	r5, #1
 80109f4:	68e3      	ldr	r3, [r4, #12]
 80109f6:	9903      	ldr	r1, [sp, #12]
 80109f8:	1a5b      	subs	r3, r3, r1
 80109fa:	42ab      	cmp	r3, r5
 80109fc:	dcf2      	bgt.n	80109e4 <_printf_i+0x210>
 80109fe:	e7eb      	b.n	80109d8 <_printf_i+0x204>
 8010a00:	2500      	movs	r5, #0
 8010a02:	f104 0619 	add.w	r6, r4, #25
 8010a06:	e7f5      	b.n	80109f4 <_printf_i+0x220>
 8010a08:	0801475a 	.word	0x0801475a
 8010a0c:	0801476b 	.word	0x0801476b

08010a10 <_scanf_float>:
 8010a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a14:	b087      	sub	sp, #28
 8010a16:	4691      	mov	r9, r2
 8010a18:	9303      	str	r3, [sp, #12]
 8010a1a:	688b      	ldr	r3, [r1, #8]
 8010a1c:	1e5a      	subs	r2, r3, #1
 8010a1e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010a22:	bf81      	itttt	hi
 8010a24:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010a28:	eb03 0b05 	addhi.w	fp, r3, r5
 8010a2c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010a30:	608b      	strhi	r3, [r1, #8]
 8010a32:	680b      	ldr	r3, [r1, #0]
 8010a34:	460a      	mov	r2, r1
 8010a36:	f04f 0500 	mov.w	r5, #0
 8010a3a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8010a3e:	f842 3b1c 	str.w	r3, [r2], #28
 8010a42:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010a46:	4680      	mov	r8, r0
 8010a48:	460c      	mov	r4, r1
 8010a4a:	bf98      	it	ls
 8010a4c:	f04f 0b00 	movls.w	fp, #0
 8010a50:	9201      	str	r2, [sp, #4]
 8010a52:	4616      	mov	r6, r2
 8010a54:	46aa      	mov	sl, r5
 8010a56:	462f      	mov	r7, r5
 8010a58:	9502      	str	r5, [sp, #8]
 8010a5a:	68a2      	ldr	r2, [r4, #8]
 8010a5c:	b15a      	cbz	r2, 8010a76 <_scanf_float+0x66>
 8010a5e:	f8d9 3000 	ldr.w	r3, [r9]
 8010a62:	781b      	ldrb	r3, [r3, #0]
 8010a64:	2b4e      	cmp	r3, #78	@ 0x4e
 8010a66:	d863      	bhi.n	8010b30 <_scanf_float+0x120>
 8010a68:	2b40      	cmp	r3, #64	@ 0x40
 8010a6a:	d83b      	bhi.n	8010ae4 <_scanf_float+0xd4>
 8010a6c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8010a70:	b2c8      	uxtb	r0, r1
 8010a72:	280e      	cmp	r0, #14
 8010a74:	d939      	bls.n	8010aea <_scanf_float+0xda>
 8010a76:	b11f      	cbz	r7, 8010a80 <_scanf_float+0x70>
 8010a78:	6823      	ldr	r3, [r4, #0]
 8010a7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010a7e:	6023      	str	r3, [r4, #0]
 8010a80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010a84:	f1ba 0f01 	cmp.w	sl, #1
 8010a88:	f200 8114 	bhi.w	8010cb4 <_scanf_float+0x2a4>
 8010a8c:	9b01      	ldr	r3, [sp, #4]
 8010a8e:	429e      	cmp	r6, r3
 8010a90:	f200 8105 	bhi.w	8010c9e <_scanf_float+0x28e>
 8010a94:	2001      	movs	r0, #1
 8010a96:	b007      	add	sp, #28
 8010a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a9c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8010aa0:	2a0d      	cmp	r2, #13
 8010aa2:	d8e8      	bhi.n	8010a76 <_scanf_float+0x66>
 8010aa4:	a101      	add	r1, pc, #4	@ (adr r1, 8010aac <_scanf_float+0x9c>)
 8010aa6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010aaa:	bf00      	nop
 8010aac:	08010bf5 	.word	0x08010bf5
 8010ab0:	08010a77 	.word	0x08010a77
 8010ab4:	08010a77 	.word	0x08010a77
 8010ab8:	08010a77 	.word	0x08010a77
 8010abc:	08010c51 	.word	0x08010c51
 8010ac0:	08010c2b 	.word	0x08010c2b
 8010ac4:	08010a77 	.word	0x08010a77
 8010ac8:	08010a77 	.word	0x08010a77
 8010acc:	08010c03 	.word	0x08010c03
 8010ad0:	08010a77 	.word	0x08010a77
 8010ad4:	08010a77 	.word	0x08010a77
 8010ad8:	08010a77 	.word	0x08010a77
 8010adc:	08010a77 	.word	0x08010a77
 8010ae0:	08010bbf 	.word	0x08010bbf
 8010ae4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010ae8:	e7da      	b.n	8010aa0 <_scanf_float+0x90>
 8010aea:	290e      	cmp	r1, #14
 8010aec:	d8c3      	bhi.n	8010a76 <_scanf_float+0x66>
 8010aee:	a001      	add	r0, pc, #4	@ (adr r0, 8010af4 <_scanf_float+0xe4>)
 8010af0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010af4:	08010baf 	.word	0x08010baf
 8010af8:	08010a77 	.word	0x08010a77
 8010afc:	08010baf 	.word	0x08010baf
 8010b00:	08010c3f 	.word	0x08010c3f
 8010b04:	08010a77 	.word	0x08010a77
 8010b08:	08010b51 	.word	0x08010b51
 8010b0c:	08010b95 	.word	0x08010b95
 8010b10:	08010b95 	.word	0x08010b95
 8010b14:	08010b95 	.word	0x08010b95
 8010b18:	08010b95 	.word	0x08010b95
 8010b1c:	08010b95 	.word	0x08010b95
 8010b20:	08010b95 	.word	0x08010b95
 8010b24:	08010b95 	.word	0x08010b95
 8010b28:	08010b95 	.word	0x08010b95
 8010b2c:	08010b95 	.word	0x08010b95
 8010b30:	2b6e      	cmp	r3, #110	@ 0x6e
 8010b32:	d809      	bhi.n	8010b48 <_scanf_float+0x138>
 8010b34:	2b60      	cmp	r3, #96	@ 0x60
 8010b36:	d8b1      	bhi.n	8010a9c <_scanf_float+0x8c>
 8010b38:	2b54      	cmp	r3, #84	@ 0x54
 8010b3a:	d07b      	beq.n	8010c34 <_scanf_float+0x224>
 8010b3c:	2b59      	cmp	r3, #89	@ 0x59
 8010b3e:	d19a      	bne.n	8010a76 <_scanf_float+0x66>
 8010b40:	2d07      	cmp	r5, #7
 8010b42:	d198      	bne.n	8010a76 <_scanf_float+0x66>
 8010b44:	2508      	movs	r5, #8
 8010b46:	e02f      	b.n	8010ba8 <_scanf_float+0x198>
 8010b48:	2b74      	cmp	r3, #116	@ 0x74
 8010b4a:	d073      	beq.n	8010c34 <_scanf_float+0x224>
 8010b4c:	2b79      	cmp	r3, #121	@ 0x79
 8010b4e:	e7f6      	b.n	8010b3e <_scanf_float+0x12e>
 8010b50:	6821      	ldr	r1, [r4, #0]
 8010b52:	05c8      	lsls	r0, r1, #23
 8010b54:	d51e      	bpl.n	8010b94 <_scanf_float+0x184>
 8010b56:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8010b5a:	6021      	str	r1, [r4, #0]
 8010b5c:	3701      	adds	r7, #1
 8010b5e:	f1bb 0f00 	cmp.w	fp, #0
 8010b62:	d003      	beq.n	8010b6c <_scanf_float+0x15c>
 8010b64:	3201      	adds	r2, #1
 8010b66:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010b6a:	60a2      	str	r2, [r4, #8]
 8010b6c:	68a3      	ldr	r3, [r4, #8]
 8010b6e:	3b01      	subs	r3, #1
 8010b70:	60a3      	str	r3, [r4, #8]
 8010b72:	6923      	ldr	r3, [r4, #16]
 8010b74:	3301      	adds	r3, #1
 8010b76:	6123      	str	r3, [r4, #16]
 8010b78:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010b7c:	3b01      	subs	r3, #1
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	f8c9 3004 	str.w	r3, [r9, #4]
 8010b84:	f340 8082 	ble.w	8010c8c <_scanf_float+0x27c>
 8010b88:	f8d9 3000 	ldr.w	r3, [r9]
 8010b8c:	3301      	adds	r3, #1
 8010b8e:	f8c9 3000 	str.w	r3, [r9]
 8010b92:	e762      	b.n	8010a5a <_scanf_float+0x4a>
 8010b94:	eb1a 0105 	adds.w	r1, sl, r5
 8010b98:	f47f af6d 	bne.w	8010a76 <_scanf_float+0x66>
 8010b9c:	6822      	ldr	r2, [r4, #0]
 8010b9e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010ba2:	6022      	str	r2, [r4, #0]
 8010ba4:	460d      	mov	r5, r1
 8010ba6:	468a      	mov	sl, r1
 8010ba8:	f806 3b01 	strb.w	r3, [r6], #1
 8010bac:	e7de      	b.n	8010b6c <_scanf_float+0x15c>
 8010bae:	6822      	ldr	r2, [r4, #0]
 8010bb0:	0610      	lsls	r0, r2, #24
 8010bb2:	f57f af60 	bpl.w	8010a76 <_scanf_float+0x66>
 8010bb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010bba:	6022      	str	r2, [r4, #0]
 8010bbc:	e7f4      	b.n	8010ba8 <_scanf_float+0x198>
 8010bbe:	f1ba 0f00 	cmp.w	sl, #0
 8010bc2:	d10c      	bne.n	8010bde <_scanf_float+0x1ce>
 8010bc4:	b977      	cbnz	r7, 8010be4 <_scanf_float+0x1d4>
 8010bc6:	6822      	ldr	r2, [r4, #0]
 8010bc8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010bcc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010bd0:	d108      	bne.n	8010be4 <_scanf_float+0x1d4>
 8010bd2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010bd6:	6022      	str	r2, [r4, #0]
 8010bd8:	f04f 0a01 	mov.w	sl, #1
 8010bdc:	e7e4      	b.n	8010ba8 <_scanf_float+0x198>
 8010bde:	f1ba 0f02 	cmp.w	sl, #2
 8010be2:	d050      	beq.n	8010c86 <_scanf_float+0x276>
 8010be4:	2d01      	cmp	r5, #1
 8010be6:	d002      	beq.n	8010bee <_scanf_float+0x1de>
 8010be8:	2d04      	cmp	r5, #4
 8010bea:	f47f af44 	bne.w	8010a76 <_scanf_float+0x66>
 8010bee:	3501      	adds	r5, #1
 8010bf0:	b2ed      	uxtb	r5, r5
 8010bf2:	e7d9      	b.n	8010ba8 <_scanf_float+0x198>
 8010bf4:	f1ba 0f01 	cmp.w	sl, #1
 8010bf8:	f47f af3d 	bne.w	8010a76 <_scanf_float+0x66>
 8010bfc:	f04f 0a02 	mov.w	sl, #2
 8010c00:	e7d2      	b.n	8010ba8 <_scanf_float+0x198>
 8010c02:	b975      	cbnz	r5, 8010c22 <_scanf_float+0x212>
 8010c04:	2f00      	cmp	r7, #0
 8010c06:	f47f af37 	bne.w	8010a78 <_scanf_float+0x68>
 8010c0a:	6822      	ldr	r2, [r4, #0]
 8010c0c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010c10:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010c14:	f040 8103 	bne.w	8010e1e <_scanf_float+0x40e>
 8010c18:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010c1c:	6022      	str	r2, [r4, #0]
 8010c1e:	2501      	movs	r5, #1
 8010c20:	e7c2      	b.n	8010ba8 <_scanf_float+0x198>
 8010c22:	2d03      	cmp	r5, #3
 8010c24:	d0e3      	beq.n	8010bee <_scanf_float+0x1de>
 8010c26:	2d05      	cmp	r5, #5
 8010c28:	e7df      	b.n	8010bea <_scanf_float+0x1da>
 8010c2a:	2d02      	cmp	r5, #2
 8010c2c:	f47f af23 	bne.w	8010a76 <_scanf_float+0x66>
 8010c30:	2503      	movs	r5, #3
 8010c32:	e7b9      	b.n	8010ba8 <_scanf_float+0x198>
 8010c34:	2d06      	cmp	r5, #6
 8010c36:	f47f af1e 	bne.w	8010a76 <_scanf_float+0x66>
 8010c3a:	2507      	movs	r5, #7
 8010c3c:	e7b4      	b.n	8010ba8 <_scanf_float+0x198>
 8010c3e:	6822      	ldr	r2, [r4, #0]
 8010c40:	0591      	lsls	r1, r2, #22
 8010c42:	f57f af18 	bpl.w	8010a76 <_scanf_float+0x66>
 8010c46:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8010c4a:	6022      	str	r2, [r4, #0]
 8010c4c:	9702      	str	r7, [sp, #8]
 8010c4e:	e7ab      	b.n	8010ba8 <_scanf_float+0x198>
 8010c50:	6822      	ldr	r2, [r4, #0]
 8010c52:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8010c56:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010c5a:	d005      	beq.n	8010c68 <_scanf_float+0x258>
 8010c5c:	0550      	lsls	r0, r2, #21
 8010c5e:	f57f af0a 	bpl.w	8010a76 <_scanf_float+0x66>
 8010c62:	2f00      	cmp	r7, #0
 8010c64:	f000 80db 	beq.w	8010e1e <_scanf_float+0x40e>
 8010c68:	0591      	lsls	r1, r2, #22
 8010c6a:	bf58      	it	pl
 8010c6c:	9902      	ldrpl	r1, [sp, #8]
 8010c6e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010c72:	bf58      	it	pl
 8010c74:	1a79      	subpl	r1, r7, r1
 8010c76:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8010c7a:	bf58      	it	pl
 8010c7c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010c80:	6022      	str	r2, [r4, #0]
 8010c82:	2700      	movs	r7, #0
 8010c84:	e790      	b.n	8010ba8 <_scanf_float+0x198>
 8010c86:	f04f 0a03 	mov.w	sl, #3
 8010c8a:	e78d      	b.n	8010ba8 <_scanf_float+0x198>
 8010c8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010c90:	4649      	mov	r1, r9
 8010c92:	4640      	mov	r0, r8
 8010c94:	4798      	blx	r3
 8010c96:	2800      	cmp	r0, #0
 8010c98:	f43f aedf 	beq.w	8010a5a <_scanf_float+0x4a>
 8010c9c:	e6eb      	b.n	8010a76 <_scanf_float+0x66>
 8010c9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010ca2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010ca6:	464a      	mov	r2, r9
 8010ca8:	4640      	mov	r0, r8
 8010caa:	4798      	blx	r3
 8010cac:	6923      	ldr	r3, [r4, #16]
 8010cae:	3b01      	subs	r3, #1
 8010cb0:	6123      	str	r3, [r4, #16]
 8010cb2:	e6eb      	b.n	8010a8c <_scanf_float+0x7c>
 8010cb4:	1e6b      	subs	r3, r5, #1
 8010cb6:	2b06      	cmp	r3, #6
 8010cb8:	d824      	bhi.n	8010d04 <_scanf_float+0x2f4>
 8010cba:	2d02      	cmp	r5, #2
 8010cbc:	d836      	bhi.n	8010d2c <_scanf_float+0x31c>
 8010cbe:	9b01      	ldr	r3, [sp, #4]
 8010cc0:	429e      	cmp	r6, r3
 8010cc2:	f67f aee7 	bls.w	8010a94 <_scanf_float+0x84>
 8010cc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010cca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010cce:	464a      	mov	r2, r9
 8010cd0:	4640      	mov	r0, r8
 8010cd2:	4798      	blx	r3
 8010cd4:	6923      	ldr	r3, [r4, #16]
 8010cd6:	3b01      	subs	r3, #1
 8010cd8:	6123      	str	r3, [r4, #16]
 8010cda:	e7f0      	b.n	8010cbe <_scanf_float+0x2ae>
 8010cdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010ce0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010ce4:	464a      	mov	r2, r9
 8010ce6:	4640      	mov	r0, r8
 8010ce8:	4798      	blx	r3
 8010cea:	6923      	ldr	r3, [r4, #16]
 8010cec:	3b01      	subs	r3, #1
 8010cee:	6123      	str	r3, [r4, #16]
 8010cf0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010cf4:	fa5f fa8a 	uxtb.w	sl, sl
 8010cf8:	f1ba 0f02 	cmp.w	sl, #2
 8010cfc:	d1ee      	bne.n	8010cdc <_scanf_float+0x2cc>
 8010cfe:	3d03      	subs	r5, #3
 8010d00:	b2ed      	uxtb	r5, r5
 8010d02:	1b76      	subs	r6, r6, r5
 8010d04:	6823      	ldr	r3, [r4, #0]
 8010d06:	05da      	lsls	r2, r3, #23
 8010d08:	d530      	bpl.n	8010d6c <_scanf_float+0x35c>
 8010d0a:	055b      	lsls	r3, r3, #21
 8010d0c:	d511      	bpl.n	8010d32 <_scanf_float+0x322>
 8010d0e:	9b01      	ldr	r3, [sp, #4]
 8010d10:	429e      	cmp	r6, r3
 8010d12:	f67f aebf 	bls.w	8010a94 <_scanf_float+0x84>
 8010d16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010d1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010d1e:	464a      	mov	r2, r9
 8010d20:	4640      	mov	r0, r8
 8010d22:	4798      	blx	r3
 8010d24:	6923      	ldr	r3, [r4, #16]
 8010d26:	3b01      	subs	r3, #1
 8010d28:	6123      	str	r3, [r4, #16]
 8010d2a:	e7f0      	b.n	8010d0e <_scanf_float+0x2fe>
 8010d2c:	46aa      	mov	sl, r5
 8010d2e:	46b3      	mov	fp, r6
 8010d30:	e7de      	b.n	8010cf0 <_scanf_float+0x2e0>
 8010d32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010d36:	6923      	ldr	r3, [r4, #16]
 8010d38:	2965      	cmp	r1, #101	@ 0x65
 8010d3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8010d3e:	f106 35ff 	add.w	r5, r6, #4294967295
 8010d42:	6123      	str	r3, [r4, #16]
 8010d44:	d00c      	beq.n	8010d60 <_scanf_float+0x350>
 8010d46:	2945      	cmp	r1, #69	@ 0x45
 8010d48:	d00a      	beq.n	8010d60 <_scanf_float+0x350>
 8010d4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010d4e:	464a      	mov	r2, r9
 8010d50:	4640      	mov	r0, r8
 8010d52:	4798      	blx	r3
 8010d54:	6923      	ldr	r3, [r4, #16]
 8010d56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010d5a:	3b01      	subs	r3, #1
 8010d5c:	1eb5      	subs	r5, r6, #2
 8010d5e:	6123      	str	r3, [r4, #16]
 8010d60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010d64:	464a      	mov	r2, r9
 8010d66:	4640      	mov	r0, r8
 8010d68:	4798      	blx	r3
 8010d6a:	462e      	mov	r6, r5
 8010d6c:	6822      	ldr	r2, [r4, #0]
 8010d6e:	f012 0210 	ands.w	r2, r2, #16
 8010d72:	d001      	beq.n	8010d78 <_scanf_float+0x368>
 8010d74:	2000      	movs	r0, #0
 8010d76:	e68e      	b.n	8010a96 <_scanf_float+0x86>
 8010d78:	7032      	strb	r2, [r6, #0]
 8010d7a:	6823      	ldr	r3, [r4, #0]
 8010d7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010d80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010d84:	d125      	bne.n	8010dd2 <_scanf_float+0x3c2>
 8010d86:	9b02      	ldr	r3, [sp, #8]
 8010d88:	429f      	cmp	r7, r3
 8010d8a:	d00a      	beq.n	8010da2 <_scanf_float+0x392>
 8010d8c:	1bda      	subs	r2, r3, r7
 8010d8e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010d92:	429e      	cmp	r6, r3
 8010d94:	bf28      	it	cs
 8010d96:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010d9a:	4922      	ldr	r1, [pc, #136]	@ (8010e24 <_scanf_float+0x414>)
 8010d9c:	4630      	mov	r0, r6
 8010d9e:	f000 f907 	bl	8010fb0 <siprintf>
 8010da2:	9901      	ldr	r1, [sp, #4]
 8010da4:	2200      	movs	r2, #0
 8010da6:	4640      	mov	r0, r8
 8010da8:	f002 fb4a 	bl	8013440 <_strtod_r>
 8010dac:	9b03      	ldr	r3, [sp, #12]
 8010dae:	6821      	ldr	r1, [r4, #0]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	f011 0f02 	tst.w	r1, #2
 8010db6:	ec57 6b10 	vmov	r6, r7, d0
 8010dba:	f103 0204 	add.w	r2, r3, #4
 8010dbe:	d015      	beq.n	8010dec <_scanf_float+0x3dc>
 8010dc0:	9903      	ldr	r1, [sp, #12]
 8010dc2:	600a      	str	r2, [r1, #0]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	e9c3 6700 	strd	r6, r7, [r3]
 8010dca:	68e3      	ldr	r3, [r4, #12]
 8010dcc:	3301      	adds	r3, #1
 8010dce:	60e3      	str	r3, [r4, #12]
 8010dd0:	e7d0      	b.n	8010d74 <_scanf_float+0x364>
 8010dd2:	9b04      	ldr	r3, [sp, #16]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d0e4      	beq.n	8010da2 <_scanf_float+0x392>
 8010dd8:	9905      	ldr	r1, [sp, #20]
 8010dda:	230a      	movs	r3, #10
 8010ddc:	3101      	adds	r1, #1
 8010dde:	4640      	mov	r0, r8
 8010de0:	f002 fbae 	bl	8013540 <_strtol_r>
 8010de4:	9b04      	ldr	r3, [sp, #16]
 8010de6:	9e05      	ldr	r6, [sp, #20]
 8010de8:	1ac2      	subs	r2, r0, r3
 8010dea:	e7d0      	b.n	8010d8e <_scanf_float+0x37e>
 8010dec:	f011 0f04 	tst.w	r1, #4
 8010df0:	9903      	ldr	r1, [sp, #12]
 8010df2:	600a      	str	r2, [r1, #0]
 8010df4:	d1e6      	bne.n	8010dc4 <_scanf_float+0x3b4>
 8010df6:	681d      	ldr	r5, [r3, #0]
 8010df8:	4632      	mov	r2, r6
 8010dfa:	463b      	mov	r3, r7
 8010dfc:	4630      	mov	r0, r6
 8010dfe:	4639      	mov	r1, r7
 8010e00:	f7ef fe94 	bl	8000b2c <__aeabi_dcmpun>
 8010e04:	b128      	cbz	r0, 8010e12 <_scanf_float+0x402>
 8010e06:	4808      	ldr	r0, [pc, #32]	@ (8010e28 <_scanf_float+0x418>)
 8010e08:	f7fd f85e 	bl	800dec8 <nanf>
 8010e0c:	ed85 0a00 	vstr	s0, [r5]
 8010e10:	e7db      	b.n	8010dca <_scanf_float+0x3ba>
 8010e12:	4630      	mov	r0, r6
 8010e14:	4639      	mov	r1, r7
 8010e16:	f7ef fee7 	bl	8000be8 <__aeabi_d2f>
 8010e1a:	6028      	str	r0, [r5, #0]
 8010e1c:	e7d5      	b.n	8010dca <_scanf_float+0x3ba>
 8010e1e:	2700      	movs	r7, #0
 8010e20:	e62e      	b.n	8010a80 <_scanf_float+0x70>
 8010e22:	bf00      	nop
 8010e24:	0801477c 	.word	0x0801477c
 8010e28:	080148bd 	.word	0x080148bd

08010e2c <std>:
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	b510      	push	{r4, lr}
 8010e30:	4604      	mov	r4, r0
 8010e32:	e9c0 3300 	strd	r3, r3, [r0]
 8010e36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010e3a:	6083      	str	r3, [r0, #8]
 8010e3c:	8181      	strh	r1, [r0, #12]
 8010e3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8010e40:	81c2      	strh	r2, [r0, #14]
 8010e42:	6183      	str	r3, [r0, #24]
 8010e44:	4619      	mov	r1, r3
 8010e46:	2208      	movs	r2, #8
 8010e48:	305c      	adds	r0, #92	@ 0x5c
 8010e4a:	f000 f916 	bl	801107a <memset>
 8010e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8010e84 <std+0x58>)
 8010e50:	6263      	str	r3, [r4, #36]	@ 0x24
 8010e52:	4b0d      	ldr	r3, [pc, #52]	@ (8010e88 <std+0x5c>)
 8010e54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010e56:	4b0d      	ldr	r3, [pc, #52]	@ (8010e8c <std+0x60>)
 8010e58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8010e90 <std+0x64>)
 8010e5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8010e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8010e94 <std+0x68>)
 8010e60:	6224      	str	r4, [r4, #32]
 8010e62:	429c      	cmp	r4, r3
 8010e64:	d006      	beq.n	8010e74 <std+0x48>
 8010e66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010e6a:	4294      	cmp	r4, r2
 8010e6c:	d002      	beq.n	8010e74 <std+0x48>
 8010e6e:	33d0      	adds	r3, #208	@ 0xd0
 8010e70:	429c      	cmp	r4, r3
 8010e72:	d105      	bne.n	8010e80 <std+0x54>
 8010e74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e7c:	f000 b98a 	b.w	8011194 <__retarget_lock_init_recursive>
 8010e80:	bd10      	pop	{r4, pc}
 8010e82:	bf00      	nop
 8010e84:	08010ff5 	.word	0x08010ff5
 8010e88:	08011017 	.word	0x08011017
 8010e8c:	0801104f 	.word	0x0801104f
 8010e90:	08011073 	.word	0x08011073
 8010e94:	20000ce4 	.word	0x20000ce4

08010e98 <stdio_exit_handler>:
 8010e98:	4a02      	ldr	r2, [pc, #8]	@ (8010ea4 <stdio_exit_handler+0xc>)
 8010e9a:	4903      	ldr	r1, [pc, #12]	@ (8010ea8 <stdio_exit_handler+0x10>)
 8010e9c:	4803      	ldr	r0, [pc, #12]	@ (8010eac <stdio_exit_handler+0x14>)
 8010e9e:	f000 b869 	b.w	8010f74 <_fwalk_sglue>
 8010ea2:	bf00      	nop
 8010ea4:	20000018 	.word	0x20000018
 8010ea8:	080138fd 	.word	0x080138fd
 8010eac:	20000028 	.word	0x20000028

08010eb0 <cleanup_stdio>:
 8010eb0:	6841      	ldr	r1, [r0, #4]
 8010eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8010ee4 <cleanup_stdio+0x34>)
 8010eb4:	4299      	cmp	r1, r3
 8010eb6:	b510      	push	{r4, lr}
 8010eb8:	4604      	mov	r4, r0
 8010eba:	d001      	beq.n	8010ec0 <cleanup_stdio+0x10>
 8010ebc:	f002 fd1e 	bl	80138fc <_fflush_r>
 8010ec0:	68a1      	ldr	r1, [r4, #8]
 8010ec2:	4b09      	ldr	r3, [pc, #36]	@ (8010ee8 <cleanup_stdio+0x38>)
 8010ec4:	4299      	cmp	r1, r3
 8010ec6:	d002      	beq.n	8010ece <cleanup_stdio+0x1e>
 8010ec8:	4620      	mov	r0, r4
 8010eca:	f002 fd17 	bl	80138fc <_fflush_r>
 8010ece:	68e1      	ldr	r1, [r4, #12]
 8010ed0:	4b06      	ldr	r3, [pc, #24]	@ (8010eec <cleanup_stdio+0x3c>)
 8010ed2:	4299      	cmp	r1, r3
 8010ed4:	d004      	beq.n	8010ee0 <cleanup_stdio+0x30>
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010edc:	f002 bd0e 	b.w	80138fc <_fflush_r>
 8010ee0:	bd10      	pop	{r4, pc}
 8010ee2:	bf00      	nop
 8010ee4:	20000ce4 	.word	0x20000ce4
 8010ee8:	20000d4c 	.word	0x20000d4c
 8010eec:	20000db4 	.word	0x20000db4

08010ef0 <global_stdio_init.part.0>:
 8010ef0:	b510      	push	{r4, lr}
 8010ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8010f20 <global_stdio_init.part.0+0x30>)
 8010ef4:	4c0b      	ldr	r4, [pc, #44]	@ (8010f24 <global_stdio_init.part.0+0x34>)
 8010ef6:	4a0c      	ldr	r2, [pc, #48]	@ (8010f28 <global_stdio_init.part.0+0x38>)
 8010ef8:	601a      	str	r2, [r3, #0]
 8010efa:	4620      	mov	r0, r4
 8010efc:	2200      	movs	r2, #0
 8010efe:	2104      	movs	r1, #4
 8010f00:	f7ff ff94 	bl	8010e2c <std>
 8010f04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010f08:	2201      	movs	r2, #1
 8010f0a:	2109      	movs	r1, #9
 8010f0c:	f7ff ff8e 	bl	8010e2c <std>
 8010f10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010f14:	2202      	movs	r2, #2
 8010f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f1a:	2112      	movs	r1, #18
 8010f1c:	f7ff bf86 	b.w	8010e2c <std>
 8010f20:	20000e1c 	.word	0x20000e1c
 8010f24:	20000ce4 	.word	0x20000ce4
 8010f28:	08010e99 	.word	0x08010e99

08010f2c <__sfp_lock_acquire>:
 8010f2c:	4801      	ldr	r0, [pc, #4]	@ (8010f34 <__sfp_lock_acquire+0x8>)
 8010f2e:	f000 b932 	b.w	8011196 <__retarget_lock_acquire_recursive>
 8010f32:	bf00      	nop
 8010f34:	20000e25 	.word	0x20000e25

08010f38 <__sfp_lock_release>:
 8010f38:	4801      	ldr	r0, [pc, #4]	@ (8010f40 <__sfp_lock_release+0x8>)
 8010f3a:	f000 b92d 	b.w	8011198 <__retarget_lock_release_recursive>
 8010f3e:	bf00      	nop
 8010f40:	20000e25 	.word	0x20000e25

08010f44 <__sinit>:
 8010f44:	b510      	push	{r4, lr}
 8010f46:	4604      	mov	r4, r0
 8010f48:	f7ff fff0 	bl	8010f2c <__sfp_lock_acquire>
 8010f4c:	6a23      	ldr	r3, [r4, #32]
 8010f4e:	b11b      	cbz	r3, 8010f58 <__sinit+0x14>
 8010f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f54:	f7ff bff0 	b.w	8010f38 <__sfp_lock_release>
 8010f58:	4b04      	ldr	r3, [pc, #16]	@ (8010f6c <__sinit+0x28>)
 8010f5a:	6223      	str	r3, [r4, #32]
 8010f5c:	4b04      	ldr	r3, [pc, #16]	@ (8010f70 <__sinit+0x2c>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d1f5      	bne.n	8010f50 <__sinit+0xc>
 8010f64:	f7ff ffc4 	bl	8010ef0 <global_stdio_init.part.0>
 8010f68:	e7f2      	b.n	8010f50 <__sinit+0xc>
 8010f6a:	bf00      	nop
 8010f6c:	08010eb1 	.word	0x08010eb1
 8010f70:	20000e1c 	.word	0x20000e1c

08010f74 <_fwalk_sglue>:
 8010f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f78:	4607      	mov	r7, r0
 8010f7a:	4688      	mov	r8, r1
 8010f7c:	4614      	mov	r4, r2
 8010f7e:	2600      	movs	r6, #0
 8010f80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010f84:	f1b9 0901 	subs.w	r9, r9, #1
 8010f88:	d505      	bpl.n	8010f96 <_fwalk_sglue+0x22>
 8010f8a:	6824      	ldr	r4, [r4, #0]
 8010f8c:	2c00      	cmp	r4, #0
 8010f8e:	d1f7      	bne.n	8010f80 <_fwalk_sglue+0xc>
 8010f90:	4630      	mov	r0, r6
 8010f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f96:	89ab      	ldrh	r3, [r5, #12]
 8010f98:	2b01      	cmp	r3, #1
 8010f9a:	d907      	bls.n	8010fac <_fwalk_sglue+0x38>
 8010f9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	d003      	beq.n	8010fac <_fwalk_sglue+0x38>
 8010fa4:	4629      	mov	r1, r5
 8010fa6:	4638      	mov	r0, r7
 8010fa8:	47c0      	blx	r8
 8010faa:	4306      	orrs	r6, r0
 8010fac:	3568      	adds	r5, #104	@ 0x68
 8010fae:	e7e9      	b.n	8010f84 <_fwalk_sglue+0x10>

08010fb0 <siprintf>:
 8010fb0:	b40e      	push	{r1, r2, r3}
 8010fb2:	b510      	push	{r4, lr}
 8010fb4:	b09d      	sub	sp, #116	@ 0x74
 8010fb6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010fb8:	9002      	str	r0, [sp, #8]
 8010fba:	9006      	str	r0, [sp, #24]
 8010fbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010fc0:	480a      	ldr	r0, [pc, #40]	@ (8010fec <siprintf+0x3c>)
 8010fc2:	9107      	str	r1, [sp, #28]
 8010fc4:	9104      	str	r1, [sp, #16]
 8010fc6:	490a      	ldr	r1, [pc, #40]	@ (8010ff0 <siprintf+0x40>)
 8010fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fcc:	9105      	str	r1, [sp, #20]
 8010fce:	2400      	movs	r4, #0
 8010fd0:	a902      	add	r1, sp, #8
 8010fd2:	6800      	ldr	r0, [r0, #0]
 8010fd4:	9301      	str	r3, [sp, #4]
 8010fd6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010fd8:	f002 fb10 	bl	80135fc <_svfiprintf_r>
 8010fdc:	9b02      	ldr	r3, [sp, #8]
 8010fde:	701c      	strb	r4, [r3, #0]
 8010fe0:	b01d      	add	sp, #116	@ 0x74
 8010fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fe6:	b003      	add	sp, #12
 8010fe8:	4770      	bx	lr
 8010fea:	bf00      	nop
 8010fec:	20000024 	.word	0x20000024
 8010ff0:	ffff0208 	.word	0xffff0208

08010ff4 <__sread>:
 8010ff4:	b510      	push	{r4, lr}
 8010ff6:	460c      	mov	r4, r1
 8010ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ffc:	f000 f86c 	bl	80110d8 <_read_r>
 8011000:	2800      	cmp	r0, #0
 8011002:	bfab      	itete	ge
 8011004:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011006:	89a3      	ldrhlt	r3, [r4, #12]
 8011008:	181b      	addge	r3, r3, r0
 801100a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801100e:	bfac      	ite	ge
 8011010:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011012:	81a3      	strhlt	r3, [r4, #12]
 8011014:	bd10      	pop	{r4, pc}

08011016 <__swrite>:
 8011016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801101a:	461f      	mov	r7, r3
 801101c:	898b      	ldrh	r3, [r1, #12]
 801101e:	05db      	lsls	r3, r3, #23
 8011020:	4605      	mov	r5, r0
 8011022:	460c      	mov	r4, r1
 8011024:	4616      	mov	r6, r2
 8011026:	d505      	bpl.n	8011034 <__swrite+0x1e>
 8011028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801102c:	2302      	movs	r3, #2
 801102e:	2200      	movs	r2, #0
 8011030:	f000 f840 	bl	80110b4 <_lseek_r>
 8011034:	89a3      	ldrh	r3, [r4, #12]
 8011036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801103a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801103e:	81a3      	strh	r3, [r4, #12]
 8011040:	4632      	mov	r2, r6
 8011042:	463b      	mov	r3, r7
 8011044:	4628      	mov	r0, r5
 8011046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801104a:	f000 b867 	b.w	801111c <_write_r>

0801104e <__sseek>:
 801104e:	b510      	push	{r4, lr}
 8011050:	460c      	mov	r4, r1
 8011052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011056:	f000 f82d 	bl	80110b4 <_lseek_r>
 801105a:	1c43      	adds	r3, r0, #1
 801105c:	89a3      	ldrh	r3, [r4, #12]
 801105e:	bf15      	itete	ne
 8011060:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011062:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011066:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801106a:	81a3      	strheq	r3, [r4, #12]
 801106c:	bf18      	it	ne
 801106e:	81a3      	strhne	r3, [r4, #12]
 8011070:	bd10      	pop	{r4, pc}

08011072 <__sclose>:
 8011072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011076:	f000 b80d 	b.w	8011094 <_close_r>

0801107a <memset>:
 801107a:	4402      	add	r2, r0
 801107c:	4603      	mov	r3, r0
 801107e:	4293      	cmp	r3, r2
 8011080:	d100      	bne.n	8011084 <memset+0xa>
 8011082:	4770      	bx	lr
 8011084:	f803 1b01 	strb.w	r1, [r3], #1
 8011088:	e7f9      	b.n	801107e <memset+0x4>
	...

0801108c <_localeconv_r>:
 801108c:	4800      	ldr	r0, [pc, #0]	@ (8011090 <_localeconv_r+0x4>)
 801108e:	4770      	bx	lr
 8011090:	20000164 	.word	0x20000164

08011094 <_close_r>:
 8011094:	b538      	push	{r3, r4, r5, lr}
 8011096:	4d06      	ldr	r5, [pc, #24]	@ (80110b0 <_close_r+0x1c>)
 8011098:	2300      	movs	r3, #0
 801109a:	4604      	mov	r4, r0
 801109c:	4608      	mov	r0, r1
 801109e:	602b      	str	r3, [r5, #0]
 80110a0:	f7f6 fe05 	bl	8007cae <_close>
 80110a4:	1c43      	adds	r3, r0, #1
 80110a6:	d102      	bne.n	80110ae <_close_r+0x1a>
 80110a8:	682b      	ldr	r3, [r5, #0]
 80110aa:	b103      	cbz	r3, 80110ae <_close_r+0x1a>
 80110ac:	6023      	str	r3, [r4, #0]
 80110ae:	bd38      	pop	{r3, r4, r5, pc}
 80110b0:	20000e20 	.word	0x20000e20

080110b4 <_lseek_r>:
 80110b4:	b538      	push	{r3, r4, r5, lr}
 80110b6:	4d07      	ldr	r5, [pc, #28]	@ (80110d4 <_lseek_r+0x20>)
 80110b8:	4604      	mov	r4, r0
 80110ba:	4608      	mov	r0, r1
 80110bc:	4611      	mov	r1, r2
 80110be:	2200      	movs	r2, #0
 80110c0:	602a      	str	r2, [r5, #0]
 80110c2:	461a      	mov	r2, r3
 80110c4:	f7f6 fe1a 	bl	8007cfc <_lseek>
 80110c8:	1c43      	adds	r3, r0, #1
 80110ca:	d102      	bne.n	80110d2 <_lseek_r+0x1e>
 80110cc:	682b      	ldr	r3, [r5, #0]
 80110ce:	b103      	cbz	r3, 80110d2 <_lseek_r+0x1e>
 80110d0:	6023      	str	r3, [r4, #0]
 80110d2:	bd38      	pop	{r3, r4, r5, pc}
 80110d4:	20000e20 	.word	0x20000e20

080110d8 <_read_r>:
 80110d8:	b538      	push	{r3, r4, r5, lr}
 80110da:	4d07      	ldr	r5, [pc, #28]	@ (80110f8 <_read_r+0x20>)
 80110dc:	4604      	mov	r4, r0
 80110de:	4608      	mov	r0, r1
 80110e0:	4611      	mov	r1, r2
 80110e2:	2200      	movs	r2, #0
 80110e4:	602a      	str	r2, [r5, #0]
 80110e6:	461a      	mov	r2, r3
 80110e8:	f7f6 fda8 	bl	8007c3c <_read>
 80110ec:	1c43      	adds	r3, r0, #1
 80110ee:	d102      	bne.n	80110f6 <_read_r+0x1e>
 80110f0:	682b      	ldr	r3, [r5, #0]
 80110f2:	b103      	cbz	r3, 80110f6 <_read_r+0x1e>
 80110f4:	6023      	str	r3, [r4, #0]
 80110f6:	bd38      	pop	{r3, r4, r5, pc}
 80110f8:	20000e20 	.word	0x20000e20

080110fc <_sbrk_r>:
 80110fc:	b538      	push	{r3, r4, r5, lr}
 80110fe:	4d06      	ldr	r5, [pc, #24]	@ (8011118 <_sbrk_r+0x1c>)
 8011100:	2300      	movs	r3, #0
 8011102:	4604      	mov	r4, r0
 8011104:	4608      	mov	r0, r1
 8011106:	602b      	str	r3, [r5, #0]
 8011108:	f7f6 fe06 	bl	8007d18 <_sbrk>
 801110c:	1c43      	adds	r3, r0, #1
 801110e:	d102      	bne.n	8011116 <_sbrk_r+0x1a>
 8011110:	682b      	ldr	r3, [r5, #0]
 8011112:	b103      	cbz	r3, 8011116 <_sbrk_r+0x1a>
 8011114:	6023      	str	r3, [r4, #0]
 8011116:	bd38      	pop	{r3, r4, r5, pc}
 8011118:	20000e20 	.word	0x20000e20

0801111c <_write_r>:
 801111c:	b538      	push	{r3, r4, r5, lr}
 801111e:	4d07      	ldr	r5, [pc, #28]	@ (801113c <_write_r+0x20>)
 8011120:	4604      	mov	r4, r0
 8011122:	4608      	mov	r0, r1
 8011124:	4611      	mov	r1, r2
 8011126:	2200      	movs	r2, #0
 8011128:	602a      	str	r2, [r5, #0]
 801112a:	461a      	mov	r2, r3
 801112c:	f7f6 fda3 	bl	8007c76 <_write>
 8011130:	1c43      	adds	r3, r0, #1
 8011132:	d102      	bne.n	801113a <_write_r+0x1e>
 8011134:	682b      	ldr	r3, [r5, #0]
 8011136:	b103      	cbz	r3, 801113a <_write_r+0x1e>
 8011138:	6023      	str	r3, [r4, #0]
 801113a:	bd38      	pop	{r3, r4, r5, pc}
 801113c:	20000e20 	.word	0x20000e20

08011140 <__errno>:
 8011140:	4b01      	ldr	r3, [pc, #4]	@ (8011148 <__errno+0x8>)
 8011142:	6818      	ldr	r0, [r3, #0]
 8011144:	4770      	bx	lr
 8011146:	bf00      	nop
 8011148:	20000024 	.word	0x20000024

0801114c <__libc_init_array>:
 801114c:	b570      	push	{r4, r5, r6, lr}
 801114e:	4d0d      	ldr	r5, [pc, #52]	@ (8011184 <__libc_init_array+0x38>)
 8011150:	4c0d      	ldr	r4, [pc, #52]	@ (8011188 <__libc_init_array+0x3c>)
 8011152:	1b64      	subs	r4, r4, r5
 8011154:	10a4      	asrs	r4, r4, #2
 8011156:	2600      	movs	r6, #0
 8011158:	42a6      	cmp	r6, r4
 801115a:	d109      	bne.n	8011170 <__libc_init_array+0x24>
 801115c:	4d0b      	ldr	r5, [pc, #44]	@ (801118c <__libc_init_array+0x40>)
 801115e:	4c0c      	ldr	r4, [pc, #48]	@ (8011190 <__libc_init_array+0x44>)
 8011160:	f003 faac 	bl	80146bc <_init>
 8011164:	1b64      	subs	r4, r4, r5
 8011166:	10a4      	asrs	r4, r4, #2
 8011168:	2600      	movs	r6, #0
 801116a:	42a6      	cmp	r6, r4
 801116c:	d105      	bne.n	801117a <__libc_init_array+0x2e>
 801116e:	bd70      	pop	{r4, r5, r6, pc}
 8011170:	f855 3b04 	ldr.w	r3, [r5], #4
 8011174:	4798      	blx	r3
 8011176:	3601      	adds	r6, #1
 8011178:	e7ee      	b.n	8011158 <__libc_init_array+0xc>
 801117a:	f855 3b04 	ldr.w	r3, [r5], #4
 801117e:	4798      	blx	r3
 8011180:	3601      	adds	r6, #1
 8011182:	e7f2      	b.n	801116a <__libc_init_array+0x1e>
 8011184:	08014dcc 	.word	0x08014dcc
 8011188:	08014dcc 	.word	0x08014dcc
 801118c:	08014dcc 	.word	0x08014dcc
 8011190:	08014dd8 	.word	0x08014dd8

08011194 <__retarget_lock_init_recursive>:
 8011194:	4770      	bx	lr

08011196 <__retarget_lock_acquire_recursive>:
 8011196:	4770      	bx	lr

08011198 <__retarget_lock_release_recursive>:
 8011198:	4770      	bx	lr

0801119a <quorem>:
 801119a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801119e:	6903      	ldr	r3, [r0, #16]
 80111a0:	690c      	ldr	r4, [r1, #16]
 80111a2:	42a3      	cmp	r3, r4
 80111a4:	4607      	mov	r7, r0
 80111a6:	db7e      	blt.n	80112a6 <quorem+0x10c>
 80111a8:	3c01      	subs	r4, #1
 80111aa:	f101 0814 	add.w	r8, r1, #20
 80111ae:	00a3      	lsls	r3, r4, #2
 80111b0:	f100 0514 	add.w	r5, r0, #20
 80111b4:	9300      	str	r3, [sp, #0]
 80111b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80111ba:	9301      	str	r3, [sp, #4]
 80111bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80111c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80111c4:	3301      	adds	r3, #1
 80111c6:	429a      	cmp	r2, r3
 80111c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80111cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80111d0:	d32e      	bcc.n	8011230 <quorem+0x96>
 80111d2:	f04f 0a00 	mov.w	sl, #0
 80111d6:	46c4      	mov	ip, r8
 80111d8:	46ae      	mov	lr, r5
 80111da:	46d3      	mov	fp, sl
 80111dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80111e0:	b298      	uxth	r0, r3
 80111e2:	fb06 a000 	mla	r0, r6, r0, sl
 80111e6:	0c02      	lsrs	r2, r0, #16
 80111e8:	0c1b      	lsrs	r3, r3, #16
 80111ea:	fb06 2303 	mla	r3, r6, r3, r2
 80111ee:	f8de 2000 	ldr.w	r2, [lr]
 80111f2:	b280      	uxth	r0, r0
 80111f4:	b292      	uxth	r2, r2
 80111f6:	1a12      	subs	r2, r2, r0
 80111f8:	445a      	add	r2, fp
 80111fa:	f8de 0000 	ldr.w	r0, [lr]
 80111fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011202:	b29b      	uxth	r3, r3
 8011204:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011208:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801120c:	b292      	uxth	r2, r2
 801120e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011212:	45e1      	cmp	r9, ip
 8011214:	f84e 2b04 	str.w	r2, [lr], #4
 8011218:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801121c:	d2de      	bcs.n	80111dc <quorem+0x42>
 801121e:	9b00      	ldr	r3, [sp, #0]
 8011220:	58eb      	ldr	r3, [r5, r3]
 8011222:	b92b      	cbnz	r3, 8011230 <quorem+0x96>
 8011224:	9b01      	ldr	r3, [sp, #4]
 8011226:	3b04      	subs	r3, #4
 8011228:	429d      	cmp	r5, r3
 801122a:	461a      	mov	r2, r3
 801122c:	d32f      	bcc.n	801128e <quorem+0xf4>
 801122e:	613c      	str	r4, [r7, #16]
 8011230:	4638      	mov	r0, r7
 8011232:	f001 f913 	bl	801245c <__mcmp>
 8011236:	2800      	cmp	r0, #0
 8011238:	db25      	blt.n	8011286 <quorem+0xec>
 801123a:	4629      	mov	r1, r5
 801123c:	2000      	movs	r0, #0
 801123e:	f858 2b04 	ldr.w	r2, [r8], #4
 8011242:	f8d1 c000 	ldr.w	ip, [r1]
 8011246:	fa1f fe82 	uxth.w	lr, r2
 801124a:	fa1f f38c 	uxth.w	r3, ip
 801124e:	eba3 030e 	sub.w	r3, r3, lr
 8011252:	4403      	add	r3, r0
 8011254:	0c12      	lsrs	r2, r2, #16
 8011256:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801125a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801125e:	b29b      	uxth	r3, r3
 8011260:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011264:	45c1      	cmp	r9, r8
 8011266:	f841 3b04 	str.w	r3, [r1], #4
 801126a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801126e:	d2e6      	bcs.n	801123e <quorem+0xa4>
 8011270:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011274:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011278:	b922      	cbnz	r2, 8011284 <quorem+0xea>
 801127a:	3b04      	subs	r3, #4
 801127c:	429d      	cmp	r5, r3
 801127e:	461a      	mov	r2, r3
 8011280:	d30b      	bcc.n	801129a <quorem+0x100>
 8011282:	613c      	str	r4, [r7, #16]
 8011284:	3601      	adds	r6, #1
 8011286:	4630      	mov	r0, r6
 8011288:	b003      	add	sp, #12
 801128a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801128e:	6812      	ldr	r2, [r2, #0]
 8011290:	3b04      	subs	r3, #4
 8011292:	2a00      	cmp	r2, #0
 8011294:	d1cb      	bne.n	801122e <quorem+0x94>
 8011296:	3c01      	subs	r4, #1
 8011298:	e7c6      	b.n	8011228 <quorem+0x8e>
 801129a:	6812      	ldr	r2, [r2, #0]
 801129c:	3b04      	subs	r3, #4
 801129e:	2a00      	cmp	r2, #0
 80112a0:	d1ef      	bne.n	8011282 <quorem+0xe8>
 80112a2:	3c01      	subs	r4, #1
 80112a4:	e7ea      	b.n	801127c <quorem+0xe2>
 80112a6:	2000      	movs	r0, #0
 80112a8:	e7ee      	b.n	8011288 <quorem+0xee>
 80112aa:	0000      	movs	r0, r0
 80112ac:	0000      	movs	r0, r0
	...

080112b0 <_dtoa_r>:
 80112b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112b4:	69c7      	ldr	r7, [r0, #28]
 80112b6:	b097      	sub	sp, #92	@ 0x5c
 80112b8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80112bc:	ec55 4b10 	vmov	r4, r5, d0
 80112c0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80112c2:	9107      	str	r1, [sp, #28]
 80112c4:	4681      	mov	r9, r0
 80112c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80112c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80112ca:	b97f      	cbnz	r7, 80112ec <_dtoa_r+0x3c>
 80112cc:	2010      	movs	r0, #16
 80112ce:	f7fe fe8b 	bl	800ffe8 <malloc>
 80112d2:	4602      	mov	r2, r0
 80112d4:	f8c9 001c 	str.w	r0, [r9, #28]
 80112d8:	b920      	cbnz	r0, 80112e4 <_dtoa_r+0x34>
 80112da:	4ba9      	ldr	r3, [pc, #676]	@ (8011580 <_dtoa_r+0x2d0>)
 80112dc:	21ef      	movs	r1, #239	@ 0xef
 80112de:	48a9      	ldr	r0, [pc, #676]	@ (8011584 <_dtoa_r+0x2d4>)
 80112e0:	f002 fb76 	bl	80139d0 <__assert_func>
 80112e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80112e8:	6007      	str	r7, [r0, #0]
 80112ea:	60c7      	str	r7, [r0, #12]
 80112ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80112f0:	6819      	ldr	r1, [r3, #0]
 80112f2:	b159      	cbz	r1, 801130c <_dtoa_r+0x5c>
 80112f4:	685a      	ldr	r2, [r3, #4]
 80112f6:	604a      	str	r2, [r1, #4]
 80112f8:	2301      	movs	r3, #1
 80112fa:	4093      	lsls	r3, r2
 80112fc:	608b      	str	r3, [r1, #8]
 80112fe:	4648      	mov	r0, r9
 8011300:	f000 fe30 	bl	8011f64 <_Bfree>
 8011304:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011308:	2200      	movs	r2, #0
 801130a:	601a      	str	r2, [r3, #0]
 801130c:	1e2b      	subs	r3, r5, #0
 801130e:	bfb9      	ittee	lt
 8011310:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011314:	9305      	strlt	r3, [sp, #20]
 8011316:	2300      	movge	r3, #0
 8011318:	6033      	strge	r3, [r6, #0]
 801131a:	9f05      	ldr	r7, [sp, #20]
 801131c:	4b9a      	ldr	r3, [pc, #616]	@ (8011588 <_dtoa_r+0x2d8>)
 801131e:	bfbc      	itt	lt
 8011320:	2201      	movlt	r2, #1
 8011322:	6032      	strlt	r2, [r6, #0]
 8011324:	43bb      	bics	r3, r7
 8011326:	d112      	bne.n	801134e <_dtoa_r+0x9e>
 8011328:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801132a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801132e:	6013      	str	r3, [r2, #0]
 8011330:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011334:	4323      	orrs	r3, r4
 8011336:	f000 855a 	beq.w	8011dee <_dtoa_r+0xb3e>
 801133a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801133c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801159c <_dtoa_r+0x2ec>
 8011340:	2b00      	cmp	r3, #0
 8011342:	f000 855c 	beq.w	8011dfe <_dtoa_r+0xb4e>
 8011346:	f10a 0303 	add.w	r3, sl, #3
 801134a:	f000 bd56 	b.w	8011dfa <_dtoa_r+0xb4a>
 801134e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011352:	2200      	movs	r2, #0
 8011354:	ec51 0b17 	vmov	r0, r1, d7
 8011358:	2300      	movs	r3, #0
 801135a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801135e:	f7ef fbb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8011362:	4680      	mov	r8, r0
 8011364:	b158      	cbz	r0, 801137e <_dtoa_r+0xce>
 8011366:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011368:	2301      	movs	r3, #1
 801136a:	6013      	str	r3, [r2, #0]
 801136c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801136e:	b113      	cbz	r3, 8011376 <_dtoa_r+0xc6>
 8011370:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011372:	4b86      	ldr	r3, [pc, #536]	@ (801158c <_dtoa_r+0x2dc>)
 8011374:	6013      	str	r3, [r2, #0]
 8011376:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80115a0 <_dtoa_r+0x2f0>
 801137a:	f000 bd40 	b.w	8011dfe <_dtoa_r+0xb4e>
 801137e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8011382:	aa14      	add	r2, sp, #80	@ 0x50
 8011384:	a915      	add	r1, sp, #84	@ 0x54
 8011386:	4648      	mov	r0, r9
 8011388:	f001 f988 	bl	801269c <__d2b>
 801138c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011390:	9002      	str	r0, [sp, #8]
 8011392:	2e00      	cmp	r6, #0
 8011394:	d078      	beq.n	8011488 <_dtoa_r+0x1d8>
 8011396:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011398:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801139c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80113a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80113a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80113a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80113ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80113b0:	4619      	mov	r1, r3
 80113b2:	2200      	movs	r2, #0
 80113b4:	4b76      	ldr	r3, [pc, #472]	@ (8011590 <_dtoa_r+0x2e0>)
 80113b6:	f7ee ff67 	bl	8000288 <__aeabi_dsub>
 80113ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8011568 <_dtoa_r+0x2b8>)
 80113bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c0:	f7ef f91a 	bl	80005f8 <__aeabi_dmul>
 80113c4:	a36a      	add	r3, pc, #424	@ (adr r3, 8011570 <_dtoa_r+0x2c0>)
 80113c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ca:	f7ee ff5f 	bl	800028c <__adddf3>
 80113ce:	4604      	mov	r4, r0
 80113d0:	4630      	mov	r0, r6
 80113d2:	460d      	mov	r5, r1
 80113d4:	f7ef f8a6 	bl	8000524 <__aeabi_i2d>
 80113d8:	a367      	add	r3, pc, #412	@ (adr r3, 8011578 <_dtoa_r+0x2c8>)
 80113da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113de:	f7ef f90b 	bl	80005f8 <__aeabi_dmul>
 80113e2:	4602      	mov	r2, r0
 80113e4:	460b      	mov	r3, r1
 80113e6:	4620      	mov	r0, r4
 80113e8:	4629      	mov	r1, r5
 80113ea:	f7ee ff4f 	bl	800028c <__adddf3>
 80113ee:	4604      	mov	r4, r0
 80113f0:	460d      	mov	r5, r1
 80113f2:	f7ef fbb1 	bl	8000b58 <__aeabi_d2iz>
 80113f6:	2200      	movs	r2, #0
 80113f8:	4607      	mov	r7, r0
 80113fa:	2300      	movs	r3, #0
 80113fc:	4620      	mov	r0, r4
 80113fe:	4629      	mov	r1, r5
 8011400:	f7ef fb6c 	bl	8000adc <__aeabi_dcmplt>
 8011404:	b140      	cbz	r0, 8011418 <_dtoa_r+0x168>
 8011406:	4638      	mov	r0, r7
 8011408:	f7ef f88c 	bl	8000524 <__aeabi_i2d>
 801140c:	4622      	mov	r2, r4
 801140e:	462b      	mov	r3, r5
 8011410:	f7ef fb5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8011414:	b900      	cbnz	r0, 8011418 <_dtoa_r+0x168>
 8011416:	3f01      	subs	r7, #1
 8011418:	2f16      	cmp	r7, #22
 801141a:	d852      	bhi.n	80114c2 <_dtoa_r+0x212>
 801141c:	4b5d      	ldr	r3, [pc, #372]	@ (8011594 <_dtoa_r+0x2e4>)
 801141e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011426:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801142a:	f7ef fb57 	bl	8000adc <__aeabi_dcmplt>
 801142e:	2800      	cmp	r0, #0
 8011430:	d049      	beq.n	80114c6 <_dtoa_r+0x216>
 8011432:	3f01      	subs	r7, #1
 8011434:	2300      	movs	r3, #0
 8011436:	9310      	str	r3, [sp, #64]	@ 0x40
 8011438:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801143a:	1b9b      	subs	r3, r3, r6
 801143c:	1e5a      	subs	r2, r3, #1
 801143e:	bf45      	ittet	mi
 8011440:	f1c3 0301 	rsbmi	r3, r3, #1
 8011444:	9300      	strmi	r3, [sp, #0]
 8011446:	2300      	movpl	r3, #0
 8011448:	2300      	movmi	r3, #0
 801144a:	9206      	str	r2, [sp, #24]
 801144c:	bf54      	ite	pl
 801144e:	9300      	strpl	r3, [sp, #0]
 8011450:	9306      	strmi	r3, [sp, #24]
 8011452:	2f00      	cmp	r7, #0
 8011454:	db39      	blt.n	80114ca <_dtoa_r+0x21a>
 8011456:	9b06      	ldr	r3, [sp, #24]
 8011458:	970d      	str	r7, [sp, #52]	@ 0x34
 801145a:	443b      	add	r3, r7
 801145c:	9306      	str	r3, [sp, #24]
 801145e:	2300      	movs	r3, #0
 8011460:	9308      	str	r3, [sp, #32]
 8011462:	9b07      	ldr	r3, [sp, #28]
 8011464:	2b09      	cmp	r3, #9
 8011466:	d863      	bhi.n	8011530 <_dtoa_r+0x280>
 8011468:	2b05      	cmp	r3, #5
 801146a:	bfc4      	itt	gt
 801146c:	3b04      	subgt	r3, #4
 801146e:	9307      	strgt	r3, [sp, #28]
 8011470:	9b07      	ldr	r3, [sp, #28]
 8011472:	f1a3 0302 	sub.w	r3, r3, #2
 8011476:	bfcc      	ite	gt
 8011478:	2400      	movgt	r4, #0
 801147a:	2401      	movle	r4, #1
 801147c:	2b03      	cmp	r3, #3
 801147e:	d863      	bhi.n	8011548 <_dtoa_r+0x298>
 8011480:	e8df f003 	tbb	[pc, r3]
 8011484:	2b375452 	.word	0x2b375452
 8011488:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801148c:	441e      	add	r6, r3
 801148e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011492:	2b20      	cmp	r3, #32
 8011494:	bfc1      	itttt	gt
 8011496:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801149a:	409f      	lslgt	r7, r3
 801149c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80114a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80114a4:	bfd6      	itet	le
 80114a6:	f1c3 0320 	rsble	r3, r3, #32
 80114aa:	ea47 0003 	orrgt.w	r0, r7, r3
 80114ae:	fa04 f003 	lslle.w	r0, r4, r3
 80114b2:	f7ef f827 	bl	8000504 <__aeabi_ui2d>
 80114b6:	2201      	movs	r2, #1
 80114b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80114bc:	3e01      	subs	r6, #1
 80114be:	9212      	str	r2, [sp, #72]	@ 0x48
 80114c0:	e776      	b.n	80113b0 <_dtoa_r+0x100>
 80114c2:	2301      	movs	r3, #1
 80114c4:	e7b7      	b.n	8011436 <_dtoa_r+0x186>
 80114c6:	9010      	str	r0, [sp, #64]	@ 0x40
 80114c8:	e7b6      	b.n	8011438 <_dtoa_r+0x188>
 80114ca:	9b00      	ldr	r3, [sp, #0]
 80114cc:	1bdb      	subs	r3, r3, r7
 80114ce:	9300      	str	r3, [sp, #0]
 80114d0:	427b      	negs	r3, r7
 80114d2:	9308      	str	r3, [sp, #32]
 80114d4:	2300      	movs	r3, #0
 80114d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80114d8:	e7c3      	b.n	8011462 <_dtoa_r+0x1b2>
 80114da:	2301      	movs	r3, #1
 80114dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80114de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80114e0:	eb07 0b03 	add.w	fp, r7, r3
 80114e4:	f10b 0301 	add.w	r3, fp, #1
 80114e8:	2b01      	cmp	r3, #1
 80114ea:	9303      	str	r3, [sp, #12]
 80114ec:	bfb8      	it	lt
 80114ee:	2301      	movlt	r3, #1
 80114f0:	e006      	b.n	8011500 <_dtoa_r+0x250>
 80114f2:	2301      	movs	r3, #1
 80114f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80114f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	dd28      	ble.n	801154e <_dtoa_r+0x29e>
 80114fc:	469b      	mov	fp, r3
 80114fe:	9303      	str	r3, [sp, #12]
 8011500:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8011504:	2100      	movs	r1, #0
 8011506:	2204      	movs	r2, #4
 8011508:	f102 0514 	add.w	r5, r2, #20
 801150c:	429d      	cmp	r5, r3
 801150e:	d926      	bls.n	801155e <_dtoa_r+0x2ae>
 8011510:	6041      	str	r1, [r0, #4]
 8011512:	4648      	mov	r0, r9
 8011514:	f000 fce6 	bl	8011ee4 <_Balloc>
 8011518:	4682      	mov	sl, r0
 801151a:	2800      	cmp	r0, #0
 801151c:	d142      	bne.n	80115a4 <_dtoa_r+0x2f4>
 801151e:	4b1e      	ldr	r3, [pc, #120]	@ (8011598 <_dtoa_r+0x2e8>)
 8011520:	4602      	mov	r2, r0
 8011522:	f240 11af 	movw	r1, #431	@ 0x1af
 8011526:	e6da      	b.n	80112de <_dtoa_r+0x2e>
 8011528:	2300      	movs	r3, #0
 801152a:	e7e3      	b.n	80114f4 <_dtoa_r+0x244>
 801152c:	2300      	movs	r3, #0
 801152e:	e7d5      	b.n	80114dc <_dtoa_r+0x22c>
 8011530:	2401      	movs	r4, #1
 8011532:	2300      	movs	r3, #0
 8011534:	9307      	str	r3, [sp, #28]
 8011536:	9409      	str	r4, [sp, #36]	@ 0x24
 8011538:	f04f 3bff 	mov.w	fp, #4294967295
 801153c:	2200      	movs	r2, #0
 801153e:	f8cd b00c 	str.w	fp, [sp, #12]
 8011542:	2312      	movs	r3, #18
 8011544:	920c      	str	r2, [sp, #48]	@ 0x30
 8011546:	e7db      	b.n	8011500 <_dtoa_r+0x250>
 8011548:	2301      	movs	r3, #1
 801154a:	9309      	str	r3, [sp, #36]	@ 0x24
 801154c:	e7f4      	b.n	8011538 <_dtoa_r+0x288>
 801154e:	f04f 0b01 	mov.w	fp, #1
 8011552:	f8cd b00c 	str.w	fp, [sp, #12]
 8011556:	465b      	mov	r3, fp
 8011558:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801155c:	e7d0      	b.n	8011500 <_dtoa_r+0x250>
 801155e:	3101      	adds	r1, #1
 8011560:	0052      	lsls	r2, r2, #1
 8011562:	e7d1      	b.n	8011508 <_dtoa_r+0x258>
 8011564:	f3af 8000 	nop.w
 8011568:	636f4361 	.word	0x636f4361
 801156c:	3fd287a7 	.word	0x3fd287a7
 8011570:	8b60c8b3 	.word	0x8b60c8b3
 8011574:	3fc68a28 	.word	0x3fc68a28
 8011578:	509f79fb 	.word	0x509f79fb
 801157c:	3fd34413 	.word	0x3fd34413
 8011580:	0801478e 	.word	0x0801478e
 8011584:	080147a5 	.word	0x080147a5
 8011588:	7ff00000 	.word	0x7ff00000
 801158c:	08014759 	.word	0x08014759
 8011590:	3ff80000 	.word	0x3ff80000
 8011594:	08014ba8 	.word	0x08014ba8
 8011598:	080147fd 	.word	0x080147fd
 801159c:	0801478a 	.word	0x0801478a
 80115a0:	08014758 	.word	0x08014758
 80115a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80115a8:	6018      	str	r0, [r3, #0]
 80115aa:	9b03      	ldr	r3, [sp, #12]
 80115ac:	2b0e      	cmp	r3, #14
 80115ae:	f200 80a1 	bhi.w	80116f4 <_dtoa_r+0x444>
 80115b2:	2c00      	cmp	r4, #0
 80115b4:	f000 809e 	beq.w	80116f4 <_dtoa_r+0x444>
 80115b8:	2f00      	cmp	r7, #0
 80115ba:	dd33      	ble.n	8011624 <_dtoa_r+0x374>
 80115bc:	4b9c      	ldr	r3, [pc, #624]	@ (8011830 <_dtoa_r+0x580>)
 80115be:	f007 020f 	and.w	r2, r7, #15
 80115c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80115c6:	ed93 7b00 	vldr	d7, [r3]
 80115ca:	05f8      	lsls	r0, r7, #23
 80115cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80115d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80115d4:	d516      	bpl.n	8011604 <_dtoa_r+0x354>
 80115d6:	4b97      	ldr	r3, [pc, #604]	@ (8011834 <_dtoa_r+0x584>)
 80115d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80115dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80115e0:	f7ef f934 	bl	800084c <__aeabi_ddiv>
 80115e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80115e8:	f004 040f 	and.w	r4, r4, #15
 80115ec:	2603      	movs	r6, #3
 80115ee:	4d91      	ldr	r5, [pc, #580]	@ (8011834 <_dtoa_r+0x584>)
 80115f0:	b954      	cbnz	r4, 8011608 <_dtoa_r+0x358>
 80115f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80115f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80115fa:	f7ef f927 	bl	800084c <__aeabi_ddiv>
 80115fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011602:	e028      	b.n	8011656 <_dtoa_r+0x3a6>
 8011604:	2602      	movs	r6, #2
 8011606:	e7f2      	b.n	80115ee <_dtoa_r+0x33e>
 8011608:	07e1      	lsls	r1, r4, #31
 801160a:	d508      	bpl.n	801161e <_dtoa_r+0x36e>
 801160c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011610:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011614:	f7ee fff0 	bl	80005f8 <__aeabi_dmul>
 8011618:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801161c:	3601      	adds	r6, #1
 801161e:	1064      	asrs	r4, r4, #1
 8011620:	3508      	adds	r5, #8
 8011622:	e7e5      	b.n	80115f0 <_dtoa_r+0x340>
 8011624:	f000 80af 	beq.w	8011786 <_dtoa_r+0x4d6>
 8011628:	427c      	negs	r4, r7
 801162a:	4b81      	ldr	r3, [pc, #516]	@ (8011830 <_dtoa_r+0x580>)
 801162c:	4d81      	ldr	r5, [pc, #516]	@ (8011834 <_dtoa_r+0x584>)
 801162e:	f004 020f 	and.w	r2, r4, #15
 8011632:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801163a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801163e:	f7ee ffdb 	bl	80005f8 <__aeabi_dmul>
 8011642:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011646:	1124      	asrs	r4, r4, #4
 8011648:	2300      	movs	r3, #0
 801164a:	2602      	movs	r6, #2
 801164c:	2c00      	cmp	r4, #0
 801164e:	f040 808f 	bne.w	8011770 <_dtoa_r+0x4c0>
 8011652:	2b00      	cmp	r3, #0
 8011654:	d1d3      	bne.n	80115fe <_dtoa_r+0x34e>
 8011656:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011658:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801165c:	2b00      	cmp	r3, #0
 801165e:	f000 8094 	beq.w	801178a <_dtoa_r+0x4da>
 8011662:	4b75      	ldr	r3, [pc, #468]	@ (8011838 <_dtoa_r+0x588>)
 8011664:	2200      	movs	r2, #0
 8011666:	4620      	mov	r0, r4
 8011668:	4629      	mov	r1, r5
 801166a:	f7ef fa37 	bl	8000adc <__aeabi_dcmplt>
 801166e:	2800      	cmp	r0, #0
 8011670:	f000 808b 	beq.w	801178a <_dtoa_r+0x4da>
 8011674:	9b03      	ldr	r3, [sp, #12]
 8011676:	2b00      	cmp	r3, #0
 8011678:	f000 8087 	beq.w	801178a <_dtoa_r+0x4da>
 801167c:	f1bb 0f00 	cmp.w	fp, #0
 8011680:	dd34      	ble.n	80116ec <_dtoa_r+0x43c>
 8011682:	4620      	mov	r0, r4
 8011684:	4b6d      	ldr	r3, [pc, #436]	@ (801183c <_dtoa_r+0x58c>)
 8011686:	2200      	movs	r2, #0
 8011688:	4629      	mov	r1, r5
 801168a:	f7ee ffb5 	bl	80005f8 <__aeabi_dmul>
 801168e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011692:	f107 38ff 	add.w	r8, r7, #4294967295
 8011696:	3601      	adds	r6, #1
 8011698:	465c      	mov	r4, fp
 801169a:	4630      	mov	r0, r6
 801169c:	f7ee ff42 	bl	8000524 <__aeabi_i2d>
 80116a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80116a4:	f7ee ffa8 	bl	80005f8 <__aeabi_dmul>
 80116a8:	4b65      	ldr	r3, [pc, #404]	@ (8011840 <_dtoa_r+0x590>)
 80116aa:	2200      	movs	r2, #0
 80116ac:	f7ee fdee 	bl	800028c <__adddf3>
 80116b0:	4605      	mov	r5, r0
 80116b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80116b6:	2c00      	cmp	r4, #0
 80116b8:	d16a      	bne.n	8011790 <_dtoa_r+0x4e0>
 80116ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80116be:	4b61      	ldr	r3, [pc, #388]	@ (8011844 <_dtoa_r+0x594>)
 80116c0:	2200      	movs	r2, #0
 80116c2:	f7ee fde1 	bl	8000288 <__aeabi_dsub>
 80116c6:	4602      	mov	r2, r0
 80116c8:	460b      	mov	r3, r1
 80116ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80116ce:	462a      	mov	r2, r5
 80116d0:	4633      	mov	r3, r6
 80116d2:	f7ef fa21 	bl	8000b18 <__aeabi_dcmpgt>
 80116d6:	2800      	cmp	r0, #0
 80116d8:	f040 8298 	bne.w	8011c0c <_dtoa_r+0x95c>
 80116dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80116e0:	462a      	mov	r2, r5
 80116e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80116e6:	f7ef f9f9 	bl	8000adc <__aeabi_dcmplt>
 80116ea:	bb38      	cbnz	r0, 801173c <_dtoa_r+0x48c>
 80116ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80116f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80116f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	f2c0 8157 	blt.w	80119aa <_dtoa_r+0x6fa>
 80116fc:	2f0e      	cmp	r7, #14
 80116fe:	f300 8154 	bgt.w	80119aa <_dtoa_r+0x6fa>
 8011702:	4b4b      	ldr	r3, [pc, #300]	@ (8011830 <_dtoa_r+0x580>)
 8011704:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011708:	ed93 7b00 	vldr	d7, [r3]
 801170c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801170e:	2b00      	cmp	r3, #0
 8011710:	ed8d 7b00 	vstr	d7, [sp]
 8011714:	f280 80e5 	bge.w	80118e2 <_dtoa_r+0x632>
 8011718:	9b03      	ldr	r3, [sp, #12]
 801171a:	2b00      	cmp	r3, #0
 801171c:	f300 80e1 	bgt.w	80118e2 <_dtoa_r+0x632>
 8011720:	d10c      	bne.n	801173c <_dtoa_r+0x48c>
 8011722:	4b48      	ldr	r3, [pc, #288]	@ (8011844 <_dtoa_r+0x594>)
 8011724:	2200      	movs	r2, #0
 8011726:	ec51 0b17 	vmov	r0, r1, d7
 801172a:	f7ee ff65 	bl	80005f8 <__aeabi_dmul>
 801172e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011732:	f7ef f9e7 	bl	8000b04 <__aeabi_dcmpge>
 8011736:	2800      	cmp	r0, #0
 8011738:	f000 8266 	beq.w	8011c08 <_dtoa_r+0x958>
 801173c:	2400      	movs	r4, #0
 801173e:	4625      	mov	r5, r4
 8011740:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011742:	4656      	mov	r6, sl
 8011744:	ea6f 0803 	mvn.w	r8, r3
 8011748:	2700      	movs	r7, #0
 801174a:	4621      	mov	r1, r4
 801174c:	4648      	mov	r0, r9
 801174e:	f000 fc09 	bl	8011f64 <_Bfree>
 8011752:	2d00      	cmp	r5, #0
 8011754:	f000 80bd 	beq.w	80118d2 <_dtoa_r+0x622>
 8011758:	b12f      	cbz	r7, 8011766 <_dtoa_r+0x4b6>
 801175a:	42af      	cmp	r7, r5
 801175c:	d003      	beq.n	8011766 <_dtoa_r+0x4b6>
 801175e:	4639      	mov	r1, r7
 8011760:	4648      	mov	r0, r9
 8011762:	f000 fbff 	bl	8011f64 <_Bfree>
 8011766:	4629      	mov	r1, r5
 8011768:	4648      	mov	r0, r9
 801176a:	f000 fbfb 	bl	8011f64 <_Bfree>
 801176e:	e0b0      	b.n	80118d2 <_dtoa_r+0x622>
 8011770:	07e2      	lsls	r2, r4, #31
 8011772:	d505      	bpl.n	8011780 <_dtoa_r+0x4d0>
 8011774:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011778:	f7ee ff3e 	bl	80005f8 <__aeabi_dmul>
 801177c:	3601      	adds	r6, #1
 801177e:	2301      	movs	r3, #1
 8011780:	1064      	asrs	r4, r4, #1
 8011782:	3508      	adds	r5, #8
 8011784:	e762      	b.n	801164c <_dtoa_r+0x39c>
 8011786:	2602      	movs	r6, #2
 8011788:	e765      	b.n	8011656 <_dtoa_r+0x3a6>
 801178a:	9c03      	ldr	r4, [sp, #12]
 801178c:	46b8      	mov	r8, r7
 801178e:	e784      	b.n	801169a <_dtoa_r+0x3ea>
 8011790:	4b27      	ldr	r3, [pc, #156]	@ (8011830 <_dtoa_r+0x580>)
 8011792:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011794:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011798:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801179c:	4454      	add	r4, sl
 801179e:	2900      	cmp	r1, #0
 80117a0:	d054      	beq.n	801184c <_dtoa_r+0x59c>
 80117a2:	4929      	ldr	r1, [pc, #164]	@ (8011848 <_dtoa_r+0x598>)
 80117a4:	2000      	movs	r0, #0
 80117a6:	f7ef f851 	bl	800084c <__aeabi_ddiv>
 80117aa:	4633      	mov	r3, r6
 80117ac:	462a      	mov	r2, r5
 80117ae:	f7ee fd6b 	bl	8000288 <__aeabi_dsub>
 80117b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80117b6:	4656      	mov	r6, sl
 80117b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80117bc:	f7ef f9cc 	bl	8000b58 <__aeabi_d2iz>
 80117c0:	4605      	mov	r5, r0
 80117c2:	f7ee feaf 	bl	8000524 <__aeabi_i2d>
 80117c6:	4602      	mov	r2, r0
 80117c8:	460b      	mov	r3, r1
 80117ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80117ce:	f7ee fd5b 	bl	8000288 <__aeabi_dsub>
 80117d2:	3530      	adds	r5, #48	@ 0x30
 80117d4:	4602      	mov	r2, r0
 80117d6:	460b      	mov	r3, r1
 80117d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80117dc:	f806 5b01 	strb.w	r5, [r6], #1
 80117e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80117e4:	f7ef f97a 	bl	8000adc <__aeabi_dcmplt>
 80117e8:	2800      	cmp	r0, #0
 80117ea:	d172      	bne.n	80118d2 <_dtoa_r+0x622>
 80117ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80117f0:	4911      	ldr	r1, [pc, #68]	@ (8011838 <_dtoa_r+0x588>)
 80117f2:	2000      	movs	r0, #0
 80117f4:	f7ee fd48 	bl	8000288 <__aeabi_dsub>
 80117f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80117fc:	f7ef f96e 	bl	8000adc <__aeabi_dcmplt>
 8011800:	2800      	cmp	r0, #0
 8011802:	f040 80b4 	bne.w	801196e <_dtoa_r+0x6be>
 8011806:	42a6      	cmp	r6, r4
 8011808:	f43f af70 	beq.w	80116ec <_dtoa_r+0x43c>
 801180c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011810:	4b0a      	ldr	r3, [pc, #40]	@ (801183c <_dtoa_r+0x58c>)
 8011812:	2200      	movs	r2, #0
 8011814:	f7ee fef0 	bl	80005f8 <__aeabi_dmul>
 8011818:	4b08      	ldr	r3, [pc, #32]	@ (801183c <_dtoa_r+0x58c>)
 801181a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801181e:	2200      	movs	r2, #0
 8011820:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011824:	f7ee fee8 	bl	80005f8 <__aeabi_dmul>
 8011828:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801182c:	e7c4      	b.n	80117b8 <_dtoa_r+0x508>
 801182e:	bf00      	nop
 8011830:	08014ba8 	.word	0x08014ba8
 8011834:	08014b80 	.word	0x08014b80
 8011838:	3ff00000 	.word	0x3ff00000
 801183c:	40240000 	.word	0x40240000
 8011840:	401c0000 	.word	0x401c0000
 8011844:	40140000 	.word	0x40140000
 8011848:	3fe00000 	.word	0x3fe00000
 801184c:	4631      	mov	r1, r6
 801184e:	4628      	mov	r0, r5
 8011850:	f7ee fed2 	bl	80005f8 <__aeabi_dmul>
 8011854:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011858:	9413      	str	r4, [sp, #76]	@ 0x4c
 801185a:	4656      	mov	r6, sl
 801185c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011860:	f7ef f97a 	bl	8000b58 <__aeabi_d2iz>
 8011864:	4605      	mov	r5, r0
 8011866:	f7ee fe5d 	bl	8000524 <__aeabi_i2d>
 801186a:	4602      	mov	r2, r0
 801186c:	460b      	mov	r3, r1
 801186e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011872:	f7ee fd09 	bl	8000288 <__aeabi_dsub>
 8011876:	3530      	adds	r5, #48	@ 0x30
 8011878:	f806 5b01 	strb.w	r5, [r6], #1
 801187c:	4602      	mov	r2, r0
 801187e:	460b      	mov	r3, r1
 8011880:	42a6      	cmp	r6, r4
 8011882:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011886:	f04f 0200 	mov.w	r2, #0
 801188a:	d124      	bne.n	80118d6 <_dtoa_r+0x626>
 801188c:	4baf      	ldr	r3, [pc, #700]	@ (8011b4c <_dtoa_r+0x89c>)
 801188e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011892:	f7ee fcfb 	bl	800028c <__adddf3>
 8011896:	4602      	mov	r2, r0
 8011898:	460b      	mov	r3, r1
 801189a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801189e:	f7ef f93b 	bl	8000b18 <__aeabi_dcmpgt>
 80118a2:	2800      	cmp	r0, #0
 80118a4:	d163      	bne.n	801196e <_dtoa_r+0x6be>
 80118a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80118aa:	49a8      	ldr	r1, [pc, #672]	@ (8011b4c <_dtoa_r+0x89c>)
 80118ac:	2000      	movs	r0, #0
 80118ae:	f7ee fceb 	bl	8000288 <__aeabi_dsub>
 80118b2:	4602      	mov	r2, r0
 80118b4:	460b      	mov	r3, r1
 80118b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80118ba:	f7ef f90f 	bl	8000adc <__aeabi_dcmplt>
 80118be:	2800      	cmp	r0, #0
 80118c0:	f43f af14 	beq.w	80116ec <_dtoa_r+0x43c>
 80118c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80118c6:	1e73      	subs	r3, r6, #1
 80118c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80118ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80118ce:	2b30      	cmp	r3, #48	@ 0x30
 80118d0:	d0f8      	beq.n	80118c4 <_dtoa_r+0x614>
 80118d2:	4647      	mov	r7, r8
 80118d4:	e03b      	b.n	801194e <_dtoa_r+0x69e>
 80118d6:	4b9e      	ldr	r3, [pc, #632]	@ (8011b50 <_dtoa_r+0x8a0>)
 80118d8:	f7ee fe8e 	bl	80005f8 <__aeabi_dmul>
 80118dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80118e0:	e7bc      	b.n	801185c <_dtoa_r+0x5ac>
 80118e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80118e6:	4656      	mov	r6, sl
 80118e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118ec:	4620      	mov	r0, r4
 80118ee:	4629      	mov	r1, r5
 80118f0:	f7ee ffac 	bl	800084c <__aeabi_ddiv>
 80118f4:	f7ef f930 	bl	8000b58 <__aeabi_d2iz>
 80118f8:	4680      	mov	r8, r0
 80118fa:	f7ee fe13 	bl	8000524 <__aeabi_i2d>
 80118fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011902:	f7ee fe79 	bl	80005f8 <__aeabi_dmul>
 8011906:	4602      	mov	r2, r0
 8011908:	460b      	mov	r3, r1
 801190a:	4620      	mov	r0, r4
 801190c:	4629      	mov	r1, r5
 801190e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011912:	f7ee fcb9 	bl	8000288 <__aeabi_dsub>
 8011916:	f806 4b01 	strb.w	r4, [r6], #1
 801191a:	9d03      	ldr	r5, [sp, #12]
 801191c:	eba6 040a 	sub.w	r4, r6, sl
 8011920:	42a5      	cmp	r5, r4
 8011922:	4602      	mov	r2, r0
 8011924:	460b      	mov	r3, r1
 8011926:	d133      	bne.n	8011990 <_dtoa_r+0x6e0>
 8011928:	f7ee fcb0 	bl	800028c <__adddf3>
 801192c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011930:	4604      	mov	r4, r0
 8011932:	460d      	mov	r5, r1
 8011934:	f7ef f8f0 	bl	8000b18 <__aeabi_dcmpgt>
 8011938:	b9c0      	cbnz	r0, 801196c <_dtoa_r+0x6bc>
 801193a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801193e:	4620      	mov	r0, r4
 8011940:	4629      	mov	r1, r5
 8011942:	f7ef f8c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8011946:	b110      	cbz	r0, 801194e <_dtoa_r+0x69e>
 8011948:	f018 0f01 	tst.w	r8, #1
 801194c:	d10e      	bne.n	801196c <_dtoa_r+0x6bc>
 801194e:	9902      	ldr	r1, [sp, #8]
 8011950:	4648      	mov	r0, r9
 8011952:	f000 fb07 	bl	8011f64 <_Bfree>
 8011956:	2300      	movs	r3, #0
 8011958:	7033      	strb	r3, [r6, #0]
 801195a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801195c:	3701      	adds	r7, #1
 801195e:	601f      	str	r7, [r3, #0]
 8011960:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011962:	2b00      	cmp	r3, #0
 8011964:	f000 824b 	beq.w	8011dfe <_dtoa_r+0xb4e>
 8011968:	601e      	str	r6, [r3, #0]
 801196a:	e248      	b.n	8011dfe <_dtoa_r+0xb4e>
 801196c:	46b8      	mov	r8, r7
 801196e:	4633      	mov	r3, r6
 8011970:	461e      	mov	r6, r3
 8011972:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011976:	2a39      	cmp	r2, #57	@ 0x39
 8011978:	d106      	bne.n	8011988 <_dtoa_r+0x6d8>
 801197a:	459a      	cmp	sl, r3
 801197c:	d1f8      	bne.n	8011970 <_dtoa_r+0x6c0>
 801197e:	2230      	movs	r2, #48	@ 0x30
 8011980:	f108 0801 	add.w	r8, r8, #1
 8011984:	f88a 2000 	strb.w	r2, [sl]
 8011988:	781a      	ldrb	r2, [r3, #0]
 801198a:	3201      	adds	r2, #1
 801198c:	701a      	strb	r2, [r3, #0]
 801198e:	e7a0      	b.n	80118d2 <_dtoa_r+0x622>
 8011990:	4b6f      	ldr	r3, [pc, #444]	@ (8011b50 <_dtoa_r+0x8a0>)
 8011992:	2200      	movs	r2, #0
 8011994:	f7ee fe30 	bl	80005f8 <__aeabi_dmul>
 8011998:	2200      	movs	r2, #0
 801199a:	2300      	movs	r3, #0
 801199c:	4604      	mov	r4, r0
 801199e:	460d      	mov	r5, r1
 80119a0:	f7ef f892 	bl	8000ac8 <__aeabi_dcmpeq>
 80119a4:	2800      	cmp	r0, #0
 80119a6:	d09f      	beq.n	80118e8 <_dtoa_r+0x638>
 80119a8:	e7d1      	b.n	801194e <_dtoa_r+0x69e>
 80119aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80119ac:	2a00      	cmp	r2, #0
 80119ae:	f000 80ea 	beq.w	8011b86 <_dtoa_r+0x8d6>
 80119b2:	9a07      	ldr	r2, [sp, #28]
 80119b4:	2a01      	cmp	r2, #1
 80119b6:	f300 80cd 	bgt.w	8011b54 <_dtoa_r+0x8a4>
 80119ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80119bc:	2a00      	cmp	r2, #0
 80119be:	f000 80c1 	beq.w	8011b44 <_dtoa_r+0x894>
 80119c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80119c6:	9c08      	ldr	r4, [sp, #32]
 80119c8:	9e00      	ldr	r6, [sp, #0]
 80119ca:	9a00      	ldr	r2, [sp, #0]
 80119cc:	441a      	add	r2, r3
 80119ce:	9200      	str	r2, [sp, #0]
 80119d0:	9a06      	ldr	r2, [sp, #24]
 80119d2:	2101      	movs	r1, #1
 80119d4:	441a      	add	r2, r3
 80119d6:	4648      	mov	r0, r9
 80119d8:	9206      	str	r2, [sp, #24]
 80119da:	f000 fbc1 	bl	8012160 <__i2b>
 80119de:	4605      	mov	r5, r0
 80119e0:	b166      	cbz	r6, 80119fc <_dtoa_r+0x74c>
 80119e2:	9b06      	ldr	r3, [sp, #24]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	dd09      	ble.n	80119fc <_dtoa_r+0x74c>
 80119e8:	42b3      	cmp	r3, r6
 80119ea:	9a00      	ldr	r2, [sp, #0]
 80119ec:	bfa8      	it	ge
 80119ee:	4633      	movge	r3, r6
 80119f0:	1ad2      	subs	r2, r2, r3
 80119f2:	9200      	str	r2, [sp, #0]
 80119f4:	9a06      	ldr	r2, [sp, #24]
 80119f6:	1af6      	subs	r6, r6, r3
 80119f8:	1ad3      	subs	r3, r2, r3
 80119fa:	9306      	str	r3, [sp, #24]
 80119fc:	9b08      	ldr	r3, [sp, #32]
 80119fe:	b30b      	cbz	r3, 8011a44 <_dtoa_r+0x794>
 8011a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	f000 80c6 	beq.w	8011b94 <_dtoa_r+0x8e4>
 8011a08:	2c00      	cmp	r4, #0
 8011a0a:	f000 80c0 	beq.w	8011b8e <_dtoa_r+0x8de>
 8011a0e:	4629      	mov	r1, r5
 8011a10:	4622      	mov	r2, r4
 8011a12:	4648      	mov	r0, r9
 8011a14:	f000 fc5c 	bl	80122d0 <__pow5mult>
 8011a18:	9a02      	ldr	r2, [sp, #8]
 8011a1a:	4601      	mov	r1, r0
 8011a1c:	4605      	mov	r5, r0
 8011a1e:	4648      	mov	r0, r9
 8011a20:	f000 fbb4 	bl	801218c <__multiply>
 8011a24:	9902      	ldr	r1, [sp, #8]
 8011a26:	4680      	mov	r8, r0
 8011a28:	4648      	mov	r0, r9
 8011a2a:	f000 fa9b 	bl	8011f64 <_Bfree>
 8011a2e:	9b08      	ldr	r3, [sp, #32]
 8011a30:	1b1b      	subs	r3, r3, r4
 8011a32:	9308      	str	r3, [sp, #32]
 8011a34:	f000 80b1 	beq.w	8011b9a <_dtoa_r+0x8ea>
 8011a38:	9a08      	ldr	r2, [sp, #32]
 8011a3a:	4641      	mov	r1, r8
 8011a3c:	4648      	mov	r0, r9
 8011a3e:	f000 fc47 	bl	80122d0 <__pow5mult>
 8011a42:	9002      	str	r0, [sp, #8]
 8011a44:	2101      	movs	r1, #1
 8011a46:	4648      	mov	r0, r9
 8011a48:	f000 fb8a 	bl	8012160 <__i2b>
 8011a4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011a4e:	4604      	mov	r4, r0
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	f000 81d8 	beq.w	8011e06 <_dtoa_r+0xb56>
 8011a56:	461a      	mov	r2, r3
 8011a58:	4601      	mov	r1, r0
 8011a5a:	4648      	mov	r0, r9
 8011a5c:	f000 fc38 	bl	80122d0 <__pow5mult>
 8011a60:	9b07      	ldr	r3, [sp, #28]
 8011a62:	2b01      	cmp	r3, #1
 8011a64:	4604      	mov	r4, r0
 8011a66:	f300 809f 	bgt.w	8011ba8 <_dtoa_r+0x8f8>
 8011a6a:	9b04      	ldr	r3, [sp, #16]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	f040 8097 	bne.w	8011ba0 <_dtoa_r+0x8f0>
 8011a72:	9b05      	ldr	r3, [sp, #20]
 8011a74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	f040 8093 	bne.w	8011ba4 <_dtoa_r+0x8f4>
 8011a7e:	9b05      	ldr	r3, [sp, #20]
 8011a80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011a84:	0d1b      	lsrs	r3, r3, #20
 8011a86:	051b      	lsls	r3, r3, #20
 8011a88:	b133      	cbz	r3, 8011a98 <_dtoa_r+0x7e8>
 8011a8a:	9b00      	ldr	r3, [sp, #0]
 8011a8c:	3301      	adds	r3, #1
 8011a8e:	9300      	str	r3, [sp, #0]
 8011a90:	9b06      	ldr	r3, [sp, #24]
 8011a92:	3301      	adds	r3, #1
 8011a94:	9306      	str	r3, [sp, #24]
 8011a96:	2301      	movs	r3, #1
 8011a98:	9308      	str	r3, [sp, #32]
 8011a9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	f000 81b8 	beq.w	8011e12 <_dtoa_r+0xb62>
 8011aa2:	6923      	ldr	r3, [r4, #16]
 8011aa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011aa8:	6918      	ldr	r0, [r3, #16]
 8011aaa:	f000 fb0d 	bl	80120c8 <__hi0bits>
 8011aae:	f1c0 0020 	rsb	r0, r0, #32
 8011ab2:	9b06      	ldr	r3, [sp, #24]
 8011ab4:	4418      	add	r0, r3
 8011ab6:	f010 001f 	ands.w	r0, r0, #31
 8011aba:	f000 8082 	beq.w	8011bc2 <_dtoa_r+0x912>
 8011abe:	f1c0 0320 	rsb	r3, r0, #32
 8011ac2:	2b04      	cmp	r3, #4
 8011ac4:	dd73      	ble.n	8011bae <_dtoa_r+0x8fe>
 8011ac6:	9b00      	ldr	r3, [sp, #0]
 8011ac8:	f1c0 001c 	rsb	r0, r0, #28
 8011acc:	4403      	add	r3, r0
 8011ace:	9300      	str	r3, [sp, #0]
 8011ad0:	9b06      	ldr	r3, [sp, #24]
 8011ad2:	4403      	add	r3, r0
 8011ad4:	4406      	add	r6, r0
 8011ad6:	9306      	str	r3, [sp, #24]
 8011ad8:	9b00      	ldr	r3, [sp, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	dd05      	ble.n	8011aea <_dtoa_r+0x83a>
 8011ade:	9902      	ldr	r1, [sp, #8]
 8011ae0:	461a      	mov	r2, r3
 8011ae2:	4648      	mov	r0, r9
 8011ae4:	f000 fc4e 	bl	8012384 <__lshift>
 8011ae8:	9002      	str	r0, [sp, #8]
 8011aea:	9b06      	ldr	r3, [sp, #24]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	dd05      	ble.n	8011afc <_dtoa_r+0x84c>
 8011af0:	4621      	mov	r1, r4
 8011af2:	461a      	mov	r2, r3
 8011af4:	4648      	mov	r0, r9
 8011af6:	f000 fc45 	bl	8012384 <__lshift>
 8011afa:	4604      	mov	r4, r0
 8011afc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d061      	beq.n	8011bc6 <_dtoa_r+0x916>
 8011b02:	9802      	ldr	r0, [sp, #8]
 8011b04:	4621      	mov	r1, r4
 8011b06:	f000 fca9 	bl	801245c <__mcmp>
 8011b0a:	2800      	cmp	r0, #0
 8011b0c:	da5b      	bge.n	8011bc6 <_dtoa_r+0x916>
 8011b0e:	2300      	movs	r3, #0
 8011b10:	9902      	ldr	r1, [sp, #8]
 8011b12:	220a      	movs	r2, #10
 8011b14:	4648      	mov	r0, r9
 8011b16:	f000 fa47 	bl	8011fa8 <__multadd>
 8011b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b1c:	9002      	str	r0, [sp, #8]
 8011b1e:	f107 38ff 	add.w	r8, r7, #4294967295
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	f000 8177 	beq.w	8011e16 <_dtoa_r+0xb66>
 8011b28:	4629      	mov	r1, r5
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	220a      	movs	r2, #10
 8011b2e:	4648      	mov	r0, r9
 8011b30:	f000 fa3a 	bl	8011fa8 <__multadd>
 8011b34:	f1bb 0f00 	cmp.w	fp, #0
 8011b38:	4605      	mov	r5, r0
 8011b3a:	dc6f      	bgt.n	8011c1c <_dtoa_r+0x96c>
 8011b3c:	9b07      	ldr	r3, [sp, #28]
 8011b3e:	2b02      	cmp	r3, #2
 8011b40:	dc49      	bgt.n	8011bd6 <_dtoa_r+0x926>
 8011b42:	e06b      	b.n	8011c1c <_dtoa_r+0x96c>
 8011b44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011b46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011b4a:	e73c      	b.n	80119c6 <_dtoa_r+0x716>
 8011b4c:	3fe00000 	.word	0x3fe00000
 8011b50:	40240000 	.word	0x40240000
 8011b54:	9b03      	ldr	r3, [sp, #12]
 8011b56:	1e5c      	subs	r4, r3, #1
 8011b58:	9b08      	ldr	r3, [sp, #32]
 8011b5a:	42a3      	cmp	r3, r4
 8011b5c:	db09      	blt.n	8011b72 <_dtoa_r+0x8c2>
 8011b5e:	1b1c      	subs	r4, r3, r4
 8011b60:	9b03      	ldr	r3, [sp, #12]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	f6bf af30 	bge.w	80119c8 <_dtoa_r+0x718>
 8011b68:	9b00      	ldr	r3, [sp, #0]
 8011b6a:	9a03      	ldr	r2, [sp, #12]
 8011b6c:	1a9e      	subs	r6, r3, r2
 8011b6e:	2300      	movs	r3, #0
 8011b70:	e72b      	b.n	80119ca <_dtoa_r+0x71a>
 8011b72:	9b08      	ldr	r3, [sp, #32]
 8011b74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011b76:	9408      	str	r4, [sp, #32]
 8011b78:	1ae3      	subs	r3, r4, r3
 8011b7a:	441a      	add	r2, r3
 8011b7c:	9e00      	ldr	r6, [sp, #0]
 8011b7e:	9b03      	ldr	r3, [sp, #12]
 8011b80:	920d      	str	r2, [sp, #52]	@ 0x34
 8011b82:	2400      	movs	r4, #0
 8011b84:	e721      	b.n	80119ca <_dtoa_r+0x71a>
 8011b86:	9c08      	ldr	r4, [sp, #32]
 8011b88:	9e00      	ldr	r6, [sp, #0]
 8011b8a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011b8c:	e728      	b.n	80119e0 <_dtoa_r+0x730>
 8011b8e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011b92:	e751      	b.n	8011a38 <_dtoa_r+0x788>
 8011b94:	9a08      	ldr	r2, [sp, #32]
 8011b96:	9902      	ldr	r1, [sp, #8]
 8011b98:	e750      	b.n	8011a3c <_dtoa_r+0x78c>
 8011b9a:	f8cd 8008 	str.w	r8, [sp, #8]
 8011b9e:	e751      	b.n	8011a44 <_dtoa_r+0x794>
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	e779      	b.n	8011a98 <_dtoa_r+0x7e8>
 8011ba4:	9b04      	ldr	r3, [sp, #16]
 8011ba6:	e777      	b.n	8011a98 <_dtoa_r+0x7e8>
 8011ba8:	2300      	movs	r3, #0
 8011baa:	9308      	str	r3, [sp, #32]
 8011bac:	e779      	b.n	8011aa2 <_dtoa_r+0x7f2>
 8011bae:	d093      	beq.n	8011ad8 <_dtoa_r+0x828>
 8011bb0:	9a00      	ldr	r2, [sp, #0]
 8011bb2:	331c      	adds	r3, #28
 8011bb4:	441a      	add	r2, r3
 8011bb6:	9200      	str	r2, [sp, #0]
 8011bb8:	9a06      	ldr	r2, [sp, #24]
 8011bba:	441a      	add	r2, r3
 8011bbc:	441e      	add	r6, r3
 8011bbe:	9206      	str	r2, [sp, #24]
 8011bc0:	e78a      	b.n	8011ad8 <_dtoa_r+0x828>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	e7f4      	b.n	8011bb0 <_dtoa_r+0x900>
 8011bc6:	9b03      	ldr	r3, [sp, #12]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	46b8      	mov	r8, r7
 8011bcc:	dc20      	bgt.n	8011c10 <_dtoa_r+0x960>
 8011bce:	469b      	mov	fp, r3
 8011bd0:	9b07      	ldr	r3, [sp, #28]
 8011bd2:	2b02      	cmp	r3, #2
 8011bd4:	dd1e      	ble.n	8011c14 <_dtoa_r+0x964>
 8011bd6:	f1bb 0f00 	cmp.w	fp, #0
 8011bda:	f47f adb1 	bne.w	8011740 <_dtoa_r+0x490>
 8011bde:	4621      	mov	r1, r4
 8011be0:	465b      	mov	r3, fp
 8011be2:	2205      	movs	r2, #5
 8011be4:	4648      	mov	r0, r9
 8011be6:	f000 f9df 	bl	8011fa8 <__multadd>
 8011bea:	4601      	mov	r1, r0
 8011bec:	4604      	mov	r4, r0
 8011bee:	9802      	ldr	r0, [sp, #8]
 8011bf0:	f000 fc34 	bl	801245c <__mcmp>
 8011bf4:	2800      	cmp	r0, #0
 8011bf6:	f77f ada3 	ble.w	8011740 <_dtoa_r+0x490>
 8011bfa:	4656      	mov	r6, sl
 8011bfc:	2331      	movs	r3, #49	@ 0x31
 8011bfe:	f806 3b01 	strb.w	r3, [r6], #1
 8011c02:	f108 0801 	add.w	r8, r8, #1
 8011c06:	e59f      	b.n	8011748 <_dtoa_r+0x498>
 8011c08:	9c03      	ldr	r4, [sp, #12]
 8011c0a:	46b8      	mov	r8, r7
 8011c0c:	4625      	mov	r5, r4
 8011c0e:	e7f4      	b.n	8011bfa <_dtoa_r+0x94a>
 8011c10:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8011c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	f000 8101 	beq.w	8011e1e <_dtoa_r+0xb6e>
 8011c1c:	2e00      	cmp	r6, #0
 8011c1e:	dd05      	ble.n	8011c2c <_dtoa_r+0x97c>
 8011c20:	4629      	mov	r1, r5
 8011c22:	4632      	mov	r2, r6
 8011c24:	4648      	mov	r0, r9
 8011c26:	f000 fbad 	bl	8012384 <__lshift>
 8011c2a:	4605      	mov	r5, r0
 8011c2c:	9b08      	ldr	r3, [sp, #32]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d05c      	beq.n	8011cec <_dtoa_r+0xa3c>
 8011c32:	6869      	ldr	r1, [r5, #4]
 8011c34:	4648      	mov	r0, r9
 8011c36:	f000 f955 	bl	8011ee4 <_Balloc>
 8011c3a:	4606      	mov	r6, r0
 8011c3c:	b928      	cbnz	r0, 8011c4a <_dtoa_r+0x99a>
 8011c3e:	4b82      	ldr	r3, [pc, #520]	@ (8011e48 <_dtoa_r+0xb98>)
 8011c40:	4602      	mov	r2, r0
 8011c42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011c46:	f7ff bb4a 	b.w	80112de <_dtoa_r+0x2e>
 8011c4a:	692a      	ldr	r2, [r5, #16]
 8011c4c:	3202      	adds	r2, #2
 8011c4e:	0092      	lsls	r2, r2, #2
 8011c50:	f105 010c 	add.w	r1, r5, #12
 8011c54:	300c      	adds	r0, #12
 8011c56:	f001 fea5 	bl	80139a4 <memcpy>
 8011c5a:	2201      	movs	r2, #1
 8011c5c:	4631      	mov	r1, r6
 8011c5e:	4648      	mov	r0, r9
 8011c60:	f000 fb90 	bl	8012384 <__lshift>
 8011c64:	f10a 0301 	add.w	r3, sl, #1
 8011c68:	9300      	str	r3, [sp, #0]
 8011c6a:	eb0a 030b 	add.w	r3, sl, fp
 8011c6e:	9308      	str	r3, [sp, #32]
 8011c70:	9b04      	ldr	r3, [sp, #16]
 8011c72:	f003 0301 	and.w	r3, r3, #1
 8011c76:	462f      	mov	r7, r5
 8011c78:	9306      	str	r3, [sp, #24]
 8011c7a:	4605      	mov	r5, r0
 8011c7c:	9b00      	ldr	r3, [sp, #0]
 8011c7e:	9802      	ldr	r0, [sp, #8]
 8011c80:	4621      	mov	r1, r4
 8011c82:	f103 3bff 	add.w	fp, r3, #4294967295
 8011c86:	f7ff fa88 	bl	801119a <quorem>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	3330      	adds	r3, #48	@ 0x30
 8011c8e:	9003      	str	r0, [sp, #12]
 8011c90:	4639      	mov	r1, r7
 8011c92:	9802      	ldr	r0, [sp, #8]
 8011c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c96:	f000 fbe1 	bl	801245c <__mcmp>
 8011c9a:	462a      	mov	r2, r5
 8011c9c:	9004      	str	r0, [sp, #16]
 8011c9e:	4621      	mov	r1, r4
 8011ca0:	4648      	mov	r0, r9
 8011ca2:	f000 fbf7 	bl	8012494 <__mdiff>
 8011ca6:	68c2      	ldr	r2, [r0, #12]
 8011ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011caa:	4606      	mov	r6, r0
 8011cac:	bb02      	cbnz	r2, 8011cf0 <_dtoa_r+0xa40>
 8011cae:	4601      	mov	r1, r0
 8011cb0:	9802      	ldr	r0, [sp, #8]
 8011cb2:	f000 fbd3 	bl	801245c <__mcmp>
 8011cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cb8:	4602      	mov	r2, r0
 8011cba:	4631      	mov	r1, r6
 8011cbc:	4648      	mov	r0, r9
 8011cbe:	920c      	str	r2, [sp, #48]	@ 0x30
 8011cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cc2:	f000 f94f 	bl	8011f64 <_Bfree>
 8011cc6:	9b07      	ldr	r3, [sp, #28]
 8011cc8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011cca:	9e00      	ldr	r6, [sp, #0]
 8011ccc:	ea42 0103 	orr.w	r1, r2, r3
 8011cd0:	9b06      	ldr	r3, [sp, #24]
 8011cd2:	4319      	orrs	r1, r3
 8011cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cd6:	d10d      	bne.n	8011cf4 <_dtoa_r+0xa44>
 8011cd8:	2b39      	cmp	r3, #57	@ 0x39
 8011cda:	d027      	beq.n	8011d2c <_dtoa_r+0xa7c>
 8011cdc:	9a04      	ldr	r2, [sp, #16]
 8011cde:	2a00      	cmp	r2, #0
 8011ce0:	dd01      	ble.n	8011ce6 <_dtoa_r+0xa36>
 8011ce2:	9b03      	ldr	r3, [sp, #12]
 8011ce4:	3331      	adds	r3, #49	@ 0x31
 8011ce6:	f88b 3000 	strb.w	r3, [fp]
 8011cea:	e52e      	b.n	801174a <_dtoa_r+0x49a>
 8011cec:	4628      	mov	r0, r5
 8011cee:	e7b9      	b.n	8011c64 <_dtoa_r+0x9b4>
 8011cf0:	2201      	movs	r2, #1
 8011cf2:	e7e2      	b.n	8011cba <_dtoa_r+0xa0a>
 8011cf4:	9904      	ldr	r1, [sp, #16]
 8011cf6:	2900      	cmp	r1, #0
 8011cf8:	db04      	blt.n	8011d04 <_dtoa_r+0xa54>
 8011cfa:	9807      	ldr	r0, [sp, #28]
 8011cfc:	4301      	orrs	r1, r0
 8011cfe:	9806      	ldr	r0, [sp, #24]
 8011d00:	4301      	orrs	r1, r0
 8011d02:	d120      	bne.n	8011d46 <_dtoa_r+0xa96>
 8011d04:	2a00      	cmp	r2, #0
 8011d06:	ddee      	ble.n	8011ce6 <_dtoa_r+0xa36>
 8011d08:	9902      	ldr	r1, [sp, #8]
 8011d0a:	9300      	str	r3, [sp, #0]
 8011d0c:	2201      	movs	r2, #1
 8011d0e:	4648      	mov	r0, r9
 8011d10:	f000 fb38 	bl	8012384 <__lshift>
 8011d14:	4621      	mov	r1, r4
 8011d16:	9002      	str	r0, [sp, #8]
 8011d18:	f000 fba0 	bl	801245c <__mcmp>
 8011d1c:	2800      	cmp	r0, #0
 8011d1e:	9b00      	ldr	r3, [sp, #0]
 8011d20:	dc02      	bgt.n	8011d28 <_dtoa_r+0xa78>
 8011d22:	d1e0      	bne.n	8011ce6 <_dtoa_r+0xa36>
 8011d24:	07da      	lsls	r2, r3, #31
 8011d26:	d5de      	bpl.n	8011ce6 <_dtoa_r+0xa36>
 8011d28:	2b39      	cmp	r3, #57	@ 0x39
 8011d2a:	d1da      	bne.n	8011ce2 <_dtoa_r+0xa32>
 8011d2c:	2339      	movs	r3, #57	@ 0x39
 8011d2e:	f88b 3000 	strb.w	r3, [fp]
 8011d32:	4633      	mov	r3, r6
 8011d34:	461e      	mov	r6, r3
 8011d36:	3b01      	subs	r3, #1
 8011d38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011d3c:	2a39      	cmp	r2, #57	@ 0x39
 8011d3e:	d04e      	beq.n	8011dde <_dtoa_r+0xb2e>
 8011d40:	3201      	adds	r2, #1
 8011d42:	701a      	strb	r2, [r3, #0]
 8011d44:	e501      	b.n	801174a <_dtoa_r+0x49a>
 8011d46:	2a00      	cmp	r2, #0
 8011d48:	dd03      	ble.n	8011d52 <_dtoa_r+0xaa2>
 8011d4a:	2b39      	cmp	r3, #57	@ 0x39
 8011d4c:	d0ee      	beq.n	8011d2c <_dtoa_r+0xa7c>
 8011d4e:	3301      	adds	r3, #1
 8011d50:	e7c9      	b.n	8011ce6 <_dtoa_r+0xa36>
 8011d52:	9a00      	ldr	r2, [sp, #0]
 8011d54:	9908      	ldr	r1, [sp, #32]
 8011d56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011d5a:	428a      	cmp	r2, r1
 8011d5c:	d028      	beq.n	8011db0 <_dtoa_r+0xb00>
 8011d5e:	9902      	ldr	r1, [sp, #8]
 8011d60:	2300      	movs	r3, #0
 8011d62:	220a      	movs	r2, #10
 8011d64:	4648      	mov	r0, r9
 8011d66:	f000 f91f 	bl	8011fa8 <__multadd>
 8011d6a:	42af      	cmp	r7, r5
 8011d6c:	9002      	str	r0, [sp, #8]
 8011d6e:	f04f 0300 	mov.w	r3, #0
 8011d72:	f04f 020a 	mov.w	r2, #10
 8011d76:	4639      	mov	r1, r7
 8011d78:	4648      	mov	r0, r9
 8011d7a:	d107      	bne.n	8011d8c <_dtoa_r+0xadc>
 8011d7c:	f000 f914 	bl	8011fa8 <__multadd>
 8011d80:	4607      	mov	r7, r0
 8011d82:	4605      	mov	r5, r0
 8011d84:	9b00      	ldr	r3, [sp, #0]
 8011d86:	3301      	adds	r3, #1
 8011d88:	9300      	str	r3, [sp, #0]
 8011d8a:	e777      	b.n	8011c7c <_dtoa_r+0x9cc>
 8011d8c:	f000 f90c 	bl	8011fa8 <__multadd>
 8011d90:	4629      	mov	r1, r5
 8011d92:	4607      	mov	r7, r0
 8011d94:	2300      	movs	r3, #0
 8011d96:	220a      	movs	r2, #10
 8011d98:	4648      	mov	r0, r9
 8011d9a:	f000 f905 	bl	8011fa8 <__multadd>
 8011d9e:	4605      	mov	r5, r0
 8011da0:	e7f0      	b.n	8011d84 <_dtoa_r+0xad4>
 8011da2:	f1bb 0f00 	cmp.w	fp, #0
 8011da6:	bfcc      	ite	gt
 8011da8:	465e      	movgt	r6, fp
 8011daa:	2601      	movle	r6, #1
 8011dac:	4456      	add	r6, sl
 8011dae:	2700      	movs	r7, #0
 8011db0:	9902      	ldr	r1, [sp, #8]
 8011db2:	9300      	str	r3, [sp, #0]
 8011db4:	2201      	movs	r2, #1
 8011db6:	4648      	mov	r0, r9
 8011db8:	f000 fae4 	bl	8012384 <__lshift>
 8011dbc:	4621      	mov	r1, r4
 8011dbe:	9002      	str	r0, [sp, #8]
 8011dc0:	f000 fb4c 	bl	801245c <__mcmp>
 8011dc4:	2800      	cmp	r0, #0
 8011dc6:	dcb4      	bgt.n	8011d32 <_dtoa_r+0xa82>
 8011dc8:	d102      	bne.n	8011dd0 <_dtoa_r+0xb20>
 8011dca:	9b00      	ldr	r3, [sp, #0]
 8011dcc:	07db      	lsls	r3, r3, #31
 8011dce:	d4b0      	bmi.n	8011d32 <_dtoa_r+0xa82>
 8011dd0:	4633      	mov	r3, r6
 8011dd2:	461e      	mov	r6, r3
 8011dd4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011dd8:	2a30      	cmp	r2, #48	@ 0x30
 8011dda:	d0fa      	beq.n	8011dd2 <_dtoa_r+0xb22>
 8011ddc:	e4b5      	b.n	801174a <_dtoa_r+0x49a>
 8011dde:	459a      	cmp	sl, r3
 8011de0:	d1a8      	bne.n	8011d34 <_dtoa_r+0xa84>
 8011de2:	2331      	movs	r3, #49	@ 0x31
 8011de4:	f108 0801 	add.w	r8, r8, #1
 8011de8:	f88a 3000 	strb.w	r3, [sl]
 8011dec:	e4ad      	b.n	801174a <_dtoa_r+0x49a>
 8011dee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011df0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8011e4c <_dtoa_r+0xb9c>
 8011df4:	b11b      	cbz	r3, 8011dfe <_dtoa_r+0xb4e>
 8011df6:	f10a 0308 	add.w	r3, sl, #8
 8011dfa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011dfc:	6013      	str	r3, [r2, #0]
 8011dfe:	4650      	mov	r0, sl
 8011e00:	b017      	add	sp, #92	@ 0x5c
 8011e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e06:	9b07      	ldr	r3, [sp, #28]
 8011e08:	2b01      	cmp	r3, #1
 8011e0a:	f77f ae2e 	ble.w	8011a6a <_dtoa_r+0x7ba>
 8011e0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e10:	9308      	str	r3, [sp, #32]
 8011e12:	2001      	movs	r0, #1
 8011e14:	e64d      	b.n	8011ab2 <_dtoa_r+0x802>
 8011e16:	f1bb 0f00 	cmp.w	fp, #0
 8011e1a:	f77f aed9 	ble.w	8011bd0 <_dtoa_r+0x920>
 8011e1e:	4656      	mov	r6, sl
 8011e20:	9802      	ldr	r0, [sp, #8]
 8011e22:	4621      	mov	r1, r4
 8011e24:	f7ff f9b9 	bl	801119a <quorem>
 8011e28:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8011e2c:	f806 3b01 	strb.w	r3, [r6], #1
 8011e30:	eba6 020a 	sub.w	r2, r6, sl
 8011e34:	4593      	cmp	fp, r2
 8011e36:	ddb4      	ble.n	8011da2 <_dtoa_r+0xaf2>
 8011e38:	9902      	ldr	r1, [sp, #8]
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	220a      	movs	r2, #10
 8011e3e:	4648      	mov	r0, r9
 8011e40:	f000 f8b2 	bl	8011fa8 <__multadd>
 8011e44:	9002      	str	r0, [sp, #8]
 8011e46:	e7eb      	b.n	8011e20 <_dtoa_r+0xb70>
 8011e48:	080147fd 	.word	0x080147fd
 8011e4c:	08014781 	.word	0x08014781

08011e50 <_free_r>:
 8011e50:	b538      	push	{r3, r4, r5, lr}
 8011e52:	4605      	mov	r5, r0
 8011e54:	2900      	cmp	r1, #0
 8011e56:	d041      	beq.n	8011edc <_free_r+0x8c>
 8011e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e5c:	1f0c      	subs	r4, r1, #4
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	bfb8      	it	lt
 8011e62:	18e4      	addlt	r4, r4, r3
 8011e64:	f7fe f972 	bl	801014c <__malloc_lock>
 8011e68:	4a1d      	ldr	r2, [pc, #116]	@ (8011ee0 <_free_r+0x90>)
 8011e6a:	6813      	ldr	r3, [r2, #0]
 8011e6c:	b933      	cbnz	r3, 8011e7c <_free_r+0x2c>
 8011e6e:	6063      	str	r3, [r4, #4]
 8011e70:	6014      	str	r4, [r2, #0]
 8011e72:	4628      	mov	r0, r5
 8011e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e78:	f7fe b96e 	b.w	8010158 <__malloc_unlock>
 8011e7c:	42a3      	cmp	r3, r4
 8011e7e:	d908      	bls.n	8011e92 <_free_r+0x42>
 8011e80:	6820      	ldr	r0, [r4, #0]
 8011e82:	1821      	adds	r1, r4, r0
 8011e84:	428b      	cmp	r3, r1
 8011e86:	bf01      	itttt	eq
 8011e88:	6819      	ldreq	r1, [r3, #0]
 8011e8a:	685b      	ldreq	r3, [r3, #4]
 8011e8c:	1809      	addeq	r1, r1, r0
 8011e8e:	6021      	streq	r1, [r4, #0]
 8011e90:	e7ed      	b.n	8011e6e <_free_r+0x1e>
 8011e92:	461a      	mov	r2, r3
 8011e94:	685b      	ldr	r3, [r3, #4]
 8011e96:	b10b      	cbz	r3, 8011e9c <_free_r+0x4c>
 8011e98:	42a3      	cmp	r3, r4
 8011e9a:	d9fa      	bls.n	8011e92 <_free_r+0x42>
 8011e9c:	6811      	ldr	r1, [r2, #0]
 8011e9e:	1850      	adds	r0, r2, r1
 8011ea0:	42a0      	cmp	r0, r4
 8011ea2:	d10b      	bne.n	8011ebc <_free_r+0x6c>
 8011ea4:	6820      	ldr	r0, [r4, #0]
 8011ea6:	4401      	add	r1, r0
 8011ea8:	1850      	adds	r0, r2, r1
 8011eaa:	4283      	cmp	r3, r0
 8011eac:	6011      	str	r1, [r2, #0]
 8011eae:	d1e0      	bne.n	8011e72 <_free_r+0x22>
 8011eb0:	6818      	ldr	r0, [r3, #0]
 8011eb2:	685b      	ldr	r3, [r3, #4]
 8011eb4:	6053      	str	r3, [r2, #4]
 8011eb6:	4408      	add	r0, r1
 8011eb8:	6010      	str	r0, [r2, #0]
 8011eba:	e7da      	b.n	8011e72 <_free_r+0x22>
 8011ebc:	d902      	bls.n	8011ec4 <_free_r+0x74>
 8011ebe:	230c      	movs	r3, #12
 8011ec0:	602b      	str	r3, [r5, #0]
 8011ec2:	e7d6      	b.n	8011e72 <_free_r+0x22>
 8011ec4:	6820      	ldr	r0, [r4, #0]
 8011ec6:	1821      	adds	r1, r4, r0
 8011ec8:	428b      	cmp	r3, r1
 8011eca:	bf04      	itt	eq
 8011ecc:	6819      	ldreq	r1, [r3, #0]
 8011ece:	685b      	ldreq	r3, [r3, #4]
 8011ed0:	6063      	str	r3, [r4, #4]
 8011ed2:	bf04      	itt	eq
 8011ed4:	1809      	addeq	r1, r1, r0
 8011ed6:	6021      	streq	r1, [r4, #0]
 8011ed8:	6054      	str	r4, [r2, #4]
 8011eda:	e7ca      	b.n	8011e72 <_free_r+0x22>
 8011edc:	bd38      	pop	{r3, r4, r5, pc}
 8011ede:	bf00      	nop
 8011ee0:	20000ce0 	.word	0x20000ce0

08011ee4 <_Balloc>:
 8011ee4:	b570      	push	{r4, r5, r6, lr}
 8011ee6:	69c6      	ldr	r6, [r0, #28]
 8011ee8:	4604      	mov	r4, r0
 8011eea:	460d      	mov	r5, r1
 8011eec:	b976      	cbnz	r6, 8011f0c <_Balloc+0x28>
 8011eee:	2010      	movs	r0, #16
 8011ef0:	f7fe f87a 	bl	800ffe8 <malloc>
 8011ef4:	4602      	mov	r2, r0
 8011ef6:	61e0      	str	r0, [r4, #28]
 8011ef8:	b920      	cbnz	r0, 8011f04 <_Balloc+0x20>
 8011efa:	4b18      	ldr	r3, [pc, #96]	@ (8011f5c <_Balloc+0x78>)
 8011efc:	4818      	ldr	r0, [pc, #96]	@ (8011f60 <_Balloc+0x7c>)
 8011efe:	216b      	movs	r1, #107	@ 0x6b
 8011f00:	f001 fd66 	bl	80139d0 <__assert_func>
 8011f04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011f08:	6006      	str	r6, [r0, #0]
 8011f0a:	60c6      	str	r6, [r0, #12]
 8011f0c:	69e6      	ldr	r6, [r4, #28]
 8011f0e:	68f3      	ldr	r3, [r6, #12]
 8011f10:	b183      	cbz	r3, 8011f34 <_Balloc+0x50>
 8011f12:	69e3      	ldr	r3, [r4, #28]
 8011f14:	68db      	ldr	r3, [r3, #12]
 8011f16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011f1a:	b9b8      	cbnz	r0, 8011f4c <_Balloc+0x68>
 8011f1c:	2101      	movs	r1, #1
 8011f1e:	fa01 f605 	lsl.w	r6, r1, r5
 8011f22:	1d72      	adds	r2, r6, #5
 8011f24:	0092      	lsls	r2, r2, #2
 8011f26:	4620      	mov	r0, r4
 8011f28:	f001 fd70 	bl	8013a0c <_calloc_r>
 8011f2c:	b160      	cbz	r0, 8011f48 <_Balloc+0x64>
 8011f2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011f32:	e00e      	b.n	8011f52 <_Balloc+0x6e>
 8011f34:	2221      	movs	r2, #33	@ 0x21
 8011f36:	2104      	movs	r1, #4
 8011f38:	4620      	mov	r0, r4
 8011f3a:	f001 fd67 	bl	8013a0c <_calloc_r>
 8011f3e:	69e3      	ldr	r3, [r4, #28]
 8011f40:	60f0      	str	r0, [r6, #12]
 8011f42:	68db      	ldr	r3, [r3, #12]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d1e4      	bne.n	8011f12 <_Balloc+0x2e>
 8011f48:	2000      	movs	r0, #0
 8011f4a:	bd70      	pop	{r4, r5, r6, pc}
 8011f4c:	6802      	ldr	r2, [r0, #0]
 8011f4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011f52:	2300      	movs	r3, #0
 8011f54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011f58:	e7f7      	b.n	8011f4a <_Balloc+0x66>
 8011f5a:	bf00      	nop
 8011f5c:	0801478e 	.word	0x0801478e
 8011f60:	0801480e 	.word	0x0801480e

08011f64 <_Bfree>:
 8011f64:	b570      	push	{r4, r5, r6, lr}
 8011f66:	69c6      	ldr	r6, [r0, #28]
 8011f68:	4605      	mov	r5, r0
 8011f6a:	460c      	mov	r4, r1
 8011f6c:	b976      	cbnz	r6, 8011f8c <_Bfree+0x28>
 8011f6e:	2010      	movs	r0, #16
 8011f70:	f7fe f83a 	bl	800ffe8 <malloc>
 8011f74:	4602      	mov	r2, r0
 8011f76:	61e8      	str	r0, [r5, #28]
 8011f78:	b920      	cbnz	r0, 8011f84 <_Bfree+0x20>
 8011f7a:	4b09      	ldr	r3, [pc, #36]	@ (8011fa0 <_Bfree+0x3c>)
 8011f7c:	4809      	ldr	r0, [pc, #36]	@ (8011fa4 <_Bfree+0x40>)
 8011f7e:	218f      	movs	r1, #143	@ 0x8f
 8011f80:	f001 fd26 	bl	80139d0 <__assert_func>
 8011f84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011f88:	6006      	str	r6, [r0, #0]
 8011f8a:	60c6      	str	r6, [r0, #12]
 8011f8c:	b13c      	cbz	r4, 8011f9e <_Bfree+0x3a>
 8011f8e:	69eb      	ldr	r3, [r5, #28]
 8011f90:	6862      	ldr	r2, [r4, #4]
 8011f92:	68db      	ldr	r3, [r3, #12]
 8011f94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011f98:	6021      	str	r1, [r4, #0]
 8011f9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011f9e:	bd70      	pop	{r4, r5, r6, pc}
 8011fa0:	0801478e 	.word	0x0801478e
 8011fa4:	0801480e 	.word	0x0801480e

08011fa8 <__multadd>:
 8011fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fac:	690d      	ldr	r5, [r1, #16]
 8011fae:	4607      	mov	r7, r0
 8011fb0:	460c      	mov	r4, r1
 8011fb2:	461e      	mov	r6, r3
 8011fb4:	f101 0c14 	add.w	ip, r1, #20
 8011fb8:	2000      	movs	r0, #0
 8011fba:	f8dc 3000 	ldr.w	r3, [ip]
 8011fbe:	b299      	uxth	r1, r3
 8011fc0:	fb02 6101 	mla	r1, r2, r1, r6
 8011fc4:	0c1e      	lsrs	r6, r3, #16
 8011fc6:	0c0b      	lsrs	r3, r1, #16
 8011fc8:	fb02 3306 	mla	r3, r2, r6, r3
 8011fcc:	b289      	uxth	r1, r1
 8011fce:	3001      	adds	r0, #1
 8011fd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011fd4:	4285      	cmp	r5, r0
 8011fd6:	f84c 1b04 	str.w	r1, [ip], #4
 8011fda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011fde:	dcec      	bgt.n	8011fba <__multadd+0x12>
 8011fe0:	b30e      	cbz	r6, 8012026 <__multadd+0x7e>
 8011fe2:	68a3      	ldr	r3, [r4, #8]
 8011fe4:	42ab      	cmp	r3, r5
 8011fe6:	dc19      	bgt.n	801201c <__multadd+0x74>
 8011fe8:	6861      	ldr	r1, [r4, #4]
 8011fea:	4638      	mov	r0, r7
 8011fec:	3101      	adds	r1, #1
 8011fee:	f7ff ff79 	bl	8011ee4 <_Balloc>
 8011ff2:	4680      	mov	r8, r0
 8011ff4:	b928      	cbnz	r0, 8012002 <__multadd+0x5a>
 8011ff6:	4602      	mov	r2, r0
 8011ff8:	4b0c      	ldr	r3, [pc, #48]	@ (801202c <__multadd+0x84>)
 8011ffa:	480d      	ldr	r0, [pc, #52]	@ (8012030 <__multadd+0x88>)
 8011ffc:	21ba      	movs	r1, #186	@ 0xba
 8011ffe:	f001 fce7 	bl	80139d0 <__assert_func>
 8012002:	6922      	ldr	r2, [r4, #16]
 8012004:	3202      	adds	r2, #2
 8012006:	f104 010c 	add.w	r1, r4, #12
 801200a:	0092      	lsls	r2, r2, #2
 801200c:	300c      	adds	r0, #12
 801200e:	f001 fcc9 	bl	80139a4 <memcpy>
 8012012:	4621      	mov	r1, r4
 8012014:	4638      	mov	r0, r7
 8012016:	f7ff ffa5 	bl	8011f64 <_Bfree>
 801201a:	4644      	mov	r4, r8
 801201c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012020:	3501      	adds	r5, #1
 8012022:	615e      	str	r6, [r3, #20]
 8012024:	6125      	str	r5, [r4, #16]
 8012026:	4620      	mov	r0, r4
 8012028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801202c:	080147fd 	.word	0x080147fd
 8012030:	0801480e 	.word	0x0801480e

08012034 <__s2b>:
 8012034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012038:	460c      	mov	r4, r1
 801203a:	4615      	mov	r5, r2
 801203c:	461f      	mov	r7, r3
 801203e:	2209      	movs	r2, #9
 8012040:	3308      	adds	r3, #8
 8012042:	4606      	mov	r6, r0
 8012044:	fb93 f3f2 	sdiv	r3, r3, r2
 8012048:	2100      	movs	r1, #0
 801204a:	2201      	movs	r2, #1
 801204c:	429a      	cmp	r2, r3
 801204e:	db09      	blt.n	8012064 <__s2b+0x30>
 8012050:	4630      	mov	r0, r6
 8012052:	f7ff ff47 	bl	8011ee4 <_Balloc>
 8012056:	b940      	cbnz	r0, 801206a <__s2b+0x36>
 8012058:	4602      	mov	r2, r0
 801205a:	4b19      	ldr	r3, [pc, #100]	@ (80120c0 <__s2b+0x8c>)
 801205c:	4819      	ldr	r0, [pc, #100]	@ (80120c4 <__s2b+0x90>)
 801205e:	21d3      	movs	r1, #211	@ 0xd3
 8012060:	f001 fcb6 	bl	80139d0 <__assert_func>
 8012064:	0052      	lsls	r2, r2, #1
 8012066:	3101      	adds	r1, #1
 8012068:	e7f0      	b.n	801204c <__s2b+0x18>
 801206a:	9b08      	ldr	r3, [sp, #32]
 801206c:	6143      	str	r3, [r0, #20]
 801206e:	2d09      	cmp	r5, #9
 8012070:	f04f 0301 	mov.w	r3, #1
 8012074:	6103      	str	r3, [r0, #16]
 8012076:	dd16      	ble.n	80120a6 <__s2b+0x72>
 8012078:	f104 0909 	add.w	r9, r4, #9
 801207c:	46c8      	mov	r8, r9
 801207e:	442c      	add	r4, r5
 8012080:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012084:	4601      	mov	r1, r0
 8012086:	3b30      	subs	r3, #48	@ 0x30
 8012088:	220a      	movs	r2, #10
 801208a:	4630      	mov	r0, r6
 801208c:	f7ff ff8c 	bl	8011fa8 <__multadd>
 8012090:	45a0      	cmp	r8, r4
 8012092:	d1f5      	bne.n	8012080 <__s2b+0x4c>
 8012094:	f1a5 0408 	sub.w	r4, r5, #8
 8012098:	444c      	add	r4, r9
 801209a:	1b2d      	subs	r5, r5, r4
 801209c:	1963      	adds	r3, r4, r5
 801209e:	42bb      	cmp	r3, r7
 80120a0:	db04      	blt.n	80120ac <__s2b+0x78>
 80120a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120a6:	340a      	adds	r4, #10
 80120a8:	2509      	movs	r5, #9
 80120aa:	e7f6      	b.n	801209a <__s2b+0x66>
 80120ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80120b0:	4601      	mov	r1, r0
 80120b2:	3b30      	subs	r3, #48	@ 0x30
 80120b4:	220a      	movs	r2, #10
 80120b6:	4630      	mov	r0, r6
 80120b8:	f7ff ff76 	bl	8011fa8 <__multadd>
 80120bc:	e7ee      	b.n	801209c <__s2b+0x68>
 80120be:	bf00      	nop
 80120c0:	080147fd 	.word	0x080147fd
 80120c4:	0801480e 	.word	0x0801480e

080120c8 <__hi0bits>:
 80120c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80120cc:	4603      	mov	r3, r0
 80120ce:	bf36      	itet	cc
 80120d0:	0403      	lslcc	r3, r0, #16
 80120d2:	2000      	movcs	r0, #0
 80120d4:	2010      	movcc	r0, #16
 80120d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80120da:	bf3c      	itt	cc
 80120dc:	021b      	lslcc	r3, r3, #8
 80120de:	3008      	addcc	r0, #8
 80120e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80120e4:	bf3c      	itt	cc
 80120e6:	011b      	lslcc	r3, r3, #4
 80120e8:	3004      	addcc	r0, #4
 80120ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80120ee:	bf3c      	itt	cc
 80120f0:	009b      	lslcc	r3, r3, #2
 80120f2:	3002      	addcc	r0, #2
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	db05      	blt.n	8012104 <__hi0bits+0x3c>
 80120f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80120fc:	f100 0001 	add.w	r0, r0, #1
 8012100:	bf08      	it	eq
 8012102:	2020      	moveq	r0, #32
 8012104:	4770      	bx	lr

08012106 <__lo0bits>:
 8012106:	6803      	ldr	r3, [r0, #0]
 8012108:	4602      	mov	r2, r0
 801210a:	f013 0007 	ands.w	r0, r3, #7
 801210e:	d00b      	beq.n	8012128 <__lo0bits+0x22>
 8012110:	07d9      	lsls	r1, r3, #31
 8012112:	d421      	bmi.n	8012158 <__lo0bits+0x52>
 8012114:	0798      	lsls	r0, r3, #30
 8012116:	bf49      	itett	mi
 8012118:	085b      	lsrmi	r3, r3, #1
 801211a:	089b      	lsrpl	r3, r3, #2
 801211c:	2001      	movmi	r0, #1
 801211e:	6013      	strmi	r3, [r2, #0]
 8012120:	bf5c      	itt	pl
 8012122:	6013      	strpl	r3, [r2, #0]
 8012124:	2002      	movpl	r0, #2
 8012126:	4770      	bx	lr
 8012128:	b299      	uxth	r1, r3
 801212a:	b909      	cbnz	r1, 8012130 <__lo0bits+0x2a>
 801212c:	0c1b      	lsrs	r3, r3, #16
 801212e:	2010      	movs	r0, #16
 8012130:	b2d9      	uxtb	r1, r3
 8012132:	b909      	cbnz	r1, 8012138 <__lo0bits+0x32>
 8012134:	3008      	adds	r0, #8
 8012136:	0a1b      	lsrs	r3, r3, #8
 8012138:	0719      	lsls	r1, r3, #28
 801213a:	bf04      	itt	eq
 801213c:	091b      	lsreq	r3, r3, #4
 801213e:	3004      	addeq	r0, #4
 8012140:	0799      	lsls	r1, r3, #30
 8012142:	bf04      	itt	eq
 8012144:	089b      	lsreq	r3, r3, #2
 8012146:	3002      	addeq	r0, #2
 8012148:	07d9      	lsls	r1, r3, #31
 801214a:	d403      	bmi.n	8012154 <__lo0bits+0x4e>
 801214c:	085b      	lsrs	r3, r3, #1
 801214e:	f100 0001 	add.w	r0, r0, #1
 8012152:	d003      	beq.n	801215c <__lo0bits+0x56>
 8012154:	6013      	str	r3, [r2, #0]
 8012156:	4770      	bx	lr
 8012158:	2000      	movs	r0, #0
 801215a:	4770      	bx	lr
 801215c:	2020      	movs	r0, #32
 801215e:	4770      	bx	lr

08012160 <__i2b>:
 8012160:	b510      	push	{r4, lr}
 8012162:	460c      	mov	r4, r1
 8012164:	2101      	movs	r1, #1
 8012166:	f7ff febd 	bl	8011ee4 <_Balloc>
 801216a:	4602      	mov	r2, r0
 801216c:	b928      	cbnz	r0, 801217a <__i2b+0x1a>
 801216e:	4b05      	ldr	r3, [pc, #20]	@ (8012184 <__i2b+0x24>)
 8012170:	4805      	ldr	r0, [pc, #20]	@ (8012188 <__i2b+0x28>)
 8012172:	f240 1145 	movw	r1, #325	@ 0x145
 8012176:	f001 fc2b 	bl	80139d0 <__assert_func>
 801217a:	2301      	movs	r3, #1
 801217c:	6144      	str	r4, [r0, #20]
 801217e:	6103      	str	r3, [r0, #16]
 8012180:	bd10      	pop	{r4, pc}
 8012182:	bf00      	nop
 8012184:	080147fd 	.word	0x080147fd
 8012188:	0801480e 	.word	0x0801480e

0801218c <__multiply>:
 801218c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012190:	4617      	mov	r7, r2
 8012192:	690a      	ldr	r2, [r1, #16]
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	429a      	cmp	r2, r3
 8012198:	bfa8      	it	ge
 801219a:	463b      	movge	r3, r7
 801219c:	4689      	mov	r9, r1
 801219e:	bfa4      	itt	ge
 80121a0:	460f      	movge	r7, r1
 80121a2:	4699      	movge	r9, r3
 80121a4:	693d      	ldr	r5, [r7, #16]
 80121a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	6879      	ldr	r1, [r7, #4]
 80121ae:	eb05 060a 	add.w	r6, r5, sl
 80121b2:	42b3      	cmp	r3, r6
 80121b4:	b085      	sub	sp, #20
 80121b6:	bfb8      	it	lt
 80121b8:	3101      	addlt	r1, #1
 80121ba:	f7ff fe93 	bl	8011ee4 <_Balloc>
 80121be:	b930      	cbnz	r0, 80121ce <__multiply+0x42>
 80121c0:	4602      	mov	r2, r0
 80121c2:	4b41      	ldr	r3, [pc, #260]	@ (80122c8 <__multiply+0x13c>)
 80121c4:	4841      	ldr	r0, [pc, #260]	@ (80122cc <__multiply+0x140>)
 80121c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80121ca:	f001 fc01 	bl	80139d0 <__assert_func>
 80121ce:	f100 0414 	add.w	r4, r0, #20
 80121d2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80121d6:	4623      	mov	r3, r4
 80121d8:	2200      	movs	r2, #0
 80121da:	4573      	cmp	r3, lr
 80121dc:	d320      	bcc.n	8012220 <__multiply+0x94>
 80121de:	f107 0814 	add.w	r8, r7, #20
 80121e2:	f109 0114 	add.w	r1, r9, #20
 80121e6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80121ea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80121ee:	9302      	str	r3, [sp, #8]
 80121f0:	1beb      	subs	r3, r5, r7
 80121f2:	3b15      	subs	r3, #21
 80121f4:	f023 0303 	bic.w	r3, r3, #3
 80121f8:	3304      	adds	r3, #4
 80121fa:	3715      	adds	r7, #21
 80121fc:	42bd      	cmp	r5, r7
 80121fe:	bf38      	it	cc
 8012200:	2304      	movcc	r3, #4
 8012202:	9301      	str	r3, [sp, #4]
 8012204:	9b02      	ldr	r3, [sp, #8]
 8012206:	9103      	str	r1, [sp, #12]
 8012208:	428b      	cmp	r3, r1
 801220a:	d80c      	bhi.n	8012226 <__multiply+0x9a>
 801220c:	2e00      	cmp	r6, #0
 801220e:	dd03      	ble.n	8012218 <__multiply+0x8c>
 8012210:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012214:	2b00      	cmp	r3, #0
 8012216:	d055      	beq.n	80122c4 <__multiply+0x138>
 8012218:	6106      	str	r6, [r0, #16]
 801221a:	b005      	add	sp, #20
 801221c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012220:	f843 2b04 	str.w	r2, [r3], #4
 8012224:	e7d9      	b.n	80121da <__multiply+0x4e>
 8012226:	f8b1 a000 	ldrh.w	sl, [r1]
 801222a:	f1ba 0f00 	cmp.w	sl, #0
 801222e:	d01f      	beq.n	8012270 <__multiply+0xe4>
 8012230:	46c4      	mov	ip, r8
 8012232:	46a1      	mov	r9, r4
 8012234:	2700      	movs	r7, #0
 8012236:	f85c 2b04 	ldr.w	r2, [ip], #4
 801223a:	f8d9 3000 	ldr.w	r3, [r9]
 801223e:	fa1f fb82 	uxth.w	fp, r2
 8012242:	b29b      	uxth	r3, r3
 8012244:	fb0a 330b 	mla	r3, sl, fp, r3
 8012248:	443b      	add	r3, r7
 801224a:	f8d9 7000 	ldr.w	r7, [r9]
 801224e:	0c12      	lsrs	r2, r2, #16
 8012250:	0c3f      	lsrs	r7, r7, #16
 8012252:	fb0a 7202 	mla	r2, sl, r2, r7
 8012256:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801225a:	b29b      	uxth	r3, r3
 801225c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012260:	4565      	cmp	r5, ip
 8012262:	f849 3b04 	str.w	r3, [r9], #4
 8012266:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801226a:	d8e4      	bhi.n	8012236 <__multiply+0xaa>
 801226c:	9b01      	ldr	r3, [sp, #4]
 801226e:	50e7      	str	r7, [r4, r3]
 8012270:	9b03      	ldr	r3, [sp, #12]
 8012272:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012276:	3104      	adds	r1, #4
 8012278:	f1b9 0f00 	cmp.w	r9, #0
 801227c:	d020      	beq.n	80122c0 <__multiply+0x134>
 801227e:	6823      	ldr	r3, [r4, #0]
 8012280:	4647      	mov	r7, r8
 8012282:	46a4      	mov	ip, r4
 8012284:	f04f 0a00 	mov.w	sl, #0
 8012288:	f8b7 b000 	ldrh.w	fp, [r7]
 801228c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8012290:	fb09 220b 	mla	r2, r9, fp, r2
 8012294:	4452      	add	r2, sl
 8012296:	b29b      	uxth	r3, r3
 8012298:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801229c:	f84c 3b04 	str.w	r3, [ip], #4
 80122a0:	f857 3b04 	ldr.w	r3, [r7], #4
 80122a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80122a8:	f8bc 3000 	ldrh.w	r3, [ip]
 80122ac:	fb09 330a 	mla	r3, r9, sl, r3
 80122b0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80122b4:	42bd      	cmp	r5, r7
 80122b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80122ba:	d8e5      	bhi.n	8012288 <__multiply+0xfc>
 80122bc:	9a01      	ldr	r2, [sp, #4]
 80122be:	50a3      	str	r3, [r4, r2]
 80122c0:	3404      	adds	r4, #4
 80122c2:	e79f      	b.n	8012204 <__multiply+0x78>
 80122c4:	3e01      	subs	r6, #1
 80122c6:	e7a1      	b.n	801220c <__multiply+0x80>
 80122c8:	080147fd 	.word	0x080147fd
 80122cc:	0801480e 	.word	0x0801480e

080122d0 <__pow5mult>:
 80122d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122d4:	4615      	mov	r5, r2
 80122d6:	f012 0203 	ands.w	r2, r2, #3
 80122da:	4607      	mov	r7, r0
 80122dc:	460e      	mov	r6, r1
 80122de:	d007      	beq.n	80122f0 <__pow5mult+0x20>
 80122e0:	4c25      	ldr	r4, [pc, #148]	@ (8012378 <__pow5mult+0xa8>)
 80122e2:	3a01      	subs	r2, #1
 80122e4:	2300      	movs	r3, #0
 80122e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80122ea:	f7ff fe5d 	bl	8011fa8 <__multadd>
 80122ee:	4606      	mov	r6, r0
 80122f0:	10ad      	asrs	r5, r5, #2
 80122f2:	d03d      	beq.n	8012370 <__pow5mult+0xa0>
 80122f4:	69fc      	ldr	r4, [r7, #28]
 80122f6:	b97c      	cbnz	r4, 8012318 <__pow5mult+0x48>
 80122f8:	2010      	movs	r0, #16
 80122fa:	f7fd fe75 	bl	800ffe8 <malloc>
 80122fe:	4602      	mov	r2, r0
 8012300:	61f8      	str	r0, [r7, #28]
 8012302:	b928      	cbnz	r0, 8012310 <__pow5mult+0x40>
 8012304:	4b1d      	ldr	r3, [pc, #116]	@ (801237c <__pow5mult+0xac>)
 8012306:	481e      	ldr	r0, [pc, #120]	@ (8012380 <__pow5mult+0xb0>)
 8012308:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801230c:	f001 fb60 	bl	80139d0 <__assert_func>
 8012310:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012314:	6004      	str	r4, [r0, #0]
 8012316:	60c4      	str	r4, [r0, #12]
 8012318:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801231c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012320:	b94c      	cbnz	r4, 8012336 <__pow5mult+0x66>
 8012322:	f240 2171 	movw	r1, #625	@ 0x271
 8012326:	4638      	mov	r0, r7
 8012328:	f7ff ff1a 	bl	8012160 <__i2b>
 801232c:	2300      	movs	r3, #0
 801232e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012332:	4604      	mov	r4, r0
 8012334:	6003      	str	r3, [r0, #0]
 8012336:	f04f 0900 	mov.w	r9, #0
 801233a:	07eb      	lsls	r3, r5, #31
 801233c:	d50a      	bpl.n	8012354 <__pow5mult+0x84>
 801233e:	4631      	mov	r1, r6
 8012340:	4622      	mov	r2, r4
 8012342:	4638      	mov	r0, r7
 8012344:	f7ff ff22 	bl	801218c <__multiply>
 8012348:	4631      	mov	r1, r6
 801234a:	4680      	mov	r8, r0
 801234c:	4638      	mov	r0, r7
 801234e:	f7ff fe09 	bl	8011f64 <_Bfree>
 8012352:	4646      	mov	r6, r8
 8012354:	106d      	asrs	r5, r5, #1
 8012356:	d00b      	beq.n	8012370 <__pow5mult+0xa0>
 8012358:	6820      	ldr	r0, [r4, #0]
 801235a:	b938      	cbnz	r0, 801236c <__pow5mult+0x9c>
 801235c:	4622      	mov	r2, r4
 801235e:	4621      	mov	r1, r4
 8012360:	4638      	mov	r0, r7
 8012362:	f7ff ff13 	bl	801218c <__multiply>
 8012366:	6020      	str	r0, [r4, #0]
 8012368:	f8c0 9000 	str.w	r9, [r0]
 801236c:	4604      	mov	r4, r0
 801236e:	e7e4      	b.n	801233a <__pow5mult+0x6a>
 8012370:	4630      	mov	r0, r6
 8012372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012376:	bf00      	nop
 8012378:	08014b70 	.word	0x08014b70
 801237c:	0801478e 	.word	0x0801478e
 8012380:	0801480e 	.word	0x0801480e

08012384 <__lshift>:
 8012384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012388:	460c      	mov	r4, r1
 801238a:	6849      	ldr	r1, [r1, #4]
 801238c:	6923      	ldr	r3, [r4, #16]
 801238e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012392:	68a3      	ldr	r3, [r4, #8]
 8012394:	4607      	mov	r7, r0
 8012396:	4691      	mov	r9, r2
 8012398:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801239c:	f108 0601 	add.w	r6, r8, #1
 80123a0:	42b3      	cmp	r3, r6
 80123a2:	db0b      	blt.n	80123bc <__lshift+0x38>
 80123a4:	4638      	mov	r0, r7
 80123a6:	f7ff fd9d 	bl	8011ee4 <_Balloc>
 80123aa:	4605      	mov	r5, r0
 80123ac:	b948      	cbnz	r0, 80123c2 <__lshift+0x3e>
 80123ae:	4602      	mov	r2, r0
 80123b0:	4b28      	ldr	r3, [pc, #160]	@ (8012454 <__lshift+0xd0>)
 80123b2:	4829      	ldr	r0, [pc, #164]	@ (8012458 <__lshift+0xd4>)
 80123b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80123b8:	f001 fb0a 	bl	80139d0 <__assert_func>
 80123bc:	3101      	adds	r1, #1
 80123be:	005b      	lsls	r3, r3, #1
 80123c0:	e7ee      	b.n	80123a0 <__lshift+0x1c>
 80123c2:	2300      	movs	r3, #0
 80123c4:	f100 0114 	add.w	r1, r0, #20
 80123c8:	f100 0210 	add.w	r2, r0, #16
 80123cc:	4618      	mov	r0, r3
 80123ce:	4553      	cmp	r3, sl
 80123d0:	db33      	blt.n	801243a <__lshift+0xb6>
 80123d2:	6920      	ldr	r0, [r4, #16]
 80123d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80123d8:	f104 0314 	add.w	r3, r4, #20
 80123dc:	f019 091f 	ands.w	r9, r9, #31
 80123e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80123e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80123e8:	d02b      	beq.n	8012442 <__lshift+0xbe>
 80123ea:	f1c9 0e20 	rsb	lr, r9, #32
 80123ee:	468a      	mov	sl, r1
 80123f0:	2200      	movs	r2, #0
 80123f2:	6818      	ldr	r0, [r3, #0]
 80123f4:	fa00 f009 	lsl.w	r0, r0, r9
 80123f8:	4310      	orrs	r0, r2
 80123fa:	f84a 0b04 	str.w	r0, [sl], #4
 80123fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8012402:	459c      	cmp	ip, r3
 8012404:	fa22 f20e 	lsr.w	r2, r2, lr
 8012408:	d8f3      	bhi.n	80123f2 <__lshift+0x6e>
 801240a:	ebac 0304 	sub.w	r3, ip, r4
 801240e:	3b15      	subs	r3, #21
 8012410:	f023 0303 	bic.w	r3, r3, #3
 8012414:	3304      	adds	r3, #4
 8012416:	f104 0015 	add.w	r0, r4, #21
 801241a:	4560      	cmp	r0, ip
 801241c:	bf88      	it	hi
 801241e:	2304      	movhi	r3, #4
 8012420:	50ca      	str	r2, [r1, r3]
 8012422:	b10a      	cbz	r2, 8012428 <__lshift+0xa4>
 8012424:	f108 0602 	add.w	r6, r8, #2
 8012428:	3e01      	subs	r6, #1
 801242a:	4638      	mov	r0, r7
 801242c:	612e      	str	r6, [r5, #16]
 801242e:	4621      	mov	r1, r4
 8012430:	f7ff fd98 	bl	8011f64 <_Bfree>
 8012434:	4628      	mov	r0, r5
 8012436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801243a:	f842 0f04 	str.w	r0, [r2, #4]!
 801243e:	3301      	adds	r3, #1
 8012440:	e7c5      	b.n	80123ce <__lshift+0x4a>
 8012442:	3904      	subs	r1, #4
 8012444:	f853 2b04 	ldr.w	r2, [r3], #4
 8012448:	f841 2f04 	str.w	r2, [r1, #4]!
 801244c:	459c      	cmp	ip, r3
 801244e:	d8f9      	bhi.n	8012444 <__lshift+0xc0>
 8012450:	e7ea      	b.n	8012428 <__lshift+0xa4>
 8012452:	bf00      	nop
 8012454:	080147fd 	.word	0x080147fd
 8012458:	0801480e 	.word	0x0801480e

0801245c <__mcmp>:
 801245c:	690a      	ldr	r2, [r1, #16]
 801245e:	4603      	mov	r3, r0
 8012460:	6900      	ldr	r0, [r0, #16]
 8012462:	1a80      	subs	r0, r0, r2
 8012464:	b530      	push	{r4, r5, lr}
 8012466:	d10e      	bne.n	8012486 <__mcmp+0x2a>
 8012468:	3314      	adds	r3, #20
 801246a:	3114      	adds	r1, #20
 801246c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012470:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012474:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012478:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801247c:	4295      	cmp	r5, r2
 801247e:	d003      	beq.n	8012488 <__mcmp+0x2c>
 8012480:	d205      	bcs.n	801248e <__mcmp+0x32>
 8012482:	f04f 30ff 	mov.w	r0, #4294967295
 8012486:	bd30      	pop	{r4, r5, pc}
 8012488:	42a3      	cmp	r3, r4
 801248a:	d3f3      	bcc.n	8012474 <__mcmp+0x18>
 801248c:	e7fb      	b.n	8012486 <__mcmp+0x2a>
 801248e:	2001      	movs	r0, #1
 8012490:	e7f9      	b.n	8012486 <__mcmp+0x2a>
	...

08012494 <__mdiff>:
 8012494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012498:	4689      	mov	r9, r1
 801249a:	4606      	mov	r6, r0
 801249c:	4611      	mov	r1, r2
 801249e:	4648      	mov	r0, r9
 80124a0:	4614      	mov	r4, r2
 80124a2:	f7ff ffdb 	bl	801245c <__mcmp>
 80124a6:	1e05      	subs	r5, r0, #0
 80124a8:	d112      	bne.n	80124d0 <__mdiff+0x3c>
 80124aa:	4629      	mov	r1, r5
 80124ac:	4630      	mov	r0, r6
 80124ae:	f7ff fd19 	bl	8011ee4 <_Balloc>
 80124b2:	4602      	mov	r2, r0
 80124b4:	b928      	cbnz	r0, 80124c2 <__mdiff+0x2e>
 80124b6:	4b3f      	ldr	r3, [pc, #252]	@ (80125b4 <__mdiff+0x120>)
 80124b8:	f240 2137 	movw	r1, #567	@ 0x237
 80124bc:	483e      	ldr	r0, [pc, #248]	@ (80125b8 <__mdiff+0x124>)
 80124be:	f001 fa87 	bl	80139d0 <__assert_func>
 80124c2:	2301      	movs	r3, #1
 80124c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80124c8:	4610      	mov	r0, r2
 80124ca:	b003      	add	sp, #12
 80124cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124d0:	bfbc      	itt	lt
 80124d2:	464b      	movlt	r3, r9
 80124d4:	46a1      	movlt	r9, r4
 80124d6:	4630      	mov	r0, r6
 80124d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80124dc:	bfba      	itte	lt
 80124de:	461c      	movlt	r4, r3
 80124e0:	2501      	movlt	r5, #1
 80124e2:	2500      	movge	r5, #0
 80124e4:	f7ff fcfe 	bl	8011ee4 <_Balloc>
 80124e8:	4602      	mov	r2, r0
 80124ea:	b918      	cbnz	r0, 80124f4 <__mdiff+0x60>
 80124ec:	4b31      	ldr	r3, [pc, #196]	@ (80125b4 <__mdiff+0x120>)
 80124ee:	f240 2145 	movw	r1, #581	@ 0x245
 80124f2:	e7e3      	b.n	80124bc <__mdiff+0x28>
 80124f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80124f8:	6926      	ldr	r6, [r4, #16]
 80124fa:	60c5      	str	r5, [r0, #12]
 80124fc:	f109 0310 	add.w	r3, r9, #16
 8012500:	f109 0514 	add.w	r5, r9, #20
 8012504:	f104 0e14 	add.w	lr, r4, #20
 8012508:	f100 0b14 	add.w	fp, r0, #20
 801250c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012510:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012514:	9301      	str	r3, [sp, #4]
 8012516:	46d9      	mov	r9, fp
 8012518:	f04f 0c00 	mov.w	ip, #0
 801251c:	9b01      	ldr	r3, [sp, #4]
 801251e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012522:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012526:	9301      	str	r3, [sp, #4]
 8012528:	fa1f f38a 	uxth.w	r3, sl
 801252c:	4619      	mov	r1, r3
 801252e:	b283      	uxth	r3, r0
 8012530:	1acb      	subs	r3, r1, r3
 8012532:	0c00      	lsrs	r0, r0, #16
 8012534:	4463      	add	r3, ip
 8012536:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801253a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801253e:	b29b      	uxth	r3, r3
 8012540:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012544:	4576      	cmp	r6, lr
 8012546:	f849 3b04 	str.w	r3, [r9], #4
 801254a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801254e:	d8e5      	bhi.n	801251c <__mdiff+0x88>
 8012550:	1b33      	subs	r3, r6, r4
 8012552:	3b15      	subs	r3, #21
 8012554:	f023 0303 	bic.w	r3, r3, #3
 8012558:	3415      	adds	r4, #21
 801255a:	3304      	adds	r3, #4
 801255c:	42a6      	cmp	r6, r4
 801255e:	bf38      	it	cc
 8012560:	2304      	movcc	r3, #4
 8012562:	441d      	add	r5, r3
 8012564:	445b      	add	r3, fp
 8012566:	461e      	mov	r6, r3
 8012568:	462c      	mov	r4, r5
 801256a:	4544      	cmp	r4, r8
 801256c:	d30e      	bcc.n	801258c <__mdiff+0xf8>
 801256e:	f108 0103 	add.w	r1, r8, #3
 8012572:	1b49      	subs	r1, r1, r5
 8012574:	f021 0103 	bic.w	r1, r1, #3
 8012578:	3d03      	subs	r5, #3
 801257a:	45a8      	cmp	r8, r5
 801257c:	bf38      	it	cc
 801257e:	2100      	movcc	r1, #0
 8012580:	440b      	add	r3, r1
 8012582:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012586:	b191      	cbz	r1, 80125ae <__mdiff+0x11a>
 8012588:	6117      	str	r7, [r2, #16]
 801258a:	e79d      	b.n	80124c8 <__mdiff+0x34>
 801258c:	f854 1b04 	ldr.w	r1, [r4], #4
 8012590:	46e6      	mov	lr, ip
 8012592:	0c08      	lsrs	r0, r1, #16
 8012594:	fa1c fc81 	uxtah	ip, ip, r1
 8012598:	4471      	add	r1, lr
 801259a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801259e:	b289      	uxth	r1, r1
 80125a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80125a4:	f846 1b04 	str.w	r1, [r6], #4
 80125a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80125ac:	e7dd      	b.n	801256a <__mdiff+0xd6>
 80125ae:	3f01      	subs	r7, #1
 80125b0:	e7e7      	b.n	8012582 <__mdiff+0xee>
 80125b2:	bf00      	nop
 80125b4:	080147fd 	.word	0x080147fd
 80125b8:	0801480e 	.word	0x0801480e

080125bc <__ulp>:
 80125bc:	b082      	sub	sp, #8
 80125be:	ed8d 0b00 	vstr	d0, [sp]
 80125c2:	9a01      	ldr	r2, [sp, #4]
 80125c4:	4b0f      	ldr	r3, [pc, #60]	@ (8012604 <__ulp+0x48>)
 80125c6:	4013      	ands	r3, r2
 80125c8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	dc08      	bgt.n	80125e2 <__ulp+0x26>
 80125d0:	425b      	negs	r3, r3
 80125d2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80125d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80125da:	da04      	bge.n	80125e6 <__ulp+0x2a>
 80125dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80125e0:	4113      	asrs	r3, r2
 80125e2:	2200      	movs	r2, #0
 80125e4:	e008      	b.n	80125f8 <__ulp+0x3c>
 80125e6:	f1a2 0314 	sub.w	r3, r2, #20
 80125ea:	2b1e      	cmp	r3, #30
 80125ec:	bfda      	itte	le
 80125ee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80125f2:	40da      	lsrle	r2, r3
 80125f4:	2201      	movgt	r2, #1
 80125f6:	2300      	movs	r3, #0
 80125f8:	4619      	mov	r1, r3
 80125fa:	4610      	mov	r0, r2
 80125fc:	ec41 0b10 	vmov	d0, r0, r1
 8012600:	b002      	add	sp, #8
 8012602:	4770      	bx	lr
 8012604:	7ff00000 	.word	0x7ff00000

08012608 <__b2d>:
 8012608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801260c:	6906      	ldr	r6, [r0, #16]
 801260e:	f100 0814 	add.w	r8, r0, #20
 8012612:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012616:	1f37      	subs	r7, r6, #4
 8012618:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801261c:	4610      	mov	r0, r2
 801261e:	f7ff fd53 	bl	80120c8 <__hi0bits>
 8012622:	f1c0 0320 	rsb	r3, r0, #32
 8012626:	280a      	cmp	r0, #10
 8012628:	600b      	str	r3, [r1, #0]
 801262a:	491b      	ldr	r1, [pc, #108]	@ (8012698 <__b2d+0x90>)
 801262c:	dc15      	bgt.n	801265a <__b2d+0x52>
 801262e:	f1c0 0c0b 	rsb	ip, r0, #11
 8012632:	fa22 f30c 	lsr.w	r3, r2, ip
 8012636:	45b8      	cmp	r8, r7
 8012638:	ea43 0501 	orr.w	r5, r3, r1
 801263c:	bf34      	ite	cc
 801263e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012642:	2300      	movcs	r3, #0
 8012644:	3015      	adds	r0, #21
 8012646:	fa02 f000 	lsl.w	r0, r2, r0
 801264a:	fa23 f30c 	lsr.w	r3, r3, ip
 801264e:	4303      	orrs	r3, r0
 8012650:	461c      	mov	r4, r3
 8012652:	ec45 4b10 	vmov	d0, r4, r5
 8012656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801265a:	45b8      	cmp	r8, r7
 801265c:	bf3a      	itte	cc
 801265e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012662:	f1a6 0708 	subcc.w	r7, r6, #8
 8012666:	2300      	movcs	r3, #0
 8012668:	380b      	subs	r0, #11
 801266a:	d012      	beq.n	8012692 <__b2d+0x8a>
 801266c:	f1c0 0120 	rsb	r1, r0, #32
 8012670:	fa23 f401 	lsr.w	r4, r3, r1
 8012674:	4082      	lsls	r2, r0
 8012676:	4322      	orrs	r2, r4
 8012678:	4547      	cmp	r7, r8
 801267a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801267e:	bf8c      	ite	hi
 8012680:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012684:	2200      	movls	r2, #0
 8012686:	4083      	lsls	r3, r0
 8012688:	40ca      	lsrs	r2, r1
 801268a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801268e:	4313      	orrs	r3, r2
 8012690:	e7de      	b.n	8012650 <__b2d+0x48>
 8012692:	ea42 0501 	orr.w	r5, r2, r1
 8012696:	e7db      	b.n	8012650 <__b2d+0x48>
 8012698:	3ff00000 	.word	0x3ff00000

0801269c <__d2b>:
 801269c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80126a0:	460f      	mov	r7, r1
 80126a2:	2101      	movs	r1, #1
 80126a4:	ec59 8b10 	vmov	r8, r9, d0
 80126a8:	4616      	mov	r6, r2
 80126aa:	f7ff fc1b 	bl	8011ee4 <_Balloc>
 80126ae:	4604      	mov	r4, r0
 80126b0:	b930      	cbnz	r0, 80126c0 <__d2b+0x24>
 80126b2:	4602      	mov	r2, r0
 80126b4:	4b23      	ldr	r3, [pc, #140]	@ (8012744 <__d2b+0xa8>)
 80126b6:	4824      	ldr	r0, [pc, #144]	@ (8012748 <__d2b+0xac>)
 80126b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80126bc:	f001 f988 	bl	80139d0 <__assert_func>
 80126c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80126c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80126c8:	b10d      	cbz	r5, 80126ce <__d2b+0x32>
 80126ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80126ce:	9301      	str	r3, [sp, #4]
 80126d0:	f1b8 0300 	subs.w	r3, r8, #0
 80126d4:	d023      	beq.n	801271e <__d2b+0x82>
 80126d6:	4668      	mov	r0, sp
 80126d8:	9300      	str	r3, [sp, #0]
 80126da:	f7ff fd14 	bl	8012106 <__lo0bits>
 80126de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80126e2:	b1d0      	cbz	r0, 801271a <__d2b+0x7e>
 80126e4:	f1c0 0320 	rsb	r3, r0, #32
 80126e8:	fa02 f303 	lsl.w	r3, r2, r3
 80126ec:	430b      	orrs	r3, r1
 80126ee:	40c2      	lsrs	r2, r0
 80126f0:	6163      	str	r3, [r4, #20]
 80126f2:	9201      	str	r2, [sp, #4]
 80126f4:	9b01      	ldr	r3, [sp, #4]
 80126f6:	61a3      	str	r3, [r4, #24]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	bf0c      	ite	eq
 80126fc:	2201      	moveq	r2, #1
 80126fe:	2202      	movne	r2, #2
 8012700:	6122      	str	r2, [r4, #16]
 8012702:	b1a5      	cbz	r5, 801272e <__d2b+0x92>
 8012704:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012708:	4405      	add	r5, r0
 801270a:	603d      	str	r5, [r7, #0]
 801270c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012710:	6030      	str	r0, [r6, #0]
 8012712:	4620      	mov	r0, r4
 8012714:	b003      	add	sp, #12
 8012716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801271a:	6161      	str	r1, [r4, #20]
 801271c:	e7ea      	b.n	80126f4 <__d2b+0x58>
 801271e:	a801      	add	r0, sp, #4
 8012720:	f7ff fcf1 	bl	8012106 <__lo0bits>
 8012724:	9b01      	ldr	r3, [sp, #4]
 8012726:	6163      	str	r3, [r4, #20]
 8012728:	3020      	adds	r0, #32
 801272a:	2201      	movs	r2, #1
 801272c:	e7e8      	b.n	8012700 <__d2b+0x64>
 801272e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012732:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012736:	6038      	str	r0, [r7, #0]
 8012738:	6918      	ldr	r0, [r3, #16]
 801273a:	f7ff fcc5 	bl	80120c8 <__hi0bits>
 801273e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012742:	e7e5      	b.n	8012710 <__d2b+0x74>
 8012744:	080147fd 	.word	0x080147fd
 8012748:	0801480e 	.word	0x0801480e

0801274c <__ratio>:
 801274c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012750:	b085      	sub	sp, #20
 8012752:	e9cd 1000 	strd	r1, r0, [sp]
 8012756:	a902      	add	r1, sp, #8
 8012758:	f7ff ff56 	bl	8012608 <__b2d>
 801275c:	9800      	ldr	r0, [sp, #0]
 801275e:	a903      	add	r1, sp, #12
 8012760:	ec55 4b10 	vmov	r4, r5, d0
 8012764:	f7ff ff50 	bl	8012608 <__b2d>
 8012768:	9b01      	ldr	r3, [sp, #4]
 801276a:	6919      	ldr	r1, [r3, #16]
 801276c:	9b00      	ldr	r3, [sp, #0]
 801276e:	691b      	ldr	r3, [r3, #16]
 8012770:	1ac9      	subs	r1, r1, r3
 8012772:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012776:	1a9b      	subs	r3, r3, r2
 8012778:	ec5b ab10 	vmov	sl, fp, d0
 801277c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012780:	2b00      	cmp	r3, #0
 8012782:	bfce      	itee	gt
 8012784:	462a      	movgt	r2, r5
 8012786:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801278a:	465a      	movle	r2, fp
 801278c:	462f      	mov	r7, r5
 801278e:	46d9      	mov	r9, fp
 8012790:	bfcc      	ite	gt
 8012792:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012796:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801279a:	464b      	mov	r3, r9
 801279c:	4652      	mov	r2, sl
 801279e:	4620      	mov	r0, r4
 80127a0:	4639      	mov	r1, r7
 80127a2:	f7ee f853 	bl	800084c <__aeabi_ddiv>
 80127a6:	ec41 0b10 	vmov	d0, r0, r1
 80127aa:	b005      	add	sp, #20
 80127ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080127b0 <__copybits>:
 80127b0:	3901      	subs	r1, #1
 80127b2:	b570      	push	{r4, r5, r6, lr}
 80127b4:	1149      	asrs	r1, r1, #5
 80127b6:	6914      	ldr	r4, [r2, #16]
 80127b8:	3101      	adds	r1, #1
 80127ba:	f102 0314 	add.w	r3, r2, #20
 80127be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80127c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80127c6:	1f05      	subs	r5, r0, #4
 80127c8:	42a3      	cmp	r3, r4
 80127ca:	d30c      	bcc.n	80127e6 <__copybits+0x36>
 80127cc:	1aa3      	subs	r3, r4, r2
 80127ce:	3b11      	subs	r3, #17
 80127d0:	f023 0303 	bic.w	r3, r3, #3
 80127d4:	3211      	adds	r2, #17
 80127d6:	42a2      	cmp	r2, r4
 80127d8:	bf88      	it	hi
 80127da:	2300      	movhi	r3, #0
 80127dc:	4418      	add	r0, r3
 80127de:	2300      	movs	r3, #0
 80127e0:	4288      	cmp	r0, r1
 80127e2:	d305      	bcc.n	80127f0 <__copybits+0x40>
 80127e4:	bd70      	pop	{r4, r5, r6, pc}
 80127e6:	f853 6b04 	ldr.w	r6, [r3], #4
 80127ea:	f845 6f04 	str.w	r6, [r5, #4]!
 80127ee:	e7eb      	b.n	80127c8 <__copybits+0x18>
 80127f0:	f840 3b04 	str.w	r3, [r0], #4
 80127f4:	e7f4      	b.n	80127e0 <__copybits+0x30>

080127f6 <__any_on>:
 80127f6:	f100 0214 	add.w	r2, r0, #20
 80127fa:	6900      	ldr	r0, [r0, #16]
 80127fc:	114b      	asrs	r3, r1, #5
 80127fe:	4298      	cmp	r0, r3
 8012800:	b510      	push	{r4, lr}
 8012802:	db11      	blt.n	8012828 <__any_on+0x32>
 8012804:	dd0a      	ble.n	801281c <__any_on+0x26>
 8012806:	f011 011f 	ands.w	r1, r1, #31
 801280a:	d007      	beq.n	801281c <__any_on+0x26>
 801280c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012810:	fa24 f001 	lsr.w	r0, r4, r1
 8012814:	fa00 f101 	lsl.w	r1, r0, r1
 8012818:	428c      	cmp	r4, r1
 801281a:	d10b      	bne.n	8012834 <__any_on+0x3e>
 801281c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012820:	4293      	cmp	r3, r2
 8012822:	d803      	bhi.n	801282c <__any_on+0x36>
 8012824:	2000      	movs	r0, #0
 8012826:	bd10      	pop	{r4, pc}
 8012828:	4603      	mov	r3, r0
 801282a:	e7f7      	b.n	801281c <__any_on+0x26>
 801282c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012830:	2900      	cmp	r1, #0
 8012832:	d0f5      	beq.n	8012820 <__any_on+0x2a>
 8012834:	2001      	movs	r0, #1
 8012836:	e7f6      	b.n	8012826 <__any_on+0x30>

08012838 <sulp>:
 8012838:	b570      	push	{r4, r5, r6, lr}
 801283a:	4604      	mov	r4, r0
 801283c:	460d      	mov	r5, r1
 801283e:	ec45 4b10 	vmov	d0, r4, r5
 8012842:	4616      	mov	r6, r2
 8012844:	f7ff feba 	bl	80125bc <__ulp>
 8012848:	ec51 0b10 	vmov	r0, r1, d0
 801284c:	b17e      	cbz	r6, 801286e <sulp+0x36>
 801284e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012852:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012856:	2b00      	cmp	r3, #0
 8012858:	dd09      	ble.n	801286e <sulp+0x36>
 801285a:	051b      	lsls	r3, r3, #20
 801285c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8012860:	2400      	movs	r4, #0
 8012862:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8012866:	4622      	mov	r2, r4
 8012868:	462b      	mov	r3, r5
 801286a:	f7ed fec5 	bl	80005f8 <__aeabi_dmul>
 801286e:	ec41 0b10 	vmov	d0, r0, r1
 8012872:	bd70      	pop	{r4, r5, r6, pc}
 8012874:	0000      	movs	r0, r0
	...

08012878 <_strtod_l>:
 8012878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801287c:	b09f      	sub	sp, #124	@ 0x7c
 801287e:	460c      	mov	r4, r1
 8012880:	9217      	str	r2, [sp, #92]	@ 0x5c
 8012882:	2200      	movs	r2, #0
 8012884:	921a      	str	r2, [sp, #104]	@ 0x68
 8012886:	9005      	str	r0, [sp, #20]
 8012888:	f04f 0a00 	mov.w	sl, #0
 801288c:	f04f 0b00 	mov.w	fp, #0
 8012890:	460a      	mov	r2, r1
 8012892:	9219      	str	r2, [sp, #100]	@ 0x64
 8012894:	7811      	ldrb	r1, [r2, #0]
 8012896:	292b      	cmp	r1, #43	@ 0x2b
 8012898:	d04a      	beq.n	8012930 <_strtod_l+0xb8>
 801289a:	d838      	bhi.n	801290e <_strtod_l+0x96>
 801289c:	290d      	cmp	r1, #13
 801289e:	d832      	bhi.n	8012906 <_strtod_l+0x8e>
 80128a0:	2908      	cmp	r1, #8
 80128a2:	d832      	bhi.n	801290a <_strtod_l+0x92>
 80128a4:	2900      	cmp	r1, #0
 80128a6:	d03b      	beq.n	8012920 <_strtod_l+0xa8>
 80128a8:	2200      	movs	r2, #0
 80128aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80128ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80128ae:	782a      	ldrb	r2, [r5, #0]
 80128b0:	2a30      	cmp	r2, #48	@ 0x30
 80128b2:	f040 80b2 	bne.w	8012a1a <_strtod_l+0x1a2>
 80128b6:	786a      	ldrb	r2, [r5, #1]
 80128b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80128bc:	2a58      	cmp	r2, #88	@ 0x58
 80128be:	d16e      	bne.n	801299e <_strtod_l+0x126>
 80128c0:	9302      	str	r3, [sp, #8]
 80128c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128c4:	9301      	str	r3, [sp, #4]
 80128c6:	ab1a      	add	r3, sp, #104	@ 0x68
 80128c8:	9300      	str	r3, [sp, #0]
 80128ca:	4a8f      	ldr	r2, [pc, #572]	@ (8012b08 <_strtod_l+0x290>)
 80128cc:	9805      	ldr	r0, [sp, #20]
 80128ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80128d0:	a919      	add	r1, sp, #100	@ 0x64
 80128d2:	f001 f917 	bl	8013b04 <__gethex>
 80128d6:	f010 060f 	ands.w	r6, r0, #15
 80128da:	4604      	mov	r4, r0
 80128dc:	d005      	beq.n	80128ea <_strtod_l+0x72>
 80128de:	2e06      	cmp	r6, #6
 80128e0:	d128      	bne.n	8012934 <_strtod_l+0xbc>
 80128e2:	3501      	adds	r5, #1
 80128e4:	2300      	movs	r3, #0
 80128e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80128e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80128ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	f040 858e 	bne.w	801340e <_strtod_l+0xb96>
 80128f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128f4:	b1cb      	cbz	r3, 801292a <_strtod_l+0xb2>
 80128f6:	4652      	mov	r2, sl
 80128f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80128fc:	ec43 2b10 	vmov	d0, r2, r3
 8012900:	b01f      	add	sp, #124	@ 0x7c
 8012902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012906:	2920      	cmp	r1, #32
 8012908:	d1ce      	bne.n	80128a8 <_strtod_l+0x30>
 801290a:	3201      	adds	r2, #1
 801290c:	e7c1      	b.n	8012892 <_strtod_l+0x1a>
 801290e:	292d      	cmp	r1, #45	@ 0x2d
 8012910:	d1ca      	bne.n	80128a8 <_strtod_l+0x30>
 8012912:	2101      	movs	r1, #1
 8012914:	910e      	str	r1, [sp, #56]	@ 0x38
 8012916:	1c51      	adds	r1, r2, #1
 8012918:	9119      	str	r1, [sp, #100]	@ 0x64
 801291a:	7852      	ldrb	r2, [r2, #1]
 801291c:	2a00      	cmp	r2, #0
 801291e:	d1c5      	bne.n	80128ac <_strtod_l+0x34>
 8012920:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012922:	9419      	str	r4, [sp, #100]	@ 0x64
 8012924:	2b00      	cmp	r3, #0
 8012926:	f040 8570 	bne.w	801340a <_strtod_l+0xb92>
 801292a:	4652      	mov	r2, sl
 801292c:	465b      	mov	r3, fp
 801292e:	e7e5      	b.n	80128fc <_strtod_l+0x84>
 8012930:	2100      	movs	r1, #0
 8012932:	e7ef      	b.n	8012914 <_strtod_l+0x9c>
 8012934:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012936:	b13a      	cbz	r2, 8012948 <_strtod_l+0xd0>
 8012938:	2135      	movs	r1, #53	@ 0x35
 801293a:	a81c      	add	r0, sp, #112	@ 0x70
 801293c:	f7ff ff38 	bl	80127b0 <__copybits>
 8012940:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012942:	9805      	ldr	r0, [sp, #20]
 8012944:	f7ff fb0e 	bl	8011f64 <_Bfree>
 8012948:	3e01      	subs	r6, #1
 801294a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801294c:	2e04      	cmp	r6, #4
 801294e:	d806      	bhi.n	801295e <_strtod_l+0xe6>
 8012950:	e8df f006 	tbb	[pc, r6]
 8012954:	201d0314 	.word	0x201d0314
 8012958:	14          	.byte	0x14
 8012959:	00          	.byte	0x00
 801295a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801295e:	05e1      	lsls	r1, r4, #23
 8012960:	bf48      	it	mi
 8012962:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012966:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801296a:	0d1b      	lsrs	r3, r3, #20
 801296c:	051b      	lsls	r3, r3, #20
 801296e:	2b00      	cmp	r3, #0
 8012970:	d1bb      	bne.n	80128ea <_strtod_l+0x72>
 8012972:	f7fe fbe5 	bl	8011140 <__errno>
 8012976:	2322      	movs	r3, #34	@ 0x22
 8012978:	6003      	str	r3, [r0, #0]
 801297a:	e7b6      	b.n	80128ea <_strtod_l+0x72>
 801297c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8012980:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012984:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012988:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801298c:	e7e7      	b.n	801295e <_strtod_l+0xe6>
 801298e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8012b10 <_strtod_l+0x298>
 8012992:	e7e4      	b.n	801295e <_strtod_l+0xe6>
 8012994:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012998:	f04f 3aff 	mov.w	sl, #4294967295
 801299c:	e7df      	b.n	801295e <_strtod_l+0xe6>
 801299e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80129a0:	1c5a      	adds	r2, r3, #1
 80129a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80129a4:	785b      	ldrb	r3, [r3, #1]
 80129a6:	2b30      	cmp	r3, #48	@ 0x30
 80129a8:	d0f9      	beq.n	801299e <_strtod_l+0x126>
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d09d      	beq.n	80128ea <_strtod_l+0x72>
 80129ae:	2301      	movs	r3, #1
 80129b0:	2700      	movs	r7, #0
 80129b2:	9308      	str	r3, [sp, #32]
 80129b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80129b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80129b8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80129ba:	46b9      	mov	r9, r7
 80129bc:	220a      	movs	r2, #10
 80129be:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80129c0:	7805      	ldrb	r5, [r0, #0]
 80129c2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80129c6:	b2d9      	uxtb	r1, r3
 80129c8:	2909      	cmp	r1, #9
 80129ca:	d928      	bls.n	8012a1e <_strtod_l+0x1a6>
 80129cc:	494f      	ldr	r1, [pc, #316]	@ (8012b0c <_strtod_l+0x294>)
 80129ce:	2201      	movs	r2, #1
 80129d0:	f000 ffd6 	bl	8013980 <strncmp>
 80129d4:	2800      	cmp	r0, #0
 80129d6:	d032      	beq.n	8012a3e <_strtod_l+0x1c6>
 80129d8:	2000      	movs	r0, #0
 80129da:	462a      	mov	r2, r5
 80129dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80129de:	464d      	mov	r5, r9
 80129e0:	4603      	mov	r3, r0
 80129e2:	2a65      	cmp	r2, #101	@ 0x65
 80129e4:	d001      	beq.n	80129ea <_strtod_l+0x172>
 80129e6:	2a45      	cmp	r2, #69	@ 0x45
 80129e8:	d114      	bne.n	8012a14 <_strtod_l+0x19c>
 80129ea:	b91d      	cbnz	r5, 80129f4 <_strtod_l+0x17c>
 80129ec:	9a08      	ldr	r2, [sp, #32]
 80129ee:	4302      	orrs	r2, r0
 80129f0:	d096      	beq.n	8012920 <_strtod_l+0xa8>
 80129f2:	2500      	movs	r5, #0
 80129f4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80129f6:	1c62      	adds	r2, r4, #1
 80129f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80129fa:	7862      	ldrb	r2, [r4, #1]
 80129fc:	2a2b      	cmp	r2, #43	@ 0x2b
 80129fe:	d07a      	beq.n	8012af6 <_strtod_l+0x27e>
 8012a00:	2a2d      	cmp	r2, #45	@ 0x2d
 8012a02:	d07e      	beq.n	8012b02 <_strtod_l+0x28a>
 8012a04:	f04f 0c00 	mov.w	ip, #0
 8012a08:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8012a0c:	2909      	cmp	r1, #9
 8012a0e:	f240 8085 	bls.w	8012b1c <_strtod_l+0x2a4>
 8012a12:	9419      	str	r4, [sp, #100]	@ 0x64
 8012a14:	f04f 0800 	mov.w	r8, #0
 8012a18:	e0a5      	b.n	8012b66 <_strtod_l+0x2ee>
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	e7c8      	b.n	80129b0 <_strtod_l+0x138>
 8012a1e:	f1b9 0f08 	cmp.w	r9, #8
 8012a22:	bfd8      	it	le
 8012a24:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8012a26:	f100 0001 	add.w	r0, r0, #1
 8012a2a:	bfda      	itte	le
 8012a2c:	fb02 3301 	mlale	r3, r2, r1, r3
 8012a30:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8012a32:	fb02 3707 	mlagt	r7, r2, r7, r3
 8012a36:	f109 0901 	add.w	r9, r9, #1
 8012a3a:	9019      	str	r0, [sp, #100]	@ 0x64
 8012a3c:	e7bf      	b.n	80129be <_strtod_l+0x146>
 8012a3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012a40:	1c5a      	adds	r2, r3, #1
 8012a42:	9219      	str	r2, [sp, #100]	@ 0x64
 8012a44:	785a      	ldrb	r2, [r3, #1]
 8012a46:	f1b9 0f00 	cmp.w	r9, #0
 8012a4a:	d03b      	beq.n	8012ac4 <_strtod_l+0x24c>
 8012a4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8012a4e:	464d      	mov	r5, r9
 8012a50:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8012a54:	2b09      	cmp	r3, #9
 8012a56:	d912      	bls.n	8012a7e <_strtod_l+0x206>
 8012a58:	2301      	movs	r3, #1
 8012a5a:	e7c2      	b.n	80129e2 <_strtod_l+0x16a>
 8012a5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012a5e:	1c5a      	adds	r2, r3, #1
 8012a60:	9219      	str	r2, [sp, #100]	@ 0x64
 8012a62:	785a      	ldrb	r2, [r3, #1]
 8012a64:	3001      	adds	r0, #1
 8012a66:	2a30      	cmp	r2, #48	@ 0x30
 8012a68:	d0f8      	beq.n	8012a5c <_strtod_l+0x1e4>
 8012a6a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8012a6e:	2b08      	cmp	r3, #8
 8012a70:	f200 84d2 	bhi.w	8013418 <_strtod_l+0xba0>
 8012a74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012a76:	900a      	str	r0, [sp, #40]	@ 0x28
 8012a78:	2000      	movs	r0, #0
 8012a7a:	930c      	str	r3, [sp, #48]	@ 0x30
 8012a7c:	4605      	mov	r5, r0
 8012a7e:	3a30      	subs	r2, #48	@ 0x30
 8012a80:	f100 0301 	add.w	r3, r0, #1
 8012a84:	d018      	beq.n	8012ab8 <_strtod_l+0x240>
 8012a86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012a88:	4419      	add	r1, r3
 8012a8a:	910a      	str	r1, [sp, #40]	@ 0x28
 8012a8c:	462e      	mov	r6, r5
 8012a8e:	f04f 0e0a 	mov.w	lr, #10
 8012a92:	1c71      	adds	r1, r6, #1
 8012a94:	eba1 0c05 	sub.w	ip, r1, r5
 8012a98:	4563      	cmp	r3, ip
 8012a9a:	dc15      	bgt.n	8012ac8 <_strtod_l+0x250>
 8012a9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8012aa0:	182b      	adds	r3, r5, r0
 8012aa2:	2b08      	cmp	r3, #8
 8012aa4:	f105 0501 	add.w	r5, r5, #1
 8012aa8:	4405      	add	r5, r0
 8012aaa:	dc1a      	bgt.n	8012ae2 <_strtod_l+0x26a>
 8012aac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012aae:	230a      	movs	r3, #10
 8012ab0:	fb03 2301 	mla	r3, r3, r1, r2
 8012ab4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012aba:	1c51      	adds	r1, r2, #1
 8012abc:	9119      	str	r1, [sp, #100]	@ 0x64
 8012abe:	7852      	ldrb	r2, [r2, #1]
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	e7c5      	b.n	8012a50 <_strtod_l+0x1d8>
 8012ac4:	4648      	mov	r0, r9
 8012ac6:	e7ce      	b.n	8012a66 <_strtod_l+0x1ee>
 8012ac8:	2e08      	cmp	r6, #8
 8012aca:	dc05      	bgt.n	8012ad8 <_strtod_l+0x260>
 8012acc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012ace:	fb0e f606 	mul.w	r6, lr, r6
 8012ad2:	960b      	str	r6, [sp, #44]	@ 0x2c
 8012ad4:	460e      	mov	r6, r1
 8012ad6:	e7dc      	b.n	8012a92 <_strtod_l+0x21a>
 8012ad8:	2910      	cmp	r1, #16
 8012ada:	bfd8      	it	le
 8012adc:	fb0e f707 	mulle.w	r7, lr, r7
 8012ae0:	e7f8      	b.n	8012ad4 <_strtod_l+0x25c>
 8012ae2:	2b0f      	cmp	r3, #15
 8012ae4:	bfdc      	itt	le
 8012ae6:	230a      	movle	r3, #10
 8012ae8:	fb03 2707 	mlale	r7, r3, r7, r2
 8012aec:	e7e3      	b.n	8012ab6 <_strtod_l+0x23e>
 8012aee:	2300      	movs	r3, #0
 8012af0:	930a      	str	r3, [sp, #40]	@ 0x28
 8012af2:	2301      	movs	r3, #1
 8012af4:	e77a      	b.n	80129ec <_strtod_l+0x174>
 8012af6:	f04f 0c00 	mov.w	ip, #0
 8012afa:	1ca2      	adds	r2, r4, #2
 8012afc:	9219      	str	r2, [sp, #100]	@ 0x64
 8012afe:	78a2      	ldrb	r2, [r4, #2]
 8012b00:	e782      	b.n	8012a08 <_strtod_l+0x190>
 8012b02:	f04f 0c01 	mov.w	ip, #1
 8012b06:	e7f8      	b.n	8012afa <_strtod_l+0x282>
 8012b08:	08014c84 	.word	0x08014c84
 8012b0c:	08014867 	.word	0x08014867
 8012b10:	7ff00000 	.word	0x7ff00000
 8012b14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012b16:	1c51      	adds	r1, r2, #1
 8012b18:	9119      	str	r1, [sp, #100]	@ 0x64
 8012b1a:	7852      	ldrb	r2, [r2, #1]
 8012b1c:	2a30      	cmp	r2, #48	@ 0x30
 8012b1e:	d0f9      	beq.n	8012b14 <_strtod_l+0x29c>
 8012b20:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8012b24:	2908      	cmp	r1, #8
 8012b26:	f63f af75 	bhi.w	8012a14 <_strtod_l+0x19c>
 8012b2a:	3a30      	subs	r2, #48	@ 0x30
 8012b2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8012b2e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012b30:	920f      	str	r2, [sp, #60]	@ 0x3c
 8012b32:	f04f 080a 	mov.w	r8, #10
 8012b36:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012b38:	1c56      	adds	r6, r2, #1
 8012b3a:	9619      	str	r6, [sp, #100]	@ 0x64
 8012b3c:	7852      	ldrb	r2, [r2, #1]
 8012b3e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8012b42:	f1be 0f09 	cmp.w	lr, #9
 8012b46:	d939      	bls.n	8012bbc <_strtod_l+0x344>
 8012b48:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012b4a:	1a76      	subs	r6, r6, r1
 8012b4c:	2e08      	cmp	r6, #8
 8012b4e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8012b52:	dc03      	bgt.n	8012b5c <_strtod_l+0x2e4>
 8012b54:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012b56:	4588      	cmp	r8, r1
 8012b58:	bfa8      	it	ge
 8012b5a:	4688      	movge	r8, r1
 8012b5c:	f1bc 0f00 	cmp.w	ip, #0
 8012b60:	d001      	beq.n	8012b66 <_strtod_l+0x2ee>
 8012b62:	f1c8 0800 	rsb	r8, r8, #0
 8012b66:	2d00      	cmp	r5, #0
 8012b68:	d14e      	bne.n	8012c08 <_strtod_l+0x390>
 8012b6a:	9908      	ldr	r1, [sp, #32]
 8012b6c:	4308      	orrs	r0, r1
 8012b6e:	f47f aebc 	bne.w	80128ea <_strtod_l+0x72>
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	f47f aed4 	bne.w	8012920 <_strtod_l+0xa8>
 8012b78:	2a69      	cmp	r2, #105	@ 0x69
 8012b7a:	d028      	beq.n	8012bce <_strtod_l+0x356>
 8012b7c:	dc25      	bgt.n	8012bca <_strtod_l+0x352>
 8012b7e:	2a49      	cmp	r2, #73	@ 0x49
 8012b80:	d025      	beq.n	8012bce <_strtod_l+0x356>
 8012b82:	2a4e      	cmp	r2, #78	@ 0x4e
 8012b84:	f47f aecc 	bne.w	8012920 <_strtod_l+0xa8>
 8012b88:	499a      	ldr	r1, [pc, #616]	@ (8012df4 <_strtod_l+0x57c>)
 8012b8a:	a819      	add	r0, sp, #100	@ 0x64
 8012b8c:	f001 f9dc 	bl	8013f48 <__match>
 8012b90:	2800      	cmp	r0, #0
 8012b92:	f43f aec5 	beq.w	8012920 <_strtod_l+0xa8>
 8012b96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012b98:	781b      	ldrb	r3, [r3, #0]
 8012b9a:	2b28      	cmp	r3, #40	@ 0x28
 8012b9c:	d12e      	bne.n	8012bfc <_strtod_l+0x384>
 8012b9e:	4996      	ldr	r1, [pc, #600]	@ (8012df8 <_strtod_l+0x580>)
 8012ba0:	aa1c      	add	r2, sp, #112	@ 0x70
 8012ba2:	a819      	add	r0, sp, #100	@ 0x64
 8012ba4:	f001 f9e4 	bl	8013f70 <__hexnan>
 8012ba8:	2805      	cmp	r0, #5
 8012baa:	d127      	bne.n	8012bfc <_strtod_l+0x384>
 8012bac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012bae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8012bb2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8012bb6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8012bba:	e696      	b.n	80128ea <_strtod_l+0x72>
 8012bbc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012bbe:	fb08 2101 	mla	r1, r8, r1, r2
 8012bc2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8012bc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8012bc8:	e7b5      	b.n	8012b36 <_strtod_l+0x2be>
 8012bca:	2a6e      	cmp	r2, #110	@ 0x6e
 8012bcc:	e7da      	b.n	8012b84 <_strtod_l+0x30c>
 8012bce:	498b      	ldr	r1, [pc, #556]	@ (8012dfc <_strtod_l+0x584>)
 8012bd0:	a819      	add	r0, sp, #100	@ 0x64
 8012bd2:	f001 f9b9 	bl	8013f48 <__match>
 8012bd6:	2800      	cmp	r0, #0
 8012bd8:	f43f aea2 	beq.w	8012920 <_strtod_l+0xa8>
 8012bdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012bde:	4988      	ldr	r1, [pc, #544]	@ (8012e00 <_strtod_l+0x588>)
 8012be0:	3b01      	subs	r3, #1
 8012be2:	a819      	add	r0, sp, #100	@ 0x64
 8012be4:	9319      	str	r3, [sp, #100]	@ 0x64
 8012be6:	f001 f9af 	bl	8013f48 <__match>
 8012bea:	b910      	cbnz	r0, 8012bf2 <_strtod_l+0x37a>
 8012bec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012bee:	3301      	adds	r3, #1
 8012bf0:	9319      	str	r3, [sp, #100]	@ 0x64
 8012bf2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8012e10 <_strtod_l+0x598>
 8012bf6:	f04f 0a00 	mov.w	sl, #0
 8012bfa:	e676      	b.n	80128ea <_strtod_l+0x72>
 8012bfc:	4881      	ldr	r0, [pc, #516]	@ (8012e04 <_strtod_l+0x58c>)
 8012bfe:	f000 fedf 	bl	80139c0 <nan>
 8012c02:	ec5b ab10 	vmov	sl, fp, d0
 8012c06:	e670      	b.n	80128ea <_strtod_l+0x72>
 8012c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c0a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8012c0c:	eba8 0303 	sub.w	r3, r8, r3
 8012c10:	f1b9 0f00 	cmp.w	r9, #0
 8012c14:	bf08      	it	eq
 8012c16:	46a9      	moveq	r9, r5
 8012c18:	2d10      	cmp	r5, #16
 8012c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c1c:	462c      	mov	r4, r5
 8012c1e:	bfa8      	it	ge
 8012c20:	2410      	movge	r4, #16
 8012c22:	f7ed fc6f 	bl	8000504 <__aeabi_ui2d>
 8012c26:	2d09      	cmp	r5, #9
 8012c28:	4682      	mov	sl, r0
 8012c2a:	468b      	mov	fp, r1
 8012c2c:	dc13      	bgt.n	8012c56 <_strtod_l+0x3de>
 8012c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	f43f ae5a 	beq.w	80128ea <_strtod_l+0x72>
 8012c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c38:	dd78      	ble.n	8012d2c <_strtod_l+0x4b4>
 8012c3a:	2b16      	cmp	r3, #22
 8012c3c:	dc5f      	bgt.n	8012cfe <_strtod_l+0x486>
 8012c3e:	4972      	ldr	r1, [pc, #456]	@ (8012e08 <_strtod_l+0x590>)
 8012c40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c48:	4652      	mov	r2, sl
 8012c4a:	465b      	mov	r3, fp
 8012c4c:	f7ed fcd4 	bl	80005f8 <__aeabi_dmul>
 8012c50:	4682      	mov	sl, r0
 8012c52:	468b      	mov	fp, r1
 8012c54:	e649      	b.n	80128ea <_strtod_l+0x72>
 8012c56:	4b6c      	ldr	r3, [pc, #432]	@ (8012e08 <_strtod_l+0x590>)
 8012c58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012c5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8012c60:	f7ed fcca 	bl	80005f8 <__aeabi_dmul>
 8012c64:	4682      	mov	sl, r0
 8012c66:	4638      	mov	r0, r7
 8012c68:	468b      	mov	fp, r1
 8012c6a:	f7ed fc4b 	bl	8000504 <__aeabi_ui2d>
 8012c6e:	4602      	mov	r2, r0
 8012c70:	460b      	mov	r3, r1
 8012c72:	4650      	mov	r0, sl
 8012c74:	4659      	mov	r1, fp
 8012c76:	f7ed fb09 	bl	800028c <__adddf3>
 8012c7a:	2d0f      	cmp	r5, #15
 8012c7c:	4682      	mov	sl, r0
 8012c7e:	468b      	mov	fp, r1
 8012c80:	ddd5      	ble.n	8012c2e <_strtod_l+0x3b6>
 8012c82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c84:	1b2c      	subs	r4, r5, r4
 8012c86:	441c      	add	r4, r3
 8012c88:	2c00      	cmp	r4, #0
 8012c8a:	f340 8093 	ble.w	8012db4 <_strtod_l+0x53c>
 8012c8e:	f014 030f 	ands.w	r3, r4, #15
 8012c92:	d00a      	beq.n	8012caa <_strtod_l+0x432>
 8012c94:	495c      	ldr	r1, [pc, #368]	@ (8012e08 <_strtod_l+0x590>)
 8012c96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012c9a:	4652      	mov	r2, sl
 8012c9c:	465b      	mov	r3, fp
 8012c9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ca2:	f7ed fca9 	bl	80005f8 <__aeabi_dmul>
 8012ca6:	4682      	mov	sl, r0
 8012ca8:	468b      	mov	fp, r1
 8012caa:	f034 040f 	bics.w	r4, r4, #15
 8012cae:	d073      	beq.n	8012d98 <_strtod_l+0x520>
 8012cb0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8012cb4:	dd49      	ble.n	8012d4a <_strtod_l+0x4d2>
 8012cb6:	2400      	movs	r4, #0
 8012cb8:	46a0      	mov	r8, r4
 8012cba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012cbc:	46a1      	mov	r9, r4
 8012cbe:	9a05      	ldr	r2, [sp, #20]
 8012cc0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8012e10 <_strtod_l+0x598>
 8012cc4:	2322      	movs	r3, #34	@ 0x22
 8012cc6:	6013      	str	r3, [r2, #0]
 8012cc8:	f04f 0a00 	mov.w	sl, #0
 8012ccc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	f43f ae0b 	beq.w	80128ea <_strtod_l+0x72>
 8012cd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012cd6:	9805      	ldr	r0, [sp, #20]
 8012cd8:	f7ff f944 	bl	8011f64 <_Bfree>
 8012cdc:	9805      	ldr	r0, [sp, #20]
 8012cde:	4649      	mov	r1, r9
 8012ce0:	f7ff f940 	bl	8011f64 <_Bfree>
 8012ce4:	9805      	ldr	r0, [sp, #20]
 8012ce6:	4641      	mov	r1, r8
 8012ce8:	f7ff f93c 	bl	8011f64 <_Bfree>
 8012cec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012cee:	9805      	ldr	r0, [sp, #20]
 8012cf0:	f7ff f938 	bl	8011f64 <_Bfree>
 8012cf4:	9805      	ldr	r0, [sp, #20]
 8012cf6:	4621      	mov	r1, r4
 8012cf8:	f7ff f934 	bl	8011f64 <_Bfree>
 8012cfc:	e5f5      	b.n	80128ea <_strtod_l+0x72>
 8012cfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8012d04:	4293      	cmp	r3, r2
 8012d06:	dbbc      	blt.n	8012c82 <_strtod_l+0x40a>
 8012d08:	4c3f      	ldr	r4, [pc, #252]	@ (8012e08 <_strtod_l+0x590>)
 8012d0a:	f1c5 050f 	rsb	r5, r5, #15
 8012d0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8012d12:	4652      	mov	r2, sl
 8012d14:	465b      	mov	r3, fp
 8012d16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d1a:	f7ed fc6d 	bl	80005f8 <__aeabi_dmul>
 8012d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d20:	1b5d      	subs	r5, r3, r5
 8012d22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012d26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012d2a:	e78f      	b.n	8012c4c <_strtod_l+0x3d4>
 8012d2c:	3316      	adds	r3, #22
 8012d2e:	dba8      	blt.n	8012c82 <_strtod_l+0x40a>
 8012d30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d32:	eba3 0808 	sub.w	r8, r3, r8
 8012d36:	4b34      	ldr	r3, [pc, #208]	@ (8012e08 <_strtod_l+0x590>)
 8012d38:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8012d3c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8012d40:	4650      	mov	r0, sl
 8012d42:	4659      	mov	r1, fp
 8012d44:	f7ed fd82 	bl	800084c <__aeabi_ddiv>
 8012d48:	e782      	b.n	8012c50 <_strtod_l+0x3d8>
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	4f2f      	ldr	r7, [pc, #188]	@ (8012e0c <_strtod_l+0x594>)
 8012d4e:	1124      	asrs	r4, r4, #4
 8012d50:	4650      	mov	r0, sl
 8012d52:	4659      	mov	r1, fp
 8012d54:	461e      	mov	r6, r3
 8012d56:	2c01      	cmp	r4, #1
 8012d58:	dc21      	bgt.n	8012d9e <_strtod_l+0x526>
 8012d5a:	b10b      	cbz	r3, 8012d60 <_strtod_l+0x4e8>
 8012d5c:	4682      	mov	sl, r0
 8012d5e:	468b      	mov	fp, r1
 8012d60:	492a      	ldr	r1, [pc, #168]	@ (8012e0c <_strtod_l+0x594>)
 8012d62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8012d66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8012d6a:	4652      	mov	r2, sl
 8012d6c:	465b      	mov	r3, fp
 8012d6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d72:	f7ed fc41 	bl	80005f8 <__aeabi_dmul>
 8012d76:	4b26      	ldr	r3, [pc, #152]	@ (8012e10 <_strtod_l+0x598>)
 8012d78:	460a      	mov	r2, r1
 8012d7a:	400b      	ands	r3, r1
 8012d7c:	4925      	ldr	r1, [pc, #148]	@ (8012e14 <_strtod_l+0x59c>)
 8012d7e:	428b      	cmp	r3, r1
 8012d80:	4682      	mov	sl, r0
 8012d82:	d898      	bhi.n	8012cb6 <_strtod_l+0x43e>
 8012d84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8012d88:	428b      	cmp	r3, r1
 8012d8a:	bf86      	itte	hi
 8012d8c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8012e18 <_strtod_l+0x5a0>
 8012d90:	f04f 3aff 	movhi.w	sl, #4294967295
 8012d94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012d98:	2300      	movs	r3, #0
 8012d9a:	9308      	str	r3, [sp, #32]
 8012d9c:	e076      	b.n	8012e8c <_strtod_l+0x614>
 8012d9e:	07e2      	lsls	r2, r4, #31
 8012da0:	d504      	bpl.n	8012dac <_strtod_l+0x534>
 8012da2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012da6:	f7ed fc27 	bl	80005f8 <__aeabi_dmul>
 8012daa:	2301      	movs	r3, #1
 8012dac:	3601      	adds	r6, #1
 8012dae:	1064      	asrs	r4, r4, #1
 8012db0:	3708      	adds	r7, #8
 8012db2:	e7d0      	b.n	8012d56 <_strtod_l+0x4de>
 8012db4:	d0f0      	beq.n	8012d98 <_strtod_l+0x520>
 8012db6:	4264      	negs	r4, r4
 8012db8:	f014 020f 	ands.w	r2, r4, #15
 8012dbc:	d00a      	beq.n	8012dd4 <_strtod_l+0x55c>
 8012dbe:	4b12      	ldr	r3, [pc, #72]	@ (8012e08 <_strtod_l+0x590>)
 8012dc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012dc4:	4650      	mov	r0, sl
 8012dc6:	4659      	mov	r1, fp
 8012dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dcc:	f7ed fd3e 	bl	800084c <__aeabi_ddiv>
 8012dd0:	4682      	mov	sl, r0
 8012dd2:	468b      	mov	fp, r1
 8012dd4:	1124      	asrs	r4, r4, #4
 8012dd6:	d0df      	beq.n	8012d98 <_strtod_l+0x520>
 8012dd8:	2c1f      	cmp	r4, #31
 8012dda:	dd1f      	ble.n	8012e1c <_strtod_l+0x5a4>
 8012ddc:	2400      	movs	r4, #0
 8012dde:	46a0      	mov	r8, r4
 8012de0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012de2:	46a1      	mov	r9, r4
 8012de4:	9a05      	ldr	r2, [sp, #20]
 8012de6:	2322      	movs	r3, #34	@ 0x22
 8012de8:	f04f 0a00 	mov.w	sl, #0
 8012dec:	f04f 0b00 	mov.w	fp, #0
 8012df0:	6013      	str	r3, [r2, #0]
 8012df2:	e76b      	b.n	8012ccc <_strtod_l+0x454>
 8012df4:	08014755 	.word	0x08014755
 8012df8:	08014c70 	.word	0x08014c70
 8012dfc:	0801474d 	.word	0x0801474d
 8012e00:	08014784 	.word	0x08014784
 8012e04:	080148bd 	.word	0x080148bd
 8012e08:	08014ba8 	.word	0x08014ba8
 8012e0c:	08014b80 	.word	0x08014b80
 8012e10:	7ff00000 	.word	0x7ff00000
 8012e14:	7ca00000 	.word	0x7ca00000
 8012e18:	7fefffff 	.word	0x7fefffff
 8012e1c:	f014 0310 	ands.w	r3, r4, #16
 8012e20:	bf18      	it	ne
 8012e22:	236a      	movne	r3, #106	@ 0x6a
 8012e24:	4ea9      	ldr	r6, [pc, #676]	@ (80130cc <_strtod_l+0x854>)
 8012e26:	9308      	str	r3, [sp, #32]
 8012e28:	4650      	mov	r0, sl
 8012e2a:	4659      	mov	r1, fp
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	07e7      	lsls	r7, r4, #31
 8012e30:	d504      	bpl.n	8012e3c <_strtod_l+0x5c4>
 8012e32:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012e36:	f7ed fbdf 	bl	80005f8 <__aeabi_dmul>
 8012e3a:	2301      	movs	r3, #1
 8012e3c:	1064      	asrs	r4, r4, #1
 8012e3e:	f106 0608 	add.w	r6, r6, #8
 8012e42:	d1f4      	bne.n	8012e2e <_strtod_l+0x5b6>
 8012e44:	b10b      	cbz	r3, 8012e4a <_strtod_l+0x5d2>
 8012e46:	4682      	mov	sl, r0
 8012e48:	468b      	mov	fp, r1
 8012e4a:	9b08      	ldr	r3, [sp, #32]
 8012e4c:	b1b3      	cbz	r3, 8012e7c <_strtod_l+0x604>
 8012e4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012e52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	4659      	mov	r1, fp
 8012e5a:	dd0f      	ble.n	8012e7c <_strtod_l+0x604>
 8012e5c:	2b1f      	cmp	r3, #31
 8012e5e:	dd56      	ble.n	8012f0e <_strtod_l+0x696>
 8012e60:	2b34      	cmp	r3, #52	@ 0x34
 8012e62:	bfde      	ittt	le
 8012e64:	f04f 33ff 	movle.w	r3, #4294967295
 8012e68:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8012e6c:	4093      	lslle	r3, r2
 8012e6e:	f04f 0a00 	mov.w	sl, #0
 8012e72:	bfcc      	ite	gt
 8012e74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012e78:	ea03 0b01 	andle.w	fp, r3, r1
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	2300      	movs	r3, #0
 8012e80:	4650      	mov	r0, sl
 8012e82:	4659      	mov	r1, fp
 8012e84:	f7ed fe20 	bl	8000ac8 <__aeabi_dcmpeq>
 8012e88:	2800      	cmp	r0, #0
 8012e8a:	d1a7      	bne.n	8012ddc <_strtod_l+0x564>
 8012e8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012e8e:	9300      	str	r3, [sp, #0]
 8012e90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012e92:	9805      	ldr	r0, [sp, #20]
 8012e94:	462b      	mov	r3, r5
 8012e96:	464a      	mov	r2, r9
 8012e98:	f7ff f8cc 	bl	8012034 <__s2b>
 8012e9c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8012e9e:	2800      	cmp	r0, #0
 8012ea0:	f43f af09 	beq.w	8012cb6 <_strtod_l+0x43e>
 8012ea4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ea6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ea8:	2a00      	cmp	r2, #0
 8012eaa:	eba3 0308 	sub.w	r3, r3, r8
 8012eae:	bfa8      	it	ge
 8012eb0:	2300      	movge	r3, #0
 8012eb2:	9312      	str	r3, [sp, #72]	@ 0x48
 8012eb4:	2400      	movs	r4, #0
 8012eb6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012eba:	9316      	str	r3, [sp, #88]	@ 0x58
 8012ebc:	46a0      	mov	r8, r4
 8012ebe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012ec0:	9805      	ldr	r0, [sp, #20]
 8012ec2:	6859      	ldr	r1, [r3, #4]
 8012ec4:	f7ff f80e 	bl	8011ee4 <_Balloc>
 8012ec8:	4681      	mov	r9, r0
 8012eca:	2800      	cmp	r0, #0
 8012ecc:	f43f aef7 	beq.w	8012cbe <_strtod_l+0x446>
 8012ed0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012ed2:	691a      	ldr	r2, [r3, #16]
 8012ed4:	3202      	adds	r2, #2
 8012ed6:	f103 010c 	add.w	r1, r3, #12
 8012eda:	0092      	lsls	r2, r2, #2
 8012edc:	300c      	adds	r0, #12
 8012ede:	f000 fd61 	bl	80139a4 <memcpy>
 8012ee2:	ec4b ab10 	vmov	d0, sl, fp
 8012ee6:	9805      	ldr	r0, [sp, #20]
 8012ee8:	aa1c      	add	r2, sp, #112	@ 0x70
 8012eea:	a91b      	add	r1, sp, #108	@ 0x6c
 8012eec:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8012ef0:	f7ff fbd4 	bl	801269c <__d2b>
 8012ef4:	901a      	str	r0, [sp, #104]	@ 0x68
 8012ef6:	2800      	cmp	r0, #0
 8012ef8:	f43f aee1 	beq.w	8012cbe <_strtod_l+0x446>
 8012efc:	9805      	ldr	r0, [sp, #20]
 8012efe:	2101      	movs	r1, #1
 8012f00:	f7ff f92e 	bl	8012160 <__i2b>
 8012f04:	4680      	mov	r8, r0
 8012f06:	b948      	cbnz	r0, 8012f1c <_strtod_l+0x6a4>
 8012f08:	f04f 0800 	mov.w	r8, #0
 8012f0c:	e6d7      	b.n	8012cbe <_strtod_l+0x446>
 8012f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8012f12:	fa02 f303 	lsl.w	r3, r2, r3
 8012f16:	ea03 0a0a 	and.w	sl, r3, sl
 8012f1a:	e7af      	b.n	8012e7c <_strtod_l+0x604>
 8012f1c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8012f1e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012f20:	2d00      	cmp	r5, #0
 8012f22:	bfab      	itete	ge
 8012f24:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8012f26:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8012f28:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8012f2a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8012f2c:	bfac      	ite	ge
 8012f2e:	18ef      	addge	r7, r5, r3
 8012f30:	1b5e      	sublt	r6, r3, r5
 8012f32:	9b08      	ldr	r3, [sp, #32]
 8012f34:	1aed      	subs	r5, r5, r3
 8012f36:	4415      	add	r5, r2
 8012f38:	4b65      	ldr	r3, [pc, #404]	@ (80130d0 <_strtod_l+0x858>)
 8012f3a:	3d01      	subs	r5, #1
 8012f3c:	429d      	cmp	r5, r3
 8012f3e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012f42:	da50      	bge.n	8012fe6 <_strtod_l+0x76e>
 8012f44:	1b5b      	subs	r3, r3, r5
 8012f46:	2b1f      	cmp	r3, #31
 8012f48:	eba2 0203 	sub.w	r2, r2, r3
 8012f4c:	f04f 0101 	mov.w	r1, #1
 8012f50:	dc3d      	bgt.n	8012fce <_strtod_l+0x756>
 8012f52:	fa01 f303 	lsl.w	r3, r1, r3
 8012f56:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012f58:	2300      	movs	r3, #0
 8012f5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8012f5c:	18bd      	adds	r5, r7, r2
 8012f5e:	9b08      	ldr	r3, [sp, #32]
 8012f60:	42af      	cmp	r7, r5
 8012f62:	4416      	add	r6, r2
 8012f64:	441e      	add	r6, r3
 8012f66:	463b      	mov	r3, r7
 8012f68:	bfa8      	it	ge
 8012f6a:	462b      	movge	r3, r5
 8012f6c:	42b3      	cmp	r3, r6
 8012f6e:	bfa8      	it	ge
 8012f70:	4633      	movge	r3, r6
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	bfc2      	ittt	gt
 8012f76:	1aed      	subgt	r5, r5, r3
 8012f78:	1af6      	subgt	r6, r6, r3
 8012f7a:	1aff      	subgt	r7, r7, r3
 8012f7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	dd16      	ble.n	8012fb0 <_strtod_l+0x738>
 8012f82:	4641      	mov	r1, r8
 8012f84:	9805      	ldr	r0, [sp, #20]
 8012f86:	461a      	mov	r2, r3
 8012f88:	f7ff f9a2 	bl	80122d0 <__pow5mult>
 8012f8c:	4680      	mov	r8, r0
 8012f8e:	2800      	cmp	r0, #0
 8012f90:	d0ba      	beq.n	8012f08 <_strtod_l+0x690>
 8012f92:	4601      	mov	r1, r0
 8012f94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012f96:	9805      	ldr	r0, [sp, #20]
 8012f98:	f7ff f8f8 	bl	801218c <__multiply>
 8012f9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8012f9e:	2800      	cmp	r0, #0
 8012fa0:	f43f ae8d 	beq.w	8012cbe <_strtod_l+0x446>
 8012fa4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012fa6:	9805      	ldr	r0, [sp, #20]
 8012fa8:	f7fe ffdc 	bl	8011f64 <_Bfree>
 8012fac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012fae:	931a      	str	r3, [sp, #104]	@ 0x68
 8012fb0:	2d00      	cmp	r5, #0
 8012fb2:	dc1d      	bgt.n	8012ff0 <_strtod_l+0x778>
 8012fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	dd23      	ble.n	8013002 <_strtod_l+0x78a>
 8012fba:	4649      	mov	r1, r9
 8012fbc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8012fbe:	9805      	ldr	r0, [sp, #20]
 8012fc0:	f7ff f986 	bl	80122d0 <__pow5mult>
 8012fc4:	4681      	mov	r9, r0
 8012fc6:	b9e0      	cbnz	r0, 8013002 <_strtod_l+0x78a>
 8012fc8:	f04f 0900 	mov.w	r9, #0
 8012fcc:	e677      	b.n	8012cbe <_strtod_l+0x446>
 8012fce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012fd2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8012fd6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8012fda:	35e2      	adds	r5, #226	@ 0xe2
 8012fdc:	fa01 f305 	lsl.w	r3, r1, r5
 8012fe0:	9310      	str	r3, [sp, #64]	@ 0x40
 8012fe2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012fe4:	e7ba      	b.n	8012f5c <_strtod_l+0x6e4>
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	9310      	str	r3, [sp, #64]	@ 0x40
 8012fea:	2301      	movs	r3, #1
 8012fec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012fee:	e7b5      	b.n	8012f5c <_strtod_l+0x6e4>
 8012ff0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012ff2:	9805      	ldr	r0, [sp, #20]
 8012ff4:	462a      	mov	r2, r5
 8012ff6:	f7ff f9c5 	bl	8012384 <__lshift>
 8012ffa:	901a      	str	r0, [sp, #104]	@ 0x68
 8012ffc:	2800      	cmp	r0, #0
 8012ffe:	d1d9      	bne.n	8012fb4 <_strtod_l+0x73c>
 8013000:	e65d      	b.n	8012cbe <_strtod_l+0x446>
 8013002:	2e00      	cmp	r6, #0
 8013004:	dd07      	ble.n	8013016 <_strtod_l+0x79e>
 8013006:	4649      	mov	r1, r9
 8013008:	9805      	ldr	r0, [sp, #20]
 801300a:	4632      	mov	r2, r6
 801300c:	f7ff f9ba 	bl	8012384 <__lshift>
 8013010:	4681      	mov	r9, r0
 8013012:	2800      	cmp	r0, #0
 8013014:	d0d8      	beq.n	8012fc8 <_strtod_l+0x750>
 8013016:	2f00      	cmp	r7, #0
 8013018:	dd08      	ble.n	801302c <_strtod_l+0x7b4>
 801301a:	4641      	mov	r1, r8
 801301c:	9805      	ldr	r0, [sp, #20]
 801301e:	463a      	mov	r2, r7
 8013020:	f7ff f9b0 	bl	8012384 <__lshift>
 8013024:	4680      	mov	r8, r0
 8013026:	2800      	cmp	r0, #0
 8013028:	f43f ae49 	beq.w	8012cbe <_strtod_l+0x446>
 801302c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801302e:	9805      	ldr	r0, [sp, #20]
 8013030:	464a      	mov	r2, r9
 8013032:	f7ff fa2f 	bl	8012494 <__mdiff>
 8013036:	4604      	mov	r4, r0
 8013038:	2800      	cmp	r0, #0
 801303a:	f43f ae40 	beq.w	8012cbe <_strtod_l+0x446>
 801303e:	68c3      	ldr	r3, [r0, #12]
 8013040:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013042:	2300      	movs	r3, #0
 8013044:	60c3      	str	r3, [r0, #12]
 8013046:	4641      	mov	r1, r8
 8013048:	f7ff fa08 	bl	801245c <__mcmp>
 801304c:	2800      	cmp	r0, #0
 801304e:	da45      	bge.n	80130dc <_strtod_l+0x864>
 8013050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013052:	ea53 030a 	orrs.w	r3, r3, sl
 8013056:	d16b      	bne.n	8013130 <_strtod_l+0x8b8>
 8013058:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801305c:	2b00      	cmp	r3, #0
 801305e:	d167      	bne.n	8013130 <_strtod_l+0x8b8>
 8013060:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013064:	0d1b      	lsrs	r3, r3, #20
 8013066:	051b      	lsls	r3, r3, #20
 8013068:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801306c:	d960      	bls.n	8013130 <_strtod_l+0x8b8>
 801306e:	6963      	ldr	r3, [r4, #20]
 8013070:	b913      	cbnz	r3, 8013078 <_strtod_l+0x800>
 8013072:	6923      	ldr	r3, [r4, #16]
 8013074:	2b01      	cmp	r3, #1
 8013076:	dd5b      	ble.n	8013130 <_strtod_l+0x8b8>
 8013078:	4621      	mov	r1, r4
 801307a:	2201      	movs	r2, #1
 801307c:	9805      	ldr	r0, [sp, #20]
 801307e:	f7ff f981 	bl	8012384 <__lshift>
 8013082:	4641      	mov	r1, r8
 8013084:	4604      	mov	r4, r0
 8013086:	f7ff f9e9 	bl	801245c <__mcmp>
 801308a:	2800      	cmp	r0, #0
 801308c:	dd50      	ble.n	8013130 <_strtod_l+0x8b8>
 801308e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013092:	9a08      	ldr	r2, [sp, #32]
 8013094:	0d1b      	lsrs	r3, r3, #20
 8013096:	051b      	lsls	r3, r3, #20
 8013098:	2a00      	cmp	r2, #0
 801309a:	d06a      	beq.n	8013172 <_strtod_l+0x8fa>
 801309c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80130a0:	d867      	bhi.n	8013172 <_strtod_l+0x8fa>
 80130a2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80130a6:	f67f ae9d 	bls.w	8012de4 <_strtod_l+0x56c>
 80130aa:	4b0a      	ldr	r3, [pc, #40]	@ (80130d4 <_strtod_l+0x85c>)
 80130ac:	4650      	mov	r0, sl
 80130ae:	4659      	mov	r1, fp
 80130b0:	2200      	movs	r2, #0
 80130b2:	f7ed faa1 	bl	80005f8 <__aeabi_dmul>
 80130b6:	4b08      	ldr	r3, [pc, #32]	@ (80130d8 <_strtod_l+0x860>)
 80130b8:	400b      	ands	r3, r1
 80130ba:	4682      	mov	sl, r0
 80130bc:	468b      	mov	fp, r1
 80130be:	2b00      	cmp	r3, #0
 80130c0:	f47f ae08 	bne.w	8012cd4 <_strtod_l+0x45c>
 80130c4:	9a05      	ldr	r2, [sp, #20]
 80130c6:	2322      	movs	r3, #34	@ 0x22
 80130c8:	6013      	str	r3, [r2, #0]
 80130ca:	e603      	b.n	8012cd4 <_strtod_l+0x45c>
 80130cc:	08014c98 	.word	0x08014c98
 80130d0:	fffffc02 	.word	0xfffffc02
 80130d4:	39500000 	.word	0x39500000
 80130d8:	7ff00000 	.word	0x7ff00000
 80130dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80130e0:	d165      	bne.n	80131ae <_strtod_l+0x936>
 80130e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80130e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80130e8:	b35a      	cbz	r2, 8013142 <_strtod_l+0x8ca>
 80130ea:	4a9f      	ldr	r2, [pc, #636]	@ (8013368 <_strtod_l+0xaf0>)
 80130ec:	4293      	cmp	r3, r2
 80130ee:	d12b      	bne.n	8013148 <_strtod_l+0x8d0>
 80130f0:	9b08      	ldr	r3, [sp, #32]
 80130f2:	4651      	mov	r1, sl
 80130f4:	b303      	cbz	r3, 8013138 <_strtod_l+0x8c0>
 80130f6:	4b9d      	ldr	r3, [pc, #628]	@ (801336c <_strtod_l+0xaf4>)
 80130f8:	465a      	mov	r2, fp
 80130fa:	4013      	ands	r3, r2
 80130fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013100:	f04f 32ff 	mov.w	r2, #4294967295
 8013104:	d81b      	bhi.n	801313e <_strtod_l+0x8c6>
 8013106:	0d1b      	lsrs	r3, r3, #20
 8013108:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801310c:	fa02 f303 	lsl.w	r3, r2, r3
 8013110:	4299      	cmp	r1, r3
 8013112:	d119      	bne.n	8013148 <_strtod_l+0x8d0>
 8013114:	4b96      	ldr	r3, [pc, #600]	@ (8013370 <_strtod_l+0xaf8>)
 8013116:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013118:	429a      	cmp	r2, r3
 801311a:	d102      	bne.n	8013122 <_strtod_l+0x8aa>
 801311c:	3101      	adds	r1, #1
 801311e:	f43f adce 	beq.w	8012cbe <_strtod_l+0x446>
 8013122:	4b92      	ldr	r3, [pc, #584]	@ (801336c <_strtod_l+0xaf4>)
 8013124:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013126:	401a      	ands	r2, r3
 8013128:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801312c:	f04f 0a00 	mov.w	sl, #0
 8013130:	9b08      	ldr	r3, [sp, #32]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d1b9      	bne.n	80130aa <_strtod_l+0x832>
 8013136:	e5cd      	b.n	8012cd4 <_strtod_l+0x45c>
 8013138:	f04f 33ff 	mov.w	r3, #4294967295
 801313c:	e7e8      	b.n	8013110 <_strtod_l+0x898>
 801313e:	4613      	mov	r3, r2
 8013140:	e7e6      	b.n	8013110 <_strtod_l+0x898>
 8013142:	ea53 030a 	orrs.w	r3, r3, sl
 8013146:	d0a2      	beq.n	801308e <_strtod_l+0x816>
 8013148:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801314a:	b1db      	cbz	r3, 8013184 <_strtod_l+0x90c>
 801314c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801314e:	4213      	tst	r3, r2
 8013150:	d0ee      	beq.n	8013130 <_strtod_l+0x8b8>
 8013152:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013154:	9a08      	ldr	r2, [sp, #32]
 8013156:	4650      	mov	r0, sl
 8013158:	4659      	mov	r1, fp
 801315a:	b1bb      	cbz	r3, 801318c <_strtod_l+0x914>
 801315c:	f7ff fb6c 	bl	8012838 <sulp>
 8013160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013164:	ec53 2b10 	vmov	r2, r3, d0
 8013168:	f7ed f890 	bl	800028c <__adddf3>
 801316c:	4682      	mov	sl, r0
 801316e:	468b      	mov	fp, r1
 8013170:	e7de      	b.n	8013130 <_strtod_l+0x8b8>
 8013172:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013176:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801317a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801317e:	f04f 3aff 	mov.w	sl, #4294967295
 8013182:	e7d5      	b.n	8013130 <_strtod_l+0x8b8>
 8013184:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013186:	ea13 0f0a 	tst.w	r3, sl
 801318a:	e7e1      	b.n	8013150 <_strtod_l+0x8d8>
 801318c:	f7ff fb54 	bl	8012838 <sulp>
 8013190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013194:	ec53 2b10 	vmov	r2, r3, d0
 8013198:	f7ed f876 	bl	8000288 <__aeabi_dsub>
 801319c:	2200      	movs	r2, #0
 801319e:	2300      	movs	r3, #0
 80131a0:	4682      	mov	sl, r0
 80131a2:	468b      	mov	fp, r1
 80131a4:	f7ed fc90 	bl	8000ac8 <__aeabi_dcmpeq>
 80131a8:	2800      	cmp	r0, #0
 80131aa:	d0c1      	beq.n	8013130 <_strtod_l+0x8b8>
 80131ac:	e61a      	b.n	8012de4 <_strtod_l+0x56c>
 80131ae:	4641      	mov	r1, r8
 80131b0:	4620      	mov	r0, r4
 80131b2:	f7ff facb 	bl	801274c <__ratio>
 80131b6:	ec57 6b10 	vmov	r6, r7, d0
 80131ba:	2200      	movs	r2, #0
 80131bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80131c0:	4630      	mov	r0, r6
 80131c2:	4639      	mov	r1, r7
 80131c4:	f7ed fc94 	bl	8000af0 <__aeabi_dcmple>
 80131c8:	2800      	cmp	r0, #0
 80131ca:	d06f      	beq.n	80132ac <_strtod_l+0xa34>
 80131cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d17a      	bne.n	80132c8 <_strtod_l+0xa50>
 80131d2:	f1ba 0f00 	cmp.w	sl, #0
 80131d6:	d158      	bne.n	801328a <_strtod_l+0xa12>
 80131d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80131da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d15a      	bne.n	8013298 <_strtod_l+0xa20>
 80131e2:	4b64      	ldr	r3, [pc, #400]	@ (8013374 <_strtod_l+0xafc>)
 80131e4:	2200      	movs	r2, #0
 80131e6:	4630      	mov	r0, r6
 80131e8:	4639      	mov	r1, r7
 80131ea:	f7ed fc77 	bl	8000adc <__aeabi_dcmplt>
 80131ee:	2800      	cmp	r0, #0
 80131f0:	d159      	bne.n	80132a6 <_strtod_l+0xa2e>
 80131f2:	4630      	mov	r0, r6
 80131f4:	4639      	mov	r1, r7
 80131f6:	4b60      	ldr	r3, [pc, #384]	@ (8013378 <_strtod_l+0xb00>)
 80131f8:	2200      	movs	r2, #0
 80131fa:	f7ed f9fd 	bl	80005f8 <__aeabi_dmul>
 80131fe:	4606      	mov	r6, r0
 8013200:	460f      	mov	r7, r1
 8013202:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8013206:	9606      	str	r6, [sp, #24]
 8013208:	9307      	str	r3, [sp, #28]
 801320a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801320e:	4d57      	ldr	r5, [pc, #348]	@ (801336c <_strtod_l+0xaf4>)
 8013210:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013216:	401d      	ands	r5, r3
 8013218:	4b58      	ldr	r3, [pc, #352]	@ (801337c <_strtod_l+0xb04>)
 801321a:	429d      	cmp	r5, r3
 801321c:	f040 80b2 	bne.w	8013384 <_strtod_l+0xb0c>
 8013220:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013222:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8013226:	ec4b ab10 	vmov	d0, sl, fp
 801322a:	f7ff f9c7 	bl	80125bc <__ulp>
 801322e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013232:	ec51 0b10 	vmov	r0, r1, d0
 8013236:	f7ed f9df 	bl	80005f8 <__aeabi_dmul>
 801323a:	4652      	mov	r2, sl
 801323c:	465b      	mov	r3, fp
 801323e:	f7ed f825 	bl	800028c <__adddf3>
 8013242:	460b      	mov	r3, r1
 8013244:	4949      	ldr	r1, [pc, #292]	@ (801336c <_strtod_l+0xaf4>)
 8013246:	4a4e      	ldr	r2, [pc, #312]	@ (8013380 <_strtod_l+0xb08>)
 8013248:	4019      	ands	r1, r3
 801324a:	4291      	cmp	r1, r2
 801324c:	4682      	mov	sl, r0
 801324e:	d942      	bls.n	80132d6 <_strtod_l+0xa5e>
 8013250:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013252:	4b47      	ldr	r3, [pc, #284]	@ (8013370 <_strtod_l+0xaf8>)
 8013254:	429a      	cmp	r2, r3
 8013256:	d103      	bne.n	8013260 <_strtod_l+0x9e8>
 8013258:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801325a:	3301      	adds	r3, #1
 801325c:	f43f ad2f 	beq.w	8012cbe <_strtod_l+0x446>
 8013260:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8013370 <_strtod_l+0xaf8>
 8013264:	f04f 3aff 	mov.w	sl, #4294967295
 8013268:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801326a:	9805      	ldr	r0, [sp, #20]
 801326c:	f7fe fe7a 	bl	8011f64 <_Bfree>
 8013270:	9805      	ldr	r0, [sp, #20]
 8013272:	4649      	mov	r1, r9
 8013274:	f7fe fe76 	bl	8011f64 <_Bfree>
 8013278:	9805      	ldr	r0, [sp, #20]
 801327a:	4641      	mov	r1, r8
 801327c:	f7fe fe72 	bl	8011f64 <_Bfree>
 8013280:	9805      	ldr	r0, [sp, #20]
 8013282:	4621      	mov	r1, r4
 8013284:	f7fe fe6e 	bl	8011f64 <_Bfree>
 8013288:	e619      	b.n	8012ebe <_strtod_l+0x646>
 801328a:	f1ba 0f01 	cmp.w	sl, #1
 801328e:	d103      	bne.n	8013298 <_strtod_l+0xa20>
 8013290:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013292:	2b00      	cmp	r3, #0
 8013294:	f43f ada6 	beq.w	8012de4 <_strtod_l+0x56c>
 8013298:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8013348 <_strtod_l+0xad0>
 801329c:	4f35      	ldr	r7, [pc, #212]	@ (8013374 <_strtod_l+0xafc>)
 801329e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80132a2:	2600      	movs	r6, #0
 80132a4:	e7b1      	b.n	801320a <_strtod_l+0x992>
 80132a6:	4f34      	ldr	r7, [pc, #208]	@ (8013378 <_strtod_l+0xb00>)
 80132a8:	2600      	movs	r6, #0
 80132aa:	e7aa      	b.n	8013202 <_strtod_l+0x98a>
 80132ac:	4b32      	ldr	r3, [pc, #200]	@ (8013378 <_strtod_l+0xb00>)
 80132ae:	4630      	mov	r0, r6
 80132b0:	4639      	mov	r1, r7
 80132b2:	2200      	movs	r2, #0
 80132b4:	f7ed f9a0 	bl	80005f8 <__aeabi_dmul>
 80132b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80132ba:	4606      	mov	r6, r0
 80132bc:	460f      	mov	r7, r1
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d09f      	beq.n	8013202 <_strtod_l+0x98a>
 80132c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80132c6:	e7a0      	b.n	801320a <_strtod_l+0x992>
 80132c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013350 <_strtod_l+0xad8>
 80132cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80132d0:	ec57 6b17 	vmov	r6, r7, d7
 80132d4:	e799      	b.n	801320a <_strtod_l+0x992>
 80132d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80132da:	9b08      	ldr	r3, [sp, #32]
 80132dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d1c1      	bne.n	8013268 <_strtod_l+0x9f0>
 80132e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80132e8:	0d1b      	lsrs	r3, r3, #20
 80132ea:	051b      	lsls	r3, r3, #20
 80132ec:	429d      	cmp	r5, r3
 80132ee:	d1bb      	bne.n	8013268 <_strtod_l+0x9f0>
 80132f0:	4630      	mov	r0, r6
 80132f2:	4639      	mov	r1, r7
 80132f4:	f7ed fce0 	bl	8000cb8 <__aeabi_d2lz>
 80132f8:	f7ed f950 	bl	800059c <__aeabi_l2d>
 80132fc:	4602      	mov	r2, r0
 80132fe:	460b      	mov	r3, r1
 8013300:	4630      	mov	r0, r6
 8013302:	4639      	mov	r1, r7
 8013304:	f7ec ffc0 	bl	8000288 <__aeabi_dsub>
 8013308:	460b      	mov	r3, r1
 801330a:	4602      	mov	r2, r0
 801330c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013310:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8013314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013316:	ea46 060a 	orr.w	r6, r6, sl
 801331a:	431e      	orrs	r6, r3
 801331c:	d06f      	beq.n	80133fe <_strtod_l+0xb86>
 801331e:	a30e      	add	r3, pc, #56	@ (adr r3, 8013358 <_strtod_l+0xae0>)
 8013320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013324:	f7ed fbda 	bl	8000adc <__aeabi_dcmplt>
 8013328:	2800      	cmp	r0, #0
 801332a:	f47f acd3 	bne.w	8012cd4 <_strtod_l+0x45c>
 801332e:	a30c      	add	r3, pc, #48	@ (adr r3, 8013360 <_strtod_l+0xae8>)
 8013330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013334:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013338:	f7ed fbee 	bl	8000b18 <__aeabi_dcmpgt>
 801333c:	2800      	cmp	r0, #0
 801333e:	d093      	beq.n	8013268 <_strtod_l+0x9f0>
 8013340:	e4c8      	b.n	8012cd4 <_strtod_l+0x45c>
 8013342:	bf00      	nop
 8013344:	f3af 8000 	nop.w
 8013348:	00000000 	.word	0x00000000
 801334c:	bff00000 	.word	0xbff00000
 8013350:	00000000 	.word	0x00000000
 8013354:	3ff00000 	.word	0x3ff00000
 8013358:	94a03595 	.word	0x94a03595
 801335c:	3fdfffff 	.word	0x3fdfffff
 8013360:	35afe535 	.word	0x35afe535
 8013364:	3fe00000 	.word	0x3fe00000
 8013368:	000fffff 	.word	0x000fffff
 801336c:	7ff00000 	.word	0x7ff00000
 8013370:	7fefffff 	.word	0x7fefffff
 8013374:	3ff00000 	.word	0x3ff00000
 8013378:	3fe00000 	.word	0x3fe00000
 801337c:	7fe00000 	.word	0x7fe00000
 8013380:	7c9fffff 	.word	0x7c9fffff
 8013384:	9b08      	ldr	r3, [sp, #32]
 8013386:	b323      	cbz	r3, 80133d2 <_strtod_l+0xb5a>
 8013388:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801338c:	d821      	bhi.n	80133d2 <_strtod_l+0xb5a>
 801338e:	a328      	add	r3, pc, #160	@ (adr r3, 8013430 <_strtod_l+0xbb8>)
 8013390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013394:	4630      	mov	r0, r6
 8013396:	4639      	mov	r1, r7
 8013398:	f7ed fbaa 	bl	8000af0 <__aeabi_dcmple>
 801339c:	b1a0      	cbz	r0, 80133c8 <_strtod_l+0xb50>
 801339e:	4639      	mov	r1, r7
 80133a0:	4630      	mov	r0, r6
 80133a2:	f7ed fc01 	bl	8000ba8 <__aeabi_d2uiz>
 80133a6:	2801      	cmp	r0, #1
 80133a8:	bf38      	it	cc
 80133aa:	2001      	movcc	r0, #1
 80133ac:	f7ed f8aa 	bl	8000504 <__aeabi_ui2d>
 80133b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80133b2:	4606      	mov	r6, r0
 80133b4:	460f      	mov	r7, r1
 80133b6:	b9fb      	cbnz	r3, 80133f8 <_strtod_l+0xb80>
 80133b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80133bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80133be:	9315      	str	r3, [sp, #84]	@ 0x54
 80133c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80133c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80133c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80133ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80133ce:	1b5b      	subs	r3, r3, r5
 80133d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80133d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80133d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80133da:	f7ff f8ef 	bl	80125bc <__ulp>
 80133de:	4650      	mov	r0, sl
 80133e0:	ec53 2b10 	vmov	r2, r3, d0
 80133e4:	4659      	mov	r1, fp
 80133e6:	f7ed f907 	bl	80005f8 <__aeabi_dmul>
 80133ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80133ee:	f7ec ff4d 	bl	800028c <__adddf3>
 80133f2:	4682      	mov	sl, r0
 80133f4:	468b      	mov	fp, r1
 80133f6:	e770      	b.n	80132da <_strtod_l+0xa62>
 80133f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80133fc:	e7e0      	b.n	80133c0 <_strtod_l+0xb48>
 80133fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8013438 <_strtod_l+0xbc0>)
 8013400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013404:	f7ed fb6a 	bl	8000adc <__aeabi_dcmplt>
 8013408:	e798      	b.n	801333c <_strtod_l+0xac4>
 801340a:	2300      	movs	r3, #0
 801340c:	930e      	str	r3, [sp, #56]	@ 0x38
 801340e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013410:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013412:	6013      	str	r3, [r2, #0]
 8013414:	f7ff ba6d 	b.w	80128f2 <_strtod_l+0x7a>
 8013418:	2a65      	cmp	r2, #101	@ 0x65
 801341a:	f43f ab68 	beq.w	8012aee <_strtod_l+0x276>
 801341e:	2a45      	cmp	r2, #69	@ 0x45
 8013420:	f43f ab65 	beq.w	8012aee <_strtod_l+0x276>
 8013424:	2301      	movs	r3, #1
 8013426:	f7ff bba0 	b.w	8012b6a <_strtod_l+0x2f2>
 801342a:	bf00      	nop
 801342c:	f3af 8000 	nop.w
 8013430:	ffc00000 	.word	0xffc00000
 8013434:	41dfffff 	.word	0x41dfffff
 8013438:	94a03595 	.word	0x94a03595
 801343c:	3fcfffff 	.word	0x3fcfffff

08013440 <_strtod_r>:
 8013440:	4b01      	ldr	r3, [pc, #4]	@ (8013448 <_strtod_r+0x8>)
 8013442:	f7ff ba19 	b.w	8012878 <_strtod_l>
 8013446:	bf00      	nop
 8013448:	20000074 	.word	0x20000074

0801344c <_strtol_l.isra.0>:
 801344c:	2b24      	cmp	r3, #36	@ 0x24
 801344e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013452:	4686      	mov	lr, r0
 8013454:	4690      	mov	r8, r2
 8013456:	d801      	bhi.n	801345c <_strtol_l.isra.0+0x10>
 8013458:	2b01      	cmp	r3, #1
 801345a:	d106      	bne.n	801346a <_strtol_l.isra.0+0x1e>
 801345c:	f7fd fe70 	bl	8011140 <__errno>
 8013460:	2316      	movs	r3, #22
 8013462:	6003      	str	r3, [r0, #0]
 8013464:	2000      	movs	r0, #0
 8013466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801346a:	4834      	ldr	r0, [pc, #208]	@ (801353c <_strtol_l.isra.0+0xf0>)
 801346c:	460d      	mov	r5, r1
 801346e:	462a      	mov	r2, r5
 8013470:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013474:	5d06      	ldrb	r6, [r0, r4]
 8013476:	f016 0608 	ands.w	r6, r6, #8
 801347a:	d1f8      	bne.n	801346e <_strtol_l.isra.0+0x22>
 801347c:	2c2d      	cmp	r4, #45	@ 0x2d
 801347e:	d110      	bne.n	80134a2 <_strtol_l.isra.0+0x56>
 8013480:	782c      	ldrb	r4, [r5, #0]
 8013482:	2601      	movs	r6, #1
 8013484:	1c95      	adds	r5, r2, #2
 8013486:	f033 0210 	bics.w	r2, r3, #16
 801348a:	d115      	bne.n	80134b8 <_strtol_l.isra.0+0x6c>
 801348c:	2c30      	cmp	r4, #48	@ 0x30
 801348e:	d10d      	bne.n	80134ac <_strtol_l.isra.0+0x60>
 8013490:	782a      	ldrb	r2, [r5, #0]
 8013492:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013496:	2a58      	cmp	r2, #88	@ 0x58
 8013498:	d108      	bne.n	80134ac <_strtol_l.isra.0+0x60>
 801349a:	786c      	ldrb	r4, [r5, #1]
 801349c:	3502      	adds	r5, #2
 801349e:	2310      	movs	r3, #16
 80134a0:	e00a      	b.n	80134b8 <_strtol_l.isra.0+0x6c>
 80134a2:	2c2b      	cmp	r4, #43	@ 0x2b
 80134a4:	bf04      	itt	eq
 80134a6:	782c      	ldrbeq	r4, [r5, #0]
 80134a8:	1c95      	addeq	r5, r2, #2
 80134aa:	e7ec      	b.n	8013486 <_strtol_l.isra.0+0x3a>
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d1f6      	bne.n	801349e <_strtol_l.isra.0+0x52>
 80134b0:	2c30      	cmp	r4, #48	@ 0x30
 80134b2:	bf14      	ite	ne
 80134b4:	230a      	movne	r3, #10
 80134b6:	2308      	moveq	r3, #8
 80134b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80134bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80134c0:	2200      	movs	r2, #0
 80134c2:	fbbc f9f3 	udiv	r9, ip, r3
 80134c6:	4610      	mov	r0, r2
 80134c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80134cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80134d0:	2f09      	cmp	r7, #9
 80134d2:	d80f      	bhi.n	80134f4 <_strtol_l.isra.0+0xa8>
 80134d4:	463c      	mov	r4, r7
 80134d6:	42a3      	cmp	r3, r4
 80134d8:	dd1b      	ble.n	8013512 <_strtol_l.isra.0+0xc6>
 80134da:	1c57      	adds	r7, r2, #1
 80134dc:	d007      	beq.n	80134ee <_strtol_l.isra.0+0xa2>
 80134de:	4581      	cmp	r9, r0
 80134e0:	d314      	bcc.n	801350c <_strtol_l.isra.0+0xc0>
 80134e2:	d101      	bne.n	80134e8 <_strtol_l.isra.0+0x9c>
 80134e4:	45a2      	cmp	sl, r4
 80134e6:	db11      	blt.n	801350c <_strtol_l.isra.0+0xc0>
 80134e8:	fb00 4003 	mla	r0, r0, r3, r4
 80134ec:	2201      	movs	r2, #1
 80134ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80134f2:	e7eb      	b.n	80134cc <_strtol_l.isra.0+0x80>
 80134f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80134f8:	2f19      	cmp	r7, #25
 80134fa:	d801      	bhi.n	8013500 <_strtol_l.isra.0+0xb4>
 80134fc:	3c37      	subs	r4, #55	@ 0x37
 80134fe:	e7ea      	b.n	80134d6 <_strtol_l.isra.0+0x8a>
 8013500:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013504:	2f19      	cmp	r7, #25
 8013506:	d804      	bhi.n	8013512 <_strtol_l.isra.0+0xc6>
 8013508:	3c57      	subs	r4, #87	@ 0x57
 801350a:	e7e4      	b.n	80134d6 <_strtol_l.isra.0+0x8a>
 801350c:	f04f 32ff 	mov.w	r2, #4294967295
 8013510:	e7ed      	b.n	80134ee <_strtol_l.isra.0+0xa2>
 8013512:	1c53      	adds	r3, r2, #1
 8013514:	d108      	bne.n	8013528 <_strtol_l.isra.0+0xdc>
 8013516:	2322      	movs	r3, #34	@ 0x22
 8013518:	f8ce 3000 	str.w	r3, [lr]
 801351c:	4660      	mov	r0, ip
 801351e:	f1b8 0f00 	cmp.w	r8, #0
 8013522:	d0a0      	beq.n	8013466 <_strtol_l.isra.0+0x1a>
 8013524:	1e69      	subs	r1, r5, #1
 8013526:	e006      	b.n	8013536 <_strtol_l.isra.0+0xea>
 8013528:	b106      	cbz	r6, 801352c <_strtol_l.isra.0+0xe0>
 801352a:	4240      	negs	r0, r0
 801352c:	f1b8 0f00 	cmp.w	r8, #0
 8013530:	d099      	beq.n	8013466 <_strtol_l.isra.0+0x1a>
 8013532:	2a00      	cmp	r2, #0
 8013534:	d1f6      	bne.n	8013524 <_strtol_l.isra.0+0xd8>
 8013536:	f8c8 1000 	str.w	r1, [r8]
 801353a:	e794      	b.n	8013466 <_strtol_l.isra.0+0x1a>
 801353c:	08014cc1 	.word	0x08014cc1

08013540 <_strtol_r>:
 8013540:	f7ff bf84 	b.w	801344c <_strtol_l.isra.0>

08013544 <__ssputs_r>:
 8013544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013548:	688e      	ldr	r6, [r1, #8]
 801354a:	461f      	mov	r7, r3
 801354c:	42be      	cmp	r6, r7
 801354e:	680b      	ldr	r3, [r1, #0]
 8013550:	4682      	mov	sl, r0
 8013552:	460c      	mov	r4, r1
 8013554:	4690      	mov	r8, r2
 8013556:	d82d      	bhi.n	80135b4 <__ssputs_r+0x70>
 8013558:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801355c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013560:	d026      	beq.n	80135b0 <__ssputs_r+0x6c>
 8013562:	6965      	ldr	r5, [r4, #20]
 8013564:	6909      	ldr	r1, [r1, #16]
 8013566:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801356a:	eba3 0901 	sub.w	r9, r3, r1
 801356e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013572:	1c7b      	adds	r3, r7, #1
 8013574:	444b      	add	r3, r9
 8013576:	106d      	asrs	r5, r5, #1
 8013578:	429d      	cmp	r5, r3
 801357a:	bf38      	it	cc
 801357c:	461d      	movcc	r5, r3
 801357e:	0553      	lsls	r3, r2, #21
 8013580:	d527      	bpl.n	80135d2 <__ssputs_r+0x8e>
 8013582:	4629      	mov	r1, r5
 8013584:	f7fc fd62 	bl	801004c <_malloc_r>
 8013588:	4606      	mov	r6, r0
 801358a:	b360      	cbz	r0, 80135e6 <__ssputs_r+0xa2>
 801358c:	6921      	ldr	r1, [r4, #16]
 801358e:	464a      	mov	r2, r9
 8013590:	f000 fa08 	bl	80139a4 <memcpy>
 8013594:	89a3      	ldrh	r3, [r4, #12]
 8013596:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801359a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801359e:	81a3      	strh	r3, [r4, #12]
 80135a0:	6126      	str	r6, [r4, #16]
 80135a2:	6165      	str	r5, [r4, #20]
 80135a4:	444e      	add	r6, r9
 80135a6:	eba5 0509 	sub.w	r5, r5, r9
 80135aa:	6026      	str	r6, [r4, #0]
 80135ac:	60a5      	str	r5, [r4, #8]
 80135ae:	463e      	mov	r6, r7
 80135b0:	42be      	cmp	r6, r7
 80135b2:	d900      	bls.n	80135b6 <__ssputs_r+0x72>
 80135b4:	463e      	mov	r6, r7
 80135b6:	6820      	ldr	r0, [r4, #0]
 80135b8:	4632      	mov	r2, r6
 80135ba:	4641      	mov	r1, r8
 80135bc:	f000 f9c6 	bl	801394c <memmove>
 80135c0:	68a3      	ldr	r3, [r4, #8]
 80135c2:	1b9b      	subs	r3, r3, r6
 80135c4:	60a3      	str	r3, [r4, #8]
 80135c6:	6823      	ldr	r3, [r4, #0]
 80135c8:	4433      	add	r3, r6
 80135ca:	6023      	str	r3, [r4, #0]
 80135cc:	2000      	movs	r0, #0
 80135ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135d2:	462a      	mov	r2, r5
 80135d4:	f000 fd79 	bl	80140ca <_realloc_r>
 80135d8:	4606      	mov	r6, r0
 80135da:	2800      	cmp	r0, #0
 80135dc:	d1e0      	bne.n	80135a0 <__ssputs_r+0x5c>
 80135de:	6921      	ldr	r1, [r4, #16]
 80135e0:	4650      	mov	r0, sl
 80135e2:	f7fe fc35 	bl	8011e50 <_free_r>
 80135e6:	230c      	movs	r3, #12
 80135e8:	f8ca 3000 	str.w	r3, [sl]
 80135ec:	89a3      	ldrh	r3, [r4, #12]
 80135ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80135f2:	81a3      	strh	r3, [r4, #12]
 80135f4:	f04f 30ff 	mov.w	r0, #4294967295
 80135f8:	e7e9      	b.n	80135ce <__ssputs_r+0x8a>
	...

080135fc <_svfiprintf_r>:
 80135fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013600:	4698      	mov	r8, r3
 8013602:	898b      	ldrh	r3, [r1, #12]
 8013604:	061b      	lsls	r3, r3, #24
 8013606:	b09d      	sub	sp, #116	@ 0x74
 8013608:	4607      	mov	r7, r0
 801360a:	460d      	mov	r5, r1
 801360c:	4614      	mov	r4, r2
 801360e:	d510      	bpl.n	8013632 <_svfiprintf_r+0x36>
 8013610:	690b      	ldr	r3, [r1, #16]
 8013612:	b973      	cbnz	r3, 8013632 <_svfiprintf_r+0x36>
 8013614:	2140      	movs	r1, #64	@ 0x40
 8013616:	f7fc fd19 	bl	801004c <_malloc_r>
 801361a:	6028      	str	r0, [r5, #0]
 801361c:	6128      	str	r0, [r5, #16]
 801361e:	b930      	cbnz	r0, 801362e <_svfiprintf_r+0x32>
 8013620:	230c      	movs	r3, #12
 8013622:	603b      	str	r3, [r7, #0]
 8013624:	f04f 30ff 	mov.w	r0, #4294967295
 8013628:	b01d      	add	sp, #116	@ 0x74
 801362a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801362e:	2340      	movs	r3, #64	@ 0x40
 8013630:	616b      	str	r3, [r5, #20]
 8013632:	2300      	movs	r3, #0
 8013634:	9309      	str	r3, [sp, #36]	@ 0x24
 8013636:	2320      	movs	r3, #32
 8013638:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801363c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013640:	2330      	movs	r3, #48	@ 0x30
 8013642:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80137e0 <_svfiprintf_r+0x1e4>
 8013646:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801364a:	f04f 0901 	mov.w	r9, #1
 801364e:	4623      	mov	r3, r4
 8013650:	469a      	mov	sl, r3
 8013652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013656:	b10a      	cbz	r2, 801365c <_svfiprintf_r+0x60>
 8013658:	2a25      	cmp	r2, #37	@ 0x25
 801365a:	d1f9      	bne.n	8013650 <_svfiprintf_r+0x54>
 801365c:	ebba 0b04 	subs.w	fp, sl, r4
 8013660:	d00b      	beq.n	801367a <_svfiprintf_r+0x7e>
 8013662:	465b      	mov	r3, fp
 8013664:	4622      	mov	r2, r4
 8013666:	4629      	mov	r1, r5
 8013668:	4638      	mov	r0, r7
 801366a:	f7ff ff6b 	bl	8013544 <__ssputs_r>
 801366e:	3001      	adds	r0, #1
 8013670:	f000 80a7 	beq.w	80137c2 <_svfiprintf_r+0x1c6>
 8013674:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013676:	445a      	add	r2, fp
 8013678:	9209      	str	r2, [sp, #36]	@ 0x24
 801367a:	f89a 3000 	ldrb.w	r3, [sl]
 801367e:	2b00      	cmp	r3, #0
 8013680:	f000 809f 	beq.w	80137c2 <_svfiprintf_r+0x1c6>
 8013684:	2300      	movs	r3, #0
 8013686:	f04f 32ff 	mov.w	r2, #4294967295
 801368a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801368e:	f10a 0a01 	add.w	sl, sl, #1
 8013692:	9304      	str	r3, [sp, #16]
 8013694:	9307      	str	r3, [sp, #28]
 8013696:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801369a:	931a      	str	r3, [sp, #104]	@ 0x68
 801369c:	4654      	mov	r4, sl
 801369e:	2205      	movs	r2, #5
 80136a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136a4:	484e      	ldr	r0, [pc, #312]	@ (80137e0 <_svfiprintf_r+0x1e4>)
 80136a6:	f7ec fd93 	bl	80001d0 <memchr>
 80136aa:	9a04      	ldr	r2, [sp, #16]
 80136ac:	b9d8      	cbnz	r0, 80136e6 <_svfiprintf_r+0xea>
 80136ae:	06d0      	lsls	r0, r2, #27
 80136b0:	bf44      	itt	mi
 80136b2:	2320      	movmi	r3, #32
 80136b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80136b8:	0711      	lsls	r1, r2, #28
 80136ba:	bf44      	itt	mi
 80136bc:	232b      	movmi	r3, #43	@ 0x2b
 80136be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80136c2:	f89a 3000 	ldrb.w	r3, [sl]
 80136c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80136c8:	d015      	beq.n	80136f6 <_svfiprintf_r+0xfa>
 80136ca:	9a07      	ldr	r2, [sp, #28]
 80136cc:	4654      	mov	r4, sl
 80136ce:	2000      	movs	r0, #0
 80136d0:	f04f 0c0a 	mov.w	ip, #10
 80136d4:	4621      	mov	r1, r4
 80136d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136da:	3b30      	subs	r3, #48	@ 0x30
 80136dc:	2b09      	cmp	r3, #9
 80136de:	d94b      	bls.n	8013778 <_svfiprintf_r+0x17c>
 80136e0:	b1b0      	cbz	r0, 8013710 <_svfiprintf_r+0x114>
 80136e2:	9207      	str	r2, [sp, #28]
 80136e4:	e014      	b.n	8013710 <_svfiprintf_r+0x114>
 80136e6:	eba0 0308 	sub.w	r3, r0, r8
 80136ea:	fa09 f303 	lsl.w	r3, r9, r3
 80136ee:	4313      	orrs	r3, r2
 80136f0:	9304      	str	r3, [sp, #16]
 80136f2:	46a2      	mov	sl, r4
 80136f4:	e7d2      	b.n	801369c <_svfiprintf_r+0xa0>
 80136f6:	9b03      	ldr	r3, [sp, #12]
 80136f8:	1d19      	adds	r1, r3, #4
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	9103      	str	r1, [sp, #12]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	bfbb      	ittet	lt
 8013702:	425b      	neglt	r3, r3
 8013704:	f042 0202 	orrlt.w	r2, r2, #2
 8013708:	9307      	strge	r3, [sp, #28]
 801370a:	9307      	strlt	r3, [sp, #28]
 801370c:	bfb8      	it	lt
 801370e:	9204      	strlt	r2, [sp, #16]
 8013710:	7823      	ldrb	r3, [r4, #0]
 8013712:	2b2e      	cmp	r3, #46	@ 0x2e
 8013714:	d10a      	bne.n	801372c <_svfiprintf_r+0x130>
 8013716:	7863      	ldrb	r3, [r4, #1]
 8013718:	2b2a      	cmp	r3, #42	@ 0x2a
 801371a:	d132      	bne.n	8013782 <_svfiprintf_r+0x186>
 801371c:	9b03      	ldr	r3, [sp, #12]
 801371e:	1d1a      	adds	r2, r3, #4
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	9203      	str	r2, [sp, #12]
 8013724:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013728:	3402      	adds	r4, #2
 801372a:	9305      	str	r3, [sp, #20]
 801372c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80137f0 <_svfiprintf_r+0x1f4>
 8013730:	7821      	ldrb	r1, [r4, #0]
 8013732:	2203      	movs	r2, #3
 8013734:	4650      	mov	r0, sl
 8013736:	f7ec fd4b 	bl	80001d0 <memchr>
 801373a:	b138      	cbz	r0, 801374c <_svfiprintf_r+0x150>
 801373c:	9b04      	ldr	r3, [sp, #16]
 801373e:	eba0 000a 	sub.w	r0, r0, sl
 8013742:	2240      	movs	r2, #64	@ 0x40
 8013744:	4082      	lsls	r2, r0
 8013746:	4313      	orrs	r3, r2
 8013748:	3401      	adds	r4, #1
 801374a:	9304      	str	r3, [sp, #16]
 801374c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013750:	4824      	ldr	r0, [pc, #144]	@ (80137e4 <_svfiprintf_r+0x1e8>)
 8013752:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013756:	2206      	movs	r2, #6
 8013758:	f7ec fd3a 	bl	80001d0 <memchr>
 801375c:	2800      	cmp	r0, #0
 801375e:	d036      	beq.n	80137ce <_svfiprintf_r+0x1d2>
 8013760:	4b21      	ldr	r3, [pc, #132]	@ (80137e8 <_svfiprintf_r+0x1ec>)
 8013762:	bb1b      	cbnz	r3, 80137ac <_svfiprintf_r+0x1b0>
 8013764:	9b03      	ldr	r3, [sp, #12]
 8013766:	3307      	adds	r3, #7
 8013768:	f023 0307 	bic.w	r3, r3, #7
 801376c:	3308      	adds	r3, #8
 801376e:	9303      	str	r3, [sp, #12]
 8013770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013772:	4433      	add	r3, r6
 8013774:	9309      	str	r3, [sp, #36]	@ 0x24
 8013776:	e76a      	b.n	801364e <_svfiprintf_r+0x52>
 8013778:	fb0c 3202 	mla	r2, ip, r2, r3
 801377c:	460c      	mov	r4, r1
 801377e:	2001      	movs	r0, #1
 8013780:	e7a8      	b.n	80136d4 <_svfiprintf_r+0xd8>
 8013782:	2300      	movs	r3, #0
 8013784:	3401      	adds	r4, #1
 8013786:	9305      	str	r3, [sp, #20]
 8013788:	4619      	mov	r1, r3
 801378a:	f04f 0c0a 	mov.w	ip, #10
 801378e:	4620      	mov	r0, r4
 8013790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013794:	3a30      	subs	r2, #48	@ 0x30
 8013796:	2a09      	cmp	r2, #9
 8013798:	d903      	bls.n	80137a2 <_svfiprintf_r+0x1a6>
 801379a:	2b00      	cmp	r3, #0
 801379c:	d0c6      	beq.n	801372c <_svfiprintf_r+0x130>
 801379e:	9105      	str	r1, [sp, #20]
 80137a0:	e7c4      	b.n	801372c <_svfiprintf_r+0x130>
 80137a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80137a6:	4604      	mov	r4, r0
 80137a8:	2301      	movs	r3, #1
 80137aa:	e7f0      	b.n	801378e <_svfiprintf_r+0x192>
 80137ac:	ab03      	add	r3, sp, #12
 80137ae:	9300      	str	r3, [sp, #0]
 80137b0:	462a      	mov	r2, r5
 80137b2:	4b0e      	ldr	r3, [pc, #56]	@ (80137ec <_svfiprintf_r+0x1f0>)
 80137b4:	a904      	add	r1, sp, #16
 80137b6:	4638      	mov	r0, r7
 80137b8:	f7fc fd74 	bl	80102a4 <_printf_float>
 80137bc:	1c42      	adds	r2, r0, #1
 80137be:	4606      	mov	r6, r0
 80137c0:	d1d6      	bne.n	8013770 <_svfiprintf_r+0x174>
 80137c2:	89ab      	ldrh	r3, [r5, #12]
 80137c4:	065b      	lsls	r3, r3, #25
 80137c6:	f53f af2d 	bmi.w	8013624 <_svfiprintf_r+0x28>
 80137ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80137cc:	e72c      	b.n	8013628 <_svfiprintf_r+0x2c>
 80137ce:	ab03      	add	r3, sp, #12
 80137d0:	9300      	str	r3, [sp, #0]
 80137d2:	462a      	mov	r2, r5
 80137d4:	4b05      	ldr	r3, [pc, #20]	@ (80137ec <_svfiprintf_r+0x1f0>)
 80137d6:	a904      	add	r1, sp, #16
 80137d8:	4638      	mov	r0, r7
 80137da:	f7fc fffb 	bl	80107d4 <_printf_i>
 80137de:	e7ed      	b.n	80137bc <_svfiprintf_r+0x1c0>
 80137e0:	08014869 	.word	0x08014869
 80137e4:	08014873 	.word	0x08014873
 80137e8:	080102a5 	.word	0x080102a5
 80137ec:	08013545 	.word	0x08013545
 80137f0:	0801486f 	.word	0x0801486f

080137f4 <__sflush_r>:
 80137f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80137f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137fc:	0716      	lsls	r6, r2, #28
 80137fe:	4605      	mov	r5, r0
 8013800:	460c      	mov	r4, r1
 8013802:	d454      	bmi.n	80138ae <__sflush_r+0xba>
 8013804:	684b      	ldr	r3, [r1, #4]
 8013806:	2b00      	cmp	r3, #0
 8013808:	dc02      	bgt.n	8013810 <__sflush_r+0x1c>
 801380a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801380c:	2b00      	cmp	r3, #0
 801380e:	dd48      	ble.n	80138a2 <__sflush_r+0xae>
 8013810:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013812:	2e00      	cmp	r6, #0
 8013814:	d045      	beq.n	80138a2 <__sflush_r+0xae>
 8013816:	2300      	movs	r3, #0
 8013818:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801381c:	682f      	ldr	r7, [r5, #0]
 801381e:	6a21      	ldr	r1, [r4, #32]
 8013820:	602b      	str	r3, [r5, #0]
 8013822:	d030      	beq.n	8013886 <__sflush_r+0x92>
 8013824:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013826:	89a3      	ldrh	r3, [r4, #12]
 8013828:	0759      	lsls	r1, r3, #29
 801382a:	d505      	bpl.n	8013838 <__sflush_r+0x44>
 801382c:	6863      	ldr	r3, [r4, #4]
 801382e:	1ad2      	subs	r2, r2, r3
 8013830:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013832:	b10b      	cbz	r3, 8013838 <__sflush_r+0x44>
 8013834:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013836:	1ad2      	subs	r2, r2, r3
 8013838:	2300      	movs	r3, #0
 801383a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801383c:	6a21      	ldr	r1, [r4, #32]
 801383e:	4628      	mov	r0, r5
 8013840:	47b0      	blx	r6
 8013842:	1c43      	adds	r3, r0, #1
 8013844:	89a3      	ldrh	r3, [r4, #12]
 8013846:	d106      	bne.n	8013856 <__sflush_r+0x62>
 8013848:	6829      	ldr	r1, [r5, #0]
 801384a:	291d      	cmp	r1, #29
 801384c:	d82b      	bhi.n	80138a6 <__sflush_r+0xb2>
 801384e:	4a2a      	ldr	r2, [pc, #168]	@ (80138f8 <__sflush_r+0x104>)
 8013850:	40ca      	lsrs	r2, r1
 8013852:	07d6      	lsls	r6, r2, #31
 8013854:	d527      	bpl.n	80138a6 <__sflush_r+0xb2>
 8013856:	2200      	movs	r2, #0
 8013858:	6062      	str	r2, [r4, #4]
 801385a:	04d9      	lsls	r1, r3, #19
 801385c:	6922      	ldr	r2, [r4, #16]
 801385e:	6022      	str	r2, [r4, #0]
 8013860:	d504      	bpl.n	801386c <__sflush_r+0x78>
 8013862:	1c42      	adds	r2, r0, #1
 8013864:	d101      	bne.n	801386a <__sflush_r+0x76>
 8013866:	682b      	ldr	r3, [r5, #0]
 8013868:	b903      	cbnz	r3, 801386c <__sflush_r+0x78>
 801386a:	6560      	str	r0, [r4, #84]	@ 0x54
 801386c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801386e:	602f      	str	r7, [r5, #0]
 8013870:	b1b9      	cbz	r1, 80138a2 <__sflush_r+0xae>
 8013872:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013876:	4299      	cmp	r1, r3
 8013878:	d002      	beq.n	8013880 <__sflush_r+0x8c>
 801387a:	4628      	mov	r0, r5
 801387c:	f7fe fae8 	bl	8011e50 <_free_r>
 8013880:	2300      	movs	r3, #0
 8013882:	6363      	str	r3, [r4, #52]	@ 0x34
 8013884:	e00d      	b.n	80138a2 <__sflush_r+0xae>
 8013886:	2301      	movs	r3, #1
 8013888:	4628      	mov	r0, r5
 801388a:	47b0      	blx	r6
 801388c:	4602      	mov	r2, r0
 801388e:	1c50      	adds	r0, r2, #1
 8013890:	d1c9      	bne.n	8013826 <__sflush_r+0x32>
 8013892:	682b      	ldr	r3, [r5, #0]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d0c6      	beq.n	8013826 <__sflush_r+0x32>
 8013898:	2b1d      	cmp	r3, #29
 801389a:	d001      	beq.n	80138a0 <__sflush_r+0xac>
 801389c:	2b16      	cmp	r3, #22
 801389e:	d11e      	bne.n	80138de <__sflush_r+0xea>
 80138a0:	602f      	str	r7, [r5, #0]
 80138a2:	2000      	movs	r0, #0
 80138a4:	e022      	b.n	80138ec <__sflush_r+0xf8>
 80138a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80138aa:	b21b      	sxth	r3, r3
 80138ac:	e01b      	b.n	80138e6 <__sflush_r+0xf2>
 80138ae:	690f      	ldr	r7, [r1, #16]
 80138b0:	2f00      	cmp	r7, #0
 80138b2:	d0f6      	beq.n	80138a2 <__sflush_r+0xae>
 80138b4:	0793      	lsls	r3, r2, #30
 80138b6:	680e      	ldr	r6, [r1, #0]
 80138b8:	bf08      	it	eq
 80138ba:	694b      	ldreq	r3, [r1, #20]
 80138bc:	600f      	str	r7, [r1, #0]
 80138be:	bf18      	it	ne
 80138c0:	2300      	movne	r3, #0
 80138c2:	eba6 0807 	sub.w	r8, r6, r7
 80138c6:	608b      	str	r3, [r1, #8]
 80138c8:	f1b8 0f00 	cmp.w	r8, #0
 80138cc:	dde9      	ble.n	80138a2 <__sflush_r+0xae>
 80138ce:	6a21      	ldr	r1, [r4, #32]
 80138d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80138d2:	4643      	mov	r3, r8
 80138d4:	463a      	mov	r2, r7
 80138d6:	4628      	mov	r0, r5
 80138d8:	47b0      	blx	r6
 80138da:	2800      	cmp	r0, #0
 80138dc:	dc08      	bgt.n	80138f0 <__sflush_r+0xfc>
 80138de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80138e6:	81a3      	strh	r3, [r4, #12]
 80138e8:	f04f 30ff 	mov.w	r0, #4294967295
 80138ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138f0:	4407      	add	r7, r0
 80138f2:	eba8 0800 	sub.w	r8, r8, r0
 80138f6:	e7e7      	b.n	80138c8 <__sflush_r+0xd4>
 80138f8:	20400001 	.word	0x20400001

080138fc <_fflush_r>:
 80138fc:	b538      	push	{r3, r4, r5, lr}
 80138fe:	690b      	ldr	r3, [r1, #16]
 8013900:	4605      	mov	r5, r0
 8013902:	460c      	mov	r4, r1
 8013904:	b913      	cbnz	r3, 801390c <_fflush_r+0x10>
 8013906:	2500      	movs	r5, #0
 8013908:	4628      	mov	r0, r5
 801390a:	bd38      	pop	{r3, r4, r5, pc}
 801390c:	b118      	cbz	r0, 8013916 <_fflush_r+0x1a>
 801390e:	6a03      	ldr	r3, [r0, #32]
 8013910:	b90b      	cbnz	r3, 8013916 <_fflush_r+0x1a>
 8013912:	f7fd fb17 	bl	8010f44 <__sinit>
 8013916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d0f3      	beq.n	8013906 <_fflush_r+0xa>
 801391e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013920:	07d0      	lsls	r0, r2, #31
 8013922:	d404      	bmi.n	801392e <_fflush_r+0x32>
 8013924:	0599      	lsls	r1, r3, #22
 8013926:	d402      	bmi.n	801392e <_fflush_r+0x32>
 8013928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801392a:	f7fd fc34 	bl	8011196 <__retarget_lock_acquire_recursive>
 801392e:	4628      	mov	r0, r5
 8013930:	4621      	mov	r1, r4
 8013932:	f7ff ff5f 	bl	80137f4 <__sflush_r>
 8013936:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013938:	07da      	lsls	r2, r3, #31
 801393a:	4605      	mov	r5, r0
 801393c:	d4e4      	bmi.n	8013908 <_fflush_r+0xc>
 801393e:	89a3      	ldrh	r3, [r4, #12]
 8013940:	059b      	lsls	r3, r3, #22
 8013942:	d4e1      	bmi.n	8013908 <_fflush_r+0xc>
 8013944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013946:	f7fd fc27 	bl	8011198 <__retarget_lock_release_recursive>
 801394a:	e7dd      	b.n	8013908 <_fflush_r+0xc>

0801394c <memmove>:
 801394c:	4288      	cmp	r0, r1
 801394e:	b510      	push	{r4, lr}
 8013950:	eb01 0402 	add.w	r4, r1, r2
 8013954:	d902      	bls.n	801395c <memmove+0x10>
 8013956:	4284      	cmp	r4, r0
 8013958:	4623      	mov	r3, r4
 801395a:	d807      	bhi.n	801396c <memmove+0x20>
 801395c:	1e43      	subs	r3, r0, #1
 801395e:	42a1      	cmp	r1, r4
 8013960:	d008      	beq.n	8013974 <memmove+0x28>
 8013962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013966:	f803 2f01 	strb.w	r2, [r3, #1]!
 801396a:	e7f8      	b.n	801395e <memmove+0x12>
 801396c:	4402      	add	r2, r0
 801396e:	4601      	mov	r1, r0
 8013970:	428a      	cmp	r2, r1
 8013972:	d100      	bne.n	8013976 <memmove+0x2a>
 8013974:	bd10      	pop	{r4, pc}
 8013976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801397a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801397e:	e7f7      	b.n	8013970 <memmove+0x24>

08013980 <strncmp>:
 8013980:	b510      	push	{r4, lr}
 8013982:	b16a      	cbz	r2, 80139a0 <strncmp+0x20>
 8013984:	3901      	subs	r1, #1
 8013986:	1884      	adds	r4, r0, r2
 8013988:	f810 2b01 	ldrb.w	r2, [r0], #1
 801398c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013990:	429a      	cmp	r2, r3
 8013992:	d103      	bne.n	801399c <strncmp+0x1c>
 8013994:	42a0      	cmp	r0, r4
 8013996:	d001      	beq.n	801399c <strncmp+0x1c>
 8013998:	2a00      	cmp	r2, #0
 801399a:	d1f5      	bne.n	8013988 <strncmp+0x8>
 801399c:	1ad0      	subs	r0, r2, r3
 801399e:	bd10      	pop	{r4, pc}
 80139a0:	4610      	mov	r0, r2
 80139a2:	e7fc      	b.n	801399e <strncmp+0x1e>

080139a4 <memcpy>:
 80139a4:	440a      	add	r2, r1
 80139a6:	4291      	cmp	r1, r2
 80139a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80139ac:	d100      	bne.n	80139b0 <memcpy+0xc>
 80139ae:	4770      	bx	lr
 80139b0:	b510      	push	{r4, lr}
 80139b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80139b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80139ba:	4291      	cmp	r1, r2
 80139bc:	d1f9      	bne.n	80139b2 <memcpy+0xe>
 80139be:	bd10      	pop	{r4, pc}

080139c0 <nan>:
 80139c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80139c8 <nan+0x8>
 80139c4:	4770      	bx	lr
 80139c6:	bf00      	nop
 80139c8:	00000000 	.word	0x00000000
 80139cc:	7ff80000 	.word	0x7ff80000

080139d0 <__assert_func>:
 80139d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80139d2:	4614      	mov	r4, r2
 80139d4:	461a      	mov	r2, r3
 80139d6:	4b09      	ldr	r3, [pc, #36]	@ (80139fc <__assert_func+0x2c>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	4605      	mov	r5, r0
 80139dc:	68d8      	ldr	r0, [r3, #12]
 80139de:	b14c      	cbz	r4, 80139f4 <__assert_func+0x24>
 80139e0:	4b07      	ldr	r3, [pc, #28]	@ (8013a00 <__assert_func+0x30>)
 80139e2:	9100      	str	r1, [sp, #0]
 80139e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80139e8:	4906      	ldr	r1, [pc, #24]	@ (8013a04 <__assert_func+0x34>)
 80139ea:	462b      	mov	r3, r5
 80139ec:	f000 fba8 	bl	8014140 <fiprintf>
 80139f0:	f000 fbb8 	bl	8014164 <abort>
 80139f4:	4b04      	ldr	r3, [pc, #16]	@ (8013a08 <__assert_func+0x38>)
 80139f6:	461c      	mov	r4, r3
 80139f8:	e7f3      	b.n	80139e2 <__assert_func+0x12>
 80139fa:	bf00      	nop
 80139fc:	20000024 	.word	0x20000024
 8013a00:	08014882 	.word	0x08014882
 8013a04:	0801488f 	.word	0x0801488f
 8013a08:	080148bd 	.word	0x080148bd

08013a0c <_calloc_r>:
 8013a0c:	b570      	push	{r4, r5, r6, lr}
 8013a0e:	fba1 5402 	umull	r5, r4, r1, r2
 8013a12:	b934      	cbnz	r4, 8013a22 <_calloc_r+0x16>
 8013a14:	4629      	mov	r1, r5
 8013a16:	f7fc fb19 	bl	801004c <_malloc_r>
 8013a1a:	4606      	mov	r6, r0
 8013a1c:	b928      	cbnz	r0, 8013a2a <_calloc_r+0x1e>
 8013a1e:	4630      	mov	r0, r6
 8013a20:	bd70      	pop	{r4, r5, r6, pc}
 8013a22:	220c      	movs	r2, #12
 8013a24:	6002      	str	r2, [r0, #0]
 8013a26:	2600      	movs	r6, #0
 8013a28:	e7f9      	b.n	8013a1e <_calloc_r+0x12>
 8013a2a:	462a      	mov	r2, r5
 8013a2c:	4621      	mov	r1, r4
 8013a2e:	f7fd fb24 	bl	801107a <memset>
 8013a32:	e7f4      	b.n	8013a1e <_calloc_r+0x12>

08013a34 <rshift>:
 8013a34:	6903      	ldr	r3, [r0, #16]
 8013a36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013a3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013a42:	f100 0414 	add.w	r4, r0, #20
 8013a46:	dd45      	ble.n	8013ad4 <rshift+0xa0>
 8013a48:	f011 011f 	ands.w	r1, r1, #31
 8013a4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013a50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013a54:	d10c      	bne.n	8013a70 <rshift+0x3c>
 8013a56:	f100 0710 	add.w	r7, r0, #16
 8013a5a:	4629      	mov	r1, r5
 8013a5c:	42b1      	cmp	r1, r6
 8013a5e:	d334      	bcc.n	8013aca <rshift+0x96>
 8013a60:	1a9b      	subs	r3, r3, r2
 8013a62:	009b      	lsls	r3, r3, #2
 8013a64:	1eea      	subs	r2, r5, #3
 8013a66:	4296      	cmp	r6, r2
 8013a68:	bf38      	it	cc
 8013a6a:	2300      	movcc	r3, #0
 8013a6c:	4423      	add	r3, r4
 8013a6e:	e015      	b.n	8013a9c <rshift+0x68>
 8013a70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013a74:	f1c1 0820 	rsb	r8, r1, #32
 8013a78:	40cf      	lsrs	r7, r1
 8013a7a:	f105 0e04 	add.w	lr, r5, #4
 8013a7e:	46a1      	mov	r9, r4
 8013a80:	4576      	cmp	r6, lr
 8013a82:	46f4      	mov	ip, lr
 8013a84:	d815      	bhi.n	8013ab2 <rshift+0x7e>
 8013a86:	1a9a      	subs	r2, r3, r2
 8013a88:	0092      	lsls	r2, r2, #2
 8013a8a:	3a04      	subs	r2, #4
 8013a8c:	3501      	adds	r5, #1
 8013a8e:	42ae      	cmp	r6, r5
 8013a90:	bf38      	it	cc
 8013a92:	2200      	movcc	r2, #0
 8013a94:	18a3      	adds	r3, r4, r2
 8013a96:	50a7      	str	r7, [r4, r2]
 8013a98:	b107      	cbz	r7, 8013a9c <rshift+0x68>
 8013a9a:	3304      	adds	r3, #4
 8013a9c:	1b1a      	subs	r2, r3, r4
 8013a9e:	42a3      	cmp	r3, r4
 8013aa0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013aa4:	bf08      	it	eq
 8013aa6:	2300      	moveq	r3, #0
 8013aa8:	6102      	str	r2, [r0, #16]
 8013aaa:	bf08      	it	eq
 8013aac:	6143      	streq	r3, [r0, #20]
 8013aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ab2:	f8dc c000 	ldr.w	ip, [ip]
 8013ab6:	fa0c fc08 	lsl.w	ip, ip, r8
 8013aba:	ea4c 0707 	orr.w	r7, ip, r7
 8013abe:	f849 7b04 	str.w	r7, [r9], #4
 8013ac2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013ac6:	40cf      	lsrs	r7, r1
 8013ac8:	e7da      	b.n	8013a80 <rshift+0x4c>
 8013aca:	f851 cb04 	ldr.w	ip, [r1], #4
 8013ace:	f847 cf04 	str.w	ip, [r7, #4]!
 8013ad2:	e7c3      	b.n	8013a5c <rshift+0x28>
 8013ad4:	4623      	mov	r3, r4
 8013ad6:	e7e1      	b.n	8013a9c <rshift+0x68>

08013ad8 <__hexdig_fun>:
 8013ad8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8013adc:	2b09      	cmp	r3, #9
 8013ade:	d802      	bhi.n	8013ae6 <__hexdig_fun+0xe>
 8013ae0:	3820      	subs	r0, #32
 8013ae2:	b2c0      	uxtb	r0, r0
 8013ae4:	4770      	bx	lr
 8013ae6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8013aea:	2b05      	cmp	r3, #5
 8013aec:	d801      	bhi.n	8013af2 <__hexdig_fun+0x1a>
 8013aee:	3847      	subs	r0, #71	@ 0x47
 8013af0:	e7f7      	b.n	8013ae2 <__hexdig_fun+0xa>
 8013af2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8013af6:	2b05      	cmp	r3, #5
 8013af8:	d801      	bhi.n	8013afe <__hexdig_fun+0x26>
 8013afa:	3827      	subs	r0, #39	@ 0x27
 8013afc:	e7f1      	b.n	8013ae2 <__hexdig_fun+0xa>
 8013afe:	2000      	movs	r0, #0
 8013b00:	4770      	bx	lr
	...

08013b04 <__gethex>:
 8013b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b08:	b085      	sub	sp, #20
 8013b0a:	468a      	mov	sl, r1
 8013b0c:	9302      	str	r3, [sp, #8]
 8013b0e:	680b      	ldr	r3, [r1, #0]
 8013b10:	9001      	str	r0, [sp, #4]
 8013b12:	4690      	mov	r8, r2
 8013b14:	1c9c      	adds	r4, r3, #2
 8013b16:	46a1      	mov	r9, r4
 8013b18:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013b1c:	2830      	cmp	r0, #48	@ 0x30
 8013b1e:	d0fa      	beq.n	8013b16 <__gethex+0x12>
 8013b20:	eba9 0303 	sub.w	r3, r9, r3
 8013b24:	f1a3 0b02 	sub.w	fp, r3, #2
 8013b28:	f7ff ffd6 	bl	8013ad8 <__hexdig_fun>
 8013b2c:	4605      	mov	r5, r0
 8013b2e:	2800      	cmp	r0, #0
 8013b30:	d168      	bne.n	8013c04 <__gethex+0x100>
 8013b32:	49a0      	ldr	r1, [pc, #640]	@ (8013db4 <__gethex+0x2b0>)
 8013b34:	2201      	movs	r2, #1
 8013b36:	4648      	mov	r0, r9
 8013b38:	f7ff ff22 	bl	8013980 <strncmp>
 8013b3c:	4607      	mov	r7, r0
 8013b3e:	2800      	cmp	r0, #0
 8013b40:	d167      	bne.n	8013c12 <__gethex+0x10e>
 8013b42:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013b46:	4626      	mov	r6, r4
 8013b48:	f7ff ffc6 	bl	8013ad8 <__hexdig_fun>
 8013b4c:	2800      	cmp	r0, #0
 8013b4e:	d062      	beq.n	8013c16 <__gethex+0x112>
 8013b50:	4623      	mov	r3, r4
 8013b52:	7818      	ldrb	r0, [r3, #0]
 8013b54:	2830      	cmp	r0, #48	@ 0x30
 8013b56:	4699      	mov	r9, r3
 8013b58:	f103 0301 	add.w	r3, r3, #1
 8013b5c:	d0f9      	beq.n	8013b52 <__gethex+0x4e>
 8013b5e:	f7ff ffbb 	bl	8013ad8 <__hexdig_fun>
 8013b62:	fab0 f580 	clz	r5, r0
 8013b66:	096d      	lsrs	r5, r5, #5
 8013b68:	f04f 0b01 	mov.w	fp, #1
 8013b6c:	464a      	mov	r2, r9
 8013b6e:	4616      	mov	r6, r2
 8013b70:	3201      	adds	r2, #1
 8013b72:	7830      	ldrb	r0, [r6, #0]
 8013b74:	f7ff ffb0 	bl	8013ad8 <__hexdig_fun>
 8013b78:	2800      	cmp	r0, #0
 8013b7a:	d1f8      	bne.n	8013b6e <__gethex+0x6a>
 8013b7c:	498d      	ldr	r1, [pc, #564]	@ (8013db4 <__gethex+0x2b0>)
 8013b7e:	2201      	movs	r2, #1
 8013b80:	4630      	mov	r0, r6
 8013b82:	f7ff fefd 	bl	8013980 <strncmp>
 8013b86:	2800      	cmp	r0, #0
 8013b88:	d13f      	bne.n	8013c0a <__gethex+0x106>
 8013b8a:	b944      	cbnz	r4, 8013b9e <__gethex+0x9a>
 8013b8c:	1c74      	adds	r4, r6, #1
 8013b8e:	4622      	mov	r2, r4
 8013b90:	4616      	mov	r6, r2
 8013b92:	3201      	adds	r2, #1
 8013b94:	7830      	ldrb	r0, [r6, #0]
 8013b96:	f7ff ff9f 	bl	8013ad8 <__hexdig_fun>
 8013b9a:	2800      	cmp	r0, #0
 8013b9c:	d1f8      	bne.n	8013b90 <__gethex+0x8c>
 8013b9e:	1ba4      	subs	r4, r4, r6
 8013ba0:	00a7      	lsls	r7, r4, #2
 8013ba2:	7833      	ldrb	r3, [r6, #0]
 8013ba4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8013ba8:	2b50      	cmp	r3, #80	@ 0x50
 8013baa:	d13e      	bne.n	8013c2a <__gethex+0x126>
 8013bac:	7873      	ldrb	r3, [r6, #1]
 8013bae:	2b2b      	cmp	r3, #43	@ 0x2b
 8013bb0:	d033      	beq.n	8013c1a <__gethex+0x116>
 8013bb2:	2b2d      	cmp	r3, #45	@ 0x2d
 8013bb4:	d034      	beq.n	8013c20 <__gethex+0x11c>
 8013bb6:	1c71      	adds	r1, r6, #1
 8013bb8:	2400      	movs	r4, #0
 8013bba:	7808      	ldrb	r0, [r1, #0]
 8013bbc:	f7ff ff8c 	bl	8013ad8 <__hexdig_fun>
 8013bc0:	1e43      	subs	r3, r0, #1
 8013bc2:	b2db      	uxtb	r3, r3
 8013bc4:	2b18      	cmp	r3, #24
 8013bc6:	d830      	bhi.n	8013c2a <__gethex+0x126>
 8013bc8:	f1a0 0210 	sub.w	r2, r0, #16
 8013bcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013bd0:	f7ff ff82 	bl	8013ad8 <__hexdig_fun>
 8013bd4:	f100 3cff 	add.w	ip, r0, #4294967295
 8013bd8:	fa5f fc8c 	uxtb.w	ip, ip
 8013bdc:	f1bc 0f18 	cmp.w	ip, #24
 8013be0:	f04f 030a 	mov.w	r3, #10
 8013be4:	d91e      	bls.n	8013c24 <__gethex+0x120>
 8013be6:	b104      	cbz	r4, 8013bea <__gethex+0xe6>
 8013be8:	4252      	negs	r2, r2
 8013bea:	4417      	add	r7, r2
 8013bec:	f8ca 1000 	str.w	r1, [sl]
 8013bf0:	b1ed      	cbz	r5, 8013c2e <__gethex+0x12a>
 8013bf2:	f1bb 0f00 	cmp.w	fp, #0
 8013bf6:	bf0c      	ite	eq
 8013bf8:	2506      	moveq	r5, #6
 8013bfa:	2500      	movne	r5, #0
 8013bfc:	4628      	mov	r0, r5
 8013bfe:	b005      	add	sp, #20
 8013c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c04:	2500      	movs	r5, #0
 8013c06:	462c      	mov	r4, r5
 8013c08:	e7b0      	b.n	8013b6c <__gethex+0x68>
 8013c0a:	2c00      	cmp	r4, #0
 8013c0c:	d1c7      	bne.n	8013b9e <__gethex+0x9a>
 8013c0e:	4627      	mov	r7, r4
 8013c10:	e7c7      	b.n	8013ba2 <__gethex+0x9e>
 8013c12:	464e      	mov	r6, r9
 8013c14:	462f      	mov	r7, r5
 8013c16:	2501      	movs	r5, #1
 8013c18:	e7c3      	b.n	8013ba2 <__gethex+0x9e>
 8013c1a:	2400      	movs	r4, #0
 8013c1c:	1cb1      	adds	r1, r6, #2
 8013c1e:	e7cc      	b.n	8013bba <__gethex+0xb6>
 8013c20:	2401      	movs	r4, #1
 8013c22:	e7fb      	b.n	8013c1c <__gethex+0x118>
 8013c24:	fb03 0002 	mla	r0, r3, r2, r0
 8013c28:	e7ce      	b.n	8013bc8 <__gethex+0xc4>
 8013c2a:	4631      	mov	r1, r6
 8013c2c:	e7de      	b.n	8013bec <__gethex+0xe8>
 8013c2e:	eba6 0309 	sub.w	r3, r6, r9
 8013c32:	3b01      	subs	r3, #1
 8013c34:	4629      	mov	r1, r5
 8013c36:	2b07      	cmp	r3, #7
 8013c38:	dc0a      	bgt.n	8013c50 <__gethex+0x14c>
 8013c3a:	9801      	ldr	r0, [sp, #4]
 8013c3c:	f7fe f952 	bl	8011ee4 <_Balloc>
 8013c40:	4604      	mov	r4, r0
 8013c42:	b940      	cbnz	r0, 8013c56 <__gethex+0x152>
 8013c44:	4b5c      	ldr	r3, [pc, #368]	@ (8013db8 <__gethex+0x2b4>)
 8013c46:	4602      	mov	r2, r0
 8013c48:	21e4      	movs	r1, #228	@ 0xe4
 8013c4a:	485c      	ldr	r0, [pc, #368]	@ (8013dbc <__gethex+0x2b8>)
 8013c4c:	f7ff fec0 	bl	80139d0 <__assert_func>
 8013c50:	3101      	adds	r1, #1
 8013c52:	105b      	asrs	r3, r3, #1
 8013c54:	e7ef      	b.n	8013c36 <__gethex+0x132>
 8013c56:	f100 0a14 	add.w	sl, r0, #20
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	4655      	mov	r5, sl
 8013c5e:	469b      	mov	fp, r3
 8013c60:	45b1      	cmp	r9, r6
 8013c62:	d337      	bcc.n	8013cd4 <__gethex+0x1d0>
 8013c64:	f845 bb04 	str.w	fp, [r5], #4
 8013c68:	eba5 050a 	sub.w	r5, r5, sl
 8013c6c:	10ad      	asrs	r5, r5, #2
 8013c6e:	6125      	str	r5, [r4, #16]
 8013c70:	4658      	mov	r0, fp
 8013c72:	f7fe fa29 	bl	80120c8 <__hi0bits>
 8013c76:	016d      	lsls	r5, r5, #5
 8013c78:	f8d8 6000 	ldr.w	r6, [r8]
 8013c7c:	1a2d      	subs	r5, r5, r0
 8013c7e:	42b5      	cmp	r5, r6
 8013c80:	dd54      	ble.n	8013d2c <__gethex+0x228>
 8013c82:	1bad      	subs	r5, r5, r6
 8013c84:	4629      	mov	r1, r5
 8013c86:	4620      	mov	r0, r4
 8013c88:	f7fe fdb5 	bl	80127f6 <__any_on>
 8013c8c:	4681      	mov	r9, r0
 8013c8e:	b178      	cbz	r0, 8013cb0 <__gethex+0x1ac>
 8013c90:	1e6b      	subs	r3, r5, #1
 8013c92:	1159      	asrs	r1, r3, #5
 8013c94:	f003 021f 	and.w	r2, r3, #31
 8013c98:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013c9c:	f04f 0901 	mov.w	r9, #1
 8013ca0:	fa09 f202 	lsl.w	r2, r9, r2
 8013ca4:	420a      	tst	r2, r1
 8013ca6:	d003      	beq.n	8013cb0 <__gethex+0x1ac>
 8013ca8:	454b      	cmp	r3, r9
 8013caa:	dc36      	bgt.n	8013d1a <__gethex+0x216>
 8013cac:	f04f 0902 	mov.w	r9, #2
 8013cb0:	4629      	mov	r1, r5
 8013cb2:	4620      	mov	r0, r4
 8013cb4:	f7ff febe 	bl	8013a34 <rshift>
 8013cb8:	442f      	add	r7, r5
 8013cba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013cbe:	42bb      	cmp	r3, r7
 8013cc0:	da42      	bge.n	8013d48 <__gethex+0x244>
 8013cc2:	9801      	ldr	r0, [sp, #4]
 8013cc4:	4621      	mov	r1, r4
 8013cc6:	f7fe f94d 	bl	8011f64 <_Bfree>
 8013cca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013ccc:	2300      	movs	r3, #0
 8013cce:	6013      	str	r3, [r2, #0]
 8013cd0:	25a3      	movs	r5, #163	@ 0xa3
 8013cd2:	e793      	b.n	8013bfc <__gethex+0xf8>
 8013cd4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8013cd8:	2a2e      	cmp	r2, #46	@ 0x2e
 8013cda:	d012      	beq.n	8013d02 <__gethex+0x1fe>
 8013cdc:	2b20      	cmp	r3, #32
 8013cde:	d104      	bne.n	8013cea <__gethex+0x1e6>
 8013ce0:	f845 bb04 	str.w	fp, [r5], #4
 8013ce4:	f04f 0b00 	mov.w	fp, #0
 8013ce8:	465b      	mov	r3, fp
 8013cea:	7830      	ldrb	r0, [r6, #0]
 8013cec:	9303      	str	r3, [sp, #12]
 8013cee:	f7ff fef3 	bl	8013ad8 <__hexdig_fun>
 8013cf2:	9b03      	ldr	r3, [sp, #12]
 8013cf4:	f000 000f 	and.w	r0, r0, #15
 8013cf8:	4098      	lsls	r0, r3
 8013cfa:	ea4b 0b00 	orr.w	fp, fp, r0
 8013cfe:	3304      	adds	r3, #4
 8013d00:	e7ae      	b.n	8013c60 <__gethex+0x15c>
 8013d02:	45b1      	cmp	r9, r6
 8013d04:	d8ea      	bhi.n	8013cdc <__gethex+0x1d8>
 8013d06:	492b      	ldr	r1, [pc, #172]	@ (8013db4 <__gethex+0x2b0>)
 8013d08:	9303      	str	r3, [sp, #12]
 8013d0a:	2201      	movs	r2, #1
 8013d0c:	4630      	mov	r0, r6
 8013d0e:	f7ff fe37 	bl	8013980 <strncmp>
 8013d12:	9b03      	ldr	r3, [sp, #12]
 8013d14:	2800      	cmp	r0, #0
 8013d16:	d1e1      	bne.n	8013cdc <__gethex+0x1d8>
 8013d18:	e7a2      	b.n	8013c60 <__gethex+0x15c>
 8013d1a:	1ea9      	subs	r1, r5, #2
 8013d1c:	4620      	mov	r0, r4
 8013d1e:	f7fe fd6a 	bl	80127f6 <__any_on>
 8013d22:	2800      	cmp	r0, #0
 8013d24:	d0c2      	beq.n	8013cac <__gethex+0x1a8>
 8013d26:	f04f 0903 	mov.w	r9, #3
 8013d2a:	e7c1      	b.n	8013cb0 <__gethex+0x1ac>
 8013d2c:	da09      	bge.n	8013d42 <__gethex+0x23e>
 8013d2e:	1b75      	subs	r5, r6, r5
 8013d30:	4621      	mov	r1, r4
 8013d32:	9801      	ldr	r0, [sp, #4]
 8013d34:	462a      	mov	r2, r5
 8013d36:	f7fe fb25 	bl	8012384 <__lshift>
 8013d3a:	1b7f      	subs	r7, r7, r5
 8013d3c:	4604      	mov	r4, r0
 8013d3e:	f100 0a14 	add.w	sl, r0, #20
 8013d42:	f04f 0900 	mov.w	r9, #0
 8013d46:	e7b8      	b.n	8013cba <__gethex+0x1b6>
 8013d48:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013d4c:	42bd      	cmp	r5, r7
 8013d4e:	dd6f      	ble.n	8013e30 <__gethex+0x32c>
 8013d50:	1bed      	subs	r5, r5, r7
 8013d52:	42ae      	cmp	r6, r5
 8013d54:	dc34      	bgt.n	8013dc0 <__gethex+0x2bc>
 8013d56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013d5a:	2b02      	cmp	r3, #2
 8013d5c:	d022      	beq.n	8013da4 <__gethex+0x2a0>
 8013d5e:	2b03      	cmp	r3, #3
 8013d60:	d024      	beq.n	8013dac <__gethex+0x2a8>
 8013d62:	2b01      	cmp	r3, #1
 8013d64:	d115      	bne.n	8013d92 <__gethex+0x28e>
 8013d66:	42ae      	cmp	r6, r5
 8013d68:	d113      	bne.n	8013d92 <__gethex+0x28e>
 8013d6a:	2e01      	cmp	r6, #1
 8013d6c:	d10b      	bne.n	8013d86 <__gethex+0x282>
 8013d6e:	9a02      	ldr	r2, [sp, #8]
 8013d70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013d74:	6013      	str	r3, [r2, #0]
 8013d76:	2301      	movs	r3, #1
 8013d78:	6123      	str	r3, [r4, #16]
 8013d7a:	f8ca 3000 	str.w	r3, [sl]
 8013d7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d80:	2562      	movs	r5, #98	@ 0x62
 8013d82:	601c      	str	r4, [r3, #0]
 8013d84:	e73a      	b.n	8013bfc <__gethex+0xf8>
 8013d86:	1e71      	subs	r1, r6, #1
 8013d88:	4620      	mov	r0, r4
 8013d8a:	f7fe fd34 	bl	80127f6 <__any_on>
 8013d8e:	2800      	cmp	r0, #0
 8013d90:	d1ed      	bne.n	8013d6e <__gethex+0x26a>
 8013d92:	9801      	ldr	r0, [sp, #4]
 8013d94:	4621      	mov	r1, r4
 8013d96:	f7fe f8e5 	bl	8011f64 <_Bfree>
 8013d9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	6013      	str	r3, [r2, #0]
 8013da0:	2550      	movs	r5, #80	@ 0x50
 8013da2:	e72b      	b.n	8013bfc <__gethex+0xf8>
 8013da4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d1f3      	bne.n	8013d92 <__gethex+0x28e>
 8013daa:	e7e0      	b.n	8013d6e <__gethex+0x26a>
 8013dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d1dd      	bne.n	8013d6e <__gethex+0x26a>
 8013db2:	e7ee      	b.n	8013d92 <__gethex+0x28e>
 8013db4:	08014867 	.word	0x08014867
 8013db8:	080147fd 	.word	0x080147fd
 8013dbc:	080148be 	.word	0x080148be
 8013dc0:	1e6f      	subs	r7, r5, #1
 8013dc2:	f1b9 0f00 	cmp.w	r9, #0
 8013dc6:	d130      	bne.n	8013e2a <__gethex+0x326>
 8013dc8:	b127      	cbz	r7, 8013dd4 <__gethex+0x2d0>
 8013dca:	4639      	mov	r1, r7
 8013dcc:	4620      	mov	r0, r4
 8013dce:	f7fe fd12 	bl	80127f6 <__any_on>
 8013dd2:	4681      	mov	r9, r0
 8013dd4:	117a      	asrs	r2, r7, #5
 8013dd6:	2301      	movs	r3, #1
 8013dd8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013ddc:	f007 071f 	and.w	r7, r7, #31
 8013de0:	40bb      	lsls	r3, r7
 8013de2:	4213      	tst	r3, r2
 8013de4:	4629      	mov	r1, r5
 8013de6:	4620      	mov	r0, r4
 8013de8:	bf18      	it	ne
 8013dea:	f049 0902 	orrne.w	r9, r9, #2
 8013dee:	f7ff fe21 	bl	8013a34 <rshift>
 8013df2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8013df6:	1b76      	subs	r6, r6, r5
 8013df8:	2502      	movs	r5, #2
 8013dfa:	f1b9 0f00 	cmp.w	r9, #0
 8013dfe:	d047      	beq.n	8013e90 <__gethex+0x38c>
 8013e00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013e04:	2b02      	cmp	r3, #2
 8013e06:	d015      	beq.n	8013e34 <__gethex+0x330>
 8013e08:	2b03      	cmp	r3, #3
 8013e0a:	d017      	beq.n	8013e3c <__gethex+0x338>
 8013e0c:	2b01      	cmp	r3, #1
 8013e0e:	d109      	bne.n	8013e24 <__gethex+0x320>
 8013e10:	f019 0f02 	tst.w	r9, #2
 8013e14:	d006      	beq.n	8013e24 <__gethex+0x320>
 8013e16:	f8da 3000 	ldr.w	r3, [sl]
 8013e1a:	ea49 0903 	orr.w	r9, r9, r3
 8013e1e:	f019 0f01 	tst.w	r9, #1
 8013e22:	d10e      	bne.n	8013e42 <__gethex+0x33e>
 8013e24:	f045 0510 	orr.w	r5, r5, #16
 8013e28:	e032      	b.n	8013e90 <__gethex+0x38c>
 8013e2a:	f04f 0901 	mov.w	r9, #1
 8013e2e:	e7d1      	b.n	8013dd4 <__gethex+0x2d0>
 8013e30:	2501      	movs	r5, #1
 8013e32:	e7e2      	b.n	8013dfa <__gethex+0x2f6>
 8013e34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e36:	f1c3 0301 	rsb	r3, r3, #1
 8013e3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013e3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d0f0      	beq.n	8013e24 <__gethex+0x320>
 8013e42:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013e46:	f104 0314 	add.w	r3, r4, #20
 8013e4a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013e4e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013e52:	f04f 0c00 	mov.w	ip, #0
 8013e56:	4618      	mov	r0, r3
 8013e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013e60:	d01b      	beq.n	8013e9a <__gethex+0x396>
 8013e62:	3201      	adds	r2, #1
 8013e64:	6002      	str	r2, [r0, #0]
 8013e66:	2d02      	cmp	r5, #2
 8013e68:	f104 0314 	add.w	r3, r4, #20
 8013e6c:	d13c      	bne.n	8013ee8 <__gethex+0x3e4>
 8013e6e:	f8d8 2000 	ldr.w	r2, [r8]
 8013e72:	3a01      	subs	r2, #1
 8013e74:	42b2      	cmp	r2, r6
 8013e76:	d109      	bne.n	8013e8c <__gethex+0x388>
 8013e78:	1171      	asrs	r1, r6, #5
 8013e7a:	2201      	movs	r2, #1
 8013e7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013e80:	f006 061f 	and.w	r6, r6, #31
 8013e84:	fa02 f606 	lsl.w	r6, r2, r6
 8013e88:	421e      	tst	r6, r3
 8013e8a:	d13a      	bne.n	8013f02 <__gethex+0x3fe>
 8013e8c:	f045 0520 	orr.w	r5, r5, #32
 8013e90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e92:	601c      	str	r4, [r3, #0]
 8013e94:	9b02      	ldr	r3, [sp, #8]
 8013e96:	601f      	str	r7, [r3, #0]
 8013e98:	e6b0      	b.n	8013bfc <__gethex+0xf8>
 8013e9a:	4299      	cmp	r1, r3
 8013e9c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013ea0:	d8d9      	bhi.n	8013e56 <__gethex+0x352>
 8013ea2:	68a3      	ldr	r3, [r4, #8]
 8013ea4:	459b      	cmp	fp, r3
 8013ea6:	db17      	blt.n	8013ed8 <__gethex+0x3d4>
 8013ea8:	6861      	ldr	r1, [r4, #4]
 8013eaa:	9801      	ldr	r0, [sp, #4]
 8013eac:	3101      	adds	r1, #1
 8013eae:	f7fe f819 	bl	8011ee4 <_Balloc>
 8013eb2:	4681      	mov	r9, r0
 8013eb4:	b918      	cbnz	r0, 8013ebe <__gethex+0x3ba>
 8013eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8013f20 <__gethex+0x41c>)
 8013eb8:	4602      	mov	r2, r0
 8013eba:	2184      	movs	r1, #132	@ 0x84
 8013ebc:	e6c5      	b.n	8013c4a <__gethex+0x146>
 8013ebe:	6922      	ldr	r2, [r4, #16]
 8013ec0:	3202      	adds	r2, #2
 8013ec2:	f104 010c 	add.w	r1, r4, #12
 8013ec6:	0092      	lsls	r2, r2, #2
 8013ec8:	300c      	adds	r0, #12
 8013eca:	f7ff fd6b 	bl	80139a4 <memcpy>
 8013ece:	4621      	mov	r1, r4
 8013ed0:	9801      	ldr	r0, [sp, #4]
 8013ed2:	f7fe f847 	bl	8011f64 <_Bfree>
 8013ed6:	464c      	mov	r4, r9
 8013ed8:	6923      	ldr	r3, [r4, #16]
 8013eda:	1c5a      	adds	r2, r3, #1
 8013edc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013ee0:	6122      	str	r2, [r4, #16]
 8013ee2:	2201      	movs	r2, #1
 8013ee4:	615a      	str	r2, [r3, #20]
 8013ee6:	e7be      	b.n	8013e66 <__gethex+0x362>
 8013ee8:	6922      	ldr	r2, [r4, #16]
 8013eea:	455a      	cmp	r2, fp
 8013eec:	dd0b      	ble.n	8013f06 <__gethex+0x402>
 8013eee:	2101      	movs	r1, #1
 8013ef0:	4620      	mov	r0, r4
 8013ef2:	f7ff fd9f 	bl	8013a34 <rshift>
 8013ef6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013efa:	3701      	adds	r7, #1
 8013efc:	42bb      	cmp	r3, r7
 8013efe:	f6ff aee0 	blt.w	8013cc2 <__gethex+0x1be>
 8013f02:	2501      	movs	r5, #1
 8013f04:	e7c2      	b.n	8013e8c <__gethex+0x388>
 8013f06:	f016 061f 	ands.w	r6, r6, #31
 8013f0a:	d0fa      	beq.n	8013f02 <__gethex+0x3fe>
 8013f0c:	4453      	add	r3, sl
 8013f0e:	f1c6 0620 	rsb	r6, r6, #32
 8013f12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013f16:	f7fe f8d7 	bl	80120c8 <__hi0bits>
 8013f1a:	42b0      	cmp	r0, r6
 8013f1c:	dbe7      	blt.n	8013eee <__gethex+0x3ea>
 8013f1e:	e7f0      	b.n	8013f02 <__gethex+0x3fe>
 8013f20:	080147fd 	.word	0x080147fd

08013f24 <L_shift>:
 8013f24:	f1c2 0208 	rsb	r2, r2, #8
 8013f28:	0092      	lsls	r2, r2, #2
 8013f2a:	b570      	push	{r4, r5, r6, lr}
 8013f2c:	f1c2 0620 	rsb	r6, r2, #32
 8013f30:	6843      	ldr	r3, [r0, #4]
 8013f32:	6804      	ldr	r4, [r0, #0]
 8013f34:	fa03 f506 	lsl.w	r5, r3, r6
 8013f38:	432c      	orrs	r4, r5
 8013f3a:	40d3      	lsrs	r3, r2
 8013f3c:	6004      	str	r4, [r0, #0]
 8013f3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013f42:	4288      	cmp	r0, r1
 8013f44:	d3f4      	bcc.n	8013f30 <L_shift+0xc>
 8013f46:	bd70      	pop	{r4, r5, r6, pc}

08013f48 <__match>:
 8013f48:	b530      	push	{r4, r5, lr}
 8013f4a:	6803      	ldr	r3, [r0, #0]
 8013f4c:	3301      	adds	r3, #1
 8013f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f52:	b914      	cbnz	r4, 8013f5a <__match+0x12>
 8013f54:	6003      	str	r3, [r0, #0]
 8013f56:	2001      	movs	r0, #1
 8013f58:	bd30      	pop	{r4, r5, pc}
 8013f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f5e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013f62:	2d19      	cmp	r5, #25
 8013f64:	bf98      	it	ls
 8013f66:	3220      	addls	r2, #32
 8013f68:	42a2      	cmp	r2, r4
 8013f6a:	d0f0      	beq.n	8013f4e <__match+0x6>
 8013f6c:	2000      	movs	r0, #0
 8013f6e:	e7f3      	b.n	8013f58 <__match+0x10>

08013f70 <__hexnan>:
 8013f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f74:	680b      	ldr	r3, [r1, #0]
 8013f76:	6801      	ldr	r1, [r0, #0]
 8013f78:	115e      	asrs	r6, r3, #5
 8013f7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013f7e:	f013 031f 	ands.w	r3, r3, #31
 8013f82:	b087      	sub	sp, #28
 8013f84:	bf18      	it	ne
 8013f86:	3604      	addne	r6, #4
 8013f88:	2500      	movs	r5, #0
 8013f8a:	1f37      	subs	r7, r6, #4
 8013f8c:	4682      	mov	sl, r0
 8013f8e:	4690      	mov	r8, r2
 8013f90:	9301      	str	r3, [sp, #4]
 8013f92:	f846 5c04 	str.w	r5, [r6, #-4]
 8013f96:	46b9      	mov	r9, r7
 8013f98:	463c      	mov	r4, r7
 8013f9a:	9502      	str	r5, [sp, #8]
 8013f9c:	46ab      	mov	fp, r5
 8013f9e:	784a      	ldrb	r2, [r1, #1]
 8013fa0:	1c4b      	adds	r3, r1, #1
 8013fa2:	9303      	str	r3, [sp, #12]
 8013fa4:	b342      	cbz	r2, 8013ff8 <__hexnan+0x88>
 8013fa6:	4610      	mov	r0, r2
 8013fa8:	9105      	str	r1, [sp, #20]
 8013faa:	9204      	str	r2, [sp, #16]
 8013fac:	f7ff fd94 	bl	8013ad8 <__hexdig_fun>
 8013fb0:	2800      	cmp	r0, #0
 8013fb2:	d151      	bne.n	8014058 <__hexnan+0xe8>
 8013fb4:	9a04      	ldr	r2, [sp, #16]
 8013fb6:	9905      	ldr	r1, [sp, #20]
 8013fb8:	2a20      	cmp	r2, #32
 8013fba:	d818      	bhi.n	8013fee <__hexnan+0x7e>
 8013fbc:	9b02      	ldr	r3, [sp, #8]
 8013fbe:	459b      	cmp	fp, r3
 8013fc0:	dd13      	ble.n	8013fea <__hexnan+0x7a>
 8013fc2:	454c      	cmp	r4, r9
 8013fc4:	d206      	bcs.n	8013fd4 <__hexnan+0x64>
 8013fc6:	2d07      	cmp	r5, #7
 8013fc8:	dc04      	bgt.n	8013fd4 <__hexnan+0x64>
 8013fca:	462a      	mov	r2, r5
 8013fcc:	4649      	mov	r1, r9
 8013fce:	4620      	mov	r0, r4
 8013fd0:	f7ff ffa8 	bl	8013f24 <L_shift>
 8013fd4:	4544      	cmp	r4, r8
 8013fd6:	d952      	bls.n	801407e <__hexnan+0x10e>
 8013fd8:	2300      	movs	r3, #0
 8013fda:	f1a4 0904 	sub.w	r9, r4, #4
 8013fde:	f844 3c04 	str.w	r3, [r4, #-4]
 8013fe2:	f8cd b008 	str.w	fp, [sp, #8]
 8013fe6:	464c      	mov	r4, r9
 8013fe8:	461d      	mov	r5, r3
 8013fea:	9903      	ldr	r1, [sp, #12]
 8013fec:	e7d7      	b.n	8013f9e <__hexnan+0x2e>
 8013fee:	2a29      	cmp	r2, #41	@ 0x29
 8013ff0:	d157      	bne.n	80140a2 <__hexnan+0x132>
 8013ff2:	3102      	adds	r1, #2
 8013ff4:	f8ca 1000 	str.w	r1, [sl]
 8013ff8:	f1bb 0f00 	cmp.w	fp, #0
 8013ffc:	d051      	beq.n	80140a2 <__hexnan+0x132>
 8013ffe:	454c      	cmp	r4, r9
 8014000:	d206      	bcs.n	8014010 <__hexnan+0xa0>
 8014002:	2d07      	cmp	r5, #7
 8014004:	dc04      	bgt.n	8014010 <__hexnan+0xa0>
 8014006:	462a      	mov	r2, r5
 8014008:	4649      	mov	r1, r9
 801400a:	4620      	mov	r0, r4
 801400c:	f7ff ff8a 	bl	8013f24 <L_shift>
 8014010:	4544      	cmp	r4, r8
 8014012:	d936      	bls.n	8014082 <__hexnan+0x112>
 8014014:	f1a8 0204 	sub.w	r2, r8, #4
 8014018:	4623      	mov	r3, r4
 801401a:	f853 1b04 	ldr.w	r1, [r3], #4
 801401e:	f842 1f04 	str.w	r1, [r2, #4]!
 8014022:	429f      	cmp	r7, r3
 8014024:	d2f9      	bcs.n	801401a <__hexnan+0xaa>
 8014026:	1b3b      	subs	r3, r7, r4
 8014028:	f023 0303 	bic.w	r3, r3, #3
 801402c:	3304      	adds	r3, #4
 801402e:	3401      	adds	r4, #1
 8014030:	3e03      	subs	r6, #3
 8014032:	42b4      	cmp	r4, r6
 8014034:	bf88      	it	hi
 8014036:	2304      	movhi	r3, #4
 8014038:	4443      	add	r3, r8
 801403a:	2200      	movs	r2, #0
 801403c:	f843 2b04 	str.w	r2, [r3], #4
 8014040:	429f      	cmp	r7, r3
 8014042:	d2fb      	bcs.n	801403c <__hexnan+0xcc>
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	b91b      	cbnz	r3, 8014050 <__hexnan+0xe0>
 8014048:	4547      	cmp	r7, r8
 801404a:	d128      	bne.n	801409e <__hexnan+0x12e>
 801404c:	2301      	movs	r3, #1
 801404e:	603b      	str	r3, [r7, #0]
 8014050:	2005      	movs	r0, #5
 8014052:	b007      	add	sp, #28
 8014054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014058:	3501      	adds	r5, #1
 801405a:	2d08      	cmp	r5, #8
 801405c:	f10b 0b01 	add.w	fp, fp, #1
 8014060:	dd06      	ble.n	8014070 <__hexnan+0x100>
 8014062:	4544      	cmp	r4, r8
 8014064:	d9c1      	bls.n	8013fea <__hexnan+0x7a>
 8014066:	2300      	movs	r3, #0
 8014068:	f844 3c04 	str.w	r3, [r4, #-4]
 801406c:	2501      	movs	r5, #1
 801406e:	3c04      	subs	r4, #4
 8014070:	6822      	ldr	r2, [r4, #0]
 8014072:	f000 000f 	and.w	r0, r0, #15
 8014076:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801407a:	6020      	str	r0, [r4, #0]
 801407c:	e7b5      	b.n	8013fea <__hexnan+0x7a>
 801407e:	2508      	movs	r5, #8
 8014080:	e7b3      	b.n	8013fea <__hexnan+0x7a>
 8014082:	9b01      	ldr	r3, [sp, #4]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d0dd      	beq.n	8014044 <__hexnan+0xd4>
 8014088:	f1c3 0320 	rsb	r3, r3, #32
 801408c:	f04f 32ff 	mov.w	r2, #4294967295
 8014090:	40da      	lsrs	r2, r3
 8014092:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014096:	4013      	ands	r3, r2
 8014098:	f846 3c04 	str.w	r3, [r6, #-4]
 801409c:	e7d2      	b.n	8014044 <__hexnan+0xd4>
 801409e:	3f04      	subs	r7, #4
 80140a0:	e7d0      	b.n	8014044 <__hexnan+0xd4>
 80140a2:	2004      	movs	r0, #4
 80140a4:	e7d5      	b.n	8014052 <__hexnan+0xe2>

080140a6 <__ascii_mbtowc>:
 80140a6:	b082      	sub	sp, #8
 80140a8:	b901      	cbnz	r1, 80140ac <__ascii_mbtowc+0x6>
 80140aa:	a901      	add	r1, sp, #4
 80140ac:	b142      	cbz	r2, 80140c0 <__ascii_mbtowc+0x1a>
 80140ae:	b14b      	cbz	r3, 80140c4 <__ascii_mbtowc+0x1e>
 80140b0:	7813      	ldrb	r3, [r2, #0]
 80140b2:	600b      	str	r3, [r1, #0]
 80140b4:	7812      	ldrb	r2, [r2, #0]
 80140b6:	1e10      	subs	r0, r2, #0
 80140b8:	bf18      	it	ne
 80140ba:	2001      	movne	r0, #1
 80140bc:	b002      	add	sp, #8
 80140be:	4770      	bx	lr
 80140c0:	4610      	mov	r0, r2
 80140c2:	e7fb      	b.n	80140bc <__ascii_mbtowc+0x16>
 80140c4:	f06f 0001 	mvn.w	r0, #1
 80140c8:	e7f8      	b.n	80140bc <__ascii_mbtowc+0x16>

080140ca <_realloc_r>:
 80140ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140ce:	4607      	mov	r7, r0
 80140d0:	4614      	mov	r4, r2
 80140d2:	460d      	mov	r5, r1
 80140d4:	b921      	cbnz	r1, 80140e0 <_realloc_r+0x16>
 80140d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140da:	4611      	mov	r1, r2
 80140dc:	f7fb bfb6 	b.w	801004c <_malloc_r>
 80140e0:	b92a      	cbnz	r2, 80140ee <_realloc_r+0x24>
 80140e2:	f7fd feb5 	bl	8011e50 <_free_r>
 80140e6:	4625      	mov	r5, r4
 80140e8:	4628      	mov	r0, r5
 80140ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140ee:	f000 f840 	bl	8014172 <_malloc_usable_size_r>
 80140f2:	4284      	cmp	r4, r0
 80140f4:	4606      	mov	r6, r0
 80140f6:	d802      	bhi.n	80140fe <_realloc_r+0x34>
 80140f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80140fc:	d8f4      	bhi.n	80140e8 <_realloc_r+0x1e>
 80140fe:	4621      	mov	r1, r4
 8014100:	4638      	mov	r0, r7
 8014102:	f7fb ffa3 	bl	801004c <_malloc_r>
 8014106:	4680      	mov	r8, r0
 8014108:	b908      	cbnz	r0, 801410e <_realloc_r+0x44>
 801410a:	4645      	mov	r5, r8
 801410c:	e7ec      	b.n	80140e8 <_realloc_r+0x1e>
 801410e:	42b4      	cmp	r4, r6
 8014110:	4622      	mov	r2, r4
 8014112:	4629      	mov	r1, r5
 8014114:	bf28      	it	cs
 8014116:	4632      	movcs	r2, r6
 8014118:	f7ff fc44 	bl	80139a4 <memcpy>
 801411c:	4629      	mov	r1, r5
 801411e:	4638      	mov	r0, r7
 8014120:	f7fd fe96 	bl	8011e50 <_free_r>
 8014124:	e7f1      	b.n	801410a <_realloc_r+0x40>

08014126 <__ascii_wctomb>:
 8014126:	4603      	mov	r3, r0
 8014128:	4608      	mov	r0, r1
 801412a:	b141      	cbz	r1, 801413e <__ascii_wctomb+0x18>
 801412c:	2aff      	cmp	r2, #255	@ 0xff
 801412e:	d904      	bls.n	801413a <__ascii_wctomb+0x14>
 8014130:	228a      	movs	r2, #138	@ 0x8a
 8014132:	601a      	str	r2, [r3, #0]
 8014134:	f04f 30ff 	mov.w	r0, #4294967295
 8014138:	4770      	bx	lr
 801413a:	700a      	strb	r2, [r1, #0]
 801413c:	2001      	movs	r0, #1
 801413e:	4770      	bx	lr

08014140 <fiprintf>:
 8014140:	b40e      	push	{r1, r2, r3}
 8014142:	b503      	push	{r0, r1, lr}
 8014144:	4601      	mov	r1, r0
 8014146:	ab03      	add	r3, sp, #12
 8014148:	4805      	ldr	r0, [pc, #20]	@ (8014160 <fiprintf+0x20>)
 801414a:	f853 2b04 	ldr.w	r2, [r3], #4
 801414e:	6800      	ldr	r0, [r0, #0]
 8014150:	9301      	str	r3, [sp, #4]
 8014152:	f000 f83f 	bl	80141d4 <_vfiprintf_r>
 8014156:	b002      	add	sp, #8
 8014158:	f85d eb04 	ldr.w	lr, [sp], #4
 801415c:	b003      	add	sp, #12
 801415e:	4770      	bx	lr
 8014160:	20000024 	.word	0x20000024

08014164 <abort>:
 8014164:	b508      	push	{r3, lr}
 8014166:	2006      	movs	r0, #6
 8014168:	f000 fa08 	bl	801457c <raise>
 801416c:	2001      	movs	r0, #1
 801416e:	f7f3 fd5a 	bl	8007c26 <_exit>

08014172 <_malloc_usable_size_r>:
 8014172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014176:	1f18      	subs	r0, r3, #4
 8014178:	2b00      	cmp	r3, #0
 801417a:	bfbc      	itt	lt
 801417c:	580b      	ldrlt	r3, [r1, r0]
 801417e:	18c0      	addlt	r0, r0, r3
 8014180:	4770      	bx	lr

08014182 <__sfputc_r>:
 8014182:	6893      	ldr	r3, [r2, #8]
 8014184:	3b01      	subs	r3, #1
 8014186:	2b00      	cmp	r3, #0
 8014188:	b410      	push	{r4}
 801418a:	6093      	str	r3, [r2, #8]
 801418c:	da08      	bge.n	80141a0 <__sfputc_r+0x1e>
 801418e:	6994      	ldr	r4, [r2, #24]
 8014190:	42a3      	cmp	r3, r4
 8014192:	db01      	blt.n	8014198 <__sfputc_r+0x16>
 8014194:	290a      	cmp	r1, #10
 8014196:	d103      	bne.n	80141a0 <__sfputc_r+0x1e>
 8014198:	f85d 4b04 	ldr.w	r4, [sp], #4
 801419c:	f000 b932 	b.w	8014404 <__swbuf_r>
 80141a0:	6813      	ldr	r3, [r2, #0]
 80141a2:	1c58      	adds	r0, r3, #1
 80141a4:	6010      	str	r0, [r2, #0]
 80141a6:	7019      	strb	r1, [r3, #0]
 80141a8:	4608      	mov	r0, r1
 80141aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141ae:	4770      	bx	lr

080141b0 <__sfputs_r>:
 80141b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141b2:	4606      	mov	r6, r0
 80141b4:	460f      	mov	r7, r1
 80141b6:	4614      	mov	r4, r2
 80141b8:	18d5      	adds	r5, r2, r3
 80141ba:	42ac      	cmp	r4, r5
 80141bc:	d101      	bne.n	80141c2 <__sfputs_r+0x12>
 80141be:	2000      	movs	r0, #0
 80141c0:	e007      	b.n	80141d2 <__sfputs_r+0x22>
 80141c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141c6:	463a      	mov	r2, r7
 80141c8:	4630      	mov	r0, r6
 80141ca:	f7ff ffda 	bl	8014182 <__sfputc_r>
 80141ce:	1c43      	adds	r3, r0, #1
 80141d0:	d1f3      	bne.n	80141ba <__sfputs_r+0xa>
 80141d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080141d4 <_vfiprintf_r>:
 80141d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141d8:	460d      	mov	r5, r1
 80141da:	b09d      	sub	sp, #116	@ 0x74
 80141dc:	4614      	mov	r4, r2
 80141de:	4698      	mov	r8, r3
 80141e0:	4606      	mov	r6, r0
 80141e2:	b118      	cbz	r0, 80141ec <_vfiprintf_r+0x18>
 80141e4:	6a03      	ldr	r3, [r0, #32]
 80141e6:	b90b      	cbnz	r3, 80141ec <_vfiprintf_r+0x18>
 80141e8:	f7fc feac 	bl	8010f44 <__sinit>
 80141ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80141ee:	07d9      	lsls	r1, r3, #31
 80141f0:	d405      	bmi.n	80141fe <_vfiprintf_r+0x2a>
 80141f2:	89ab      	ldrh	r3, [r5, #12]
 80141f4:	059a      	lsls	r2, r3, #22
 80141f6:	d402      	bmi.n	80141fe <_vfiprintf_r+0x2a>
 80141f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80141fa:	f7fc ffcc 	bl	8011196 <__retarget_lock_acquire_recursive>
 80141fe:	89ab      	ldrh	r3, [r5, #12]
 8014200:	071b      	lsls	r3, r3, #28
 8014202:	d501      	bpl.n	8014208 <_vfiprintf_r+0x34>
 8014204:	692b      	ldr	r3, [r5, #16]
 8014206:	b99b      	cbnz	r3, 8014230 <_vfiprintf_r+0x5c>
 8014208:	4629      	mov	r1, r5
 801420a:	4630      	mov	r0, r6
 801420c:	f000 f938 	bl	8014480 <__swsetup_r>
 8014210:	b170      	cbz	r0, 8014230 <_vfiprintf_r+0x5c>
 8014212:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014214:	07dc      	lsls	r4, r3, #31
 8014216:	d504      	bpl.n	8014222 <_vfiprintf_r+0x4e>
 8014218:	f04f 30ff 	mov.w	r0, #4294967295
 801421c:	b01d      	add	sp, #116	@ 0x74
 801421e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014222:	89ab      	ldrh	r3, [r5, #12]
 8014224:	0598      	lsls	r0, r3, #22
 8014226:	d4f7      	bmi.n	8014218 <_vfiprintf_r+0x44>
 8014228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801422a:	f7fc ffb5 	bl	8011198 <__retarget_lock_release_recursive>
 801422e:	e7f3      	b.n	8014218 <_vfiprintf_r+0x44>
 8014230:	2300      	movs	r3, #0
 8014232:	9309      	str	r3, [sp, #36]	@ 0x24
 8014234:	2320      	movs	r3, #32
 8014236:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801423a:	f8cd 800c 	str.w	r8, [sp, #12]
 801423e:	2330      	movs	r3, #48	@ 0x30
 8014240:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80143f0 <_vfiprintf_r+0x21c>
 8014244:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014248:	f04f 0901 	mov.w	r9, #1
 801424c:	4623      	mov	r3, r4
 801424e:	469a      	mov	sl, r3
 8014250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014254:	b10a      	cbz	r2, 801425a <_vfiprintf_r+0x86>
 8014256:	2a25      	cmp	r2, #37	@ 0x25
 8014258:	d1f9      	bne.n	801424e <_vfiprintf_r+0x7a>
 801425a:	ebba 0b04 	subs.w	fp, sl, r4
 801425e:	d00b      	beq.n	8014278 <_vfiprintf_r+0xa4>
 8014260:	465b      	mov	r3, fp
 8014262:	4622      	mov	r2, r4
 8014264:	4629      	mov	r1, r5
 8014266:	4630      	mov	r0, r6
 8014268:	f7ff ffa2 	bl	80141b0 <__sfputs_r>
 801426c:	3001      	adds	r0, #1
 801426e:	f000 80a7 	beq.w	80143c0 <_vfiprintf_r+0x1ec>
 8014272:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014274:	445a      	add	r2, fp
 8014276:	9209      	str	r2, [sp, #36]	@ 0x24
 8014278:	f89a 3000 	ldrb.w	r3, [sl]
 801427c:	2b00      	cmp	r3, #0
 801427e:	f000 809f 	beq.w	80143c0 <_vfiprintf_r+0x1ec>
 8014282:	2300      	movs	r3, #0
 8014284:	f04f 32ff 	mov.w	r2, #4294967295
 8014288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801428c:	f10a 0a01 	add.w	sl, sl, #1
 8014290:	9304      	str	r3, [sp, #16]
 8014292:	9307      	str	r3, [sp, #28]
 8014294:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014298:	931a      	str	r3, [sp, #104]	@ 0x68
 801429a:	4654      	mov	r4, sl
 801429c:	2205      	movs	r2, #5
 801429e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142a2:	4853      	ldr	r0, [pc, #332]	@ (80143f0 <_vfiprintf_r+0x21c>)
 80142a4:	f7eb ff94 	bl	80001d0 <memchr>
 80142a8:	9a04      	ldr	r2, [sp, #16]
 80142aa:	b9d8      	cbnz	r0, 80142e4 <_vfiprintf_r+0x110>
 80142ac:	06d1      	lsls	r1, r2, #27
 80142ae:	bf44      	itt	mi
 80142b0:	2320      	movmi	r3, #32
 80142b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80142b6:	0713      	lsls	r3, r2, #28
 80142b8:	bf44      	itt	mi
 80142ba:	232b      	movmi	r3, #43	@ 0x2b
 80142bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80142c0:	f89a 3000 	ldrb.w	r3, [sl]
 80142c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80142c6:	d015      	beq.n	80142f4 <_vfiprintf_r+0x120>
 80142c8:	9a07      	ldr	r2, [sp, #28]
 80142ca:	4654      	mov	r4, sl
 80142cc:	2000      	movs	r0, #0
 80142ce:	f04f 0c0a 	mov.w	ip, #10
 80142d2:	4621      	mov	r1, r4
 80142d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142d8:	3b30      	subs	r3, #48	@ 0x30
 80142da:	2b09      	cmp	r3, #9
 80142dc:	d94b      	bls.n	8014376 <_vfiprintf_r+0x1a2>
 80142de:	b1b0      	cbz	r0, 801430e <_vfiprintf_r+0x13a>
 80142e0:	9207      	str	r2, [sp, #28]
 80142e2:	e014      	b.n	801430e <_vfiprintf_r+0x13a>
 80142e4:	eba0 0308 	sub.w	r3, r0, r8
 80142e8:	fa09 f303 	lsl.w	r3, r9, r3
 80142ec:	4313      	orrs	r3, r2
 80142ee:	9304      	str	r3, [sp, #16]
 80142f0:	46a2      	mov	sl, r4
 80142f2:	e7d2      	b.n	801429a <_vfiprintf_r+0xc6>
 80142f4:	9b03      	ldr	r3, [sp, #12]
 80142f6:	1d19      	adds	r1, r3, #4
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	9103      	str	r1, [sp, #12]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	bfbb      	ittet	lt
 8014300:	425b      	neglt	r3, r3
 8014302:	f042 0202 	orrlt.w	r2, r2, #2
 8014306:	9307      	strge	r3, [sp, #28]
 8014308:	9307      	strlt	r3, [sp, #28]
 801430a:	bfb8      	it	lt
 801430c:	9204      	strlt	r2, [sp, #16]
 801430e:	7823      	ldrb	r3, [r4, #0]
 8014310:	2b2e      	cmp	r3, #46	@ 0x2e
 8014312:	d10a      	bne.n	801432a <_vfiprintf_r+0x156>
 8014314:	7863      	ldrb	r3, [r4, #1]
 8014316:	2b2a      	cmp	r3, #42	@ 0x2a
 8014318:	d132      	bne.n	8014380 <_vfiprintf_r+0x1ac>
 801431a:	9b03      	ldr	r3, [sp, #12]
 801431c:	1d1a      	adds	r2, r3, #4
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	9203      	str	r2, [sp, #12]
 8014322:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014326:	3402      	adds	r4, #2
 8014328:	9305      	str	r3, [sp, #20]
 801432a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014400 <_vfiprintf_r+0x22c>
 801432e:	7821      	ldrb	r1, [r4, #0]
 8014330:	2203      	movs	r2, #3
 8014332:	4650      	mov	r0, sl
 8014334:	f7eb ff4c 	bl	80001d0 <memchr>
 8014338:	b138      	cbz	r0, 801434a <_vfiprintf_r+0x176>
 801433a:	9b04      	ldr	r3, [sp, #16]
 801433c:	eba0 000a 	sub.w	r0, r0, sl
 8014340:	2240      	movs	r2, #64	@ 0x40
 8014342:	4082      	lsls	r2, r0
 8014344:	4313      	orrs	r3, r2
 8014346:	3401      	adds	r4, #1
 8014348:	9304      	str	r3, [sp, #16]
 801434a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801434e:	4829      	ldr	r0, [pc, #164]	@ (80143f4 <_vfiprintf_r+0x220>)
 8014350:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014354:	2206      	movs	r2, #6
 8014356:	f7eb ff3b 	bl	80001d0 <memchr>
 801435a:	2800      	cmp	r0, #0
 801435c:	d03f      	beq.n	80143de <_vfiprintf_r+0x20a>
 801435e:	4b26      	ldr	r3, [pc, #152]	@ (80143f8 <_vfiprintf_r+0x224>)
 8014360:	bb1b      	cbnz	r3, 80143aa <_vfiprintf_r+0x1d6>
 8014362:	9b03      	ldr	r3, [sp, #12]
 8014364:	3307      	adds	r3, #7
 8014366:	f023 0307 	bic.w	r3, r3, #7
 801436a:	3308      	adds	r3, #8
 801436c:	9303      	str	r3, [sp, #12]
 801436e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014370:	443b      	add	r3, r7
 8014372:	9309      	str	r3, [sp, #36]	@ 0x24
 8014374:	e76a      	b.n	801424c <_vfiprintf_r+0x78>
 8014376:	fb0c 3202 	mla	r2, ip, r2, r3
 801437a:	460c      	mov	r4, r1
 801437c:	2001      	movs	r0, #1
 801437e:	e7a8      	b.n	80142d2 <_vfiprintf_r+0xfe>
 8014380:	2300      	movs	r3, #0
 8014382:	3401      	adds	r4, #1
 8014384:	9305      	str	r3, [sp, #20]
 8014386:	4619      	mov	r1, r3
 8014388:	f04f 0c0a 	mov.w	ip, #10
 801438c:	4620      	mov	r0, r4
 801438e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014392:	3a30      	subs	r2, #48	@ 0x30
 8014394:	2a09      	cmp	r2, #9
 8014396:	d903      	bls.n	80143a0 <_vfiprintf_r+0x1cc>
 8014398:	2b00      	cmp	r3, #0
 801439a:	d0c6      	beq.n	801432a <_vfiprintf_r+0x156>
 801439c:	9105      	str	r1, [sp, #20]
 801439e:	e7c4      	b.n	801432a <_vfiprintf_r+0x156>
 80143a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80143a4:	4604      	mov	r4, r0
 80143a6:	2301      	movs	r3, #1
 80143a8:	e7f0      	b.n	801438c <_vfiprintf_r+0x1b8>
 80143aa:	ab03      	add	r3, sp, #12
 80143ac:	9300      	str	r3, [sp, #0]
 80143ae:	462a      	mov	r2, r5
 80143b0:	4b12      	ldr	r3, [pc, #72]	@ (80143fc <_vfiprintf_r+0x228>)
 80143b2:	a904      	add	r1, sp, #16
 80143b4:	4630      	mov	r0, r6
 80143b6:	f7fb ff75 	bl	80102a4 <_printf_float>
 80143ba:	4607      	mov	r7, r0
 80143bc:	1c78      	adds	r0, r7, #1
 80143be:	d1d6      	bne.n	801436e <_vfiprintf_r+0x19a>
 80143c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80143c2:	07d9      	lsls	r1, r3, #31
 80143c4:	d405      	bmi.n	80143d2 <_vfiprintf_r+0x1fe>
 80143c6:	89ab      	ldrh	r3, [r5, #12]
 80143c8:	059a      	lsls	r2, r3, #22
 80143ca:	d402      	bmi.n	80143d2 <_vfiprintf_r+0x1fe>
 80143cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80143ce:	f7fc fee3 	bl	8011198 <__retarget_lock_release_recursive>
 80143d2:	89ab      	ldrh	r3, [r5, #12]
 80143d4:	065b      	lsls	r3, r3, #25
 80143d6:	f53f af1f 	bmi.w	8014218 <_vfiprintf_r+0x44>
 80143da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80143dc:	e71e      	b.n	801421c <_vfiprintf_r+0x48>
 80143de:	ab03      	add	r3, sp, #12
 80143e0:	9300      	str	r3, [sp, #0]
 80143e2:	462a      	mov	r2, r5
 80143e4:	4b05      	ldr	r3, [pc, #20]	@ (80143fc <_vfiprintf_r+0x228>)
 80143e6:	a904      	add	r1, sp, #16
 80143e8:	4630      	mov	r0, r6
 80143ea:	f7fc f9f3 	bl	80107d4 <_printf_i>
 80143ee:	e7e4      	b.n	80143ba <_vfiprintf_r+0x1e6>
 80143f0:	08014869 	.word	0x08014869
 80143f4:	08014873 	.word	0x08014873
 80143f8:	080102a5 	.word	0x080102a5
 80143fc:	080141b1 	.word	0x080141b1
 8014400:	0801486f 	.word	0x0801486f

08014404 <__swbuf_r>:
 8014404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014406:	460e      	mov	r6, r1
 8014408:	4614      	mov	r4, r2
 801440a:	4605      	mov	r5, r0
 801440c:	b118      	cbz	r0, 8014416 <__swbuf_r+0x12>
 801440e:	6a03      	ldr	r3, [r0, #32]
 8014410:	b90b      	cbnz	r3, 8014416 <__swbuf_r+0x12>
 8014412:	f7fc fd97 	bl	8010f44 <__sinit>
 8014416:	69a3      	ldr	r3, [r4, #24]
 8014418:	60a3      	str	r3, [r4, #8]
 801441a:	89a3      	ldrh	r3, [r4, #12]
 801441c:	071a      	lsls	r2, r3, #28
 801441e:	d501      	bpl.n	8014424 <__swbuf_r+0x20>
 8014420:	6923      	ldr	r3, [r4, #16]
 8014422:	b943      	cbnz	r3, 8014436 <__swbuf_r+0x32>
 8014424:	4621      	mov	r1, r4
 8014426:	4628      	mov	r0, r5
 8014428:	f000 f82a 	bl	8014480 <__swsetup_r>
 801442c:	b118      	cbz	r0, 8014436 <__swbuf_r+0x32>
 801442e:	f04f 37ff 	mov.w	r7, #4294967295
 8014432:	4638      	mov	r0, r7
 8014434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014436:	6823      	ldr	r3, [r4, #0]
 8014438:	6922      	ldr	r2, [r4, #16]
 801443a:	1a98      	subs	r0, r3, r2
 801443c:	6963      	ldr	r3, [r4, #20]
 801443e:	b2f6      	uxtb	r6, r6
 8014440:	4283      	cmp	r3, r0
 8014442:	4637      	mov	r7, r6
 8014444:	dc05      	bgt.n	8014452 <__swbuf_r+0x4e>
 8014446:	4621      	mov	r1, r4
 8014448:	4628      	mov	r0, r5
 801444a:	f7ff fa57 	bl	80138fc <_fflush_r>
 801444e:	2800      	cmp	r0, #0
 8014450:	d1ed      	bne.n	801442e <__swbuf_r+0x2a>
 8014452:	68a3      	ldr	r3, [r4, #8]
 8014454:	3b01      	subs	r3, #1
 8014456:	60a3      	str	r3, [r4, #8]
 8014458:	6823      	ldr	r3, [r4, #0]
 801445a:	1c5a      	adds	r2, r3, #1
 801445c:	6022      	str	r2, [r4, #0]
 801445e:	701e      	strb	r6, [r3, #0]
 8014460:	6962      	ldr	r2, [r4, #20]
 8014462:	1c43      	adds	r3, r0, #1
 8014464:	429a      	cmp	r2, r3
 8014466:	d004      	beq.n	8014472 <__swbuf_r+0x6e>
 8014468:	89a3      	ldrh	r3, [r4, #12]
 801446a:	07db      	lsls	r3, r3, #31
 801446c:	d5e1      	bpl.n	8014432 <__swbuf_r+0x2e>
 801446e:	2e0a      	cmp	r6, #10
 8014470:	d1df      	bne.n	8014432 <__swbuf_r+0x2e>
 8014472:	4621      	mov	r1, r4
 8014474:	4628      	mov	r0, r5
 8014476:	f7ff fa41 	bl	80138fc <_fflush_r>
 801447a:	2800      	cmp	r0, #0
 801447c:	d0d9      	beq.n	8014432 <__swbuf_r+0x2e>
 801447e:	e7d6      	b.n	801442e <__swbuf_r+0x2a>

08014480 <__swsetup_r>:
 8014480:	b538      	push	{r3, r4, r5, lr}
 8014482:	4b29      	ldr	r3, [pc, #164]	@ (8014528 <__swsetup_r+0xa8>)
 8014484:	4605      	mov	r5, r0
 8014486:	6818      	ldr	r0, [r3, #0]
 8014488:	460c      	mov	r4, r1
 801448a:	b118      	cbz	r0, 8014494 <__swsetup_r+0x14>
 801448c:	6a03      	ldr	r3, [r0, #32]
 801448e:	b90b      	cbnz	r3, 8014494 <__swsetup_r+0x14>
 8014490:	f7fc fd58 	bl	8010f44 <__sinit>
 8014494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014498:	0719      	lsls	r1, r3, #28
 801449a:	d422      	bmi.n	80144e2 <__swsetup_r+0x62>
 801449c:	06da      	lsls	r2, r3, #27
 801449e:	d407      	bmi.n	80144b0 <__swsetup_r+0x30>
 80144a0:	2209      	movs	r2, #9
 80144a2:	602a      	str	r2, [r5, #0]
 80144a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80144a8:	81a3      	strh	r3, [r4, #12]
 80144aa:	f04f 30ff 	mov.w	r0, #4294967295
 80144ae:	e033      	b.n	8014518 <__swsetup_r+0x98>
 80144b0:	0758      	lsls	r0, r3, #29
 80144b2:	d512      	bpl.n	80144da <__swsetup_r+0x5a>
 80144b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80144b6:	b141      	cbz	r1, 80144ca <__swsetup_r+0x4a>
 80144b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80144bc:	4299      	cmp	r1, r3
 80144be:	d002      	beq.n	80144c6 <__swsetup_r+0x46>
 80144c0:	4628      	mov	r0, r5
 80144c2:	f7fd fcc5 	bl	8011e50 <_free_r>
 80144c6:	2300      	movs	r3, #0
 80144c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80144ca:	89a3      	ldrh	r3, [r4, #12]
 80144cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80144d0:	81a3      	strh	r3, [r4, #12]
 80144d2:	2300      	movs	r3, #0
 80144d4:	6063      	str	r3, [r4, #4]
 80144d6:	6923      	ldr	r3, [r4, #16]
 80144d8:	6023      	str	r3, [r4, #0]
 80144da:	89a3      	ldrh	r3, [r4, #12]
 80144dc:	f043 0308 	orr.w	r3, r3, #8
 80144e0:	81a3      	strh	r3, [r4, #12]
 80144e2:	6923      	ldr	r3, [r4, #16]
 80144e4:	b94b      	cbnz	r3, 80144fa <__swsetup_r+0x7a>
 80144e6:	89a3      	ldrh	r3, [r4, #12]
 80144e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80144ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80144f0:	d003      	beq.n	80144fa <__swsetup_r+0x7a>
 80144f2:	4621      	mov	r1, r4
 80144f4:	4628      	mov	r0, r5
 80144f6:	f000 f883 	bl	8014600 <__smakebuf_r>
 80144fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144fe:	f013 0201 	ands.w	r2, r3, #1
 8014502:	d00a      	beq.n	801451a <__swsetup_r+0x9a>
 8014504:	2200      	movs	r2, #0
 8014506:	60a2      	str	r2, [r4, #8]
 8014508:	6962      	ldr	r2, [r4, #20]
 801450a:	4252      	negs	r2, r2
 801450c:	61a2      	str	r2, [r4, #24]
 801450e:	6922      	ldr	r2, [r4, #16]
 8014510:	b942      	cbnz	r2, 8014524 <__swsetup_r+0xa4>
 8014512:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014516:	d1c5      	bne.n	80144a4 <__swsetup_r+0x24>
 8014518:	bd38      	pop	{r3, r4, r5, pc}
 801451a:	0799      	lsls	r1, r3, #30
 801451c:	bf58      	it	pl
 801451e:	6962      	ldrpl	r2, [r4, #20]
 8014520:	60a2      	str	r2, [r4, #8]
 8014522:	e7f4      	b.n	801450e <__swsetup_r+0x8e>
 8014524:	2000      	movs	r0, #0
 8014526:	e7f7      	b.n	8014518 <__swsetup_r+0x98>
 8014528:	20000024 	.word	0x20000024

0801452c <_raise_r>:
 801452c:	291f      	cmp	r1, #31
 801452e:	b538      	push	{r3, r4, r5, lr}
 8014530:	4605      	mov	r5, r0
 8014532:	460c      	mov	r4, r1
 8014534:	d904      	bls.n	8014540 <_raise_r+0x14>
 8014536:	2316      	movs	r3, #22
 8014538:	6003      	str	r3, [r0, #0]
 801453a:	f04f 30ff 	mov.w	r0, #4294967295
 801453e:	bd38      	pop	{r3, r4, r5, pc}
 8014540:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014542:	b112      	cbz	r2, 801454a <_raise_r+0x1e>
 8014544:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014548:	b94b      	cbnz	r3, 801455e <_raise_r+0x32>
 801454a:	4628      	mov	r0, r5
 801454c:	f000 f830 	bl	80145b0 <_getpid_r>
 8014550:	4622      	mov	r2, r4
 8014552:	4601      	mov	r1, r0
 8014554:	4628      	mov	r0, r5
 8014556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801455a:	f000 b817 	b.w	801458c <_kill_r>
 801455e:	2b01      	cmp	r3, #1
 8014560:	d00a      	beq.n	8014578 <_raise_r+0x4c>
 8014562:	1c59      	adds	r1, r3, #1
 8014564:	d103      	bne.n	801456e <_raise_r+0x42>
 8014566:	2316      	movs	r3, #22
 8014568:	6003      	str	r3, [r0, #0]
 801456a:	2001      	movs	r0, #1
 801456c:	e7e7      	b.n	801453e <_raise_r+0x12>
 801456e:	2100      	movs	r1, #0
 8014570:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014574:	4620      	mov	r0, r4
 8014576:	4798      	blx	r3
 8014578:	2000      	movs	r0, #0
 801457a:	e7e0      	b.n	801453e <_raise_r+0x12>

0801457c <raise>:
 801457c:	4b02      	ldr	r3, [pc, #8]	@ (8014588 <raise+0xc>)
 801457e:	4601      	mov	r1, r0
 8014580:	6818      	ldr	r0, [r3, #0]
 8014582:	f7ff bfd3 	b.w	801452c <_raise_r>
 8014586:	bf00      	nop
 8014588:	20000024 	.word	0x20000024

0801458c <_kill_r>:
 801458c:	b538      	push	{r3, r4, r5, lr}
 801458e:	4d07      	ldr	r5, [pc, #28]	@ (80145ac <_kill_r+0x20>)
 8014590:	2300      	movs	r3, #0
 8014592:	4604      	mov	r4, r0
 8014594:	4608      	mov	r0, r1
 8014596:	4611      	mov	r1, r2
 8014598:	602b      	str	r3, [r5, #0]
 801459a:	f7f3 fb34 	bl	8007c06 <_kill>
 801459e:	1c43      	adds	r3, r0, #1
 80145a0:	d102      	bne.n	80145a8 <_kill_r+0x1c>
 80145a2:	682b      	ldr	r3, [r5, #0]
 80145a4:	b103      	cbz	r3, 80145a8 <_kill_r+0x1c>
 80145a6:	6023      	str	r3, [r4, #0]
 80145a8:	bd38      	pop	{r3, r4, r5, pc}
 80145aa:	bf00      	nop
 80145ac:	20000e20 	.word	0x20000e20

080145b0 <_getpid_r>:
 80145b0:	f7f3 bb21 	b.w	8007bf6 <_getpid>

080145b4 <__swhatbuf_r>:
 80145b4:	b570      	push	{r4, r5, r6, lr}
 80145b6:	460c      	mov	r4, r1
 80145b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145bc:	2900      	cmp	r1, #0
 80145be:	b096      	sub	sp, #88	@ 0x58
 80145c0:	4615      	mov	r5, r2
 80145c2:	461e      	mov	r6, r3
 80145c4:	da0d      	bge.n	80145e2 <__swhatbuf_r+0x2e>
 80145c6:	89a3      	ldrh	r3, [r4, #12]
 80145c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80145cc:	f04f 0100 	mov.w	r1, #0
 80145d0:	bf14      	ite	ne
 80145d2:	2340      	movne	r3, #64	@ 0x40
 80145d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80145d8:	2000      	movs	r0, #0
 80145da:	6031      	str	r1, [r6, #0]
 80145dc:	602b      	str	r3, [r5, #0]
 80145de:	b016      	add	sp, #88	@ 0x58
 80145e0:	bd70      	pop	{r4, r5, r6, pc}
 80145e2:	466a      	mov	r2, sp
 80145e4:	f000 f848 	bl	8014678 <_fstat_r>
 80145e8:	2800      	cmp	r0, #0
 80145ea:	dbec      	blt.n	80145c6 <__swhatbuf_r+0x12>
 80145ec:	9901      	ldr	r1, [sp, #4]
 80145ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80145f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80145f6:	4259      	negs	r1, r3
 80145f8:	4159      	adcs	r1, r3
 80145fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80145fe:	e7eb      	b.n	80145d8 <__swhatbuf_r+0x24>

08014600 <__smakebuf_r>:
 8014600:	898b      	ldrh	r3, [r1, #12]
 8014602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014604:	079d      	lsls	r5, r3, #30
 8014606:	4606      	mov	r6, r0
 8014608:	460c      	mov	r4, r1
 801460a:	d507      	bpl.n	801461c <__smakebuf_r+0x1c>
 801460c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014610:	6023      	str	r3, [r4, #0]
 8014612:	6123      	str	r3, [r4, #16]
 8014614:	2301      	movs	r3, #1
 8014616:	6163      	str	r3, [r4, #20]
 8014618:	b003      	add	sp, #12
 801461a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801461c:	ab01      	add	r3, sp, #4
 801461e:	466a      	mov	r2, sp
 8014620:	f7ff ffc8 	bl	80145b4 <__swhatbuf_r>
 8014624:	9f00      	ldr	r7, [sp, #0]
 8014626:	4605      	mov	r5, r0
 8014628:	4639      	mov	r1, r7
 801462a:	4630      	mov	r0, r6
 801462c:	f7fb fd0e 	bl	801004c <_malloc_r>
 8014630:	b948      	cbnz	r0, 8014646 <__smakebuf_r+0x46>
 8014632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014636:	059a      	lsls	r2, r3, #22
 8014638:	d4ee      	bmi.n	8014618 <__smakebuf_r+0x18>
 801463a:	f023 0303 	bic.w	r3, r3, #3
 801463e:	f043 0302 	orr.w	r3, r3, #2
 8014642:	81a3      	strh	r3, [r4, #12]
 8014644:	e7e2      	b.n	801460c <__smakebuf_r+0xc>
 8014646:	89a3      	ldrh	r3, [r4, #12]
 8014648:	6020      	str	r0, [r4, #0]
 801464a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801464e:	81a3      	strh	r3, [r4, #12]
 8014650:	9b01      	ldr	r3, [sp, #4]
 8014652:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014656:	b15b      	cbz	r3, 8014670 <__smakebuf_r+0x70>
 8014658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801465c:	4630      	mov	r0, r6
 801465e:	f000 f81d 	bl	801469c <_isatty_r>
 8014662:	b128      	cbz	r0, 8014670 <__smakebuf_r+0x70>
 8014664:	89a3      	ldrh	r3, [r4, #12]
 8014666:	f023 0303 	bic.w	r3, r3, #3
 801466a:	f043 0301 	orr.w	r3, r3, #1
 801466e:	81a3      	strh	r3, [r4, #12]
 8014670:	89a3      	ldrh	r3, [r4, #12]
 8014672:	431d      	orrs	r5, r3
 8014674:	81a5      	strh	r5, [r4, #12]
 8014676:	e7cf      	b.n	8014618 <__smakebuf_r+0x18>

08014678 <_fstat_r>:
 8014678:	b538      	push	{r3, r4, r5, lr}
 801467a:	4d07      	ldr	r5, [pc, #28]	@ (8014698 <_fstat_r+0x20>)
 801467c:	2300      	movs	r3, #0
 801467e:	4604      	mov	r4, r0
 8014680:	4608      	mov	r0, r1
 8014682:	4611      	mov	r1, r2
 8014684:	602b      	str	r3, [r5, #0]
 8014686:	f7f3 fb1e 	bl	8007cc6 <_fstat>
 801468a:	1c43      	adds	r3, r0, #1
 801468c:	d102      	bne.n	8014694 <_fstat_r+0x1c>
 801468e:	682b      	ldr	r3, [r5, #0]
 8014690:	b103      	cbz	r3, 8014694 <_fstat_r+0x1c>
 8014692:	6023      	str	r3, [r4, #0]
 8014694:	bd38      	pop	{r3, r4, r5, pc}
 8014696:	bf00      	nop
 8014698:	20000e20 	.word	0x20000e20

0801469c <_isatty_r>:
 801469c:	b538      	push	{r3, r4, r5, lr}
 801469e:	4d06      	ldr	r5, [pc, #24]	@ (80146b8 <_isatty_r+0x1c>)
 80146a0:	2300      	movs	r3, #0
 80146a2:	4604      	mov	r4, r0
 80146a4:	4608      	mov	r0, r1
 80146a6:	602b      	str	r3, [r5, #0]
 80146a8:	f7f3 fb1d 	bl	8007ce6 <_isatty>
 80146ac:	1c43      	adds	r3, r0, #1
 80146ae:	d102      	bne.n	80146b6 <_isatty_r+0x1a>
 80146b0:	682b      	ldr	r3, [r5, #0]
 80146b2:	b103      	cbz	r3, 80146b6 <_isatty_r+0x1a>
 80146b4:	6023      	str	r3, [r4, #0]
 80146b6:	bd38      	pop	{r3, r4, r5, pc}
 80146b8:	20000e20 	.word	0x20000e20

080146bc <_init>:
 80146bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146be:	bf00      	nop
 80146c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146c2:	bc08      	pop	{r3}
 80146c4:	469e      	mov	lr, r3
 80146c6:	4770      	bx	lr

080146c8 <_fini>:
 80146c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146ca:	bf00      	nop
 80146cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146ce:	bc08      	pop	{r3}
 80146d0:	469e      	mov	lr, r3
 80146d2:	4770      	bx	lr
