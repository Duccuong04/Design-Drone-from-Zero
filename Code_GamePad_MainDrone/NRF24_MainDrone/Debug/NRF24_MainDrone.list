
NRF24_MainDrone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003600  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003788  08003788  00004788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037a8  080037a8  00005014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080037a8  080037a8  000047a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037b0  080037b0  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b0  080037b0  000047b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037b4  080037b4  000047b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080037b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005014  2**0
                  CONTENTS
 10 .bss          000000e0  20000014  20000014  00005014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  00005014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a9d3  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019e6  00000000  00000000  0000fa17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  00011400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000934  00000000  00000000  00011fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020311  00000000  00000000  0001291c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ca96  00000000  00000000  00032c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7093  00000000  00000000  0003f6c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00106756  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000031f4  00000000  00000000  0010679c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000090  00000000  00000000  00109990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003770 	.word	0x08003770

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003770 	.word	0x08003770

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <CS_Select>:
#define NRF24_CSN_PORT   GPIOA
#define NRF24_CSN_PIN    GPIO_PIN_4


void CS_Select (void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2110      	movs	r1, #16
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <CS_Select+0x14>)
 80004fe:	f001 f86f 	bl	80015e0 <HAL_GPIO_WritePin>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020000 	.word	0x40020000

0800050c <CS_UnSelect>:

void CS_UnSelect (void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2110      	movs	r1, #16
 8000514:	4802      	ldr	r0, [pc, #8]	@ (8000520 <CS_UnSelect+0x14>)
 8000516:	f001 f863 	bl	80015e0 <HAL_GPIO_WritePin>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40020000 	.word	0x40020000

08000524 <CE_Enable>:


void CE_Enable (void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2120      	movs	r1, #32
 800052c:	4802      	ldr	r0, [pc, #8]	@ (8000538 <CE_Enable+0x14>)
 800052e:	f001 f857 	bl	80015e0 <HAL_GPIO_WritePin>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40020800 	.word	0x40020800

0800053c <CE_Disable>:

void CE_Disable (void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2120      	movs	r1, #32
 8000544:	4802      	ldr	r0, [pc, #8]	@ (8000550 <CE_Disable+0x14>)
 8000546:	f001 f84b 	bl	80015e0 <HAL_GPIO_WritePin>
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40020800 	.word	0x40020800

08000554 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	460a      	mov	r2, r1
 800055e:	71fb      	strb	r3, [r7, #7]
 8000560:	4613      	mov	r3, r2
 8000562:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	f043 0320 	orr.w	r3, r3, #32
 800056a:	b2db      	uxtb	r3, r3
 800056c:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 800056e:	79bb      	ldrb	r3, [r7, #6]
 8000570:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000572:	f7ff ffbf 	bl	80004f4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000576:	f107 010c 	add.w	r1, r7, #12
 800057a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800057e:	2202      	movs	r2, #2
 8000580:	4804      	ldr	r0, [pc, #16]	@ (8000594 <nrf24_WriteReg+0x40>)
 8000582:	f001 fcf4 	bl	8001f6e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000586:	f7ff ffc1 	bl	800050c <CS_UnSelect>
}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000030 	.word	0x20000030

08000598 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
 80005a4:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	f043 0320 	orr.w	r3, r3, #32
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80005b0:	f7ff ffa0 	bl	80004f4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80005b4:	f107 0114 	add.w	r1, r7, #20
 80005b8:	2364      	movs	r3, #100	@ 0x64
 80005ba:	2201      	movs	r2, #1
 80005bc:	4808      	ldr	r0, [pc, #32]	@ (80005e0 <nrf24_WriteRegMulti+0x48>)
 80005be:	f001 fcd6 	bl	8001f6e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ca:	68b9      	ldr	r1, [r7, #8]
 80005cc:	4804      	ldr	r0, [pc, #16]	@ (80005e0 <nrf24_WriteRegMulti+0x48>)
 80005ce:	f001 fcce 	bl	8001f6e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005d2:	f7ff ff9b 	bl	800050c <CS_UnSelect>
}
 80005d6:	bf00      	nop
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000030 	.word	0x20000030

080005e4 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80005f2:	f7ff ff7f 	bl	80004f4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80005f6:	1df9      	adds	r1, r7, #7
 80005f8:	2364      	movs	r3, #100	@ 0x64
 80005fa:	2201      	movs	r2, #1
 80005fc:	4808      	ldr	r0, [pc, #32]	@ (8000620 <nrf24_ReadReg+0x3c>)
 80005fe:	f001 fcb6 	bl	8001f6e <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000602:	f107 010f 	add.w	r1, r7, #15
 8000606:	2364      	movs	r3, #100	@ 0x64
 8000608:	2201      	movs	r2, #1
 800060a:	4805      	ldr	r0, [pc, #20]	@ (8000620 <nrf24_ReadReg+0x3c>)
 800060c:	f001 fdf3 	bl	80021f6 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000610:	f7ff ff7c 	bl	800050c <CS_UnSelect>

	return data;
 8000614:	7bfb      	ldrb	r3, [r7, #15]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000030 	.word	0x20000030

08000624 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800062e:	f7ff ff61 	bl	80004f4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000632:	1df9      	adds	r1, r7, #7
 8000634:	2364      	movs	r3, #100	@ 0x64
 8000636:	2201      	movs	r2, #1
 8000638:	4804      	ldr	r0, [pc, #16]	@ (800064c <nrfsendCmd+0x28>)
 800063a:	f001 fc98 	bl	8001f6e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800063e:	f7ff ff65 	bl	800050c <CS_UnSelect>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000030 	.word	0x20000030

08000650 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	2b07      	cmp	r3, #7
 800065e:	d104      	bne.n	800066a <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000660:	2100      	movs	r1, #0
 8000662:	2007      	movs	r0, #7
 8000664:	f7ff ff76 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000668:	e090      	b.n	800078c <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b17      	cmp	r3, #23
 800066e:	d104      	bne.n	800067a <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000670:	2111      	movs	r1, #17
 8000672:	2017      	movs	r0, #23
 8000674:	f7ff ff6e 	bl	8000554 <nrf24_WriteReg>
}
 8000678:	e088      	b.n	800078c <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800067a:	2108      	movs	r1, #8
 800067c:	2000      	movs	r0, #0
 800067e:	f7ff ff69 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000682:	213f      	movs	r1, #63	@ 0x3f
 8000684:	2001      	movs	r0, #1
 8000686:	f7ff ff65 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800068a:	2103      	movs	r1, #3
 800068c:	2002      	movs	r0, #2
 800068e:	f7ff ff61 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000692:	2103      	movs	r1, #3
 8000694:	2003      	movs	r0, #3
 8000696:	f7ff ff5d 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 800069a:	2103      	movs	r1, #3
 800069c:	2004      	movs	r0, #4
 800069e:	f7ff ff59 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80006a2:	2102      	movs	r1, #2
 80006a4:	2005      	movs	r0, #5
 80006a6:	f7ff ff55 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80006aa:	210e      	movs	r1, #14
 80006ac:	2006      	movs	r0, #6
 80006ae:	f7ff ff51 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80006b2:	2100      	movs	r1, #0
 80006b4:	2007      	movs	r0, #7
 80006b6:	f7ff ff4d 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80006ba:	2100      	movs	r1, #0
 80006bc:	2008      	movs	r0, #8
 80006be:	f7ff ff49 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 80006c2:	2100      	movs	r1, #0
 80006c4:	2009      	movs	r0, #9
 80006c6:	f7ff ff45 	bl	8000554 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80006ca:	4a32      	ldr	r2, [pc, #200]	@ (8000794 <nrf24_reset+0x144>)
 80006cc:	f107 0318 	add.w	r3, r7, #24
 80006d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d4:	6018      	str	r0, [r3, #0]
 80006d6:	3304      	adds	r3, #4
 80006d8:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	2205      	movs	r2, #5
 80006e0:	4619      	mov	r1, r3
 80006e2:	200a      	movs	r0, #10
 80006e4:	f7ff ff58 	bl	8000598 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80006e8:	4a2b      	ldr	r2, [pc, #172]	@ (8000798 <nrf24_reset+0x148>)
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f2:	6018      	str	r0, [r3, #0]
 80006f4:	3304      	adds	r3, #4
 80006f6:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	2205      	movs	r2, #5
 80006fe:	4619      	mov	r1, r3
 8000700:	200b      	movs	r0, #11
 8000702:	f7ff ff49 	bl	8000598 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000706:	21c3      	movs	r1, #195	@ 0xc3
 8000708:	200c      	movs	r0, #12
 800070a:	f7ff ff23 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800070e:	21c4      	movs	r1, #196	@ 0xc4
 8000710:	200d      	movs	r0, #13
 8000712:	f7ff ff1f 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000716:	21c5      	movs	r1, #197	@ 0xc5
 8000718:	200e      	movs	r0, #14
 800071a:	f7ff ff1b 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800071e:	21c6      	movs	r1, #198	@ 0xc6
 8000720:	200f      	movs	r0, #15
 8000722:	f7ff ff17 	bl	8000554 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000726:	4a1b      	ldr	r2, [pc, #108]	@ (8000794 <nrf24_reset+0x144>)
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000730:	6018      	str	r0, [r3, #0]
 8000732:	3304      	adds	r3, #4
 8000734:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	2205      	movs	r2, #5
 800073c:	4619      	mov	r1, r3
 800073e:	2010      	movs	r0, #16
 8000740:	f7ff ff2a 	bl	8000598 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000744:	2100      	movs	r1, #0
 8000746:	2011      	movs	r0, #17
 8000748:	f7ff ff04 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 800074c:	2100      	movs	r1, #0
 800074e:	2012      	movs	r0, #18
 8000750:	f7ff ff00 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000754:	2100      	movs	r1, #0
 8000756:	2013      	movs	r0, #19
 8000758:	f7ff fefc 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 800075c:	2100      	movs	r1, #0
 800075e:	2014      	movs	r0, #20
 8000760:	f7ff fef8 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000764:	2100      	movs	r1, #0
 8000766:	2015      	movs	r0, #21
 8000768:	f7ff fef4 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 800076c:	2100      	movs	r1, #0
 800076e:	2016      	movs	r0, #22
 8000770:	f7ff fef0 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000774:	2111      	movs	r1, #17
 8000776:	2017      	movs	r0, #23
 8000778:	f7ff feec 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 800077c:	2100      	movs	r1, #0
 800077e:	201c      	movs	r0, #28
 8000780:	f7ff fee8 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8000784:	2100      	movs	r1, #0
 8000786:	201d      	movs	r0, #29
 8000788:	f7ff fee4 	bl	8000554 <nrf24_WriteReg>
}
 800078c:	bf00      	nop
 800078e:	3720      	adds	r7, #32
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	08003788 	.word	0x08003788
 8000798:	08003790 	.word	0x08003790

0800079c <NRF24_Init>:




void NRF24_Init (void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80007a0:	f7ff fecc 	bl	800053c <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff ff53 	bl	8000650 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80007aa:	2100      	movs	r1, #0
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff fed1 	bl	8000554 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80007b2:	2100      	movs	r1, #0
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff fecd 	bl	8000554 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80007ba:	2100      	movs	r1, #0
 80007bc:	2002      	movs	r0, #2
 80007be:	f7ff fec9 	bl	8000554 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80007c2:	2103      	movs	r1, #3
 80007c4:	2003      	movs	r0, #3
 80007c6:	f7ff fec5 	bl	8000554 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80007ca:	2100      	movs	r1, #0
 80007cc:	2004      	movs	r0, #4
 80007ce:	f7ff fec1 	bl	8000554 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 80007d2:	2100      	movs	r1, #0
 80007d4:	2005      	movs	r0, #5
 80007d6:	f7ff febd 	bl	8000554 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 80007da:	210e      	movs	r1, #14
 80007dc:	2006      	movs	r0, #6
 80007de:	f7ff feb9 	bl	8000554 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80007e2:	f7ff fe9f 	bl	8000524 <CE_Enable>

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}

080007ea <NRF24_RxMode>:

	return 0;
}

void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b084      	sub	sp, #16
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
 80007f2:	460b      	mov	r3, r1
 80007f4:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 80007f6:	f7ff fea1 	bl	800053c <CE_Disable>

	nrf24_reset (STATUS);
 80007fa:	2007      	movs	r0, #7
 80007fc:	f7ff ff28 	bl	8000650 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	4619      	mov	r1, r3
 8000804:	2005      	movs	r0, #5
 8000806:	f7ff fea5 	bl	8000554 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800080a:	2002      	movs	r0, #2
 800080c:	f7ff feea 	bl	80005e4 <nrf24_ReadReg>
 8000810:	4603      	mov	r3, r0
 8000812:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	f043 0304 	orr.w	r3, r3, #4
 800081a:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	4619      	mov	r1, r3
 8000820:	2002      	movs	r0, #2
 8000822:	f7ff fe97 	bl	8000554 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8000826:	2205      	movs	r2, #5
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	200b      	movs	r0, #11
 800082c:	f7ff feb4 	bl	8000598 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8000830:	21ee      	movs	r1, #238	@ 0xee
 8000832:	200c      	movs	r0, #12
 8000834:	f7ff fe8e 	bl	8000554 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8000838:	2120      	movs	r1, #32
 800083a:	2013      	movs	r0, #19
 800083c:	f7ff fe8a 	bl	8000554 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000840:	2000      	movs	r0, #0
 8000842:	f7ff fecf 	bl	80005e4 <nrf24_ReadReg>
 8000846:	4603      	mov	r3, r0
 8000848:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 800084a:	7bbb      	ldrb	r3, [r7, #14]
 800084c:	f043 0303 	orr.w	r3, r3, #3
 8000850:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8000852:	7bbb      	ldrb	r3, [r7, #14]
 8000854:	4619      	mov	r1, r3
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff fe7c 	bl	8000554 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800085c:	f7ff fe62 	bl	8000524 <CE_Enable>
}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8000870:	2007      	movs	r0, #7
 8000872:	f7ff feb7 	bl	80005e4 <nrf24_ReadReg>
 8000876:	4603      	mov	r3, r0
 8000878:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000880:	2b00      	cmp	r3, #0
 8000882:	d00b      	beq.n	800089c <isDataAvailable+0x34>
 8000884:	7bfa      	ldrb	r2, [r7, #15]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	4013      	ands	r3, r2
 800088c:	2b00      	cmp	r3, #0
 800088e:	d005      	beq.n	800089c <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8000890:	2140      	movs	r1, #64	@ 0x40
 8000892:	2007      	movs	r0, #7
 8000894:	f7ff fe5e 	bl	8000554 <nrf24_WriteReg>

		return 1;
 8000898:	2301      	movs	r3, #1
 800089a:	e000      	b.n	800089e <isDataAvailable+0x36>
	}

	return 0;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 80008b4:	f7ff fe1e 	bl	80004f4 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 80008b8:	2361      	movs	r3, #97	@ 0x61
 80008ba:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80008bc:	f107 010f 	add.w	r1, r7, #15
 80008c0:	2364      	movs	r3, #100	@ 0x64
 80008c2:	2201      	movs	r2, #1
 80008c4:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <NRF24_Receive+0x50>)
 80008c6:	f001 fb52 	bl	8001f6e <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 80008ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ce:	2220      	movs	r2, #32
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	4809      	ldr	r0, [pc, #36]	@ (80008f8 <NRF24_Receive+0x50>)
 80008d4:	f001 fc8f 	bl	80021f6 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 80008d8:	f7ff fe18 	bl	800050c <CS_UnSelect>

	HAL_Delay(1);
 80008dc:	2001      	movs	r0, #1
 80008de:	f000 fbd9 	bl	8001094 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 80008e2:	23e2      	movs	r3, #226	@ 0xe2
 80008e4:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fe9b 	bl	8000624 <nrfsendCmd>
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000030 	.word	0x20000030

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000900:	f000 fb56 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000904:	f000 f874 	bl	80009f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000908:	f000 f9aa 	bl	8000c60 <MX_GPIO_Init>
  MX_SPI1_Init();
 800090c:	f000 f8da 	bl	8000ac4 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000910:	f000 f90e 	bl	8000b30 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Start PWM cho 4 ESC
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000914:	2100      	movs	r1, #0
 8000916:	4833      	ldr	r0, [pc, #204]	@ (80009e4 <main+0xe8>)
 8000918:	f002 f91a 	bl	8002b50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800091c:	2104      	movs	r1, #4
 800091e:	4831      	ldr	r0, [pc, #196]	@ (80009e4 <main+0xe8>)
 8000920:	f002 f916 	bl	8002b50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000924:	2108      	movs	r1, #8
 8000926:	482f      	ldr	r0, [pc, #188]	@ (80009e4 <main+0xe8>)
 8000928:	f002 f912 	bl	8002b50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800092c:	210c      	movs	r1, #12
 800092e:	482d      	ldr	r0, [pc, #180]	@ (80009e4 <main+0xe8>)
 8000930:	f002 f90e 	bl	8002b50 <HAL_TIM_PWM_Start>

  // Arm ESC: giữ ở 1000 trong 2 giây
  CHANGE_SPEED_MOTOR_FRONT_RIGHT_CCW(1000);
 8000934:	4b2b      	ldr	r3, [pc, #172]	@ (80009e4 <main+0xe8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800093c:	635a      	str	r2, [r3, #52]	@ 0x34
  CHANGE_SPEED_MOTOR_REAR_RIGHT_CW(1000);
 800093e:	4b29      	ldr	r3, [pc, #164]	@ (80009e4 <main+0xe8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000946:	639a      	str	r2, [r3, #56]	@ 0x38
  CHANGE_SPEED_MOTOR_REAR_LEFT_CCW(1000);
 8000948:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <main+0xe8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000950:	63da      	str	r2, [r3, #60]	@ 0x3c
  CHANGE_SPEED_MOTOR_FRONT_LEFT_CW(1000);
 8000952:	4b24      	ldr	r3, [pc, #144]	@ (80009e4 <main+0xe8>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800095a:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(2000);
 800095c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000960:	f000 fb98 	bl	8001094 <HAL_Delay>

  NRF24_Init();
 8000964:	f7ff ff1a 	bl	800079c <NRF24_Init>

  HAL_Delay(50);
 8000968:	2032      	movs	r0, #50	@ 0x32
 800096a:	f000 fb93 	bl	8001094 <HAL_Delay>

  NRF24_RxMode(RxAddress, 10);
 800096e:	210a      	movs	r1, #10
 8000970:	481d      	ldr	r0, [pc, #116]	@ (80009e8 <main+0xec>)
 8000972:	f7ff ff3a 	bl	80007ea <NRF24_RxMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (isDataAvailable(2) == 1)
 8000976:	2002      	movs	r0, #2
 8000978:	f7ff ff76 	bl	8000868 <isDataAvailable>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d1f9      	bne.n	8000976 <main+0x7a>
	  {
		  NRF24_Receive(RxData);
 8000982:	481a      	ldr	r0, [pc, #104]	@ (80009ec <main+0xf0>)
 8000984:	f7ff ff90 	bl	80008a8 <NRF24_Receive>
		  if(RxData[0] == 1)
 8000988:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <main+0xf0>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d114      	bne.n	80009ba <main+0xbe>
		  {
			  CHANGE_SPEED_MOTOR_FRONT_RIGHT_CCW(1500);
 8000990:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <main+0xe8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000998:	635a      	str	r2, [r3, #52]	@ 0x34
			  CHANGE_SPEED_MOTOR_REAR_RIGHT_CW(1500);
 800099a:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <main+0xe8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80009a2:	639a      	str	r2, [r3, #56]	@ 0x38
			  CHANGE_SPEED_MOTOR_REAR_LEFT_CCW(1500);
 80009a4:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <main+0xe8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80009ac:	63da      	str	r2, [r3, #60]	@ 0x3c
			  CHANGE_SPEED_MOTOR_FRONT_LEFT_CW(1500);
 80009ae:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <main+0xe8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80009b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80009b8:	e7dd      	b.n	8000976 <main+0x7a>
		  } else
		  {
			  CHANGE_SPEED_MOTOR_FRONT_RIGHT_CCW(1000);
 80009ba:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <main+0xe8>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009c2:	635a      	str	r2, [r3, #52]	@ 0x34
			  CHANGE_SPEED_MOTOR_REAR_RIGHT_CW(1000);
 80009c4:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <main+0xe8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009cc:	639a      	str	r2, [r3, #56]	@ 0x38
			  CHANGE_SPEED_MOTOR_REAR_LEFT_CCW(1000);
 80009ce:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <main+0xe8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009d6:	63da      	str	r2, [r3, #60]	@ 0x3c
			  CHANGE_SPEED_MOTOR_FRONT_LEFT_CW(1000);
 80009d8:	4b02      	ldr	r3, [pc, #8]	@ (80009e4 <main+0xe8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009e0:	641a      	str	r2, [r3, #64]	@ 0x40
	  if (isDataAvailable(2) == 1)
 80009e2:	e7c8      	b.n	8000976 <main+0x7a>
 80009e4:	20000088 	.word	0x20000088
 80009e8:	20000000 	.word	0x20000000
 80009ec:	200000d0 	.word	0x200000d0

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b094      	sub	sp, #80	@ 0x50
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	2230      	movs	r2, #48	@ 0x30
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 fe8a 	bl	8003718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	4b28      	ldr	r3, [pc, #160]	@ (8000abc <SystemClock_Config+0xcc>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	4a27      	ldr	r2, [pc, #156]	@ (8000abc <SystemClock_Config+0xcc>)
 8000a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a24:	4b25      	ldr	r3, [pc, #148]	@ (8000abc <SystemClock_Config+0xcc>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	4b22      	ldr	r3, [pc, #136]	@ (8000ac0 <SystemClock_Config+0xd0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a21      	ldr	r2, [pc, #132]	@ (8000ac0 <SystemClock_Config+0xd0>)
 8000a3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac0 <SystemClock_Config+0xd0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a50:	2301      	movs	r3, #1
 8000a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a54:	2310      	movs	r3, #16
 8000a56:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a60:	2308      	movs	r3, #8
 8000a62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a64:	2348      	movs	r3, #72	@ 0x48
 8000a66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fdcd 	bl	8001614 <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a80:	f000 f958 	bl	8000d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a84:	230f      	movs	r3, #15
 8000a86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 f82e 	bl	8001b04 <HAL_RCC_ClockConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aae:	f000 f941 	bl	8000d34 <Error_Handler>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3750      	adds	r7, #80	@ 0x50
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40007000 	.word	0x40007000

08000ac4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000aca:	4a18      	ldr	r2, [pc, #96]	@ (8000b2c <MX_SPI1_Init+0x68>)
 8000acc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ace:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000ad0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ad4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ad6:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000af0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000af4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b08:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000b10:	220a      	movs	r2, #10
 8000b12:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b14:	4804      	ldr	r0, [pc, #16]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000b16:	f001 f9a1 	bl	8001e5c <HAL_SPI_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b20:	f000 f908 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000030 	.word	0x20000030
 8000b2c:	40013000 	.word	0x40013000

08000b30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08e      	sub	sp, #56	@ 0x38
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	f107 0320 	add.w	r3, r7, #32
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
 8000b5c:	615a      	str	r2, [r3, #20]
 8000b5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b60:	4b3d      	ldr	r3, [pc, #244]	@ (8000c58 <MX_TIM4_Init+0x128>)
 8000b62:	4a3e      	ldr	r2, [pc, #248]	@ (8000c5c <MX_TIM4_Init+0x12c>)
 8000b64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000b66:	4b3c      	ldr	r3, [pc, #240]	@ (8000c58 <MX_TIM4_Init+0x128>)
 8000b68:	2247      	movs	r2, #71	@ 0x47
 8000b6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c58 <MX_TIM4_Init+0x128>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000b72:	4b39      	ldr	r3, [pc, #228]	@ (8000c58 <MX_TIM4_Init+0x128>)
 8000b74:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000b78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7a:	4b37      	ldr	r3, [pc, #220]	@ (8000c58 <MX_TIM4_Init+0x128>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b80:	4b35      	ldr	r3, [pc, #212]	@ (8000c58 <MX_TIM4_Init+0x128>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b86:	4834      	ldr	r0, [pc, #208]	@ (8000c58 <MX_TIM4_Init+0x128>)
 8000b88:	f001 ff3a 	bl	8002a00 <HAL_TIM_Base_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000b92:	f000 f8cf 	bl	8000d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	482d      	ldr	r0, [pc, #180]	@ (8000c58 <MX_TIM4_Init+0x128>)
 8000ba4:	f002 f95e 	bl	8002e64 <HAL_TIM_ConfigClockSource>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000bae:	f000 f8c1 	bl	8000d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bb2:	4829      	ldr	r0, [pc, #164]	@ (8000c58 <MX_TIM4_Init+0x128>)
 8000bb4:	f001 ff73 	bl	8002a9e <HAL_TIM_PWM_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000bbe:	f000 f8b9 	bl	8000d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bca:	f107 0320 	add.w	r3, r7, #32
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4821      	ldr	r0, [pc, #132]	@ (8000c58 <MX_TIM4_Init+0x128>)
 8000bd2:	f002 fd25 	bl	8003620 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000bdc:	f000 f8aa 	bl	8000d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be0:	2360      	movs	r3, #96	@ 0x60
 8000be2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4818      	ldr	r0, [pc, #96]	@ (8000c58 <MX_TIM4_Init+0x128>)
 8000bf8:	f002 f872 	bl	8002ce0 <HAL_TIM_PWM_ConfigChannel>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000c02:	f000 f897 	bl	8000d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2204      	movs	r2, #4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4812      	ldr	r0, [pc, #72]	@ (8000c58 <MX_TIM4_Init+0x128>)
 8000c0e:	f002 f867 	bl	8002ce0 <HAL_TIM_PWM_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000c18:	f000 f88c 	bl	8000d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2208      	movs	r2, #8
 8000c20:	4619      	mov	r1, r3
 8000c22:	480d      	ldr	r0, [pc, #52]	@ (8000c58 <MX_TIM4_Init+0x128>)
 8000c24:	f002 f85c 	bl	8002ce0 <HAL_TIM_PWM_ConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000c2e:	f000 f881 	bl	8000d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	220c      	movs	r2, #12
 8000c36:	4619      	mov	r1, r3
 8000c38:	4807      	ldr	r0, [pc, #28]	@ (8000c58 <MX_TIM4_Init+0x128>)
 8000c3a:	f002 f851 	bl	8002ce0 <HAL_TIM_PWM_ConfigChannel>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000c44:	f000 f876 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c48:	4803      	ldr	r0, [pc, #12]	@ (8000c58 <MX_TIM4_Init+0x128>)
 8000c4a:	f000 f90b 	bl	8000e64 <HAL_TIM_MspPostInit>

}
 8000c4e:	bf00      	nop
 8000c50:	3738      	adds	r7, #56	@ 0x38
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000088 	.word	0x20000088
 8000c5c:	40000800 	.word	0x40000800

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	f107 030c 	add.w	r3, r7, #12
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d28 <MX_GPIO_Init+0xc8>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8000d28 <MX_GPIO_Init+0xc8>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b28      	ldr	r3, [pc, #160]	@ (8000d28 <MX_GPIO_Init+0xc8>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b24      	ldr	r3, [pc, #144]	@ (8000d28 <MX_GPIO_Init+0xc8>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	4a23      	ldr	r2, [pc, #140]	@ (8000d28 <MX_GPIO_Init+0xc8>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca2:	4b21      	ldr	r3, [pc, #132]	@ (8000d28 <MX_GPIO_Init+0xc8>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d28 <MX_GPIO_Init+0xc8>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d28 <MX_GPIO_Init+0xc8>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <MX_GPIO_Init+0xc8>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CSN_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f248 0110 	movw	r1, #32784	@ 0x8010
 8000cd0:	4816      	ldr	r0, [pc, #88]	@ (8000d2c <MX_GPIO_Init+0xcc>)
 8000cd2:	f000 fc85 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_IRQ_Pin|NRF24_CE_Pin|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8000cdc:	4814      	ldr	r0, [pc, #80]	@ (8000d30 <MX_GPIO_Init+0xd0>)
 8000cde:	f000 fc7f 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CSN_Pin PA15 */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|GPIO_PIN_15;
 8000ce2:	f248 0310 	movw	r3, #32784	@ 0x8010
 8000ce6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480c      	ldr	r0, [pc, #48]	@ (8000d2c <MX_GPIO_Init+0xcc>)
 8000cfc:	f000 fad4 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF24_IRQ_Pin NRF24_CE_Pin PC10 PC11 */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin|NRF24_CE_Pin|GPIO_PIN_10|GPIO_PIN_11;
 8000d00:	f44f 6343 	mov.w	r3, #3120	@ 0xc30
 8000d04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <MX_GPIO_Init+0xd0>)
 8000d1a:	f000 fac5 	bl	80012a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d1e:	bf00      	nop
 8000d20:	3720      	adds	r7, #32
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40020800 	.word	0x40020800

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d38:	b672      	cpsid	i
}
 8000d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <Error_Handler+0x8>

08000d40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <HAL_MspInit+0x4c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d8c <HAL_MspInit+0x4c>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d56:	4b0d      	ldr	r3, [pc, #52]	@ (8000d8c <HAL_MspInit+0x4c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <HAL_MspInit+0x4c>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	4a08      	ldr	r2, [pc, #32]	@ (8000d8c <HAL_MspInit+0x4c>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_MspInit+0x4c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800

08000d90 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a19      	ldr	r2, [pc, #100]	@ (8000e14 <HAL_SPI_MspInit+0x84>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d12b      	bne.n	8000e0a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <HAL_SPI_MspInit+0x88>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	4a17      	ldr	r2, [pc, #92]	@ (8000e18 <HAL_SPI_MspInit+0x88>)
 8000dbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc2:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <HAL_SPI_MspInit+0x88>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <HAL_SPI_MspInit+0x88>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a10      	ldr	r2, [pc, #64]	@ (8000e18 <HAL_SPI_MspInit+0x88>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <HAL_SPI_MspInit+0x88>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000dea:	23e0      	movs	r3, #224	@ 0xe0
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <HAL_SPI_MspInit+0x8c>)
 8000e06:	f000 fa4f 	bl	80012a8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	@ 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40013000 	.word	0x40013000
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020000 	.word	0x40020000

08000e20 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e5c <HAL_TIM_Base_MspInit+0x3c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d10d      	bne.n	8000e4e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <HAL_TIM_Base_MspInit+0x40>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	4a09      	ldr	r2, [pc, #36]	@ (8000e60 <HAL_TIM_Base_MspInit+0x40>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e42:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <HAL_TIM_Base_MspInit+0x40>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40000800 	.word	0x40000800
 8000e60:	40023800 	.word	0x40023800

08000e64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a12      	ldr	r2, [pc, #72]	@ (8000ecc <HAL_TIM_MspPostInit+0x68>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d11e      	bne.n	8000ec4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <HAL_TIM_MspPostInit+0x6c>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a10      	ldr	r2, [pc, #64]	@ (8000ed0 <HAL_TIM_MspPostInit+0x6c>)
 8000e90:	f043 0308 	orr.w	r3, r3, #8
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <HAL_TIM_MspPostInit+0x6c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ea2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000ea6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <HAL_TIM_MspPostInit+0x70>)
 8000ec0:	f000 f9f2 	bl	80012a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40000800 	.word	0x40000800
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020c00 	.word	0x40020c00

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <NMI_Handler+0x4>

08000ee0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <MemManage_Handler+0x4>

08000ef0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <UsageFault_Handler+0x4>

08000f00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2e:	f000 f891 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	@ (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f60:	f7ff ffea 	bl	8000f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f64:	480c      	ldr	r0, [pc, #48]	@ (8000f98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f66:	490d      	ldr	r1, [pc, #52]	@ (8000f9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f68:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f002 fbcd 	bl	8003728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8e:	f7ff fcb5 	bl	80008fc <main>
  bx  lr    
 8000f92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000fa0:	080037b8 	.word	0x080037b8
  ldr r2, =_sbss
 8000fa4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000fa8:	200000f4 	.word	0x200000f4

08000fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff0 <HAL_Init+0x40>)
 8000fba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <HAL_Init+0x40>)
 8000fc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	@ (8000ff0 <HAL_Init+0x40>)
 8000fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f000 f931 	bl	8001240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fde:	200f      	movs	r0, #15
 8000fe0:	f000 f808 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe4:	f7ff feac 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023c00 	.word	0x40023c00

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_InitTick+0x54>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <HAL_InitTick+0x58>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100a:	fbb3 f3f1 	udiv	r3, r3, r1
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f93b 	bl	800128e <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e00e      	b.n	8001040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d80a      	bhi.n	800103e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f911 	bl	8001256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001034:	4a06      	ldr	r2, [pc, #24]	@ (8001050 <HAL_InitTick+0x5c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000008 	.word	0x20000008
 800104c:	20000010 	.word	0x20000010
 8001050:	2000000c 	.word	0x2000000c

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000010 	.word	0x20000010
 8001078:	200000f0 	.word	0x200000f0

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	@ (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	200000f0 	.word	0x200000f0

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000010 	.word	0x20000010

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db0a      	blt.n	800116a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	490c      	ldr	r1, [pc, #48]	@ (800118c <__NVIC_SetPriority+0x4c>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	440b      	add	r3, r1
 8001164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001168:	e00a      	b.n	8001180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4908      	ldr	r1, [pc, #32]	@ (8001190 <__NVIC_SetPriority+0x50>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	3b04      	subs	r3, #4
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	440b      	add	r3, r1
 800117e:	761a      	strb	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	@ 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f1c3 0307 	rsb	r3, r3, #7
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	bf28      	it	cs
 80011b2:	2304      	movcs	r3, #4
 80011b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3304      	adds	r3, #4
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d902      	bls.n	80011c4 <NVIC_EncodePriority+0x30>
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3b03      	subs	r3, #3
 80011c2:	e000      	b.n	80011c6 <NVIC_EncodePriority+0x32>
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	4313      	orrs	r3, r2
         );
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3724      	adds	r7, #36	@ 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800120c:	d301      	bcc.n	8001212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120e:	2301      	movs	r3, #1
 8001210:	e00f      	b.n	8001232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <SysTick_Config+0x40>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121a:	210f      	movs	r1, #15
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f7ff ff8e 	bl	8001140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <SysTick_Config+0x40>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122a:	4b04      	ldr	r3, [pc, #16]	@ (800123c <SysTick_Config+0x40>)
 800122c:	2207      	movs	r2, #7
 800122e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	e000e010 	.word	0xe000e010

08001240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff47 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001268:	f7ff ff5c 	bl	8001124 <__NVIC_GetPriorityGrouping>
 800126c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff ff8e 	bl	8001194 <NVIC_EncodePriority>
 8001278:	4602      	mov	r2, r0
 800127a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff5d 	bl	8001140 <__NVIC_SetPriority>
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffb0 	bl	80011fc <SysTick_Config>
 800129c:	4603      	mov	r3, r0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	@ 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
 80012c2:	e16b      	b.n	800159c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c4:	2201      	movs	r2, #1
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	429a      	cmp	r2, r3
 80012de:	f040 815a 	bne.w	8001596 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d005      	beq.n	80012fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d130      	bne.n	800135c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	2203      	movs	r2, #3
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001330:	2201      	movs	r2, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f003 0201 	and.w	r2, r3, #1
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b03      	cmp	r3, #3
 8001366:	d017      	beq.n	8001398 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	2203      	movs	r2, #3
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d123      	bne.n	80013ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	08da      	lsrs	r2, r3, #3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3208      	adds	r2, #8
 80013ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	220f      	movs	r2, #15
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	691a      	ldr	r2, [r3, #16]
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	08da      	lsrs	r2, r3, #3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3208      	adds	r2, #8
 80013e6:	69b9      	ldr	r1, [r7, #24]
 80013e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	2203      	movs	r2, #3
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0203 	and.w	r2, r3, #3
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 80b4 	beq.w	8001596 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b60      	ldr	r3, [pc, #384]	@ (80015b4 <HAL_GPIO_Init+0x30c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	4a5f      	ldr	r2, [pc, #380]	@ (80015b4 <HAL_GPIO_Init+0x30c>)
 8001438:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800143c:	6453      	str	r3, [r2, #68]	@ 0x44
 800143e:	4b5d      	ldr	r3, [pc, #372]	@ (80015b4 <HAL_GPIO_Init+0x30c>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001442:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800144a:	4a5b      	ldr	r2, [pc, #364]	@ (80015b8 <HAL_GPIO_Init+0x310>)
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3302      	adds	r3, #2
 8001452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	220f      	movs	r2, #15
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a52      	ldr	r2, [pc, #328]	@ (80015bc <HAL_GPIO_Init+0x314>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d02b      	beq.n	80014ce <HAL_GPIO_Init+0x226>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a51      	ldr	r2, [pc, #324]	@ (80015c0 <HAL_GPIO_Init+0x318>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d025      	beq.n	80014ca <HAL_GPIO_Init+0x222>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a50      	ldr	r2, [pc, #320]	@ (80015c4 <HAL_GPIO_Init+0x31c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d01f      	beq.n	80014c6 <HAL_GPIO_Init+0x21e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4f      	ldr	r2, [pc, #316]	@ (80015c8 <HAL_GPIO_Init+0x320>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d019      	beq.n	80014c2 <HAL_GPIO_Init+0x21a>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4e      	ldr	r2, [pc, #312]	@ (80015cc <HAL_GPIO_Init+0x324>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d013      	beq.n	80014be <HAL_GPIO_Init+0x216>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4d      	ldr	r2, [pc, #308]	@ (80015d0 <HAL_GPIO_Init+0x328>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d00d      	beq.n	80014ba <HAL_GPIO_Init+0x212>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4c      	ldr	r2, [pc, #304]	@ (80015d4 <HAL_GPIO_Init+0x32c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d007      	beq.n	80014b6 <HAL_GPIO_Init+0x20e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4b      	ldr	r2, [pc, #300]	@ (80015d8 <HAL_GPIO_Init+0x330>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_GPIO_Init+0x20a>
 80014ae:	2307      	movs	r3, #7
 80014b0:	e00e      	b.n	80014d0 <HAL_GPIO_Init+0x228>
 80014b2:	2308      	movs	r3, #8
 80014b4:	e00c      	b.n	80014d0 <HAL_GPIO_Init+0x228>
 80014b6:	2306      	movs	r3, #6
 80014b8:	e00a      	b.n	80014d0 <HAL_GPIO_Init+0x228>
 80014ba:	2305      	movs	r3, #5
 80014bc:	e008      	b.n	80014d0 <HAL_GPIO_Init+0x228>
 80014be:	2304      	movs	r3, #4
 80014c0:	e006      	b.n	80014d0 <HAL_GPIO_Init+0x228>
 80014c2:	2303      	movs	r3, #3
 80014c4:	e004      	b.n	80014d0 <HAL_GPIO_Init+0x228>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e002      	b.n	80014d0 <HAL_GPIO_Init+0x228>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <HAL_GPIO_Init+0x228>
 80014ce:	2300      	movs	r3, #0
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	f002 0203 	and.w	r2, r2, #3
 80014d6:	0092      	lsls	r2, r2, #2
 80014d8:	4093      	lsls	r3, r2
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e0:	4935      	ldr	r1, [pc, #212]	@ (80015b8 <HAL_GPIO_Init+0x310>)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3302      	adds	r3, #2
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ee:	4b3b      	ldr	r3, [pc, #236]	@ (80015dc <HAL_GPIO_Init+0x334>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001512:	4a32      	ldr	r2, [pc, #200]	@ (80015dc <HAL_GPIO_Init+0x334>)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001518:	4b30      	ldr	r3, [pc, #192]	@ (80015dc <HAL_GPIO_Init+0x334>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800153c:	4a27      	ldr	r2, [pc, #156]	@ (80015dc <HAL_GPIO_Init+0x334>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001542:	4b26      	ldr	r3, [pc, #152]	@ (80015dc <HAL_GPIO_Init+0x334>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001566:	4a1d      	ldr	r2, [pc, #116]	@ (80015dc <HAL_GPIO_Init+0x334>)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800156c:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <HAL_GPIO_Init+0x334>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001590:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <HAL_GPIO_Init+0x334>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3301      	adds	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2b0f      	cmp	r3, #15
 80015a0:	f67f ae90 	bls.w	80012c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3724      	adds	r7, #36	@ 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40013800 	.word	0x40013800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40020400 	.word	0x40020400
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40020c00 	.word	0x40020c00
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40021400 	.word	0x40021400
 80015d4:	40021800 	.word	0x40021800
 80015d8:	40021c00 	.word	0x40021c00
 80015dc:	40013c00 	.word	0x40013c00

080015e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
 80015ec:	4613      	mov	r3, r2
 80015ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f0:	787b      	ldrb	r3, [r7, #1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015fc:	e003      	b.n	8001606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	041a      	lsls	r2, r3, #16
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	619a      	str	r2, [r3, #24]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e267      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d075      	beq.n	800171e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001632:	4b88      	ldr	r3, [pc, #544]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b04      	cmp	r3, #4
 800163c:	d00c      	beq.n	8001658 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800163e:	4b85      	ldr	r3, [pc, #532]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001646:	2b08      	cmp	r3, #8
 8001648:	d112      	bne.n	8001670 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800164a:	4b82      	ldr	r3, [pc, #520]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001652:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001656:	d10b      	bne.n	8001670 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	4b7e      	ldr	r3, [pc, #504]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d05b      	beq.n	800171c <HAL_RCC_OscConfig+0x108>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d157      	bne.n	800171c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e242      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001678:	d106      	bne.n	8001688 <HAL_RCC_OscConfig+0x74>
 800167a:	4b76      	ldr	r3, [pc, #472]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a75      	ldr	r2, [pc, #468]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e01d      	b.n	80016c4 <HAL_RCC_OscConfig+0xb0>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001690:	d10c      	bne.n	80016ac <HAL_RCC_OscConfig+0x98>
 8001692:	4b70      	ldr	r3, [pc, #448]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a6f      	ldr	r2, [pc, #444]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001698:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b6d      	ldr	r3, [pc, #436]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a6c      	ldr	r2, [pc, #432]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80016a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e00b      	b.n	80016c4 <HAL_RCC_OscConfig+0xb0>
 80016ac:	4b69      	ldr	r3, [pc, #420]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a68      	ldr	r2, [pc, #416]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80016b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b66      	ldr	r3, [pc, #408]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a65      	ldr	r2, [pc, #404]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80016be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d013      	beq.n	80016f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fcd6 	bl	800107c <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fcd2 	bl	800107c <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	@ 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e207      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0xc0>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fcc2 	bl	800107c <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff fcbe 	bl	800107c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	@ 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e1f3      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	4b51      	ldr	r3, [pc, #324]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0xe8>
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d063      	beq.n	80017f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800172a:	4b4a      	ldr	r3, [pc, #296]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00b      	beq.n	800174e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001736:	4b47      	ldr	r3, [pc, #284]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800173e:	2b08      	cmp	r3, #8
 8001740:	d11c      	bne.n	800177c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001742:	4b44      	ldr	r3, [pc, #272]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d116      	bne.n	800177c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174e:	4b41      	ldr	r3, [pc, #260]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <HAL_RCC_OscConfig+0x152>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d001      	beq.n	8001766 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e1c7      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001766:	4b3b      	ldr	r3, [pc, #236]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4937      	ldr	r1, [pc, #220]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001776:	4313      	orrs	r3, r2
 8001778:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177a:	e03a      	b.n	80017f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001784:	4b34      	ldr	r3, [pc, #208]	@ (8001858 <HAL_RCC_OscConfig+0x244>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178a:	f7ff fc77 	bl	800107c <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001792:	f7ff fc73 	bl	800107c <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e1a8      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b0:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4925      	ldr	r1, [pc, #148]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	600b      	str	r3, [r1, #0]
 80017c4:	e015      	b.n	80017f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c6:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <HAL_RCC_OscConfig+0x244>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fc56 	bl	800107c <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d4:	f7ff fc52 	bl	800107c <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e187      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d036      	beq.n	800186c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d016      	beq.n	8001834 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001806:	4b15      	ldr	r3, [pc, #84]	@ (800185c <HAL_RCC_OscConfig+0x248>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7ff fc36 	bl	800107c <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001814:	f7ff fc32 	bl	800107c <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e167      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001826:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x200>
 8001832:	e01b      	b.n	800186c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001834:	4b09      	ldr	r3, [pc, #36]	@ (800185c <HAL_RCC_OscConfig+0x248>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183a:	f7ff fc1f 	bl	800107c <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	e00e      	b.n	8001860 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001842:	f7ff fc1b 	bl	800107c <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d907      	bls.n	8001860 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e150      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
 8001854:	40023800 	.word	0x40023800
 8001858:	42470000 	.word	0x42470000
 800185c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	4b88      	ldr	r3, [pc, #544]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1ea      	bne.n	8001842 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 8097 	beq.w	80019a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187e:	4b81      	ldr	r3, [pc, #516]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10f      	bne.n	80018aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	4a7c      	ldr	r2, [pc, #496]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	@ 0x40
 800189a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018a6:	2301      	movs	r3, #1
 80018a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018aa:	4b77      	ldr	r3, [pc, #476]	@ (8001a88 <HAL_RCC_OscConfig+0x474>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d118      	bne.n	80018e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b6:	4b74      	ldr	r3, [pc, #464]	@ (8001a88 <HAL_RCC_OscConfig+0x474>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a73      	ldr	r2, [pc, #460]	@ (8001a88 <HAL_RCC_OscConfig+0x474>)
 80018bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c2:	f7ff fbdb 	bl	800107c <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ca:	f7ff fbd7 	bl	800107c <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e10c      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001a88 <HAL_RCC_OscConfig+0x474>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x2ea>
 80018f0:	4b64      	ldr	r3, [pc, #400]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f4:	4a63      	ldr	r2, [pc, #396]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80018fc:	e01c      	b.n	8001938 <HAL_RCC_OscConfig+0x324>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b05      	cmp	r3, #5
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x30c>
 8001906:	4b5f      	ldr	r3, [pc, #380]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190a:	4a5e      	ldr	r2, [pc, #376]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6713      	str	r3, [r2, #112]	@ 0x70
 8001912:	4b5c      	ldr	r3, [pc, #368]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001916:	4a5b      	ldr	r2, [pc, #364]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6713      	str	r3, [r2, #112]	@ 0x70
 800191e:	e00b      	b.n	8001938 <HAL_RCC_OscConfig+0x324>
 8001920:	4b58      	ldr	r3, [pc, #352]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001924:	4a57      	ldr	r2, [pc, #348]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	6713      	str	r3, [r2, #112]	@ 0x70
 800192c:	4b55      	ldr	r3, [pc, #340]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001930:	4a54      	ldr	r2, [pc, #336]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001932:	f023 0304 	bic.w	r3, r3, #4
 8001936:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d015      	beq.n	800196c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001940:	f7ff fb9c 	bl	800107c <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001946:	e00a      	b.n	800195e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7ff fb98 	bl	800107c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e0cb      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195e:	4b49      	ldr	r3, [pc, #292]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0ee      	beq.n	8001948 <HAL_RCC_OscConfig+0x334>
 800196a:	e014      	b.n	8001996 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196c:	f7ff fb86 	bl	800107c <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001972:	e00a      	b.n	800198a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001974:	f7ff fb82 	bl	800107c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e0b5      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1ee      	bne.n	8001974 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199c:	4b39      	ldr	r3, [pc, #228]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	4a38      	ldr	r2, [pc, #224]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 80019a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80a1 	beq.w	8001af4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019b2:	4b34      	ldr	r3, [pc, #208]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d05c      	beq.n	8001a78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d141      	bne.n	8001a4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c6:	4b31      	ldr	r3, [pc, #196]	@ (8001a8c <HAL_RCC_OscConfig+0x478>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fb56 	bl	800107c <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff fb52 	bl	800107c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e087      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e6:	4b27      	ldr	r3, [pc, #156]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69da      	ldr	r2, [r3, #28]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	019b      	lsls	r3, r3, #6
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	041b      	lsls	r3, r3, #16
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a14:	061b      	lsls	r3, r3, #24
 8001a16:	491b      	ldr	r1, [pc, #108]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a8c <HAL_RCC_OscConfig+0x478>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a22:	f7ff fb2b 	bl	800107c <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2a:	f7ff fb27 	bl	800107c <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e05c      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3c:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x416>
 8001a48:	e054      	b.n	8001af4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <HAL_RCC_OscConfig+0x478>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff fb14 	bl	800107c <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff fb10 	bl	800107c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e045      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x444>
 8001a76:	e03d      	b.n	8001af4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d107      	bne.n	8001a90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e038      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40007000 	.word	0x40007000
 8001a8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a90:	4b1b      	ldr	r3, [pc, #108]	@ (8001b00 <HAL_RCC_OscConfig+0x4ec>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d028      	beq.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d121      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d11a      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ac6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d111      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad6:	085b      	lsrs	r3, r3, #1
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800

08001b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0cc      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b18:	4b68      	ldr	r3, [pc, #416]	@ (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d90c      	bls.n	8001b40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b65      	ldr	r3, [pc, #404]	@ (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b63      	ldr	r3, [pc, #396]	@ (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0b8      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b58:	4b59      	ldr	r3, [pc, #356]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4a58      	ldr	r2, [pc, #352]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b70:	4b53      	ldr	r3, [pc, #332]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4a52      	ldr	r2, [pc, #328]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4b50      	ldr	r3, [pc, #320]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	494d      	ldr	r1, [pc, #308]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d044      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b47      	ldr	r3, [pc, #284]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d119      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e07f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d003      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc2:	4b3f      	ldr	r3, [pc, #252]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e06f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e067      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be2:	4b37      	ldr	r3, [pc, #220]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f023 0203 	bic.w	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4934      	ldr	r1, [pc, #208]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf4:	f7ff fa42 	bl	800107c <HAL_GetTick>
 8001bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfc:	f7ff fa3e 	bl	800107c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e04f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c12:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 020c 	and.w	r2, r3, #12
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d1eb      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c24:	4b25      	ldr	r3, [pc, #148]	@ (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d20c      	bcs.n	8001c4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b22      	ldr	r3, [pc, #136]	@ (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b20      	ldr	r3, [pc, #128]	@ (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e032      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c58:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4916      	ldr	r1, [pc, #88]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c76:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	490e      	ldr	r1, [pc, #56]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c8a:	f000 f821 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	490a      	ldr	r1, [pc, #40]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	5ccb      	ldrb	r3, [r1, r3]
 8001c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca2:	4a09      	ldr	r2, [pc, #36]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ca6:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff f9a2 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023c00 	.word	0x40023c00
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	08003798 	.word	0x08003798
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	2000000c 	.word	0x2000000c

08001cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cd4:	b090      	sub	sp, #64	@ 0x40
 8001cd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ce8:	4b59      	ldr	r3, [pc, #356]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d00d      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x40>
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	f200 80a1 	bhi.w	8001e3c <HAL_RCC_GetSysClockFreq+0x16c>
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0x34>
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d003      	beq.n	8001d0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d02:	e09b      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d04:	4b53      	ldr	r3, [pc, #332]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d06:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d08:	e09b      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d0a:	4b53      	ldr	r3, [pc, #332]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d0e:	e098      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d10:	4b4f      	ldr	r3, [pc, #316]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d18:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d1a:	4b4d      	ldr	r3, [pc, #308]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d028      	beq.n	8001d78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d26:	4b4a      	ldr	r3, [pc, #296]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	099b      	lsrs	r3, r3, #6
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	623b      	str	r3, [r7, #32]
 8001d30:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4b47      	ldr	r3, [pc, #284]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d3c:	fb03 f201 	mul.w	r2, r3, r1
 8001d40:	2300      	movs	r3, #0
 8001d42:	fb00 f303 	mul.w	r3, r0, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	4a43      	ldr	r2, [pc, #268]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d4a:	fba0 1202 	umull	r1, r2, r0, r2
 8001d4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d50:	460a      	mov	r2, r1
 8001d52:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001d54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d56:	4413      	add	r3, r2
 8001d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
 8001d60:	61fa      	str	r2, [r7, #28]
 8001d62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d6a:	f7fe fa2d 	bl	80001c8 <__aeabi_uldivmod>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4613      	mov	r3, r2
 8001d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d76:	e053      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d78:	4b35      	ldr	r3, [pc, #212]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	099b      	lsrs	r3, r3, #6
 8001d7e:	2200      	movs	r2, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	617a      	str	r2, [r7, #20]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d8a:	f04f 0b00 	mov.w	fp, #0
 8001d8e:	4652      	mov	r2, sl
 8001d90:	465b      	mov	r3, fp
 8001d92:	f04f 0000 	mov.w	r0, #0
 8001d96:	f04f 0100 	mov.w	r1, #0
 8001d9a:	0159      	lsls	r1, r3, #5
 8001d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001da0:	0150      	lsls	r0, r2, #5
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	ebb2 080a 	subs.w	r8, r2, sl
 8001daa:	eb63 090b 	sbc.w	r9, r3, fp
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001dba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001dbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001dc2:	ebb2 0408 	subs.w	r4, r2, r8
 8001dc6:	eb63 0509 	sbc.w	r5, r3, r9
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	00eb      	lsls	r3, r5, #3
 8001dd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dd8:	00e2      	lsls	r2, r4, #3
 8001dda:	4614      	mov	r4, r2
 8001ddc:	461d      	mov	r5, r3
 8001dde:	eb14 030a 	adds.w	r3, r4, sl
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	eb45 030b 	adc.w	r3, r5, fp
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001df6:	4629      	mov	r1, r5
 8001df8:	028b      	lsls	r3, r1, #10
 8001dfa:	4621      	mov	r1, r4
 8001dfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e00:	4621      	mov	r1, r4
 8001e02:	028a      	lsls	r2, r1, #10
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	60fa      	str	r2, [r7, #12]
 8001e10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e14:	f7fe f9d8 	bl	80001c8 <__aeabi_uldivmod>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e20:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	0c1b      	lsrs	r3, r3, #16
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001e30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e3a:	e002      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e3c:	4b05      	ldr	r3, [pc, #20]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3740      	adds	r7, #64	@ 0x40
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800
 8001e54:	00f42400 	.word	0x00f42400
 8001e58:	017d7840 	.word	0x017d7840

08001e5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e07b      	b.n	8001f66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d108      	bne.n	8001e88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e7e:	d009      	beq.n	8001e94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
 8001e86:	e005      	b.n	8001e94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe ff6e 	bl	8000d90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001eca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f18:	ea42 0103 	orr.w	r1, r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f20:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	0c1b      	lsrs	r3, r3, #16
 8001f32:	f003 0104 	and.w	r1, r3, #4
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3a:	f003 0210 	and.w	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	69da      	ldr	r2, [r3, #28]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b088      	sub	sp, #32
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	603b      	str	r3, [r7, #0]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f7e:	f7ff f87d 	bl	800107c <HAL_GetTick>
 8001f82:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d001      	beq.n	8001f98 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001f94:	2302      	movs	r3, #2
 8001f96:	e12a      	b.n	80021ee <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_SPI_Transmit+0x36>
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e122      	b.n	80021ee <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_SPI_Transmit+0x48>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e11b      	b.n	80021ee <HAL_SPI_Transmit+0x280>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	88fa      	ldrh	r2, [r7, #6]
 8001fd6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	88fa      	ldrh	r2, [r7, #6]
 8001fdc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002004:	d10f      	bne.n	8002026 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002014:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002024:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002030:	2b40      	cmp	r3, #64	@ 0x40
 8002032:	d007      	beq.n	8002044 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002042:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800204c:	d152      	bne.n	80020f4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <HAL_SPI_Transmit+0xee>
 8002056:	8b7b      	ldrh	r3, [r7, #26]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d145      	bne.n	80020e8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	881a      	ldrh	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206c:	1c9a      	adds	r2, r3, #2
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002076:	b29b      	uxth	r3, r3
 8002078:	3b01      	subs	r3, #1
 800207a:	b29a      	uxth	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002080:	e032      	b.n	80020e8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b02      	cmp	r3, #2
 800208e:	d112      	bne.n	80020b6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002094:	881a      	ldrh	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a0:	1c9a      	adds	r2, r3, #2
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80020b4:	e018      	b.n	80020e8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020b6:	f7fe ffe1 	bl	800107c <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d803      	bhi.n	80020ce <HAL_SPI_Transmit+0x160>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d102      	bne.n	80020d4 <HAL_SPI_Transmit+0x166>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d109      	bne.n	80020e8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e082      	b.n	80021ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1c7      	bne.n	8002082 <HAL_SPI_Transmit+0x114>
 80020f2:	e053      	b.n	800219c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <HAL_SPI_Transmit+0x194>
 80020fc:	8b7b      	ldrh	r3, [r7, #26]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d147      	bne.n	8002192 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	330c      	adds	r3, #12
 800210c:	7812      	ldrb	r2, [r2, #0]
 800210e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002128:	e033      	b.n	8002192 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b02      	cmp	r3, #2
 8002136:	d113      	bne.n	8002160 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	330c      	adds	r3, #12
 8002142:	7812      	ldrb	r2, [r2, #0]
 8002144:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002154:	b29b      	uxth	r3, r3
 8002156:	3b01      	subs	r3, #1
 8002158:	b29a      	uxth	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800215e:	e018      	b.n	8002192 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002160:	f7fe ff8c 	bl	800107c <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d803      	bhi.n	8002178 <HAL_SPI_Transmit+0x20a>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002176:	d102      	bne.n	800217e <HAL_SPI_Transmit+0x210>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e02d      	b.n	80021ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1c6      	bne.n	800212a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	6839      	ldr	r1, [r7, #0]
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 fbd9 	bl	8002958 <SPI_EndRxTxTransaction>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10a      	bne.n	80021d0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80021ec:	2300      	movs	r3, #0
  }
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b088      	sub	sp, #32
 80021fa:	af02      	add	r7, sp, #8
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	4613      	mov	r3, r2
 8002204:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d001      	beq.n	8002216 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002212:	2302      	movs	r3, #2
 8002214:	e104      	b.n	8002420 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_SPI_Receive+0x2c>
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e0fc      	b.n	8002420 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800222e:	d112      	bne.n	8002256 <HAL_SPI_Receive+0x60>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10e      	bne.n	8002256 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2204      	movs	r2, #4
 800223c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002240:	88fa      	ldrh	r2, [r7, #6]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	4613      	mov	r3, r2
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f8eb 	bl	8002428 <HAL_SPI_TransmitReceive>
 8002252:	4603      	mov	r3, r0
 8002254:	e0e4      	b.n	8002420 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002256:	f7fe ff11 	bl	800107c <HAL_GetTick>
 800225a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_SPI_Receive+0x74>
 8002266:	2302      	movs	r3, #2
 8002268:	e0da      	b.n	8002420 <HAL_SPI_Receive+0x22a>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2204      	movs	r2, #4
 8002276:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	88fa      	ldrh	r2, [r7, #6]
 800228a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	88fa      	ldrh	r2, [r7, #6]
 8002290:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022b8:	d10f      	bne.n	80022da <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80022d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e4:	2b40      	cmp	r3, #64	@ 0x40
 80022e6:	d007      	beq.n	80022f8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d170      	bne.n	80023e2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002300:	e035      	b.n	800236e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d115      	bne.n	800233c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f103 020c 	add.w	r2, r3, #12
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800231c:	7812      	ldrb	r2, [r2, #0]
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002330:	b29b      	uxth	r3, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800233a:	e018      	b.n	800236e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800233c:	f7fe fe9e 	bl	800107c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d803      	bhi.n	8002354 <HAL_SPI_Receive+0x15e>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002352:	d102      	bne.n	800235a <HAL_SPI_Receive+0x164>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e058      	b.n	8002420 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1c4      	bne.n	8002302 <HAL_SPI_Receive+0x10c>
 8002378:	e038      	b.n	80023ec <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	d113      	bne.n	80023b0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002392:	b292      	uxth	r2, r2
 8002394:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800239a:	1c9a      	adds	r2, r3, #2
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80023ae:	e018      	b.n	80023e2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023b0:	f7fe fe64 	bl	800107c <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d803      	bhi.n	80023c8 <HAL_SPI_Receive+0x1d2>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c6:	d102      	bne.n	80023ce <HAL_SPI_Receive+0x1d8>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d109      	bne.n	80023e2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e01e      	b.n	8002420 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1c6      	bne.n	800237a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	6839      	ldr	r1, [r7, #0]
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fa4b 	bl	800288c <SPI_EndRxTransaction>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2220      	movs	r2, #32
 8002400:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800241e:	2300      	movs	r3, #0
  }
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	@ 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002436:	2301      	movs	r3, #1
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800243a:	f7fe fe1f 	bl	800107c <HAL_GetTick>
 800243e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002446:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800244e:	887b      	ldrh	r3, [r7, #2]
 8002450:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002452:	7ffb      	ldrb	r3, [r7, #31]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d00c      	beq.n	8002472 <HAL_SPI_TransmitReceive+0x4a>
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800245e:	d106      	bne.n	800246e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <HAL_SPI_TransmitReceive+0x46>
 8002468:	7ffb      	ldrb	r3, [r7, #31]
 800246a:	2b04      	cmp	r3, #4
 800246c:	d001      	beq.n	8002472 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800246e:	2302      	movs	r3, #2
 8002470:	e17f      	b.n	8002772 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_SPI_TransmitReceive+0x5c>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <HAL_SPI_TransmitReceive+0x5c>
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e174      	b.n	8002772 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_SPI_TransmitReceive+0x6e>
 8002492:	2302      	movs	r3, #2
 8002494:	e16d      	b.n	8002772 <HAL_SPI_TransmitReceive+0x34a>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d003      	beq.n	80024b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2205      	movs	r2, #5
 80024ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	887a      	ldrh	r2, [r7, #2]
 80024c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	887a      	ldrh	r2, [r7, #2]
 80024c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	887a      	ldrh	r2, [r7, #2]
 80024da:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f2:	2b40      	cmp	r3, #64	@ 0x40
 80024f4:	d007      	beq.n	8002506 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002504:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800250e:	d17e      	bne.n	800260e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <HAL_SPI_TransmitReceive+0xf6>
 8002518:	8afb      	ldrh	r3, [r7, #22]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d16c      	bne.n	80025f8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	881a      	ldrh	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	1c9a      	adds	r2, r3, #2
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002538:	b29b      	uxth	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002542:	e059      	b.n	80025f8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b02      	cmp	r3, #2
 8002550:	d11b      	bne.n	800258a <HAL_SPI_TransmitReceive+0x162>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002556:	b29b      	uxth	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d016      	beq.n	800258a <HAL_SPI_TransmitReceive+0x162>
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	2b01      	cmp	r3, #1
 8002560:	d113      	bne.n	800258a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	881a      	ldrh	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	1c9a      	adds	r2, r3, #2
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b01      	cmp	r3, #1
 8002596:	d119      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x1a4>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d014      	beq.n	80025cc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ac:	b292      	uxth	r2, r2
 80025ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b4:	1c9a      	adds	r2, r3, #2
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025c8:	2301      	movs	r3, #1
 80025ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025cc:	f7fe fd56 	bl	800107c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025d8:	429a      	cmp	r2, r3
 80025da:	d80d      	bhi.n	80025f8 <HAL_SPI_TransmitReceive+0x1d0>
 80025dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e2:	d009      	beq.n	80025f8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e0bc      	b.n	8002772 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1a0      	bne.n	8002544 <HAL_SPI_TransmitReceive+0x11c>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d19b      	bne.n	8002544 <HAL_SPI_TransmitReceive+0x11c>
 800260c:	e082      	b.n	8002714 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <HAL_SPI_TransmitReceive+0x1f4>
 8002616:	8afb      	ldrh	r3, [r7, #22]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d171      	bne.n	8002700 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	330c      	adds	r3, #12
 8002626:	7812      	ldrb	r2, [r2, #0]
 8002628:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002642:	e05d      	b.n	8002700 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b02      	cmp	r3, #2
 8002650:	d11c      	bne.n	800268c <HAL_SPI_TransmitReceive+0x264>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002656:	b29b      	uxth	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d017      	beq.n	800268c <HAL_SPI_TransmitReceive+0x264>
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	2b01      	cmp	r3, #1
 8002660:	d114      	bne.n	800268c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	330c      	adds	r3, #12
 800266c:	7812      	ldrb	r2, [r2, #0]
 800266e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b01      	cmp	r3, #1
 8002698:	d119      	bne.n	80026ce <HAL_SPI_TransmitReceive+0x2a6>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d014      	beq.n	80026ce <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026ca:	2301      	movs	r3, #1
 80026cc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026ce:	f7fe fcd5 	bl	800107c <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026da:	429a      	cmp	r2, r3
 80026dc:	d803      	bhi.n	80026e6 <HAL_SPI_TransmitReceive+0x2be>
 80026de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e4:	d102      	bne.n	80026ec <HAL_SPI_TransmitReceive+0x2c4>
 80026e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d109      	bne.n	8002700 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e038      	b.n	8002772 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d19c      	bne.n	8002644 <HAL_SPI_TransmitReceive+0x21c>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d197      	bne.n	8002644 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002714:	6a3a      	ldr	r2, [r7, #32]
 8002716:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f91d 	bl	8002958 <SPI_EndRxTxTransaction>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2220      	movs	r2, #32
 8002728:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e01d      	b.n	8002772 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10a      	bne.n	8002754 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002770:	2300      	movs	r3, #0
  }
}
 8002772:	4618      	mov	r0, r3
 8002774:	3728      	adds	r7, #40	@ 0x28
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800278c:	f7fe fc76 	bl	800107c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	4413      	add	r3, r2
 800279a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800279c:	f7fe fc6e 	bl	800107c <HAL_GetTick>
 80027a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027a2:	4b39      	ldr	r3, [pc, #228]	@ (8002888 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	015b      	lsls	r3, r3, #5
 80027a8:	0d1b      	lsrs	r3, r3, #20
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	fb02 f303 	mul.w	r3, r2, r3
 80027b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027b2:	e055      	b.n	8002860 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ba:	d051      	beq.n	8002860 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027bc:	f7fe fc5e 	bl	800107c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d902      	bls.n	80027d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d13d      	bne.n	800284e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80027e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027ea:	d111      	bne.n	8002810 <SPI_WaitFlagStateUntilTimeout+0x94>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027f4:	d004      	beq.n	8002800 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027fe:	d107      	bne.n	8002810 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800280e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002814:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002818:	d10f      	bne.n	800283a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002838:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e018      	b.n	8002880 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d102      	bne.n	800285a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	e002      	b.n	8002860 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3b01      	subs	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4013      	ands	r3, r2
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	429a      	cmp	r2, r3
 800286e:	bf0c      	ite	eq
 8002870:	2301      	moveq	r3, #1
 8002872:	2300      	movne	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	429a      	cmp	r2, r3
 800287c:	d19a      	bne.n	80027b4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3720      	adds	r7, #32
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000008 	.word	0x20000008

0800288c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af02      	add	r7, sp, #8
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028a0:	d111      	bne.n	80028c6 <SPI_EndRxTransaction+0x3a>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028aa:	d004      	beq.n	80028b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028b4:	d107      	bne.n	80028c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028ce:	d12a      	bne.n	8002926 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028d8:	d012      	beq.n	8002900 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2200      	movs	r2, #0
 80028e2:	2180      	movs	r1, #128	@ 0x80
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f7ff ff49 	bl	800277c <SPI_WaitFlagStateUntilTimeout>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d02d      	beq.n	800294c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f4:	f043 0220 	orr.w	r2, r3, #32
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e026      	b.n	800294e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2200      	movs	r2, #0
 8002908:	2101      	movs	r1, #1
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f7ff ff36 	bl	800277c <SPI_WaitFlagStateUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d01a      	beq.n	800294c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291a:	f043 0220 	orr.w	r2, r3, #32
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e013      	b.n	800294e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2200      	movs	r2, #0
 800292e:	2101      	movs	r1, #1
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f7ff ff23 	bl	800277c <SPI_WaitFlagStateUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d007      	beq.n	800294c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e000      	b.n	800294e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af02      	add	r7, sp, #8
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2201      	movs	r2, #1
 800296c:	2102      	movs	r1, #2
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f7ff ff04 	bl	800277c <SPI_WaitFlagStateUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297e:	f043 0220 	orr.w	r2, r3, #32
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e032      	b.n	80029f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800298a:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <SPI_EndRxTxTransaction+0xa0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a1b      	ldr	r2, [pc, #108]	@ (80029fc <SPI_EndRxTxTransaction+0xa4>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	0d5b      	lsrs	r3, r3, #21
 8002996:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029a8:	d112      	bne.n	80029d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2200      	movs	r2, #0
 80029b2:	2180      	movs	r1, #128	@ 0x80
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f7ff fee1 	bl	800277c <SPI_WaitFlagStateUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d016      	beq.n	80029ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c4:	f043 0220 	orr.w	r2, r3, #32
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e00f      	b.n	80029f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	3b01      	subs	r3, #1
 80029da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e6:	2b80      	cmp	r3, #128	@ 0x80
 80029e8:	d0f2      	beq.n	80029d0 <SPI_EndRxTxTransaction+0x78>
 80029ea:	e000      	b.n	80029ee <SPI_EndRxTxTransaction+0x96>
        break;
 80029ec:	bf00      	nop
  }

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20000008 	.word	0x20000008
 80029fc:	165e9f81 	.word	0x165e9f81

08002a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e041      	b.n	8002a96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fe f9fa 	bl	8000e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	f000 fad8 	bl	8002ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e041      	b.n	8002b34 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d106      	bne.n	8002aca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f839 	bl	8002b3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2202      	movs	r2, #2
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	4619      	mov	r1, r3
 8002adc:	4610      	mov	r0, r2
 8002ade:	f000 fa89 	bl	8002ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <HAL_TIM_PWM_Start+0x24>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	bf14      	ite	ne
 8002b6c:	2301      	movne	r3, #1
 8002b6e:	2300      	moveq	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	e022      	b.n	8002bba <HAL_TIM_PWM_Start+0x6a>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d109      	bne.n	8002b8e <HAL_TIM_PWM_Start+0x3e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	bf14      	ite	ne
 8002b86:	2301      	movne	r3, #1
 8002b88:	2300      	moveq	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	e015      	b.n	8002bba <HAL_TIM_PWM_Start+0x6a>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d109      	bne.n	8002ba8 <HAL_TIM_PWM_Start+0x58>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	bf14      	ite	ne
 8002ba0:	2301      	movne	r3, #1
 8002ba2:	2300      	moveq	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	e008      	b.n	8002bba <HAL_TIM_PWM_Start+0x6a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e07c      	b.n	8002cbc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d104      	bne.n	8002bd2 <HAL_TIM_PWM_Start+0x82>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bd0:	e013      	b.n	8002bfa <HAL_TIM_PWM_Start+0xaa>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d104      	bne.n	8002be2 <HAL_TIM_PWM_Start+0x92>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002be0:	e00b      	b.n	8002bfa <HAL_TIM_PWM_Start+0xaa>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d104      	bne.n	8002bf2 <HAL_TIM_PWM_Start+0xa2>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bf0:	e003      	b.n	8002bfa <HAL_TIM_PWM_Start+0xaa>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	6839      	ldr	r1, [r7, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fce6 	bl	80035d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002cc4 <HAL_TIM_PWM_Start+0x174>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d004      	beq.n	8002c1c <HAL_TIM_PWM_Start+0xcc>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a2c      	ldr	r2, [pc, #176]	@ (8002cc8 <HAL_TIM_PWM_Start+0x178>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d101      	bne.n	8002c20 <HAL_TIM_PWM_Start+0xd0>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <HAL_TIM_PWM_Start+0xd2>
 8002c20:	2300      	movs	r3, #0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a22      	ldr	r2, [pc, #136]	@ (8002cc4 <HAL_TIM_PWM_Start+0x174>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d022      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x136>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c48:	d01d      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x136>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ccc <HAL_TIM_PWM_Start+0x17c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d018      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x136>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd0 <HAL_TIM_PWM_Start+0x180>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x136>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd4 <HAL_TIM_PWM_Start+0x184>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00e      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x136>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a16      	ldr	r2, [pc, #88]	@ (8002cc8 <HAL_TIM_PWM_Start+0x178>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d009      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x136>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a18      	ldr	r2, [pc, #96]	@ (8002cd8 <HAL_TIM_PWM_Start+0x188>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d004      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x136>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a16      	ldr	r2, [pc, #88]	@ (8002cdc <HAL_TIM_PWM_Start+0x18c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d111      	bne.n	8002caa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b06      	cmp	r3, #6
 8002c96:	d010      	beq.n	8002cba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca8:	e007      	b.n	8002cba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0201 	orr.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40010000 	.word	0x40010000
 8002cc8:	40010400 	.word	0x40010400
 8002ccc:	40000400 	.word	0x40000400
 8002cd0:	40000800 	.word	0x40000800
 8002cd4:	40000c00 	.word	0x40000c00
 8002cd8:	40014000 	.word	0x40014000
 8002cdc:	40001800 	.word	0x40001800

08002ce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e0ae      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b0c      	cmp	r3, #12
 8002d0a:	f200 809f 	bhi.w	8002e4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d14:	08002d49 	.word	0x08002d49
 8002d18:	08002e4d 	.word	0x08002e4d
 8002d1c:	08002e4d 	.word	0x08002e4d
 8002d20:	08002e4d 	.word	0x08002e4d
 8002d24:	08002d89 	.word	0x08002d89
 8002d28:	08002e4d 	.word	0x08002e4d
 8002d2c:	08002e4d 	.word	0x08002e4d
 8002d30:	08002e4d 	.word	0x08002e4d
 8002d34:	08002dcb 	.word	0x08002dcb
 8002d38:	08002e4d 	.word	0x08002e4d
 8002d3c:	08002e4d 	.word	0x08002e4d
 8002d40:	08002e4d 	.word	0x08002e4d
 8002d44:	08002e0b 	.word	0x08002e0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f9f6 	bl	8003140 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0208 	orr.w	r2, r2, #8
 8002d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0204 	bic.w	r2, r2, #4
 8002d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6999      	ldr	r1, [r3, #24]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	619a      	str	r2, [r3, #24]
      break;
 8002d86:	e064      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fa46 	bl	8003220 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6999      	ldr	r1, [r3, #24]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	021a      	lsls	r2, r3, #8
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	619a      	str	r2, [r3, #24]
      break;
 8002dc8:	e043      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fa9b 	bl	800330c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69da      	ldr	r2, [r3, #28]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0208 	orr.w	r2, r2, #8
 8002de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69da      	ldr	r2, [r3, #28]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0204 	bic.w	r2, r2, #4
 8002df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69d9      	ldr	r1, [r3, #28]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	61da      	str	r2, [r3, #28]
      break;
 8002e08:	e023      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 faef 	bl	80033f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69d9      	ldr	r1, [r3, #28]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	021a      	lsls	r2, r3, #8
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	61da      	str	r2, [r3, #28]
      break;
 8002e4a:	e002      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_TIM_ConfigClockSource+0x1c>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e0b4      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x186>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ea6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eb8:	d03e      	beq.n	8002f38 <HAL_TIM_ConfigClockSource+0xd4>
 8002eba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ebe:	f200 8087 	bhi.w	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ec6:	f000 8086 	beq.w	8002fd6 <HAL_TIM_ConfigClockSource+0x172>
 8002eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ece:	d87f      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed0:	2b70      	cmp	r3, #112	@ 0x70
 8002ed2:	d01a      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0xa6>
 8002ed4:	2b70      	cmp	r3, #112	@ 0x70
 8002ed6:	d87b      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed8:	2b60      	cmp	r3, #96	@ 0x60
 8002eda:	d050      	beq.n	8002f7e <HAL_TIM_ConfigClockSource+0x11a>
 8002edc:	2b60      	cmp	r3, #96	@ 0x60
 8002ede:	d877      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee0:	2b50      	cmp	r3, #80	@ 0x50
 8002ee2:	d03c      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0xfa>
 8002ee4:	2b50      	cmp	r3, #80	@ 0x50
 8002ee6:	d873      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee8:	2b40      	cmp	r3, #64	@ 0x40
 8002eea:	d058      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0x13a>
 8002eec:	2b40      	cmp	r3, #64	@ 0x40
 8002eee:	d86f      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef0:	2b30      	cmp	r3, #48	@ 0x30
 8002ef2:	d064      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x15a>
 8002ef4:	2b30      	cmp	r3, #48	@ 0x30
 8002ef6:	d86b      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d060      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x15a>
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d867      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d05c      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x15a>
 8002f04:	2b10      	cmp	r3, #16
 8002f06:	d05a      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x15a>
 8002f08:	e062      	b.n	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f1a:	f000 fb3b 	bl	8003594 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	609a      	str	r2, [r3, #8]
      break;
 8002f36:	e04f      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f48:	f000 fb24 	bl	8003594 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f5a:	609a      	str	r2, [r3, #8]
      break;
 8002f5c:	e03c      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f000 fa98 	bl	80034a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2150      	movs	r1, #80	@ 0x50
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 faf1 	bl	800355e <TIM_ITRx_SetConfig>
      break;
 8002f7c:	e02c      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f000 fab7 	bl	80034fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2160      	movs	r1, #96	@ 0x60
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fae1 	bl	800355e <TIM_ITRx_SetConfig>
      break;
 8002f9c:	e01c      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002faa:	461a      	mov	r2, r3
 8002fac:	f000 fa78 	bl	80034a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2140      	movs	r1, #64	@ 0x40
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fad1 	bl	800355e <TIM_ITRx_SetConfig>
      break;
 8002fbc:	e00c      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	f000 fac8 	bl	800355e <TIM_ITRx_SetConfig>
      break;
 8002fce:	e003      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd4:	e000      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a43      	ldr	r2, [pc, #268]	@ (8003114 <TIM_Base_SetConfig+0x120>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d013      	beq.n	8003034 <TIM_Base_SetConfig+0x40>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003012:	d00f      	beq.n	8003034 <TIM_Base_SetConfig+0x40>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a40      	ldr	r2, [pc, #256]	@ (8003118 <TIM_Base_SetConfig+0x124>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d00b      	beq.n	8003034 <TIM_Base_SetConfig+0x40>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a3f      	ldr	r2, [pc, #252]	@ (800311c <TIM_Base_SetConfig+0x128>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d007      	beq.n	8003034 <TIM_Base_SetConfig+0x40>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a3e      	ldr	r2, [pc, #248]	@ (8003120 <TIM_Base_SetConfig+0x12c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d003      	beq.n	8003034 <TIM_Base_SetConfig+0x40>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a3d      	ldr	r2, [pc, #244]	@ (8003124 <TIM_Base_SetConfig+0x130>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d108      	bne.n	8003046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800303a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a32      	ldr	r2, [pc, #200]	@ (8003114 <TIM_Base_SetConfig+0x120>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d02b      	beq.n	80030a6 <TIM_Base_SetConfig+0xb2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003054:	d027      	beq.n	80030a6 <TIM_Base_SetConfig+0xb2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a2f      	ldr	r2, [pc, #188]	@ (8003118 <TIM_Base_SetConfig+0x124>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d023      	beq.n	80030a6 <TIM_Base_SetConfig+0xb2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a2e      	ldr	r2, [pc, #184]	@ (800311c <TIM_Base_SetConfig+0x128>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01f      	beq.n	80030a6 <TIM_Base_SetConfig+0xb2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a2d      	ldr	r2, [pc, #180]	@ (8003120 <TIM_Base_SetConfig+0x12c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d01b      	beq.n	80030a6 <TIM_Base_SetConfig+0xb2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a2c      	ldr	r2, [pc, #176]	@ (8003124 <TIM_Base_SetConfig+0x130>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d017      	beq.n	80030a6 <TIM_Base_SetConfig+0xb2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a2b      	ldr	r2, [pc, #172]	@ (8003128 <TIM_Base_SetConfig+0x134>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d013      	beq.n	80030a6 <TIM_Base_SetConfig+0xb2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a2a      	ldr	r2, [pc, #168]	@ (800312c <TIM_Base_SetConfig+0x138>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d00f      	beq.n	80030a6 <TIM_Base_SetConfig+0xb2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a29      	ldr	r2, [pc, #164]	@ (8003130 <TIM_Base_SetConfig+0x13c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00b      	beq.n	80030a6 <TIM_Base_SetConfig+0xb2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a28      	ldr	r2, [pc, #160]	@ (8003134 <TIM_Base_SetConfig+0x140>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d007      	beq.n	80030a6 <TIM_Base_SetConfig+0xb2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a27      	ldr	r2, [pc, #156]	@ (8003138 <TIM_Base_SetConfig+0x144>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d003      	beq.n	80030a6 <TIM_Base_SetConfig+0xb2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a26      	ldr	r2, [pc, #152]	@ (800313c <TIM_Base_SetConfig+0x148>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d108      	bne.n	80030b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a0e      	ldr	r2, [pc, #56]	@ (8003114 <TIM_Base_SetConfig+0x120>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d003      	beq.n	80030e6 <TIM_Base_SetConfig+0xf2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a10      	ldr	r2, [pc, #64]	@ (8003124 <TIM_Base_SetConfig+0x130>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d103      	bne.n	80030ee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f043 0204 	orr.w	r2, r3, #4
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	601a      	str	r2, [r3, #0]
}
 8003106:	bf00      	nop
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40010000 	.word	0x40010000
 8003118:	40000400 	.word	0x40000400
 800311c:	40000800 	.word	0x40000800
 8003120:	40000c00 	.word	0x40000c00
 8003124:	40010400 	.word	0x40010400
 8003128:	40014000 	.word	0x40014000
 800312c:	40014400 	.word	0x40014400
 8003130:	40014800 	.word	0x40014800
 8003134:	40001800 	.word	0x40001800
 8003138:	40001c00 	.word	0x40001c00
 800313c:	40002000 	.word	0x40002000

08003140 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	f023 0201 	bic.w	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800316e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f023 0302 	bic.w	r3, r3, #2
 8003188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a20      	ldr	r2, [pc, #128]	@ (8003218 <TIM_OC1_SetConfig+0xd8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d003      	beq.n	80031a4 <TIM_OC1_SetConfig+0x64>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a1f      	ldr	r2, [pc, #124]	@ (800321c <TIM_OC1_SetConfig+0xdc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d10c      	bne.n	80031be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f023 0308 	bic.w	r3, r3, #8
 80031aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f023 0304 	bic.w	r3, r3, #4
 80031bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a15      	ldr	r2, [pc, #84]	@ (8003218 <TIM_OC1_SetConfig+0xd8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d003      	beq.n	80031ce <TIM_OC1_SetConfig+0x8e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a14      	ldr	r2, [pc, #80]	@ (800321c <TIM_OC1_SetConfig+0xdc>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d111      	bne.n	80031f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	621a      	str	r2, [r3, #32]
}
 800320c:	bf00      	nop
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	40010000 	.word	0x40010000
 800321c:	40010400 	.word	0x40010400

08003220 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f023 0210 	bic.w	r2, r3, #16
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800324e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f023 0320 	bic.w	r3, r3, #32
 800326a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a22      	ldr	r2, [pc, #136]	@ (8003304 <TIM_OC2_SetConfig+0xe4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d003      	beq.n	8003288 <TIM_OC2_SetConfig+0x68>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a21      	ldr	r2, [pc, #132]	@ (8003308 <TIM_OC2_SetConfig+0xe8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d10d      	bne.n	80032a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800328e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a17      	ldr	r2, [pc, #92]	@ (8003304 <TIM_OC2_SetConfig+0xe4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d003      	beq.n	80032b4 <TIM_OC2_SetConfig+0x94>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a16      	ldr	r2, [pc, #88]	@ (8003308 <TIM_OC2_SetConfig+0xe8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d113      	bne.n	80032dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	621a      	str	r2, [r3, #32]
}
 80032f6:	bf00      	nop
 80032f8:	371c      	adds	r7, #28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40010000 	.word	0x40010000
 8003308:	40010400 	.word	0x40010400

0800330c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800333a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0303 	bic.w	r3, r3, #3
 8003342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a21      	ldr	r2, [pc, #132]	@ (80033ec <TIM_OC3_SetConfig+0xe0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d003      	beq.n	8003372 <TIM_OC3_SetConfig+0x66>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a20      	ldr	r2, [pc, #128]	@ (80033f0 <TIM_OC3_SetConfig+0xe4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d10d      	bne.n	800338e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003378:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800338c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a16      	ldr	r2, [pc, #88]	@ (80033ec <TIM_OC3_SetConfig+0xe0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d003      	beq.n	800339e <TIM_OC3_SetConfig+0x92>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a15      	ldr	r2, [pc, #84]	@ (80033f0 <TIM_OC3_SetConfig+0xe4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d113      	bne.n	80033c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	621a      	str	r2, [r3, #32]
}
 80033e0:	bf00      	nop
 80033e2:	371c      	adds	r7, #28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	40010000 	.word	0x40010000
 80033f0:	40010400 	.word	0x40010400

080033f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800342a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	021b      	lsls	r3, r3, #8
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800343e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	031b      	lsls	r3, r3, #12
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a12      	ldr	r2, [pc, #72]	@ (8003498 <TIM_OC4_SetConfig+0xa4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d003      	beq.n	800345c <TIM_OC4_SetConfig+0x68>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a11      	ldr	r2, [pc, #68]	@ (800349c <TIM_OC4_SetConfig+0xa8>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d109      	bne.n	8003470 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003462:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	019b      	lsls	r3, r3, #6
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	621a      	str	r2, [r3, #32]
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40010000 	.word	0x40010000
 800349c:	40010400 	.word	0x40010400

080034a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	f023 0201 	bic.w	r2, r3, #1
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f023 030a 	bic.w	r3, r3, #10
 80034dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	621a      	str	r2, [r3, #32]
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034fe:	b480      	push	{r7}
 8003500:	b087      	sub	sp, #28
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f023 0210 	bic.w	r2, r3, #16
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003528:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	031b      	lsls	r3, r3, #12
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800353a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	621a      	str	r2, [r3, #32]
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800355e:	b480      	push	{r7}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003574:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	f043 0307 	orr.w	r3, r3, #7
 8003580:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	609a      	str	r2, [r3, #8]
}
 8003588:	bf00      	nop
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	021a      	lsls	r2, r3, #8
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	609a      	str	r2, [r3, #8]
}
 80035c8:	bf00      	nop
 80035ca:	371c      	adds	r7, #28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	2201      	movs	r2, #1
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a1a      	ldr	r2, [r3, #32]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	401a      	ands	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a1a      	ldr	r2, [r3, #32]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	431a      	orrs	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	621a      	str	r2, [r3, #32]
}
 8003612:	bf00      	nop
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003634:	2302      	movs	r3, #2
 8003636:	e05a      	b.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800365e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a21      	ldr	r2, [pc, #132]	@ (80036fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d022      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003684:	d01d      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1d      	ldr	r2, [pc, #116]	@ (8003700 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d018      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1b      	ldr	r2, [pc, #108]	@ (8003704 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d013      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1a      	ldr	r2, [pc, #104]	@ (8003708 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00e      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a18      	ldr	r2, [pc, #96]	@ (800370c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d009      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a17      	ldr	r2, [pc, #92]	@ (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a15      	ldr	r2, [pc, #84]	@ (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d10c      	bne.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40010000 	.word	0x40010000
 8003700:	40000400 	.word	0x40000400
 8003704:	40000800 	.word	0x40000800
 8003708:	40000c00 	.word	0x40000c00
 800370c:	40010400 	.word	0x40010400
 8003710:	40014000 	.word	0x40014000
 8003714:	40001800 	.word	0x40001800

08003718 <memset>:
 8003718:	4402      	add	r2, r0
 800371a:	4603      	mov	r3, r0
 800371c:	4293      	cmp	r3, r2
 800371e:	d100      	bne.n	8003722 <memset+0xa>
 8003720:	4770      	bx	lr
 8003722:	f803 1b01 	strb.w	r1, [r3], #1
 8003726:	e7f9      	b.n	800371c <memset+0x4>

08003728 <__libc_init_array>:
 8003728:	b570      	push	{r4, r5, r6, lr}
 800372a:	4d0d      	ldr	r5, [pc, #52]	@ (8003760 <__libc_init_array+0x38>)
 800372c:	4c0d      	ldr	r4, [pc, #52]	@ (8003764 <__libc_init_array+0x3c>)
 800372e:	1b64      	subs	r4, r4, r5
 8003730:	10a4      	asrs	r4, r4, #2
 8003732:	2600      	movs	r6, #0
 8003734:	42a6      	cmp	r6, r4
 8003736:	d109      	bne.n	800374c <__libc_init_array+0x24>
 8003738:	4d0b      	ldr	r5, [pc, #44]	@ (8003768 <__libc_init_array+0x40>)
 800373a:	4c0c      	ldr	r4, [pc, #48]	@ (800376c <__libc_init_array+0x44>)
 800373c:	f000 f818 	bl	8003770 <_init>
 8003740:	1b64      	subs	r4, r4, r5
 8003742:	10a4      	asrs	r4, r4, #2
 8003744:	2600      	movs	r6, #0
 8003746:	42a6      	cmp	r6, r4
 8003748:	d105      	bne.n	8003756 <__libc_init_array+0x2e>
 800374a:	bd70      	pop	{r4, r5, r6, pc}
 800374c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003750:	4798      	blx	r3
 8003752:	3601      	adds	r6, #1
 8003754:	e7ee      	b.n	8003734 <__libc_init_array+0xc>
 8003756:	f855 3b04 	ldr.w	r3, [r5], #4
 800375a:	4798      	blx	r3
 800375c:	3601      	adds	r6, #1
 800375e:	e7f2      	b.n	8003746 <__libc_init_array+0x1e>
 8003760:	080037b0 	.word	0x080037b0
 8003764:	080037b0 	.word	0x080037b0
 8003768:	080037b0 	.word	0x080037b0
 800376c:	080037b4 	.word	0x080037b4

08003770 <_init>:
 8003770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003772:	bf00      	nop
 8003774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003776:	bc08      	pop	{r3}
 8003778:	469e      	mov	lr, r3
 800377a:	4770      	bx	lr

0800377c <_fini>:
 800377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377e:	bf00      	nop
 8003780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003782:	bc08      	pop	{r3}
 8003784:	469e      	mov	lr, r3
 8003786:	4770      	bx	lr
