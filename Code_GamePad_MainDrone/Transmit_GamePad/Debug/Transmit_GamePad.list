
Transmit_GamePad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080037b0  080037b0  000047b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037ec  080037ec  00005014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080037ec  080037ec  00005014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080037ec  080037ec  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037ec  080037ec  000047ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037f0  080037f0  000047f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080037f4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000014  08003808  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08003808  00005170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a99f  00000000  00000000  0000503d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4e  00000000  00000000  0000f9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  00011930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f2  00000000  00000000  00012388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171bd  00000000  00000000  00012b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c274  00000000  00000000  00029d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085835  00000000  00000000  00035fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb7e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002958  00000000  00000000  000bb824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  000be17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003798 	.word	0x08003798

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003798 	.word	0x08003798

0800014c <CS_Select>:
#define NRF24_CSN_PORT   GPIOA
#define NRF24_CSN_PIN    GPIO_PIN_4


void CS_Select (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2110      	movs	r1, #16
 8000154:	4802      	ldr	r0, [pc, #8]	@ (8000160 <CS_Select+0x14>)
 8000156:	f001 ffa0 	bl	800209a <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2110      	movs	r1, #16
 800016c:	4802      	ldr	r0, [pc, #8]	@ (8000178 <CS_UnSelect+0x14>)
 800016e:	f001 ff94 	bl	800209a <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <CE_Enable>:


void CE_Enable (void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000186:	4802      	ldr	r0, [pc, #8]	@ (8000190 <CE_Enable+0x14>)
 8000188:	f001 ff87 	bl	800209a <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010c00 	.word	0x40010c00

08000194 <CE_Disable>:

void CE_Disable (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800019e:	4802      	ldr	r0, [pc, #8]	@ (80001a8 <CE_Disable+0x14>)
 80001a0:	f001 ff7b 	bl	800209a <HAL_GPIO_WritePin>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40010c00 	.word	0x40010c00

080001ac <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	460a      	mov	r2, r1
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	4613      	mov	r3, r2
 80001ba:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	f043 0320 	orr.w	r3, r3, #32
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80001c6:	79bb      	ldrb	r3, [r7, #6]
 80001c8:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80001ca:	f7ff ffbf 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80001ce:	f107 010c 	add.w	r1, r7, #12
 80001d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001d6:	2202      	movs	r2, #2
 80001d8:	4804      	ldr	r0, [pc, #16]	@ (80001ec <nrf24_WriteReg+0x40>)
 80001da:	f002 fcc1 	bl	8002b60 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80001de:	f7ff ffc1 	bl	8000164 <CS_UnSelect>
}
 80001e2:	bf00      	nop
 80001e4:	3710      	adds	r7, #16
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	200000a4 	.word	0x200000a4

080001f0 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	607a      	str	r2, [r7, #4]
 80001fc:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	f043 0320 	orr.w	r3, r3, #32
 8000204:	b2db      	uxtb	r3, r3
 8000206:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000208:	f7ff ffa0 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 800020c:	f107 0114 	add.w	r1, r7, #20
 8000210:	2364      	movs	r3, #100	@ 0x64
 8000212:	2201      	movs	r2, #1
 8000214:	4808      	ldr	r0, [pc, #32]	@ (8000238 <nrf24_WriteRegMulti+0x48>)
 8000216:	f002 fca3 	bl	8002b60 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	b29a      	uxth	r2, r3
 800021e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000222:	68b9      	ldr	r1, [r7, #8]
 8000224:	4804      	ldr	r0, [pc, #16]	@ (8000238 <nrf24_WriteRegMulti+0x48>)
 8000226:	f002 fc9b 	bl	8002b60 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800022a:	f7ff ff9b 	bl	8000164 <CS_UnSelect>
}
 800022e:	bf00      	nop
 8000230:	3718      	adds	r7, #24
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	200000a4 	.word	0x200000a4

0800023c <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000246:	2300      	movs	r3, #0
 8000248:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800024a:	f7ff ff7f 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800024e:	1df9      	adds	r1, r7, #7
 8000250:	2364      	movs	r3, #100	@ 0x64
 8000252:	2201      	movs	r2, #1
 8000254:	4808      	ldr	r0, [pc, #32]	@ (8000278 <nrf24_ReadReg+0x3c>)
 8000256:	f002 fc83 	bl	8002b60 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800025a:	f107 010f 	add.w	r1, r7, #15
 800025e:	2364      	movs	r3, #100	@ 0x64
 8000260:	2201      	movs	r2, #1
 8000262:	4805      	ldr	r0, [pc, #20]	@ (8000278 <nrf24_ReadReg+0x3c>)
 8000264:	f002 fdc0 	bl	8002de8 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000268:	f7ff ff7c 	bl	8000164 <CS_UnSelect>

	return data;
 800026c:	7bfb      	ldrb	r3, [r7, #15]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	200000a4 	.word	0x200000a4

0800027c <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000286:	f7ff ff61 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 800028a:	1df9      	adds	r1, r7, #7
 800028c:	2364      	movs	r3, #100	@ 0x64
 800028e:	2201      	movs	r2, #1
 8000290:	4804      	ldr	r0, [pc, #16]	@ (80002a4 <nrfsendCmd+0x28>)
 8000292:	f002 fc65 	bl	8002b60 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000296:	f7ff ff65 	bl	8000164 <CS_UnSelect>
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	200000a4 	.word	0x200000a4

080002a8 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b088      	sub	sp, #32
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	2b07      	cmp	r3, #7
 80002b6:	d104      	bne.n	80002c2 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80002b8:	2100      	movs	r1, #0
 80002ba:	2007      	movs	r0, #7
 80002bc:	f7ff ff76 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80002c0:	e090      	b.n	80003e4 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	2b17      	cmp	r3, #23
 80002c6:	d104      	bne.n	80002d2 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80002c8:	2111      	movs	r1, #17
 80002ca:	2017      	movs	r0, #23
 80002cc:	f7ff ff6e 	bl	80001ac <nrf24_WriteReg>
}
 80002d0:	e088      	b.n	80003e4 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80002d2:	2108      	movs	r1, #8
 80002d4:	2000      	movs	r0, #0
 80002d6:	f7ff ff69 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80002da:	213f      	movs	r1, #63	@ 0x3f
 80002dc:	2001      	movs	r0, #1
 80002de:	f7ff ff65 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80002e2:	2103      	movs	r1, #3
 80002e4:	2002      	movs	r0, #2
 80002e6:	f7ff ff61 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80002ea:	2103      	movs	r1, #3
 80002ec:	2003      	movs	r0, #3
 80002ee:	f7ff ff5d 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80002f2:	2103      	movs	r1, #3
 80002f4:	2004      	movs	r0, #4
 80002f6:	f7ff ff59 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80002fa:	2102      	movs	r1, #2
 80002fc:	2005      	movs	r0, #5
 80002fe:	f7ff ff55 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000302:	210e      	movs	r1, #14
 8000304:	2006      	movs	r0, #6
 8000306:	f7ff ff51 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 800030a:	2100      	movs	r1, #0
 800030c:	2007      	movs	r0, #7
 800030e:	f7ff ff4d 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000312:	2100      	movs	r1, #0
 8000314:	2008      	movs	r0, #8
 8000316:	f7ff ff49 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800031a:	2100      	movs	r1, #0
 800031c:	2009      	movs	r0, #9
 800031e:	f7ff ff45 	bl	80001ac <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000322:	4a32      	ldr	r2, [pc, #200]	@ (80003ec <nrf24_reset+0x144>)
 8000324:	f107 0318 	add.w	r3, r7, #24
 8000328:	e892 0003 	ldmia.w	r2, {r0, r1}
 800032c:	6018      	str	r0, [r3, #0]
 800032e:	3304      	adds	r3, #4
 8000330:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	2205      	movs	r2, #5
 8000338:	4619      	mov	r1, r3
 800033a:	200a      	movs	r0, #10
 800033c:	f7ff ff58 	bl	80001f0 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000340:	4a2b      	ldr	r2, [pc, #172]	@ (80003f0 <nrf24_reset+0x148>)
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	e892 0003 	ldmia.w	r2, {r0, r1}
 800034a:	6018      	str	r0, [r3, #0]
 800034c:	3304      	adds	r3, #4
 800034e:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	2205      	movs	r2, #5
 8000356:	4619      	mov	r1, r3
 8000358:	200b      	movs	r0, #11
 800035a:	f7ff ff49 	bl	80001f0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800035e:	21c3      	movs	r1, #195	@ 0xc3
 8000360:	200c      	movs	r0, #12
 8000362:	f7ff ff23 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8000366:	21c4      	movs	r1, #196	@ 0xc4
 8000368:	200d      	movs	r0, #13
 800036a:	f7ff ff1f 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 800036e:	21c5      	movs	r1, #197	@ 0xc5
 8000370:	200e      	movs	r0, #14
 8000372:	f7ff ff1b 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8000376:	21c6      	movs	r1, #198	@ 0xc6
 8000378:	200f      	movs	r0, #15
 800037a:	f7ff ff17 	bl	80001ac <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800037e:	4a1b      	ldr	r2, [pc, #108]	@ (80003ec <nrf24_reset+0x144>)
 8000380:	f107 0308 	add.w	r3, r7, #8
 8000384:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000388:	6018      	str	r0, [r3, #0]
 800038a:	3304      	adds	r3, #4
 800038c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	2205      	movs	r2, #5
 8000394:	4619      	mov	r1, r3
 8000396:	2010      	movs	r0, #16
 8000398:	f7ff ff2a 	bl	80001f0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 800039c:	2100      	movs	r1, #0
 800039e:	2011      	movs	r0, #17
 80003a0:	f7ff ff04 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80003a4:	2100      	movs	r1, #0
 80003a6:	2012      	movs	r0, #18
 80003a8:	f7ff ff00 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80003ac:	2100      	movs	r1, #0
 80003ae:	2013      	movs	r0, #19
 80003b0:	f7ff fefc 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80003b4:	2100      	movs	r1, #0
 80003b6:	2014      	movs	r0, #20
 80003b8:	f7ff fef8 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80003bc:	2100      	movs	r1, #0
 80003be:	2015      	movs	r0, #21
 80003c0:	f7ff fef4 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80003c4:	2100      	movs	r1, #0
 80003c6:	2016      	movs	r0, #22
 80003c8:	f7ff fef0 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80003cc:	2111      	movs	r1, #17
 80003ce:	2017      	movs	r0, #23
 80003d0:	f7ff feec 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80003d4:	2100      	movs	r1, #0
 80003d6:	201c      	movs	r0, #28
 80003d8:	f7ff fee8 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80003dc:	2100      	movs	r1, #0
 80003de:	201d      	movs	r0, #29
 80003e0:	f7ff fee4 	bl	80001ac <nrf24_WriteReg>
}
 80003e4:	bf00      	nop
 80003e6:	3720      	adds	r7, #32
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	080037b0 	.word	0x080037b0
 80003f0:	080037b8 	.word	0x080037b8

080003f4 <NRF24_Init>:




void NRF24_Init (void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80003f8:	f7ff fecc 	bl	8000194 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80003fc:	2000      	movs	r0, #0
 80003fe:	f7ff ff53 	bl	80002a8 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000402:	2100      	movs	r1, #0
 8000404:	2000      	movs	r0, #0
 8000406:	f7ff fed1 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 800040a:	2100      	movs	r1, #0
 800040c:	2001      	movs	r0, #1
 800040e:	f7ff fecd 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000412:	2100      	movs	r1, #0
 8000414:	2002      	movs	r0, #2
 8000416:	f7ff fec9 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800041a:	2103      	movs	r1, #3
 800041c:	2003      	movs	r0, #3
 800041e:	f7ff fec5 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000422:	2100      	movs	r1, #0
 8000424:	2004      	movs	r0, #4
 8000426:	f7ff fec1 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800042a:	2100      	movs	r1, #0
 800042c:	2005      	movs	r0, #5
 800042e:	f7ff febd 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000432:	210e      	movs	r1, #14
 8000434:	2006      	movs	r0, #6
 8000436:	f7ff feb9 	bl	80001ac <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800043a:	f7ff fe9f 	bl	800017c <CE_Enable>

}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}

08000442 <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 8000442:	b580      	push	{r7, lr}
 8000444:	b084      	sub	sp, #16
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
 800044a:	460b      	mov	r3, r1
 800044c:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800044e:	f7ff fea1 	bl	8000194 <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000452:	78fb      	ldrb	r3, [r7, #3]
 8000454:	4619      	mov	r1, r3
 8000456:	2005      	movs	r0, #5
 8000458:	f7ff fea8 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 800045c:	2205      	movs	r2, #5
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	2010      	movs	r0, #16
 8000462:	f7ff fec5 	bl	80001f0 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000466:	2000      	movs	r0, #0
 8000468:	f7ff fee8 	bl	800023c <nrf24_ReadReg>
 800046c:	4603      	mov	r3, r0
 800046e:	73fb      	strb	r3, [r7, #15]
    config = config | (1<<1);   // write 1 in the PWR_UP bit
 8000470:	7bfb      	ldrb	r3, [r7, #15]
 8000472:	f043 0302 	orr.w	r3, r3, #2
 8000476:	73fb      	strb	r3, [r7, #15]
	//config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
	nrf24_WriteReg (CONFIG, config);
 8000478:	7bfb      	ldrb	r3, [r7, #15]
 800047a:	4619      	mov	r1, r3
 800047c:	2000      	movs	r0, #0
 800047e:	f7ff fe95 	bl	80001ac <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000482:	f7ff fe7b 	bl	800017c <CE_Enable>
}
 8000486:	bf00      	nop
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
	...

08000490 <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	73bb      	strb	r3, [r7, #14]

	// select the device
	CS_Select();
 800049c:	f7ff fe56 	bl	800014c <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 80004a0:	23a0      	movs	r3, #160	@ 0xa0
 80004a2:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80004a4:	f107 010e 	add.w	r1, r7, #14
 80004a8:	2364      	movs	r3, #100	@ 0x64
 80004aa:	2201      	movs	r2, #1
 80004ac:	4816      	ldr	r0, [pc, #88]	@ (8000508 <NRF24_Transmit+0x78>)
 80004ae:	f002 fb57 	bl	8002b60 <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 80004b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004b6:	2220      	movs	r2, #32
 80004b8:	6879      	ldr	r1, [r7, #4]
 80004ba:	4813      	ldr	r0, [pc, #76]	@ (8000508 <NRF24_Transmit+0x78>)
 80004bc:	f002 fb50 	bl	8002b60 <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 80004c0:	f7ff fe50 	bl	8000164 <CS_UnSelect>

	HAL_Delay(1);
 80004c4:	2001      	movs	r0, #1
 80004c6:	f000 fd6b 	bl	8000fa0 <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 80004ca:	2017      	movs	r0, #23
 80004cc:	f7ff feb6 	bl	800023c <nrf24_ReadReg>
 80004d0:	4603      	mov	r3, r0
 80004d2:	73fb      	strb	r3, [r7, #15]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	f003 0310 	and.w	r3, r3, #16
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d00f      	beq.n	80004fe <NRF24_Transmit+0x6e>
 80004de:	7bfb      	ldrb	r3, [r7, #15]
 80004e0:	f003 0308 	and.w	r3, r3, #8
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d10a      	bne.n	80004fe <NRF24_Transmit+0x6e>
	{
		cmdtosend = FLUSH_TX;
 80004e8:	23e1      	movs	r3, #225	@ 0xe1
 80004ea:	73bb      	strb	r3, [r7, #14]
		nrfsendCmd(cmdtosend);
 80004ec:	7bbb      	ldrb	r3, [r7, #14]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff fec4 	bl	800027c <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 80004f4:	2017      	movs	r0, #23
 80004f6:	f7ff fed7 	bl	80002a8 <nrf24_reset>

		return 1;
 80004fa:	2301      	movs	r3, #1
 80004fc:	e000      	b.n	8000500 <NRF24_Transmit+0x70>
	}

	return 0;
 80004fe:	2300      	movs	r3, #0
}
 8000500:	4618      	mov	r0, r3
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	200000a4 	.word	0x200000a4

0800050c <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Lấy dữ liệu ADC đọc được khi xảy ra ngắt tại TIM3, 1ms ngắt 1 lần*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
    {

    }

}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
	...

08000520 <ReadJoysticksAndButton>:
 * RxData[11]: Heading clock - giữ hướng
 * Nút nhấn điều khiển Mode:
 *
 */
void ReadJoysticksAndButton(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
    // Đọc giá trị ADC (0–4095) và scale về 1000–2000
    int mapYaw     = (adc_buffer[3] * 1000) / 4095 + 1000;
 8000526:	4b82      	ldr	r3, [pc, #520]	@ (8000730 <ReadJoysticksAndButton+0x210>)
 8000528:	88db      	ldrh	r3, [r3, #6]
 800052a:	461a      	mov	r2, r3
 800052c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000530:	fb02 f303 	mul.w	r3, r2, r3
 8000534:	4a7f      	ldr	r2, [pc, #508]	@ (8000734 <ReadJoysticksAndButton+0x214>)
 8000536:	fb82 1203 	smull	r1, r2, r2, r3
 800053a:	441a      	add	r2, r3
 800053c:	12d2      	asrs	r2, r2, #11
 800053e:	17db      	asrs	r3, r3, #31
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000546:	613b      	str	r3, [r7, #16]
    int mapThrottle= (adc_buffer[2] * 1000) / 4095 + 1000;
 8000548:	4b79      	ldr	r3, [pc, #484]	@ (8000730 <ReadJoysticksAndButton+0x210>)
 800054a:	889b      	ldrh	r3, [r3, #4]
 800054c:	461a      	mov	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000552:	fb02 f303 	mul.w	r3, r2, r3
 8000556:	4a77      	ldr	r2, [pc, #476]	@ (8000734 <ReadJoysticksAndButton+0x214>)
 8000558:	fb82 1203 	smull	r1, r2, r2, r3
 800055c:	441a      	add	r2, r3
 800055e:	12d2      	asrs	r2, r2, #11
 8000560:	17db      	asrs	r3, r3, #31
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000568:	60fb      	str	r3, [r7, #12]
    int mapRoll    = (adc_buffer[1] * 1000) / 4095 + 1000;
 800056a:	4b71      	ldr	r3, [pc, #452]	@ (8000730 <ReadJoysticksAndButton+0x210>)
 800056c:	885b      	ldrh	r3, [r3, #2]
 800056e:	461a      	mov	r2, r3
 8000570:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000574:	fb02 f303 	mul.w	r3, r2, r3
 8000578:	4a6e      	ldr	r2, [pc, #440]	@ (8000734 <ReadJoysticksAndButton+0x214>)
 800057a:	fb82 1203 	smull	r1, r2, r2, r3
 800057e:	441a      	add	r2, r3
 8000580:	12d2      	asrs	r2, r2, #11
 8000582:	17db      	asrs	r3, r3, #31
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800058a:	60bb      	str	r3, [r7, #8]
    int mapPitch   = (adc_buffer[0] * 1000) / 4095 + 1000;
 800058c:	4b68      	ldr	r3, [pc, #416]	@ (8000730 <ReadJoysticksAndButton+0x210>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000596:	fb02 f303 	mul.w	r3, r2, r3
 800059a:	4a66      	ldr	r2, [pc, #408]	@ (8000734 <ReadJoysticksAndButton+0x214>)
 800059c:	fb82 1203 	smull	r1, r2, r2, r3
 80005a0:	441a      	add	r2, r3
 80005a2:	12d2      	asrs	r2, r2, #11
 80005a4:	17db      	asrs	r3, r3, #31
 80005a6:	1ad3      	subs	r3, r2, r3
 80005a8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80005ac:	607b      	str	r3, [r7, #4]

    /* ====== Encode Tx_data giống bên RX mong muốn ====== */

    // Byte 0: throttle lên/xuống/giữ
    if (mapThrottle > 1600)       Tx_data[0] = 1;   // lên
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80005b4:	dd03      	ble.n	80005be <ReadJoysticksAndButton+0x9e>
 80005b6:	4b60      	ldr	r3, [pc, #384]	@ (8000738 <ReadJoysticksAndButton+0x218>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	701a      	strb	r2, [r3, #0]
 80005bc:	e00a      	b.n	80005d4 <ReadJoysticksAndButton+0xb4>
    else if (mapThrottle < 1400)  Tx_data[0] = 0;   // xuống
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 80005c4:	da03      	bge.n	80005ce <ReadJoysticksAndButton+0xae>
 80005c6:	4b5c      	ldr	r3, [pc, #368]	@ (8000738 <ReadJoysticksAndButton+0x218>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
 80005cc:	e002      	b.n	80005d4 <ReadJoysticksAndButton+0xb4>
    else                          Tx_data[0] = 255; // giữ nguyên
 80005ce:	4b5a      	ldr	r3, [pc, #360]	@ (8000738 <ReadJoysticksAndButton+0x218>)
 80005d0:	22ff      	movs	r2, #255	@ 0xff
 80005d2:	701a      	strb	r2, [r3, #0]

    // Yaw
    Tx_data[1] = mapYaw / 100;
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	4a59      	ldr	r2, [pc, #356]	@ (800073c <ReadJoysticksAndButton+0x21c>)
 80005d8:	fb82 1203 	smull	r1, r2, r2, r3
 80005dc:	1152      	asrs	r2, r2, #5
 80005de:	17db      	asrs	r3, r3, #31
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b54      	ldr	r3, [pc, #336]	@ (8000738 <ReadJoysticksAndButton+0x218>)
 80005e6:	705a      	strb	r2, [r3, #1]
    Tx_data[2] = mapYaw % 100;
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	4a54      	ldr	r2, [pc, #336]	@ (800073c <ReadJoysticksAndButton+0x21c>)
 80005ec:	fb82 1203 	smull	r1, r2, r2, r3
 80005f0:	1151      	asrs	r1, r2, #5
 80005f2:	17da      	asrs	r2, r3, #31
 80005f4:	1a8a      	subs	r2, r1, r2
 80005f6:	2164      	movs	r1, #100	@ 0x64
 80005f8:	fb01 f202 	mul.w	r2, r1, r2
 80005fc:	1a9a      	subs	r2, r3, r2
 80005fe:	b2d2      	uxtb	r2, r2
 8000600:	4b4d      	ldr	r3, [pc, #308]	@ (8000738 <ReadJoysticksAndButton+0x218>)
 8000602:	709a      	strb	r2, [r3, #2]

    // Roll
    Tx_data[3] = mapRoll / 100;
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	4a4d      	ldr	r2, [pc, #308]	@ (800073c <ReadJoysticksAndButton+0x21c>)
 8000608:	fb82 1203 	smull	r1, r2, r2, r3
 800060c:	1152      	asrs	r2, r2, #5
 800060e:	17db      	asrs	r3, r3, #31
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b48      	ldr	r3, [pc, #288]	@ (8000738 <ReadJoysticksAndButton+0x218>)
 8000616:	70da      	strb	r2, [r3, #3]
    Tx_data[4] = mapRoll % 100;
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4a48      	ldr	r2, [pc, #288]	@ (800073c <ReadJoysticksAndButton+0x21c>)
 800061c:	fb82 1203 	smull	r1, r2, r2, r3
 8000620:	1151      	asrs	r1, r2, #5
 8000622:	17da      	asrs	r2, r3, #31
 8000624:	1a8a      	subs	r2, r1, r2
 8000626:	2164      	movs	r1, #100	@ 0x64
 8000628:	fb01 f202 	mul.w	r2, r1, r2
 800062c:	1a9a      	subs	r2, r3, r2
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	4b41      	ldr	r3, [pc, #260]	@ (8000738 <ReadJoysticksAndButton+0x218>)
 8000632:	711a      	strb	r2, [r3, #4]

    // Pitch
    Tx_data[5] = mapPitch / 100;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a41      	ldr	r2, [pc, #260]	@ (800073c <ReadJoysticksAndButton+0x21c>)
 8000638:	fb82 1203 	smull	r1, r2, r2, r3
 800063c:	1152      	asrs	r2, r2, #5
 800063e:	17db      	asrs	r3, r3, #31
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	b2da      	uxtb	r2, r3
 8000644:	4b3c      	ldr	r3, [pc, #240]	@ (8000738 <ReadJoysticksAndButton+0x218>)
 8000646:	715a      	strb	r2, [r3, #5]
    Tx_data[6] = mapPitch % 100;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a3c      	ldr	r2, [pc, #240]	@ (800073c <ReadJoysticksAndButton+0x21c>)
 800064c:	fb82 1203 	smull	r1, r2, r2, r3
 8000650:	1151      	asrs	r1, r2, #5
 8000652:	17da      	asrs	r2, r3, #31
 8000654:	1a8a      	subs	r2, r1, r2
 8000656:	2164      	movs	r1, #100	@ 0x64
 8000658:	fb01 f202 	mul.w	r2, r1, r2
 800065c:	1a9a      	subs	r2, r3, r2
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	4b35      	ldr	r3, [pc, #212]	@ (8000738 <ReadJoysticksAndButton+0x218>)
 8000662:	719a      	strb	r2, [r3, #6]

    // FlightMode (BTN6 = Flight Mode 3, BTN1 = FlightMode 2, mặc định = Flight Mode 1)
    if (HAL_GPIO_ReadPin(BTN6_GPIO_Port, BTN6_Pin) == GPIO_PIN_RESET) {
 8000664:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000668:	4835      	ldr	r0, [pc, #212]	@ (8000740 <ReadJoysticksAndButton+0x220>)
 800066a:	f001 fcff 	bl	800206c <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d103      	bne.n	800067c <ReadJoysticksAndButton+0x15c>
        Tx_data[7] = 3;
 8000674:	4b30      	ldr	r3, [pc, #192]	@ (8000738 <ReadJoysticksAndButton+0x218>)
 8000676:	2203      	movs	r2, #3
 8000678:	71da      	strb	r2, [r3, #7]
 800067a:	e00e      	b.n	800069a <ReadJoysticksAndButton+0x17a>
    } else if (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == GPIO_PIN_RESET) {
 800067c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000680:	4830      	ldr	r0, [pc, #192]	@ (8000744 <ReadJoysticksAndButton+0x224>)
 8000682:	f001 fcf3 	bl	800206c <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d103      	bne.n	8000694 <ReadJoysticksAndButton+0x174>
        Tx_data[7] = 2;
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <ReadJoysticksAndButton+0x218>)
 800068e:	2202      	movs	r2, #2
 8000690:	71da      	strb	r2, [r3, #7]
 8000692:	e002      	b.n	800069a <ReadJoysticksAndButton+0x17a>
    } else {
        Tx_data[7] = 1;
 8000694:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <ReadJoysticksAndButton+0x218>)
 8000696:	2201      	movs	r2, #1
 8000698:	71da      	strb	r2, [r3, #7]
     * BTN2: STOP
     * BTN3: START
     * BTN4 Vào Setting Mode
     * BTN5: Heading Clock
     */
    Tx_data[8]  = (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == GPIO_PIN_RESET) ? 1 : 0;
 800069a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800069e:	4829      	ldr	r0, [pc, #164]	@ (8000744 <ReadJoysticksAndButton+0x224>)
 80006a0:	f001 fce4 	bl	800206c <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	bf0c      	ite	eq
 80006aa:	2301      	moveq	r3, #1
 80006ac:	2300      	movne	r3, #0
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <ReadJoysticksAndButton+0x218>)
 80006b4:	721a      	strb	r2, [r3, #8]
    Tx_data[9]  = (HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin) == GPIO_PIN_RESET) ? 1 : 0;
 80006b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006ba:	4822      	ldr	r0, [pc, #136]	@ (8000744 <ReadJoysticksAndButton+0x224>)
 80006bc:	f001 fcd6 	bl	800206c <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	bf0c      	ite	eq
 80006c6:	2301      	moveq	r3, #1
 80006c8:	2300      	movne	r3, #0
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000738 <ReadJoysticksAndButton+0x218>)
 80006d0:	725a      	strb	r2, [r3, #9]
    Tx_data[10] = (HAL_GPIO_ReadPin(BTN4_GPIO_Port, BTN4_Pin) == GPIO_PIN_RESET) ? 1 : 0;
 80006d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006d6:	481a      	ldr	r0, [pc, #104]	@ (8000740 <ReadJoysticksAndButton+0x220>)
 80006d8:	f001 fcc8 	bl	800206c <HAL_GPIO_ReadPin>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	bf0c      	ite	eq
 80006e2:	2301      	moveq	r3, #1
 80006e4:	2300      	movne	r3, #0
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <ReadJoysticksAndButton+0x218>)
 80006ec:	729a      	strb	r2, [r3, #10]
    Tx_data[11] = (HAL_GPIO_ReadPin(BTN5_GPIO_Port, BTN5_Pin) == GPIO_PIN_RESET) ? 1 : 0;
 80006ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006f2:	4813      	ldr	r0, [pc, #76]	@ (8000740 <ReadJoysticksAndButton+0x220>)
 80006f4:	f001 fcba 	bl	800206c <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf0c      	ite	eq
 80006fe:	2301      	moveq	r3, #1
 8000700:	2300      	movne	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <ReadJoysticksAndButton+0x218>)
 8000708:	72da      	strb	r2, [r3, #11]

    // Clear các byte còn lại
    for (int i = 12; i < 32; i++) Tx_data[i] = 0;
 800070a:	230c      	movs	r3, #12
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	e007      	b.n	8000720 <ReadJoysticksAndButton+0x200>
 8000710:	4a09      	ldr	r2, [pc, #36]	@ (8000738 <ReadJoysticksAndButton+0x218>)
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	4413      	add	r3, r2
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	3301      	adds	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	2b1f      	cmp	r3, #31
 8000724:	ddf4      	ble.n	8000710 <ReadJoysticksAndButton+0x1f0>
}
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000144 	.word	0x20000144
 8000734:	80080081 	.word	0x80080081
 8000738:	2000014c 	.word	0x2000014c
 800073c:	51eb851f 	.word	0x51eb851f
 8000740:	40010c00 	.word	0x40010c00
 8000744:	40010800 	.word	0x40010800

08000748 <GamePad_Transmit>:

void GamePad_Transmit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
    NRF24_Transmit(Tx_data);
 800074c:	4802      	ldr	r0, [pc, #8]	@ (8000758 <GamePad_Transmit+0x10>)
 800074e:	f7ff fe9f 	bl	8000490 <NRF24_Transmit>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000014c 	.word	0x2000014c

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f000 fbbc 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f832 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f000 f970 	bl	8000a4c <MX_GPIO_Init>
  MX_DMA_Init();
 800076c:	f000 f950 	bl	8000a10 <MX_DMA_Init>
  MX_ADC1_Init();
 8000770:	f000 f884 	bl	800087c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000774:	f000 f8ec 	bl	8000950 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000778:	f000 f920 	bl	80009bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initilize NRF24L01
  NRF24_Init();
 800077c:	f7ff fe3a 	bl	80003f4 <NRF24_Init>

 // Set ở chế độ Tx cho GamePad
  NRF24_TxMode(TxAddress, 10);
 8000780:	210a      	movs	r1, #10
 8000782:	480e      	ldr	r0, [pc, #56]	@ (80007bc <main+0x60>)
 8000784:	f7ff fe5d 	bl	8000442 <NRF24_TxMode>

  // Khởi tạo ADC, đọc bằng DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 4);
 8000788:	2204      	movs	r2, #4
 800078a:	490d      	ldr	r1, [pc, #52]	@ (80007c0 <main+0x64>)
 800078c:	480d      	ldr	r0, [pc, #52]	@ (80007c4 <main+0x68>)
 800078e:	f000 fd03 	bl	8001198 <HAL_ADC_Start_DMA>

  // Bật 2 LED
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000798:	480b      	ldr	r0, [pc, #44]	@ (80007c8 <main+0x6c>)
 800079a:	f001 fc7e 	bl	800209a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007a4:	4808      	ldr	r0, [pc, #32]	@ (80007c8 <main+0x6c>)
 80007a6:	f001 fc78 	bl	800209a <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ReadJoysticksAndButton();
 80007aa:	f7ff feb9 	bl	8000520 <ReadJoysticksAndButton>
	  // Truyền dữ liệu đến Main Drone
	  GamePad_Transmit();
 80007ae:	f7ff ffcb 	bl	8000748 <GamePad_Transmit>

	  HAL_Delay(10);
 80007b2:	200a      	movs	r0, #10
 80007b4:	f000 fbf4 	bl	8000fa0 <HAL_Delay>
	  ReadJoysticksAndButton();
 80007b8:	bf00      	nop
 80007ba:	e7f6      	b.n	80007aa <main+0x4e>
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000144 	.word	0x20000144
 80007c4:	20000030 	.word	0x20000030
 80007c8:	40010800 	.word	0x40010800

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b094      	sub	sp, #80	@ 0x50
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007d6:	2228      	movs	r2, #40	@ 0x28
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 ffb0 	bl	8003740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000800:	2301      	movs	r3, #1
 8000802:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000804:	2310      	movs	r3, #16
 8000806:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	2302      	movs	r3, #2
 800080a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800080c:	2300      	movs	r3, #0
 800080e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000810:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000814:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fc56 	bl	80020cc <HAL_RCC_OscConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000826:	f000 f99b 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	230f      	movs	r3, #15
 800082c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	2302      	movs	r3, #2
 8000830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000836:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800083a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2102      	movs	r1, #2
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fec2 	bl	80025d0 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000852:	f000 f985 	bl	8000b60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000856:	2302      	movs	r3, #2
 8000858:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800085a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800085e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4618      	mov	r0, r3
 8000864:	f002 f842 	bl	80028ec <HAL_RCCEx_PeriphCLKConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800086e:	f000 f977 	bl	8000b60 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3750      	adds	r7, #80	@ 0x50
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800088c:	4b2e      	ldr	r3, [pc, #184]	@ (8000948 <MX_ADC1_Init+0xcc>)
 800088e:	4a2f      	ldr	r2, [pc, #188]	@ (800094c <MX_ADC1_Init+0xd0>)
 8000890:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000892:	4b2d      	ldr	r3, [pc, #180]	@ (8000948 <MX_ADC1_Init+0xcc>)
 8000894:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000898:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800089a:	4b2b      	ldr	r3, [pc, #172]	@ (8000948 <MX_ADC1_Init+0xcc>)
 800089c:	2201      	movs	r2, #1
 800089e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a0:	4b29      	ldr	r3, [pc, #164]	@ (8000948 <MX_ADC1_Init+0xcc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a6:	4b28      	ldr	r3, [pc, #160]	@ (8000948 <MX_ADC1_Init+0xcc>)
 80008a8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80008ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ae:	4b26      	ldr	r3, [pc, #152]	@ (8000948 <MX_ADC1_Init+0xcc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80008b4:	4b24      	ldr	r3, [pc, #144]	@ (8000948 <MX_ADC1_Init+0xcc>)
 80008b6:	2204      	movs	r2, #4
 80008b8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ba:	4823      	ldr	r0, [pc, #140]	@ (8000948 <MX_ADC1_Init+0xcc>)
 80008bc:	f000 fb94 	bl	8000fe8 <HAL_ADC_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80008c6:	f000 f94b 	bl	8000b60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80008d2:	2303      	movs	r3, #3
 80008d4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4619      	mov	r1, r3
 80008da:	481b      	ldr	r0, [pc, #108]	@ (8000948 <MX_ADC1_Init+0xcc>)
 80008dc:	f000 fd4c 	bl	8001378 <HAL_ADC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f000 f93b 	bl	8000b60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008ea:	2303      	movs	r3, #3
 80008ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4619      	mov	r1, r3
 80008f6:	4814      	ldr	r0, [pc, #80]	@ (8000948 <MX_ADC1_Init+0xcc>)
 80008f8:	f000 fd3e 	bl	8001378 <HAL_ADC_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000902:	f000 f92d 	bl	8000b60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000906:	2308      	movs	r3, #8
 8000908:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800090a:	2303      	movs	r3, #3
 800090c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	@ (8000948 <MX_ADC1_Init+0xcc>)
 8000914:	f000 fd30 	bl	8001378 <HAL_ADC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800091e:	f000 f91f 	bl	8000b60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000922:	2309      	movs	r3, #9
 8000924:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000926:	2304      	movs	r3, #4
 8000928:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	@ (8000948 <MX_ADC1_Init+0xcc>)
 8000930:	f000 fd22 	bl	8001378 <HAL_ADC_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800093a:	f000 f911 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000030 	.word	0x20000030
 800094c:	40012400 	.word	0x40012400

08000950 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000954:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000956:	4a18      	ldr	r2, [pc, #96]	@ (80009b8 <MX_SPI1_Init+0x68>)
 8000958:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800095a:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <MX_SPI1_Init+0x64>)
 800095c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000960:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000962:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <MX_SPI1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <MX_SPI1_Init+0x64>)
 800097c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000980:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000984:	2208      	movs	r2, #8
 8000986:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000988:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000994:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <MX_SPI1_Init+0x64>)
 800099c:	220a      	movs	r2, #10
 800099e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	@ (80009b4 <MX_SPI1_Init+0x64>)
 80009a2:	f002 f859 	bl	8002a58 <HAL_SPI_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009ac:	f000 f8d8 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200000a4 	.word	0x200000a4
 80009b8:	40013000 	.word	0x40013000

080009bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c0:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	@ (8000a0c <MX_USART1_UART_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c6:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009f4:	f002 fdc5 	bl	8003582 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009fe:	f000 f8af 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000fc 	.word	0x200000fc
 8000a0c:	40013800 	.word	0x40013800

08000a10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a16:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <MX_DMA_Init+0x38>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a48 <MX_DMA_Init+0x38>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6153      	str	r3, [r2, #20]
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <MX_DMA_Init+0x38>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	200b      	movs	r0, #11
 8000a34:	f000 ff71 	bl	800191a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a38:	200b      	movs	r0, #11
 8000a3a:	f000 ff8a 	bl	8001952 <HAL_NVIC_EnableIRQ>

}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b3c      	ldr	r3, [pc, #240]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a3b      	ldr	r2, [pc, #236]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b39      	ldr	r3, [pc, #228]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a78:	4b36      	ldr	r3, [pc, #216]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a35      	ldr	r2, [pc, #212]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b33      	ldr	r3, [pc, #204]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0308 	and.w	r3, r3, #8
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Wakeup_Pin|NRF_CSN_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f641 0111 	movw	r1, #6161	@ 0x1811
 8000a96:	4830      	ldr	r0, [pc, #192]	@ (8000b58 <MX_GPIO_Init+0x10c>)
 8000a98:	f001 faff 	bl	800209a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_IRQ_Pin|NRF_CE_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8000aa2:	482e      	ldr	r0, [pc, #184]	@ (8000b5c <MX_GPIO_Init+0x110>)
 8000aa4:	f001 faf9 	bl	800209a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Wakeup_Pin NRF_CSN_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = Wakeup_Pin|NRF_CSN_Pin|LED2_Pin|LED1_Pin;
 8000aa8:	f641 0311 	movw	r3, #6161	@ 0x1811
 8000aac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4825      	ldr	r0, [pc, #148]	@ (8000b58 <MX_GPIO_Init+0x10c>)
 8000ac2:	f001 f94f 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_IRQ_Pin NRF_CE_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin|NRF_CE_Pin|BUZZER_Pin;
 8000ac6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000aca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	4619      	mov	r1, r3
 8000ade:	481f      	ldr	r0, [pc, #124]	@ (8000b5c <MX_GPIO_Init+0x110>)
 8000ae0:	f001 f940 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN6_Pin BTN5_Pin BTN4_Pin */
  GPIO_InitStruct.Pin = BTN6_Pin|BTN5_Pin|BTN4_Pin;
 8000ae4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000ae8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	4619      	mov	r1, r3
 8000af8:	4818      	ldr	r0, [pc, #96]	@ (8000b5c <MX_GPIO_Init+0x110>)
 8000afa:	f001 f933 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_Pin BTN2_Pin BTN1_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin|BTN2_Pin|BTN1_Pin;
 8000afe:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000b02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	4619      	mov	r1, r3
 8000b12:	4811      	ldr	r0, [pc, #68]	@ (8000b58 <MX_GPIO_Init+0x10c>)
 8000b14:	f001 f926 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_RIGHT_Pin;
 8000b18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BTN_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480a      	ldr	r0, [pc, #40]	@ (8000b58 <MX_GPIO_Init+0x10c>)
 8000b2e:	f001 f919 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LFFT_Pin */
  GPIO_InitStruct.Pin = BTN_LFFT_Pin;
 8000b32:	2320      	movs	r3, #32
 8000b34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BTN_LFFT_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_GPIO_Init+0x110>)
 8000b46:	f001 f90d 	bl	8001d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010800 	.word	0x40010800
 8000b5c:	40010c00 	.word	0x40010c00

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <Error_Handler+0x8>

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	4a14      	ldr	r2, [pc, #80]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6193      	str	r3, [r2, #24]
 8000b7e:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b94:	61d3      	str	r3, [r2, #28]
 8000b96:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <HAL_MspInit+0x60>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4a04      	ldr	r2, [pc, #16]	@ (8000bcc <HAL_MspInit+0x60>)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010000 	.word	0x40010000

08000bd0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a33      	ldr	r2, [pc, #204]	@ (8000cb8 <HAL_ADC_MspInit+0xe8>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d15f      	bne.n	8000cb0 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bf0:	4b32      	ldr	r3, [pc, #200]	@ (8000cbc <HAL_ADC_MspInit+0xec>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a31      	ldr	r2, [pc, #196]	@ (8000cbc <HAL_ADC_MspInit+0xec>)
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8000cbc <HAL_ADC_MspInit+0xec>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b2c      	ldr	r3, [pc, #176]	@ (8000cbc <HAL_ADC_MspInit+0xec>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8000cbc <HAL_ADC_MspInit+0xec>)
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b29      	ldr	r3, [pc, #164]	@ (8000cbc <HAL_ADC_MspInit+0xec>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c20:	4b26      	ldr	r3, [pc, #152]	@ (8000cbc <HAL_ADC_MspInit+0xec>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a25      	ldr	r2, [pc, #148]	@ (8000cbc <HAL_ADC_MspInit+0xec>)
 8000c26:	f043 0308 	orr.w	r3, r3, #8
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b23      	ldr	r3, [pc, #140]	@ (8000cbc <HAL_ADC_MspInit+0xec>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0308 	and.w	r3, r3, #8
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = X_RIGHT_Pin|Y_RIGHT_Pin;
 8000c38:	230c      	movs	r3, #12
 8000c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0318 	add.w	r3, r7, #24
 8000c44:	4619      	mov	r1, r3
 8000c46:	481e      	ldr	r0, [pc, #120]	@ (8000cc0 <HAL_ADC_MspInit+0xf0>)
 8000c48:	f001 f88c 	bl	8001d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = X_LEFT_Pin|Y_LFFT_Pin;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c50:	2303      	movs	r3, #3
 8000c52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f107 0318 	add.w	r3, r7, #24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	481a      	ldr	r0, [pc, #104]	@ (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c5c:	f001 f882 	bl	8001d64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c60:	4b19      	ldr	r3, [pc, #100]	@ (8000cc8 <HAL_ADC_MspInit+0xf8>)
 8000c62:	4a1a      	ldr	r2, [pc, #104]	@ (8000ccc <HAL_ADC_MspInit+0xfc>)
 8000c64:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c66:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <HAL_ADC_MspInit+0xf8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	@ (8000cc8 <HAL_ADC_MspInit+0xf8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <HAL_ADC_MspInit+0xf8>)
 8000c74:	2280      	movs	r2, #128	@ 0x80
 8000c76:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c78:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <HAL_ADC_MspInit+0xf8>)
 8000c7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c7e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c80:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <HAL_ADC_MspInit+0xf8>)
 8000c82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c86:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc8 <HAL_ADC_MspInit+0xf8>)
 8000c8a:	2220      	movs	r2, #32
 8000c8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <HAL_ADC_MspInit+0xf8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c94:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <HAL_ADC_MspInit+0xf8>)
 8000c96:	f000 fe77 	bl	8001988 <HAL_DMA_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000ca0:	f7ff ff5e 	bl	8000b60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a08      	ldr	r2, [pc, #32]	@ (8000cc8 <HAL_ADC_MspInit+0xf8>)
 8000ca8:	621a      	str	r2, [r3, #32]
 8000caa:	4a07      	ldr	r2, [pc, #28]	@ (8000cc8 <HAL_ADC_MspInit+0xf8>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	@ 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40012400 	.word	0x40012400
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010800 	.word	0x40010800
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	20000060 	.word	0x20000060
 8000ccc:	40020008 	.word	0x40020008

08000cd0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a1b      	ldr	r2, [pc, #108]	@ (8000d58 <HAL_SPI_MspInit+0x88>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d12f      	bne.n	8000d50 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a19      	ldr	r2, [pc, #100]	@ (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000cf6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a13      	ldr	r2, [pc, #76]	@ (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000d0e:	f043 0304 	orr.w	r3, r3, #4
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0304 	and.w	r3, r3, #4
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d20:	23a0      	movs	r3, #160	@ 0xa0
 8000d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	4619      	mov	r1, r3
 8000d32:	480b      	ldr	r0, [pc, #44]	@ (8000d60 <HAL_SPI_MspInit+0x90>)
 8000d34:	f001 f816 	bl	8001d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d38:	2340      	movs	r3, #64	@ 0x40
 8000d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <HAL_SPI_MspInit+0x90>)
 8000d4c:	f001 f80a 	bl	8001d64 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d50:	bf00      	nop
 8000d52:	3720      	adds	r7, #32
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40013000 	.word	0x40013000
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010800 	.word	0x40010800

08000d64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	@ 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a22      	ldr	r2, [pc, #136]	@ (8000e08 <HAL_UART_MspInit+0xa4>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d13d      	bne.n	8000e00 <HAL_UART_MspInit+0x9c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d84:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <HAL_UART_MspInit+0xa8>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a20      	ldr	r2, [pc, #128]	@ (8000e0c <HAL_UART_MspInit+0xa8>)
 8000d8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <HAL_UART_MspInit+0xa8>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <HAL_UART_MspInit+0xa8>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e0c <HAL_UART_MspInit+0xa8>)
 8000da2:	f043 0308 	orr.w	r3, r3, #8
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <HAL_UART_MspInit+0xa8>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0308 	and.w	r3, r3, #8
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000db4:	2340      	movs	r3, #64	@ 0x40
 8000db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4812      	ldr	r0, [pc, #72]	@ (8000e10 <HAL_UART_MspInit+0xac>)
 8000dc8:	f000 ffcc 	bl	8001d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dcc:	2380      	movs	r3, #128	@ 0x80
 8000dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <HAL_UART_MspInit+0xac>)
 8000de0:	f000 ffc0 	bl	8001d64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000de4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <HAL_UART_MspInit+0xb0>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dec:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dfa:	4a06      	ldr	r2, [pc, #24]	@ (8000e14 <HAL_UART_MspInit+0xb0>)
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfe:	6053      	str	r3, [r2, #4]

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	@ 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40013800 	.word	0x40013800
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010c00 	.word	0x40010c00
 8000e14:	40010000 	.word	0x40010000

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <NMI_Handler+0x4>

08000e20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <MemManage_Handler+0x4>

08000e30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e68:	f000 f87e 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e74:	4802      	ldr	r0, [pc, #8]	@ (8000e80 <DMA1_Channel1_IRQHandler+0x10>)
 8000e76:	f000 fe41 	bl	8001afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000060 	.word	0x20000060

08000e84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e90:	f7ff fff8 	bl	8000e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e94:	480b      	ldr	r0, [pc, #44]	@ (8000ec4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e96:	490c      	ldr	r1, [pc, #48]	@ (8000ec8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e98:	4a0c      	ldr	r2, [pc, #48]	@ (8000ecc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a09      	ldr	r2, [pc, #36]	@ (8000ed0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000eac:	4c09      	ldr	r4, [pc, #36]	@ (8000ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eba:	f002 fc49 	bl	8003750 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ebe:	f7ff fc4d 	bl	800075c <main>
  bx lr
 8000ec2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ecc:	080037f4 	.word	0x080037f4
  ldr r2, =_sbss
 8000ed0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ed4:	20000170 	.word	0x20000170

08000ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC1_2_IRQHandler>
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <HAL_Init+0x28>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	@ (8000f04 <HAL_Init+0x28>)
 8000ee6:	f043 0310 	orr.w	r3, r3, #16
 8000eea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 fd09 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	200f      	movs	r0, #15
 8000ef4:	f000 f808 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fe38 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40022000 	.word	0x40022000

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <HAL_InitTick+0x54>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <HAL_InitTick+0x58>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fd21 	bl	800196e <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 fce9 	bl	800191a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	@ (8000f64 <HAL_InitTick+0x5c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000010 	.word	0x20000010
 8000f64:	2000000c 	.word	0x2000000c

08000f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <HAL_IncTick+0x1c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <HAL_IncTick+0x20>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a03      	ldr	r2, [pc, #12]	@ (8000f88 <HAL_IncTick+0x20>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	20000010 	.word	0x20000010
 8000f88:	2000016c 	.word	0x2000016c

08000f8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b02      	ldr	r3, [pc, #8]	@ (8000f9c <HAL_GetTick+0x10>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	2000016c 	.word	0x2000016c

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff fff0 	bl	8000f8c <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffe0 	bl	8000f8c <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000010 	.word	0x20000010

08000fe8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e0be      	b.n	8001188 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001014:	2b00      	cmp	r3, #0
 8001016:	d109      	bne.n	800102c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff fdd2 	bl	8000bd0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 faf5 	bl	800161c <ADC_ConversionStop_Disable>
 8001032:	4603      	mov	r3, r0
 8001034:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800103a:	f003 0310 	and.w	r3, r3, #16
 800103e:	2b00      	cmp	r3, #0
 8001040:	f040 8099 	bne.w	8001176 <HAL_ADC_Init+0x18e>
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	2b00      	cmp	r3, #0
 8001048:	f040 8095 	bne.w	8001176 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001050:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001054:	f023 0302 	bic.w	r3, r3, #2
 8001058:	f043 0202 	orr.w	r2, r3, #2
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001068:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7b1b      	ldrb	r3, [r3, #12]
 800106e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001070:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	4313      	orrs	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001080:	d003      	beq.n	800108a <HAL_ADC_Init+0xa2>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d102      	bne.n	8001090 <HAL_ADC_Init+0xa8>
 800108a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800108e:	e000      	b.n	8001092 <HAL_ADC_Init+0xaa>
 8001090:	2300      	movs	r3, #0
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7d1b      	ldrb	r3, [r3, #20]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d119      	bne.n	80010d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7b1b      	ldrb	r3, [r3, #12]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d109      	bne.n	80010bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	035a      	lsls	r2, r3, #13
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	e00b      	b.n	80010d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c0:	f043 0220 	orr.w	r2, r3, #32
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010cc:	f043 0201 	orr.w	r2, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	4b28      	ldr	r3, [pc, #160]	@ (8001190 <HAL_ADC_Init+0x1a8>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6812      	ldr	r2, [r2, #0]
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	430b      	orrs	r3, r1
 80010fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001104:	d003      	beq.n	800110e <HAL_ADC_Init+0x126>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d104      	bne.n	8001118 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	3b01      	subs	r3, #1
 8001114:	051b      	lsls	r3, r3, #20
 8001116:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800111e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	430a      	orrs	r2, r1
 800112a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <HAL_ADC_Init+0x1ac>)
 8001134:	4013      	ands	r3, r2
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	429a      	cmp	r2, r3
 800113a:	d10b      	bne.n	8001154 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001146:	f023 0303 	bic.w	r3, r3, #3
 800114a:	f043 0201 	orr.w	r2, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001152:	e018      	b.n	8001186 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001158:	f023 0312 	bic.w	r3, r3, #18
 800115c:	f043 0210 	orr.w	r2, r3, #16
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001168:	f043 0201 	orr.w	r2, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001174:	e007      	b.n	8001186 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800117a:	f043 0210 	orr.w	r2, r3, #16
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001186:	7dfb      	ldrb	r3, [r7, #23]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	ffe1f7fd 	.word	0xffe1f7fd
 8001194:	ff1f0efe 	.word	0xff1f0efe

08001198 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a64      	ldr	r2, [pc, #400]	@ (8001340 <HAL_ADC_Start_DMA+0x1a8>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d004      	beq.n	80011bc <HAL_ADC_Start_DMA+0x24>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a63      	ldr	r2, [pc, #396]	@ (8001344 <HAL_ADC_Start_DMA+0x1ac>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d106      	bne.n	80011ca <HAL_ADC_Start_DMA+0x32>
 80011bc:	4b60      	ldr	r3, [pc, #384]	@ (8001340 <HAL_ADC_Start_DMA+0x1a8>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f040 80b3 	bne.w	8001330 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d101      	bne.n	80011d8 <HAL_ADC_Start_DMA+0x40>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e0ae      	b.n	8001336 <HAL_ADC_Start_DMA+0x19e>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f000 f9c1 	bl	8001568 <ADC_Enable>
 80011e6:	4603      	mov	r3, r0
 80011e8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80011ea:	7dfb      	ldrb	r3, [r7, #23]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f040 809a 	bne.w	8001326 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80011fa:	f023 0301 	bic.w	r3, r3, #1
 80011fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a4e      	ldr	r2, [pc, #312]	@ (8001344 <HAL_ADC_Start_DMA+0x1ac>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d105      	bne.n	800121c <HAL_ADC_Start_DMA+0x84>
 8001210:	4b4b      	ldr	r3, [pc, #300]	@ (8001340 <HAL_ADC_Start_DMA+0x1a8>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d115      	bne.n	8001248 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001220:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001232:	2b00      	cmp	r3, #0
 8001234:	d026      	beq.n	8001284 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800123a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800123e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001246:	e01d      	b.n	8001284 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800124c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a39      	ldr	r2, [pc, #228]	@ (8001340 <HAL_ADC_Start_DMA+0x1a8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d004      	beq.n	8001268 <HAL_ADC_Start_DMA+0xd0>
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a38      	ldr	r2, [pc, #224]	@ (8001344 <HAL_ADC_Start_DMA+0x1ac>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d10d      	bne.n	8001284 <HAL_ADC_Start_DMA+0xec>
 8001268:	4b35      	ldr	r3, [pc, #212]	@ (8001340 <HAL_ADC_Start_DMA+0x1a8>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001270:	2b00      	cmp	r3, #0
 8001272:	d007      	beq.n	8001284 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001278:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800127c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001288:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001294:	f023 0206 	bic.w	r2, r3, #6
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800129c:	e002      	b.n	80012a4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2200      	movs	r2, #0
 80012a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4a25      	ldr	r2, [pc, #148]	@ (8001348 <HAL_ADC_Start_DMA+0x1b0>)
 80012b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	4a24      	ldr	r2, [pc, #144]	@ (800134c <HAL_ADC_Start_DMA+0x1b4>)
 80012ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	4a23      	ldr	r2, [pc, #140]	@ (8001350 <HAL_ADC_Start_DMA+0x1b8>)
 80012c2:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f06f 0202 	mvn.w	r2, #2
 80012cc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80012dc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6a18      	ldr	r0, [r3, #32]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	334c      	adds	r3, #76	@ 0x4c
 80012e8:	4619      	mov	r1, r3
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f000 fba5 	bl	8001a3c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80012fc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001300:	d108      	bne.n	8001314 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001310:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001312:	e00f      	b.n	8001334 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001322:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001324:	e006      	b.n	8001334 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800132e:	e001      	b.n	8001334 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001334:	7dfb      	ldrb	r3, [r7, #23]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40012400 	.word	0x40012400
 8001344:	40012800 	.word	0x40012800
 8001348:	0800169f 	.word	0x0800169f
 800134c:	0800171b 	.word	0x0800171b
 8001350:	08001737 	.word	0x08001737

08001354 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr

08001366 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001390:	2b01      	cmp	r3, #1
 8001392:	d101      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x20>
 8001394:	2302      	movs	r3, #2
 8001396:	e0dc      	b.n	8001552 <HAL_ADC_ConfigChannel+0x1da>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b06      	cmp	r3, #6
 80013a6:	d81c      	bhi.n	80013e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	3b05      	subs	r3, #5
 80013ba:	221f      	movs	r2, #31
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	4019      	ands	r1, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	3b05      	subs	r3, #5
 80013d4:	fa00 f203 	lsl.w	r2, r0, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	635a      	str	r2, [r3, #52]	@ 0x34
 80013e0:	e03c      	b.n	800145c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b0c      	cmp	r3, #12
 80013e8:	d81c      	bhi.n	8001424 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	3b23      	subs	r3, #35	@ 0x23
 80013fc:	221f      	movs	r2, #31
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	4019      	ands	r1, r3
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	6818      	ldr	r0, [r3, #0]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	3b23      	subs	r3, #35	@ 0x23
 8001416:	fa00 f203 	lsl.w	r2, r0, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	631a      	str	r2, [r3, #48]	@ 0x30
 8001422:	e01b      	b.n	800145c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	3b41      	subs	r3, #65	@ 0x41
 8001436:	221f      	movs	r2, #31
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	4019      	ands	r1, r3
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	3b41      	subs	r3, #65	@ 0x41
 8001450:	fa00 f203 	lsl.w	r2, r0, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b09      	cmp	r3, #9
 8001462:	d91c      	bls.n	800149e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68d9      	ldr	r1, [r3, #12]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	3b1e      	subs	r3, #30
 8001476:	2207      	movs	r2, #7
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	4019      	ands	r1, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	6898      	ldr	r0, [r3, #8]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	3b1e      	subs	r3, #30
 8001490:	fa00 f203 	lsl.w	r2, r0, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	e019      	b.n	80014d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6919      	ldr	r1, [r3, #16]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4613      	mov	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	2207      	movs	r2, #7
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	4019      	ands	r1, r3
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	6898      	ldr	r0, [r3, #8]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b10      	cmp	r3, #16
 80014d8:	d003      	beq.n	80014e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014de:	2b11      	cmp	r3, #17
 80014e0:	d132      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a1d      	ldr	r2, [pc, #116]	@ (800155c <HAL_ADC_ConfigChannel+0x1e4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d125      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d126      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001508:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b10      	cmp	r3, #16
 8001510:	d11a      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001512:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <HAL_ADC_ConfigChannel+0x1e8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a13      	ldr	r2, [pc, #76]	@ (8001564 <HAL_ADC_ConfigChannel+0x1ec>)
 8001518:	fba2 2303 	umull	r2, r3, r2, r3
 800151c:	0c9a      	lsrs	r2, r3, #18
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001528:	e002      	b.n	8001530 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3b01      	subs	r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f9      	bne.n	800152a <HAL_ADC_ConfigChannel+0x1b2>
 8001536:	e007      	b.n	8001548 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153c:	f043 0220 	orr.w	r2, r3, #32
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001550:	7bfb      	ldrb	r3, [r7, #15]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40012400 	.word	0x40012400
 8001560:	20000008 	.word	0x20000008
 8001564:	431bde83 	.word	0x431bde83

08001568 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b01      	cmp	r3, #1
 8001584:	d040      	beq.n	8001608 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f042 0201 	orr.w	r2, r2, #1
 8001594:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001596:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <ADC_Enable+0xac>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a1f      	ldr	r2, [pc, #124]	@ (8001618 <ADC_Enable+0xb0>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	0c9b      	lsrs	r3, r3, #18
 80015a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015a4:	e002      	b.n	80015ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f9      	bne.n	80015a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015b2:	f7ff fceb 	bl	8000f8c <HAL_GetTick>
 80015b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015b8:	e01f      	b.n	80015fa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015ba:	f7ff fce7 	bl	8000f8c <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d918      	bls.n	80015fa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d011      	beq.n	80015fa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015da:	f043 0210 	orr.w	r2, r3, #16
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e6:	f043 0201 	orr.w	r2, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e007      	b.n	800160a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b01      	cmp	r3, #1
 8001606:	d1d8      	bne.n	80015ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000008 	.word	0x20000008
 8001618:	431bde83 	.word	0x431bde83

0800161c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b01      	cmp	r3, #1
 8001634:	d12e      	bne.n	8001694 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0201 	bic.w	r2, r2, #1
 8001644:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001646:	f7ff fca1 	bl	8000f8c <HAL_GetTick>
 800164a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800164c:	e01b      	b.n	8001686 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800164e:	f7ff fc9d 	bl	8000f8c <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d914      	bls.n	8001686 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b01      	cmp	r3, #1
 8001668:	d10d      	bne.n	8001686 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166e:	f043 0210 	orr.w	r2, r3, #16
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167a:	f043 0201 	orr.w	r2, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e007      	b.n	8001696 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b01      	cmp	r3, #1
 8001692:	d0dc      	beq.n	800164e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016aa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d127      	bne.n	8001708 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80016ce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80016d2:	d115      	bne.n	8001700 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d111      	bne.n	8001700 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d105      	bne.n	8001700 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f8:	f043 0201 	orr.w	r2, r3, #1
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f7fe ff03 	bl	800050c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001706:	e004      	b.n	8001712 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	4798      	blx	r3
}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001726:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f7ff fe13 	bl	8001354 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001742:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001748:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001754:	f043 0204 	orr.w	r2, r3, #4
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f7ff fe02 	bl	8001366 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	db0b      	blt.n	80017fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	4906      	ldr	r1, [pc, #24]	@ (8001804 <__NVIC_EnableIRQ+0x34>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	2001      	movs	r0, #1
 80017f2:	fa00 f202 	lsl.w	r2, r0, r2
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	@ (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	@ (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	@ 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	@ 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018d0:	d301      	bcc.n	80018d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00f      	b.n	80018f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001900 <SysTick_Config+0x40>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018de:	210f      	movs	r1, #15
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f7ff ff90 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <SysTick_Config+0x40>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4b04      	ldr	r3, [pc, #16]	@ (8001900 <SysTick_Config+0x40>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	e000e010 	.word	0xe000e010

08001904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff2d 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800192c:	f7ff ff42 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 8001930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	6978      	ldr	r0, [r7, #20]
 8001938:	f7ff ff90 	bl	800185c <NVIC_EncodePriority>
 800193c:	4602      	mov	r2, r0
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff5f 	bl	8001808 <__NVIC_SetPriority>
}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff35 	bl	80017d0 <__NVIC_EnableIRQ>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ffa2 	bl	80018c0 <SysTick_Config>
 800197c:	4603      	mov	r3, r0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e043      	b.n	8001a26 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	4b22      	ldr	r3, [pc, #136]	@ (8001a30 <HAL_DMA_Init+0xa8>)
 80019a6:	4413      	add	r3, r2
 80019a8:	4a22      	ldr	r2, [pc, #136]	@ (8001a34 <HAL_DMA_Init+0xac>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	009a      	lsls	r2, r3, #2
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a38 <HAL_DMA_Init+0xb0>)
 80019ba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2202      	movs	r2, #2
 80019c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80019d2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80019d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	bffdfff8 	.word	0xbffdfff8
 8001a34:	cccccccd 	.word	0xcccccccd
 8001a38:	40020000 	.word	0x40020000

08001a3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_DMA_Start_IT+0x20>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e04b      	b.n	8001af4 <HAL_DMA_Start_IT+0xb8>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d13a      	bne.n	8001ae6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0201 	bic.w	r2, r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 f937 	bl	8001d08 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d008      	beq.n	8001ab4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 020e 	orr.w	r2, r2, #14
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	e00f      	b.n	8001ad4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0204 	bic.w	r2, r2, #4
 8001ac2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 020a 	orr.w	r2, r2, #10
 8001ad2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	e005      	b.n	8001af2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001aee:	2302      	movs	r3, #2
 8001af0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b18:	2204      	movs	r2, #4
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d04f      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0xc8>
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d04a      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d107      	bne.n	8001b4c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0204 	bic.w	r2, r2, #4
 8001b4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a66      	ldr	r2, [pc, #408]	@ (8001cec <HAL_DMA_IRQHandler+0x1f0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d029      	beq.n	8001baa <HAL_DMA_IRQHandler+0xae>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a65      	ldr	r2, [pc, #404]	@ (8001cf0 <HAL_DMA_IRQHandler+0x1f4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d022      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0xaa>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a63      	ldr	r2, [pc, #396]	@ (8001cf4 <HAL_DMA_IRQHandler+0x1f8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d01a      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0xa4>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a62      	ldr	r2, [pc, #392]	@ (8001cf8 <HAL_DMA_IRQHandler+0x1fc>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d012      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x9e>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a60      	ldr	r2, [pc, #384]	@ (8001cfc <HAL_DMA_IRQHandler+0x200>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00a      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x98>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a5f      	ldr	r2, [pc, #380]	@ (8001d00 <HAL_DMA_IRQHandler+0x204>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d102      	bne.n	8001b8e <HAL_DMA_IRQHandler+0x92>
 8001b88:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b8c:	e00e      	b.n	8001bac <HAL_DMA_IRQHandler+0xb0>
 8001b8e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b92:	e00b      	b.n	8001bac <HAL_DMA_IRQHandler+0xb0>
 8001b94:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001b98:	e008      	b.n	8001bac <HAL_DMA_IRQHandler+0xb0>
 8001b9a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b9e:	e005      	b.n	8001bac <HAL_DMA_IRQHandler+0xb0>
 8001ba0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ba4:	e002      	b.n	8001bac <HAL_DMA_IRQHandler+0xb0>
 8001ba6:	2340      	movs	r3, #64	@ 0x40
 8001ba8:	e000      	b.n	8001bac <HAL_DMA_IRQHandler+0xb0>
 8001baa:	2304      	movs	r3, #4
 8001bac:	4a55      	ldr	r2, [pc, #340]	@ (8001d04 <HAL_DMA_IRQHandler+0x208>)
 8001bae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 8094 	beq.w	8001ce2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001bc2:	e08e      	b.n	8001ce2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	2202      	movs	r2, #2
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d056      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x186>
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d051      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10b      	bne.n	8001c04 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 020a 	bic.w	r2, r2, #10
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a38      	ldr	r2, [pc, #224]	@ (8001cec <HAL_DMA_IRQHandler+0x1f0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d029      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x166>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a37      	ldr	r2, [pc, #220]	@ (8001cf0 <HAL_DMA_IRQHandler+0x1f4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d022      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x162>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a35      	ldr	r2, [pc, #212]	@ (8001cf4 <HAL_DMA_IRQHandler+0x1f8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d01a      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x15c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a34      	ldr	r2, [pc, #208]	@ (8001cf8 <HAL_DMA_IRQHandler+0x1fc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d012      	beq.n	8001c52 <HAL_DMA_IRQHandler+0x156>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a32      	ldr	r2, [pc, #200]	@ (8001cfc <HAL_DMA_IRQHandler+0x200>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00a      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x150>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a31      	ldr	r2, [pc, #196]	@ (8001d00 <HAL_DMA_IRQHandler+0x204>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d102      	bne.n	8001c46 <HAL_DMA_IRQHandler+0x14a>
 8001c40:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c44:	e00e      	b.n	8001c64 <HAL_DMA_IRQHandler+0x168>
 8001c46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c4a:	e00b      	b.n	8001c64 <HAL_DMA_IRQHandler+0x168>
 8001c4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c50:	e008      	b.n	8001c64 <HAL_DMA_IRQHandler+0x168>
 8001c52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c56:	e005      	b.n	8001c64 <HAL_DMA_IRQHandler+0x168>
 8001c58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c5c:	e002      	b.n	8001c64 <HAL_DMA_IRQHandler+0x168>
 8001c5e:	2320      	movs	r3, #32
 8001c60:	e000      	b.n	8001c64 <HAL_DMA_IRQHandler+0x168>
 8001c62:	2302      	movs	r3, #2
 8001c64:	4a27      	ldr	r2, [pc, #156]	@ (8001d04 <HAL_DMA_IRQHandler+0x208>)
 8001c66:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d034      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c80:	e02f      	b.n	8001ce2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	2208      	movs	r2, #8
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d028      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x1e8>
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d023      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 020e 	bic.w	r2, r2, #14
 8001caa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	4798      	blx	r3
    }
  }
  return;
 8001ce2:	bf00      	nop
 8001ce4:	bf00      	nop
}
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40020008 	.word	0x40020008
 8001cf0:	4002001c 	.word	0x4002001c
 8001cf4:	40020030 	.word	0x40020030
 8001cf8:	40020044 	.word	0x40020044
 8001cfc:	40020058 	.word	0x40020058
 8001d00:	4002006c 	.word	0x4002006c
 8001d04:	40020000 	.word	0x40020000

08001d08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d1e:	2101      	movs	r1, #1
 8001d20:	fa01 f202 	lsl.w	r2, r1, r2
 8001d24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b10      	cmp	r3, #16
 8001d34:	d108      	bne.n	8001d48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d46:	e007      	b.n	8001d58 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	60da      	str	r2, [r3, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
	...

08001d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b08b      	sub	sp, #44	@ 0x2c
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d76:	e169      	b.n	800204c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	f040 8158 	bne.w	8002046 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4a9a      	ldr	r2, [pc, #616]	@ (8002004 <HAL_GPIO_Init+0x2a0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d05e      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001da0:	4a98      	ldr	r2, [pc, #608]	@ (8002004 <HAL_GPIO_Init+0x2a0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d875      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001da6:	4a98      	ldr	r2, [pc, #608]	@ (8002008 <HAL_GPIO_Init+0x2a4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d058      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001dac:	4a96      	ldr	r2, [pc, #600]	@ (8002008 <HAL_GPIO_Init+0x2a4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d86f      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001db2:	4a96      	ldr	r2, [pc, #600]	@ (800200c <HAL_GPIO_Init+0x2a8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d052      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001db8:	4a94      	ldr	r2, [pc, #592]	@ (800200c <HAL_GPIO_Init+0x2a8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d869      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dbe:	4a94      	ldr	r2, [pc, #592]	@ (8002010 <HAL_GPIO_Init+0x2ac>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d04c      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001dc4:	4a92      	ldr	r2, [pc, #584]	@ (8002010 <HAL_GPIO_Init+0x2ac>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d863      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dca:	4a92      	ldr	r2, [pc, #584]	@ (8002014 <HAL_GPIO_Init+0x2b0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d046      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001dd0:	4a90      	ldr	r2, [pc, #576]	@ (8002014 <HAL_GPIO_Init+0x2b0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d85d      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dd6:	2b12      	cmp	r3, #18
 8001dd8:	d82a      	bhi.n	8001e30 <HAL_GPIO_Init+0xcc>
 8001dda:	2b12      	cmp	r3, #18
 8001ddc:	d859      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dde:	a201      	add	r2, pc, #4	@ (adr r2, 8001de4 <HAL_GPIO_Init+0x80>)
 8001de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de4:	08001e5f 	.word	0x08001e5f
 8001de8:	08001e39 	.word	0x08001e39
 8001dec:	08001e4b 	.word	0x08001e4b
 8001df0:	08001e8d 	.word	0x08001e8d
 8001df4:	08001e93 	.word	0x08001e93
 8001df8:	08001e93 	.word	0x08001e93
 8001dfc:	08001e93 	.word	0x08001e93
 8001e00:	08001e93 	.word	0x08001e93
 8001e04:	08001e93 	.word	0x08001e93
 8001e08:	08001e93 	.word	0x08001e93
 8001e0c:	08001e93 	.word	0x08001e93
 8001e10:	08001e93 	.word	0x08001e93
 8001e14:	08001e93 	.word	0x08001e93
 8001e18:	08001e93 	.word	0x08001e93
 8001e1c:	08001e93 	.word	0x08001e93
 8001e20:	08001e93 	.word	0x08001e93
 8001e24:	08001e93 	.word	0x08001e93
 8001e28:	08001e41 	.word	0x08001e41
 8001e2c:	08001e55 	.word	0x08001e55
 8001e30:	4a79      	ldr	r2, [pc, #484]	@ (8002018 <HAL_GPIO_Init+0x2b4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e36:	e02c      	b.n	8001e92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	623b      	str	r3, [r7, #32]
          break;
 8001e3e:	e029      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	3304      	adds	r3, #4
 8001e46:	623b      	str	r3, [r7, #32]
          break;
 8001e48:	e024      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	3308      	adds	r3, #8
 8001e50:	623b      	str	r3, [r7, #32]
          break;
 8001e52:	e01f      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	330c      	adds	r3, #12
 8001e5a:	623b      	str	r3, [r7, #32]
          break;
 8001e5c:	e01a      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d102      	bne.n	8001e6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e66:	2304      	movs	r3, #4
 8001e68:	623b      	str	r3, [r7, #32]
          break;
 8001e6a:	e013      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e74:	2308      	movs	r3, #8
 8001e76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	611a      	str	r2, [r3, #16]
          break;
 8001e7e:	e009      	b.n	8001e94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e80:	2308      	movs	r3, #8
 8001e82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	615a      	str	r2, [r3, #20]
          break;
 8001e8a:	e003      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
          break;
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          break;
 8001e92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2bff      	cmp	r3, #255	@ 0xff
 8001e98:	d801      	bhi.n	8001e9e <HAL_GPIO_Init+0x13a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	e001      	b.n	8001ea2 <HAL_GPIO_Init+0x13e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2bff      	cmp	r3, #255	@ 0xff
 8001ea8:	d802      	bhi.n	8001eb0 <HAL_GPIO_Init+0x14c>
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	e002      	b.n	8001eb6 <HAL_GPIO_Init+0x152>
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb2:	3b08      	subs	r3, #8
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	210f      	movs	r1, #15
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	6a39      	ldr	r1, [r7, #32]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 80b1 	beq.w	8002046 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee4:	4b4d      	ldr	r3, [pc, #308]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	4a4c      	ldr	r2, [pc, #304]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6193      	str	r3, [r2, #24]
 8001ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001efc:	4a48      	ldr	r2, [pc, #288]	@ (8002020 <HAL_GPIO_Init+0x2bc>)
 8001efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	3302      	adds	r3, #2
 8001f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	220f      	movs	r2, #15
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a40      	ldr	r2, [pc, #256]	@ (8002024 <HAL_GPIO_Init+0x2c0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d013      	beq.n	8001f50 <HAL_GPIO_Init+0x1ec>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a3f      	ldr	r2, [pc, #252]	@ (8002028 <HAL_GPIO_Init+0x2c4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00d      	beq.n	8001f4c <HAL_GPIO_Init+0x1e8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3e      	ldr	r2, [pc, #248]	@ (800202c <HAL_GPIO_Init+0x2c8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d007      	beq.n	8001f48 <HAL_GPIO_Init+0x1e4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a3d      	ldr	r2, [pc, #244]	@ (8002030 <HAL_GPIO_Init+0x2cc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d101      	bne.n	8001f44 <HAL_GPIO_Init+0x1e0>
 8001f40:	2303      	movs	r3, #3
 8001f42:	e006      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f44:	2304      	movs	r3, #4
 8001f46:	e004      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e002      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f50:	2300      	movs	r3, #0
 8001f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f54:	f002 0203 	and.w	r2, r2, #3
 8001f58:	0092      	lsls	r2, r2, #2
 8001f5a:	4093      	lsls	r3, r2
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f62:	492f      	ldr	r1, [pc, #188]	@ (8002020 <HAL_GPIO_Init+0x2bc>)
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3302      	adds	r3, #2
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	492c      	ldr	r1, [pc, #176]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	608b      	str	r3, [r1, #8]
 8001f88:	e006      	b.n	8001f98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	4928      	ldr	r1, [pc, #160]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fa4:	4b23      	ldr	r3, [pc, #140]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	4922      	ldr	r1, [pc, #136]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	60cb      	str	r3, [r1, #12]
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fb2:	4b20      	ldr	r3, [pc, #128]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	491e      	ldr	r1, [pc, #120]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fcc:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	4918      	ldr	r1, [pc, #96]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fda:	4b16      	ldr	r3, [pc, #88]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	4914      	ldr	r1, [pc, #80]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d021      	beq.n	8002038 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	490e      	ldr	r1, [pc, #56]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
 8002000:	e021      	b.n	8002046 <HAL_GPIO_Init+0x2e2>
 8002002:	bf00      	nop
 8002004:	10320000 	.word	0x10320000
 8002008:	10310000 	.word	0x10310000
 800200c:	10220000 	.word	0x10220000
 8002010:	10210000 	.word	0x10210000
 8002014:	10120000 	.word	0x10120000
 8002018:	10110000 	.word	0x10110000
 800201c:	40021000 	.word	0x40021000
 8002020:	40010000 	.word	0x40010000
 8002024:	40010800 	.word	0x40010800
 8002028:	40010c00 	.word	0x40010c00
 800202c:	40011000 	.word	0x40011000
 8002030:	40011400 	.word	0x40011400
 8002034:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <HAL_GPIO_Init+0x304>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	43db      	mvns	r3, r3
 8002040:	4909      	ldr	r1, [pc, #36]	@ (8002068 <HAL_GPIO_Init+0x304>)
 8002042:	4013      	ands	r3, r2
 8002044:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	3301      	adds	r3, #1
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002052:	fa22 f303 	lsr.w	r3, r2, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	f47f ae8e 	bne.w	8001d78 <HAL_GPIO_Init+0x14>
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	372c      	adds	r7, #44	@ 0x2c
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40010400 	.word	0x40010400

0800206c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	887b      	ldrh	r3, [r7, #2]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
 8002088:	e001      	b.n	800208e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800208e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	807b      	strh	r3, [r7, #2]
 80020a6:	4613      	mov	r3, r2
 80020a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020aa:	787b      	ldrb	r3, [r7, #1]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b0:	887a      	ldrh	r2, [r7, #2]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020b6:	e003      	b.n	80020c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020b8:	887b      	ldrh	r3, [r7, #2]
 80020ba:	041a      	lsls	r2, r3, #16
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	611a      	str	r2, [r3, #16]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e272      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8087 	beq.w	80021fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ec:	4b92      	ldr	r3, [pc, #584]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d00c      	beq.n	8002112 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b08      	cmp	r3, #8
 8002102:	d112      	bne.n	800212a <HAL_RCC_OscConfig+0x5e>
 8002104:	4b8c      	ldr	r3, [pc, #560]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002110:	d10b      	bne.n	800212a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002112:	4b89      	ldr	r3, [pc, #548]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d06c      	beq.n	80021f8 <HAL_RCC_OscConfig+0x12c>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d168      	bne.n	80021f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e24c      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x76>
 8002134:	4b80      	ldr	r3, [pc, #512]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a7f      	ldr	r2, [pc, #508]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800213a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	e02e      	b.n	80021a0 <HAL_RCC_OscConfig+0xd4>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x98>
 800214a:	4b7b      	ldr	r3, [pc, #492]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a7a      	ldr	r2, [pc, #488]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002150:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b78      	ldr	r3, [pc, #480]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a77      	ldr	r2, [pc, #476]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800215c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e01d      	b.n	80021a0 <HAL_RCC_OscConfig+0xd4>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0xbc>
 800216e:	4b72      	ldr	r3, [pc, #456]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a71      	ldr	r2, [pc, #452]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002174:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	4b6f      	ldr	r3, [pc, #444]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a6e      	ldr	r2, [pc, #440]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e00b      	b.n	80021a0 <HAL_RCC_OscConfig+0xd4>
 8002188:	4b6b      	ldr	r3, [pc, #428]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a6a      	ldr	r2, [pc, #424]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800218e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	4b68      	ldr	r3, [pc, #416]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a67      	ldr	r2, [pc, #412]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800219a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800219e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe fef0 	bl	8000f8c <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b0:	f7fe feec 	bl	8000f8c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	@ 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e200      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0xe4>
 80021ce:	e014      	b.n	80021fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7fe fedc 	bl	8000f8c <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7fe fed8 	bl	8000f8c <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	@ 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e1ec      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ea:	4b53      	ldr	r3, [pc, #332]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x10c>
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d063      	beq.n	80022ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002206:	4b4c      	ldr	r3, [pc, #304]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00b      	beq.n	800222a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002212:	4b49      	ldr	r3, [pc, #292]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b08      	cmp	r3, #8
 800221c:	d11c      	bne.n	8002258 <HAL_RCC_OscConfig+0x18c>
 800221e:	4b46      	ldr	r3, [pc, #280]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d116      	bne.n	8002258 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	4b43      	ldr	r3, [pc, #268]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <HAL_RCC_OscConfig+0x176>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d001      	beq.n	8002242 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e1c0      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002242:	4b3d      	ldr	r3, [pc, #244]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4939      	ldr	r1, [pc, #228]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	e03a      	b.n	80022ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d020      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002260:	4b36      	ldr	r3, [pc, #216]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7fe fe91 	bl	8000f8c <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226e:	f7fe fe8d 	bl	8000f8c <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e1a1      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002280:	4b2d      	ldr	r3, [pc, #180]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228c:	4b2a      	ldr	r3, [pc, #168]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4927      	ldr	r1, [pc, #156]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]
 80022a0:	e015      	b.n	80022ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a2:	4b26      	ldr	r3, [pc, #152]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7fe fe70 	bl	8000f8c <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b0:	f7fe fe6c 	bl	8000f8c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e180      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d03a      	beq.n	8002350 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d019      	beq.n	8002316 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e2:	4b17      	ldr	r3, [pc, #92]	@ (8002340 <HAL_RCC_OscConfig+0x274>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e8:	f7fe fe50 	bl	8000f8c <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f0:	f7fe fe4c 	bl	8000f8c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e160      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	4b0d      	ldr	r3, [pc, #52]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800230e:	2001      	movs	r0, #1
 8002310:	f000 face 	bl	80028b0 <RCC_Delay>
 8002314:	e01c      	b.n	8002350 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002316:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <HAL_RCC_OscConfig+0x274>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231c:	f7fe fe36 	bl	8000f8c <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002322:	e00f      	b.n	8002344 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002324:	f7fe fe32 	bl	8000f8c <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d908      	bls.n	8002344 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e146      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	42420000 	.word	0x42420000
 8002340:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002344:	4b92      	ldr	r3, [pc, #584]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1e9      	bne.n	8002324 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80a6 	beq.w	80024aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002362:	4b8b      	ldr	r3, [pc, #556]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10d      	bne.n	800238a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	4b88      	ldr	r3, [pc, #544]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	4a87      	ldr	r2, [pc, #540]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002378:	61d3      	str	r3, [r2, #28]
 800237a:	4b85      	ldr	r3, [pc, #532]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002386:	2301      	movs	r3, #1
 8002388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238a:	4b82      	ldr	r3, [pc, #520]	@ (8002594 <HAL_RCC_OscConfig+0x4c8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d118      	bne.n	80023c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002396:	4b7f      	ldr	r3, [pc, #508]	@ (8002594 <HAL_RCC_OscConfig+0x4c8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a7e      	ldr	r2, [pc, #504]	@ (8002594 <HAL_RCC_OscConfig+0x4c8>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a2:	f7fe fdf3 	bl	8000f8c <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023aa:	f7fe fdef 	bl	8000f8c <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b64      	cmp	r3, #100	@ 0x64
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e103      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	4b75      	ldr	r3, [pc, #468]	@ (8002594 <HAL_RCC_OscConfig+0x4c8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x312>
 80023d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a6e      	ldr	r2, [pc, #440]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6213      	str	r3, [r2, #32]
 80023dc:	e02d      	b.n	800243a <HAL_RCC_OscConfig+0x36e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x334>
 80023e6:	4b6a      	ldr	r3, [pc, #424]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a69      	ldr	r2, [pc, #420]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	6213      	str	r3, [r2, #32]
 80023f2:	4b67      	ldr	r3, [pc, #412]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a66      	ldr	r2, [pc, #408]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	f023 0304 	bic.w	r3, r3, #4
 80023fc:	6213      	str	r3, [r2, #32]
 80023fe:	e01c      	b.n	800243a <HAL_RCC_OscConfig+0x36e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b05      	cmp	r3, #5
 8002406:	d10c      	bne.n	8002422 <HAL_RCC_OscConfig+0x356>
 8002408:	4b61      	ldr	r3, [pc, #388]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a60      	ldr	r2, [pc, #384]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	4b5e      	ldr	r3, [pc, #376]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4a5d      	ldr	r2, [pc, #372]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6213      	str	r3, [r2, #32]
 8002420:	e00b      	b.n	800243a <HAL_RCC_OscConfig+0x36e>
 8002422:	4b5b      	ldr	r3, [pc, #364]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a5a      	ldr	r2, [pc, #360]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	6213      	str	r3, [r2, #32]
 800242e:	4b58      	ldr	r3, [pc, #352]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4a57      	ldr	r2, [pc, #348]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	f023 0304 	bic.w	r3, r3, #4
 8002438:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d015      	beq.n	800246e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7fe fda3 	bl	8000f8c <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7fe fd9f 	bl	8000f8c <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e0b1      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002460:	4b4b      	ldr	r3, [pc, #300]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0ee      	beq.n	800244a <HAL_RCC_OscConfig+0x37e>
 800246c:	e014      	b.n	8002498 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246e:	f7fe fd8d 	bl	8000f8c <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7fe fd89 	bl	8000f8c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e09b      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248c:	4b40      	ldr	r3, [pc, #256]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1ee      	bne.n	8002476 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002498:	7dfb      	ldrb	r3, [r7, #23]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d105      	bne.n	80024aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249e:	4b3c      	ldr	r3, [pc, #240]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8087 	beq.w	80025c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b4:	4b36      	ldr	r3, [pc, #216]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 030c 	and.w	r3, r3, #12
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d061      	beq.n	8002584 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d146      	bne.n	8002556 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c8:	4b33      	ldr	r3, [pc, #204]	@ (8002598 <HAL_RCC_OscConfig+0x4cc>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ce:	f7fe fd5d 	bl	8000f8c <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d6:	f7fe fd59 	bl	8000f8c <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e06d      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e8:	4b29      	ldr	r3, [pc, #164]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1f0      	bne.n	80024d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024fc:	d108      	bne.n	8002510 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024fe:	4b24      	ldr	r3, [pc, #144]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	4921      	ldr	r1, [pc, #132]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002510:	4b1f      	ldr	r3, [pc, #124]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a19      	ldr	r1, [r3, #32]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	430b      	orrs	r3, r1
 8002522:	491b      	ldr	r1, [pc, #108]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002528:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <HAL_RCC_OscConfig+0x4cc>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe fd2d 	bl	8000f8c <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe fd29 	bl	8000f8c <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e03d      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002548:	4b11      	ldr	r3, [pc, #68]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x46a>
 8002554:	e035      	b.n	80025c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002556:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <HAL_RCC_OscConfig+0x4cc>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7fe fd16 	bl	8000f8c <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002564:	f7fe fd12 	bl	8000f8c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e026      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002576:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x498>
 8002582:	e01e      	b.n	80025c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d107      	bne.n	800259c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e019      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
 8002590:	40021000 	.word	0x40021000
 8002594:	40007000 	.word	0x40007000
 8002598:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800259c:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <HAL_RCC_OscConfig+0x500>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d001      	beq.n	80025c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40021000 	.word	0x40021000

080025d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0d0      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d910      	bls.n	8002614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b67      	ldr	r3, [pc, #412]	@ (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 0207 	bic.w	r2, r3, #7
 80025fa:	4965      	ldr	r1, [pc, #404]	@ (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b63      	ldr	r3, [pc, #396]	@ (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0b8      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800262c:	4b59      	ldr	r3, [pc, #356]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4a58      	ldr	r2, [pc, #352]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002636:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002644:	4b53      	ldr	r3, [pc, #332]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	4a52      	ldr	r2, [pc, #328]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800264e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002650:	4b50      	ldr	r3, [pc, #320]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	494d      	ldr	r1, [pc, #308]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d040      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b47      	ldr	r3, [pc, #284]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d115      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e07f      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268e:	4b41      	ldr	r3, [pc, #260]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e073      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269e:	4b3d      	ldr	r3, [pc, #244]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e06b      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ae:	4b39      	ldr	r3, [pc, #228]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f023 0203 	bic.w	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4936      	ldr	r1, [pc, #216]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c0:	f7fe fc64 	bl	8000f8c <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	e00a      	b.n	80026de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c8:	f7fe fc60 	bl	8000f8c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e053      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	4b2d      	ldr	r3, [pc, #180]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 020c 	and.w	r2, r3, #12
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1eb      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f0:	4b27      	ldr	r3, [pc, #156]	@ (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d210      	bcs.n	8002720 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 0207 	bic.w	r2, r3, #7
 8002706:	4922      	ldr	r1, [pc, #136]	@ (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b20      	ldr	r3, [pc, #128]	@ (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e032      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800272c:	4b19      	ldr	r3, [pc, #100]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4916      	ldr	r1, [pc, #88]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800274a:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	490e      	ldr	r1, [pc, #56]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800275e:	f000 f821 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8002762:	4602      	mov	r2, r0
 8002764:	4b0b      	ldr	r3, [pc, #44]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	490a      	ldr	r1, [pc, #40]	@ (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 8002770:	5ccb      	ldrb	r3, [r1, r3]
 8002772:	fa22 f303 	lsr.w	r3, r2, r3
 8002776:	4a09      	ldr	r2, [pc, #36]	@ (800279c <HAL_RCC_ClockConfig+0x1cc>)
 8002778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800277a:	4b09      	ldr	r3, [pc, #36]	@ (80027a0 <HAL_RCC_ClockConfig+0x1d0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fbc2 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40022000 	.word	0x40022000
 8002794:	40021000 	.word	0x40021000
 8002798:	080037c0 	.word	0x080037c0
 800279c:	20000008 	.word	0x20000008
 80027a0:	2000000c 	.word	0x2000000c

080027a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	2300      	movs	r3, #0
 80027b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027be:	4b1e      	ldr	r3, [pc, #120]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x94>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d002      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x30>
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d003      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x36>
 80027d2:	e027      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d4:	4b19      	ldr	r3, [pc, #100]	@ (800283c <HAL_RCC_GetSysClockFreq+0x98>)
 80027d6:	613b      	str	r3, [r7, #16]
      break;
 80027d8:	e027      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	0c9b      	lsrs	r3, r3, #18
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	4a17      	ldr	r2, [pc, #92]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027e4:	5cd3      	ldrb	r3, [r2, r3]
 80027e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d010      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027f2:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x94>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	0c5b      	lsrs	r3, r3, #17
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	4a11      	ldr	r2, [pc, #68]	@ (8002844 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a0d      	ldr	r2, [pc, #52]	@ (800283c <HAL_RCC_GetSysClockFreq+0x98>)
 8002806:	fb03 f202 	mul.w	r2, r3, r2
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	e004      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a0c      	ldr	r2, [pc, #48]	@ (8002848 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002818:	fb02 f303 	mul.w	r3, r2, r3
 800281c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	613b      	str	r3, [r7, #16]
      break;
 8002822:	e002      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002824:	4b05      	ldr	r3, [pc, #20]	@ (800283c <HAL_RCC_GetSysClockFreq+0x98>)
 8002826:	613b      	str	r3, [r7, #16]
      break;
 8002828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282a:	693b      	ldr	r3, [r7, #16]
}
 800282c:	4618      	mov	r0, r3
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	007a1200 	.word	0x007a1200
 8002840:	080037d8 	.word	0x080037d8
 8002844:	080037e8 	.word	0x080037e8
 8002848:	003d0900 	.word	0x003d0900

0800284c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002850:	4b02      	ldr	r3, [pc, #8]	@ (800285c <HAL_RCC_GetHCLKFreq+0x10>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	20000008 	.word	0x20000008

08002860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002864:	f7ff fff2 	bl	800284c <HAL_RCC_GetHCLKFreq>
 8002868:	4602      	mov	r2, r0
 800286a:	4b05      	ldr	r3, [pc, #20]	@ (8002880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4903      	ldr	r1, [pc, #12]	@ (8002884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002876:	5ccb      	ldrb	r3, [r1, r3]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	080037d0 	.word	0x080037d0

08002888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800288c:	f7ff ffde 	bl	800284c <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b05      	ldr	r3, [pc, #20]	@ (80028a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	0adb      	lsrs	r3, r3, #11
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4903      	ldr	r1, [pc, #12]	@ (80028ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40021000 	.word	0x40021000
 80028ac:	080037d0 	.word	0x080037d0

080028b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028b8:	4b0a      	ldr	r3, [pc, #40]	@ (80028e4 <RCC_Delay+0x34>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <RCC_Delay+0x38>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0a5b      	lsrs	r3, r3, #9
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028cc:	bf00      	nop
  }
  while (Delay --);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1e5a      	subs	r2, r3, #1
 80028d2:	60fa      	str	r2, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f9      	bne.n	80028cc <RCC_Delay+0x1c>
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	20000008 	.word	0x20000008
 80028e8:	10624dd3 	.word	0x10624dd3

080028ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d07d      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002908:	2300      	movs	r3, #0
 800290a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10d      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002918:	4b4c      	ldr	r3, [pc, #304]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002922:	61d3      	str	r3, [r2, #28]
 8002924:	4b49      	ldr	r3, [pc, #292]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002930:	2301      	movs	r3, #1
 8002932:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	4b46      	ldr	r3, [pc, #280]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d118      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002940:	4b43      	ldr	r3, [pc, #268]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a42      	ldr	r2, [pc, #264]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800294a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294c:	f7fe fb1e 	bl	8000f8c <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002952:	e008      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002954:	f7fe fb1a 	bl	8000f8c <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	@ 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e06d      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002966:	4b3a      	ldr	r3, [pc, #232]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002972:	4b36      	ldr	r3, [pc, #216]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800297a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d02e      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	429a      	cmp	r2, r3
 800298e:	d027      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002990:	4b2e      	ldr	r3, [pc, #184]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002998:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800299a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029a6:	4a29      	ldr	r2, [pc, #164]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d014      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b6:	f7fe fae9 	bl	8000f8c <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fe fae5 	bl	8000f8c <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e036      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ee      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4917      	ldr	r1, [pc, #92]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f8:	4b14      	ldr	r3, [pc, #80]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	4a13      	ldr	r2, [pc, #76]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a10:	4b0e      	ldr	r3, [pc, #56]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	490b      	ldr	r1, [pc, #44]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a2e:	4b07      	ldr	r3, [pc, #28]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4904      	ldr	r1, [pc, #16]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40007000 	.word	0x40007000
 8002a54:	42420440 	.word	0x42420440

08002a58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e076      	b.n	8002b58 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d108      	bne.n	8002a84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a7a:	d009      	beq.n	8002a90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
 8002a82:	e005      	b.n	8002a90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe f910 	bl	8000cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ac6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b14:	ea42 0103 	orr.w	r1, r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	0c1a      	lsrs	r2, r3, #16
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f002 0204 	and.w	r2, r2, #4
 8002b36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b70:	f7fe fa0c 	bl	8000f8c <HAL_GetTick>
 8002b74:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d001      	beq.n	8002b8a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002b86:	2302      	movs	r3, #2
 8002b88:	e12a      	b.n	8002de0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <HAL_SPI_Transmit+0x36>
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e122      	b.n	8002de0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_SPI_Transmit+0x48>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e11b      	b.n	8002de0 <HAL_SPI_Transmit+0x280>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	88fa      	ldrh	r2, [r7, #6]
 8002bc8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	88fa      	ldrh	r2, [r7, #6]
 8002bce:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bf6:	d10f      	bne.n	8002c18 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c16:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c22:	2b40      	cmp	r3, #64	@ 0x40
 8002c24:	d007      	beq.n	8002c36 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c3e:	d152      	bne.n	8002ce6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <HAL_SPI_Transmit+0xee>
 8002c48:	8b7b      	ldrh	r3, [r7, #26]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d145      	bne.n	8002cda <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	881a      	ldrh	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	1c9a      	adds	r2, r3, #2
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c72:	e032      	b.n	8002cda <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d112      	bne.n	8002ca8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	881a      	ldrh	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	1c9a      	adds	r2, r3, #2
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ca6:	e018      	b.n	8002cda <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ca8:	f7fe f970 	bl	8000f8c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d803      	bhi.n	8002cc0 <HAL_SPI_Transmit+0x160>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbe:	d102      	bne.n	8002cc6 <HAL_SPI_Transmit+0x166>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d109      	bne.n	8002cda <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e082      	b.n	8002de0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1c7      	bne.n	8002c74 <HAL_SPI_Transmit+0x114>
 8002ce4:	e053      	b.n	8002d8e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <HAL_SPI_Transmit+0x194>
 8002cee:	8b7b      	ldrh	r3, [r7, #26]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d147      	bne.n	8002d84 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	330c      	adds	r3, #12
 8002cfe:	7812      	ldrb	r2, [r2, #0]
 8002d00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d1a:	e033      	b.n	8002d84 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d113      	bne.n	8002d52 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	330c      	adds	r3, #12
 8002d34:	7812      	ldrb	r2, [r2, #0]
 8002d36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d50:	e018      	b.n	8002d84 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d52:	f7fe f91b 	bl	8000f8c <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d803      	bhi.n	8002d6a <HAL_SPI_Transmit+0x20a>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d68:	d102      	bne.n	8002d70 <HAL_SPI_Transmit+0x210>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e02d      	b.n	8002de0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1c6      	bne.n	8002d1c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	6839      	ldr	r1, [r7, #0]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fbc4 	bl	8003520 <SPI_EndRxTxTransaction>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002dde:	2300      	movs	r3, #0
  }
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3720      	adds	r7, #32
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d001      	beq.n	8002e08 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
 8002e06:	e104      	b.n	8003012 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e10:	d112      	bne.n	8002e38 <HAL_SPI_Receive+0x50>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10e      	bne.n	8002e38 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e22:	88fa      	ldrh	r2, [r7, #6]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f8f3 	bl	800301a <HAL_SPI_TransmitReceive>
 8002e34:	4603      	mov	r3, r0
 8002e36:	e0ec      	b.n	8003012 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e38:	f7fe f8a8 	bl	8000f8c <HAL_GetTick>
 8002e3c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_SPI_Receive+0x62>
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0e1      	b.n	8003012 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_SPI_Receive+0x74>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e0da      	b.n	8003012 <HAL_SPI_Receive+0x22a>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2204      	movs	r2, #4
 8002e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	88fa      	ldrh	r2, [r7, #6]
 8002e7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	88fa      	ldrh	r2, [r7, #6]
 8002e82:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eaa:	d10f      	bne.n	8002ecc <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002eca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed6:	2b40      	cmp	r3, #64	@ 0x40
 8002ed8:	d007      	beq.n	8002eea <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ee8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d170      	bne.n	8002fd4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ef2:	e035      	b.n	8002f60 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d115      	bne.n	8002f2e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f103 020c 	add.w	r2, r3, #12
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0e:	7812      	ldrb	r2, [r2, #0]
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f2c:	e018      	b.n	8002f60 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f2e:	f7fe f82d 	bl	8000f8c <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d803      	bhi.n	8002f46 <HAL_SPI_Receive+0x15e>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d102      	bne.n	8002f4c <HAL_SPI_Receive+0x164>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d109      	bne.n	8002f60 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e058      	b.n	8003012 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1c4      	bne.n	8002ef4 <HAL_SPI_Receive+0x10c>
 8002f6a:	e038      	b.n	8002fde <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d113      	bne.n	8002fa2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f84:	b292      	uxth	r2, r2
 8002f86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8c:	1c9a      	adds	r2, r3, #2
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fa0:	e018      	b.n	8002fd4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fa2:	f7fd fff3 	bl	8000f8c <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d803      	bhi.n	8002fba <HAL_SPI_Receive+0x1d2>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	d102      	bne.n	8002fc0 <HAL_SPI_Receive+0x1d8>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d109      	bne.n	8002fd4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e01e      	b.n	8003012 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1c6      	bne.n	8002f6c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	6839      	ldr	r1, [r7, #0]
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 fa4a 	bl	800347c <SPI_EndRxTransaction>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003010:	2300      	movs	r3, #0
  }
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b08a      	sub	sp, #40	@ 0x28
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003028:	2301      	movs	r3, #1
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800302c:	f7fd ffae 	bl	8000f8c <HAL_GetTick>
 8003030:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003038:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003040:	887b      	ldrh	r3, [r7, #2]
 8003042:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003044:	7ffb      	ldrb	r3, [r7, #31]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d00c      	beq.n	8003064 <HAL_SPI_TransmitReceive+0x4a>
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003050:	d106      	bne.n	8003060 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d102      	bne.n	8003060 <HAL_SPI_TransmitReceive+0x46>
 800305a:	7ffb      	ldrb	r3, [r7, #31]
 800305c:	2b04      	cmp	r3, #4
 800305e:	d001      	beq.n	8003064 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003060:	2302      	movs	r3, #2
 8003062:	e17f      	b.n	8003364 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_SPI_TransmitReceive+0x5c>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <HAL_SPI_TransmitReceive+0x5c>
 8003070:	887b      	ldrh	r3, [r7, #2]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e174      	b.n	8003364 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_SPI_TransmitReceive+0x6e>
 8003084:	2302      	movs	r3, #2
 8003086:	e16d      	b.n	8003364 <HAL_SPI_TransmitReceive+0x34a>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b04      	cmp	r3, #4
 800309a:	d003      	beq.n	80030a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2205      	movs	r2, #5
 80030a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	887a      	ldrh	r2, [r7, #2]
 80030ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	887a      	ldrh	r2, [r7, #2]
 80030c6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	887a      	ldrh	r2, [r7, #2]
 80030cc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e4:	2b40      	cmp	r3, #64	@ 0x40
 80030e6:	d007      	beq.n	80030f8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003100:	d17e      	bne.n	8003200 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_TransmitReceive+0xf6>
 800310a:	8afb      	ldrh	r3, [r7, #22]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d16c      	bne.n	80031ea <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003114:	881a      	ldrh	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003120:	1c9a      	adds	r2, r3, #2
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003134:	e059      	b.n	80031ea <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b02      	cmp	r3, #2
 8003142:	d11b      	bne.n	800317c <HAL_SPI_TransmitReceive+0x162>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d016      	beq.n	800317c <HAL_SPI_TransmitReceive+0x162>
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	2b01      	cmp	r3, #1
 8003152:	d113      	bne.n	800317c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003158:	881a      	ldrh	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003164:	1c9a      	adds	r2, r3, #2
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b01      	cmp	r3, #1
 8003188:	d119      	bne.n	80031be <HAL_SPI_TransmitReceive+0x1a4>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d014      	beq.n	80031be <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319e:	b292      	uxth	r2, r2
 80031a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a6:	1c9a      	adds	r2, r3, #2
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031ba:	2301      	movs	r3, #1
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031be:	f7fd fee5 	bl	8000f8c <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d80d      	bhi.n	80031ea <HAL_SPI_TransmitReceive+0x1d0>
 80031ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d009      	beq.n	80031ea <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e0bc      	b.n	8003364 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1a0      	bne.n	8003136 <HAL_SPI_TransmitReceive+0x11c>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d19b      	bne.n	8003136 <HAL_SPI_TransmitReceive+0x11c>
 80031fe:	e082      	b.n	8003306 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_SPI_TransmitReceive+0x1f4>
 8003208:	8afb      	ldrh	r3, [r7, #22]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d171      	bne.n	80032f2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	7812      	ldrb	r2, [r2, #0]
 800321a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003234:	e05d      	b.n	80032f2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b02      	cmp	r3, #2
 8003242:	d11c      	bne.n	800327e <HAL_SPI_TransmitReceive+0x264>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d017      	beq.n	800327e <HAL_SPI_TransmitReceive+0x264>
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	2b01      	cmp	r3, #1
 8003252:	d114      	bne.n	800327e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	330c      	adds	r3, #12
 800325e:	7812      	ldrb	r2, [r2, #0]
 8003260:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d119      	bne.n	80032c0 <HAL_SPI_TransmitReceive+0x2a6>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d014      	beq.n	80032c0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032bc:	2301      	movs	r3, #1
 80032be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032c0:	f7fd fe64 	bl	8000f8c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d803      	bhi.n	80032d8 <HAL_SPI_TransmitReceive+0x2be>
 80032d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	d102      	bne.n	80032de <HAL_SPI_TransmitReceive+0x2c4>
 80032d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e038      	b.n	8003364 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d19c      	bne.n	8003236 <HAL_SPI_TransmitReceive+0x21c>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d197      	bne.n	8003236 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003306:	6a3a      	ldr	r2, [r7, #32]
 8003308:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f908 	bl	8003520 <SPI_EndRxTxTransaction>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e01d      	b.n	8003364 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10a      	bne.n	8003346 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003362:	2300      	movs	r3, #0
  }
}
 8003364:	4618      	mov	r0, r3
 8003366:	3728      	adds	r7, #40	@ 0x28
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	4613      	mov	r3, r2
 800337a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800337c:	f7fd fe06 	bl	8000f8c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	4413      	add	r3, r2
 800338a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800338c:	f7fd fdfe 	bl	8000f8c <HAL_GetTick>
 8003390:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003392:	4b39      	ldr	r3, [pc, #228]	@ (8003478 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	015b      	lsls	r3, r3, #5
 8003398:	0d1b      	lsrs	r3, r3, #20
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	fb02 f303 	mul.w	r3, r2, r3
 80033a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033a2:	e054      	b.n	800344e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d050      	beq.n	800344e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033ac:	f7fd fdee 	bl	8000f8c <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d902      	bls.n	80033c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d13d      	bne.n	800343e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033da:	d111      	bne.n	8003400 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033e4:	d004      	beq.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ee:	d107      	bne.n	8003400 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003408:	d10f      	bne.n	800342a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003428:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e017      	b.n	800346e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	3b01      	subs	r3, #1
 800344c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4013      	ands	r3, r2
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	bf0c      	ite	eq
 800345e:	2301      	moveq	r3, #1
 8003460:	2300      	movne	r3, #0
 8003462:	b2db      	uxtb	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	429a      	cmp	r2, r3
 800346a:	d19b      	bne.n	80033a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000008 	.word	0x20000008

0800347c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003490:	d111      	bne.n	80034b6 <SPI_EndRxTransaction+0x3a>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800349a:	d004      	beq.n	80034a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a4:	d107      	bne.n	80034b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034b4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034be:	d117      	bne.n	80034f0 <SPI_EndRxTransaction+0x74>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034c8:	d112      	bne.n	80034f0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2101      	movs	r1, #1
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff ff49 	bl	800336c <SPI_WaitFlagStateUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01a      	beq.n	8003516 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e013      	b.n	8003518 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2200      	movs	r2, #0
 80034f8:	2180      	movs	r1, #128	@ 0x80
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7ff ff36 	bl	800336c <SPI_WaitFlagStateUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350a:	f043 0220 	orr.w	r2, r3, #32
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e000      	b.n	8003518 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2201      	movs	r2, #1
 8003534:	2102      	movs	r1, #2
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7ff ff18 	bl	800336c <SPI_WaitFlagStateUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003546:	f043 0220 	orr.w	r2, r3, #32
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e013      	b.n	800357a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2200      	movs	r2, #0
 800355a:	2180      	movs	r1, #128	@ 0x80
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f7ff ff05 	bl	800336c <SPI_WaitFlagStateUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d007      	beq.n	8003578 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800356c:	f043 0220 	orr.w	r2, r3, #32
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e000      	b.n	800357a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e042      	b.n	800361a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d106      	bne.n	80035ae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7fd fbdb 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2224      	movs	r2, #36	@ 0x24
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f82c 	bl	8003624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800365e:	f023 030c 	bic.w	r3, r3, #12
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6812      	ldr	r2, [r2, #0]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	430b      	orrs	r3, r1
 800366a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a2c      	ldr	r2, [pc, #176]	@ (8003738 <UART_SetConfig+0x114>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d103      	bne.n	8003694 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800368c:	f7ff f8fc 	bl	8002888 <HAL_RCC_GetPCLK2Freq>
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	e002      	b.n	800369a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003694:	f7ff f8e4 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 8003698:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	009a      	lsls	r2, r3, #2
 80036a4:	441a      	add	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	4a22      	ldr	r2, [pc, #136]	@ (800373c <UART_SetConfig+0x118>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	0119      	lsls	r1, r3, #4
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009a      	lsls	r2, r3, #2
 80036c4:	441a      	add	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80036d0:	4b1a      	ldr	r3, [pc, #104]	@ (800373c <UART_SetConfig+0x118>)
 80036d2:	fba3 0302 	umull	r0, r3, r3, r2
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	2064      	movs	r0, #100	@ 0x64
 80036da:	fb00 f303 	mul.w	r3, r0, r3
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	3332      	adds	r3, #50	@ 0x32
 80036e4:	4a15      	ldr	r2, [pc, #84]	@ (800373c <UART_SetConfig+0x118>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036f0:	4419      	add	r1, r3
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	009a      	lsls	r2, r3, #2
 80036fc:	441a      	add	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	fbb2 f2f3 	udiv	r2, r2, r3
 8003708:	4b0c      	ldr	r3, [pc, #48]	@ (800373c <UART_SetConfig+0x118>)
 800370a:	fba3 0302 	umull	r0, r3, r3, r2
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	2064      	movs	r0, #100	@ 0x64
 8003712:	fb00 f303 	mul.w	r3, r0, r3
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	3332      	adds	r3, #50	@ 0x32
 800371c:	4a07      	ldr	r2, [pc, #28]	@ (800373c <UART_SetConfig+0x118>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	f003 020f 	and.w	r2, r3, #15
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	440a      	add	r2, r1
 800372e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40013800 	.word	0x40013800
 800373c:	51eb851f 	.word	0x51eb851f

08003740 <memset>:
 8003740:	4603      	mov	r3, r0
 8003742:	4402      	add	r2, r0
 8003744:	4293      	cmp	r3, r2
 8003746:	d100      	bne.n	800374a <memset+0xa>
 8003748:	4770      	bx	lr
 800374a:	f803 1b01 	strb.w	r1, [r3], #1
 800374e:	e7f9      	b.n	8003744 <memset+0x4>

08003750 <__libc_init_array>:
 8003750:	b570      	push	{r4, r5, r6, lr}
 8003752:	2600      	movs	r6, #0
 8003754:	4d0c      	ldr	r5, [pc, #48]	@ (8003788 <__libc_init_array+0x38>)
 8003756:	4c0d      	ldr	r4, [pc, #52]	@ (800378c <__libc_init_array+0x3c>)
 8003758:	1b64      	subs	r4, r4, r5
 800375a:	10a4      	asrs	r4, r4, #2
 800375c:	42a6      	cmp	r6, r4
 800375e:	d109      	bne.n	8003774 <__libc_init_array+0x24>
 8003760:	f000 f81a 	bl	8003798 <_init>
 8003764:	2600      	movs	r6, #0
 8003766:	4d0a      	ldr	r5, [pc, #40]	@ (8003790 <__libc_init_array+0x40>)
 8003768:	4c0a      	ldr	r4, [pc, #40]	@ (8003794 <__libc_init_array+0x44>)
 800376a:	1b64      	subs	r4, r4, r5
 800376c:	10a4      	asrs	r4, r4, #2
 800376e:	42a6      	cmp	r6, r4
 8003770:	d105      	bne.n	800377e <__libc_init_array+0x2e>
 8003772:	bd70      	pop	{r4, r5, r6, pc}
 8003774:	f855 3b04 	ldr.w	r3, [r5], #4
 8003778:	4798      	blx	r3
 800377a:	3601      	adds	r6, #1
 800377c:	e7ee      	b.n	800375c <__libc_init_array+0xc>
 800377e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003782:	4798      	blx	r3
 8003784:	3601      	adds	r6, #1
 8003786:	e7f2      	b.n	800376e <__libc_init_array+0x1e>
 8003788:	080037ec 	.word	0x080037ec
 800378c:	080037ec 	.word	0x080037ec
 8003790:	080037ec 	.word	0x080037ec
 8003794:	080037f0 	.word	0x080037f0

08003798 <_init>:
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379a:	bf00      	nop
 800379c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379e:	bc08      	pop	{r3}
 80037a0:	469e      	mov	lr, r3
 80037a2:	4770      	bx	lr

080037a4 <_fini>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	bf00      	nop
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr
